
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0800c408  0800c408  0001c408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d93c  0800d93c  0002038c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d93c  0800d93c  0002038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d93c  0800d93c  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d93c  0800d93c  0001d93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d944  0800d944  0001d944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0800d948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c00  20000390  0800dcd4  00020390  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003f90  0800dcd4  00023f90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000331da  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006bc7  00000000  00000000  0005358f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000113a6  00000000  00000000  0005a156  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001988  00000000  00000000  0006b500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002520  00000000  00000000  0006ce88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001de64  00000000  00000000  0006f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001aa29  00000000  00000000  0008d20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00088095  00000000  00000000  000a7c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012fcca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006354  00000000  00000000  0012fd48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000390 	.word	0x20000390
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c3ec 	.word	0x0800c3ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000394 	.word	0x20000394
 800014c:	0800c3ec 	.word	0x0800c3ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000c54:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000c56:	4c13      	ldr	r4, [pc, #76]	; (8000ca4 <set_int_enable+0x50>)
 8000c58:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c5c:	b193      	cbz	r3, 8000c84 <set_int_enable+0x30>
        if (enable)
 8000c5e:	b1c0      	cbz	r0, 8000c92 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000c60:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000c62:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000c66:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000c6a:	f10d 0307 	add.w	r3, sp, #7
 8000c6e:	2201      	movs	r2, #1
 8000c70:	7c49      	ldrb	r1, [r1, #17]
 8000c72:	7800      	ldrb	r0, [r0, #0]
 8000c74:	f002 f900 	bl	8002e78 <i2c_write>
 8000c78:	b970      	cbnz	r0, 8000c98 <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c7e:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000c80:	b002      	add	sp, #8
 8000c82:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000c84:	7aa2      	ldrb	r2, [r4, #10]
 8000c86:	b13a      	cbz	r2, 8000c98 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000c88:	b118      	cbz	r0, 8000c92 <set_int_enable+0x3e>
 8000c8a:	7c62      	ldrb	r2, [r4, #17]
 8000c8c:	b93a      	cbnz	r2, 8000c9e <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e7e7      	b.n	8000c62 <set_int_enable+0xe>
            tmp = 0x00;
 8000c92:	f88d 0007 	strb.w	r0, [sp, #7]
 8000c96:	e7e6      	b.n	8000c66 <set_int_enable+0x12>
            return -1;
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	e7f0      	b.n	8000c80 <set_int_enable+0x2c>
            return 0;
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e7ee      	b.n	8000c80 <set_int_enable+0x2c>
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <mpu_read_6500_accel_bias>:
 *  The format are G in +-8G format. The register is initialized with OTP 
 *  factory trim values.
 *  @param[in]  accel_bias  returned structure with the accel bias
 *  @return     0 if successful.
 */
int mpu_read_6500_accel_bias(long *accel_bias) {
 8000ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char data[6];
	if (i2c_read(st.hw->addr, 0x77, 2, &data[0]))
 8000caa:	4d18      	ldr	r5, [pc, #96]	; (8000d0c <mpu_read_6500_accel_bias+0x64>)
int mpu_read_6500_accel_bias(long *accel_bias) {
 8000cac:	4604      	mov	r4, r0
	if (i2c_read(st.hw->addr, 0x77, 2, &data[0]))
 8000cae:	6868      	ldr	r0, [r5, #4]
 8000cb0:	466b      	mov	r3, sp
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	2177      	movs	r1, #119	; 0x77
 8000cb6:	7800      	ldrb	r0, [r0, #0]
 8000cb8:	f002 f8ec 	bl	8002e94 <i2c_read>
 8000cbc:	b118      	cbz	r0, 8000cc6 <mpu_read_6500_accel_bias+0x1e>
		return -1;
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	accel_bias[0] = ((long)data[0]<<8) | data[1];
	accel_bias[1] = ((long)data[2]<<8) | data[3];
	accel_bias[2] = ((long)data[4]<<8) | data[5];
	return 0;
}
 8000cc2:	b003      	add	sp, #12
 8000cc4:	bd30      	pop	{r4, r5, pc}
	if (i2c_read(st.hw->addr, 0x7A, 2, &data[2]))
 8000cc6:	6868      	ldr	r0, [r5, #4]
 8000cc8:	f10d 0302 	add.w	r3, sp, #2
 8000ccc:	2202      	movs	r2, #2
 8000cce:	217a      	movs	r1, #122	; 0x7a
 8000cd0:	7800      	ldrb	r0, [r0, #0]
 8000cd2:	f002 f8df 	bl	8002e94 <i2c_read>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d1f1      	bne.n	8000cbe <mpu_read_6500_accel_bias+0x16>
	if (i2c_read(st.hw->addr, 0x7D, 2, &data[4]))
 8000cda:	6868      	ldr	r0, [r5, #4]
 8000cdc:	ab01      	add	r3, sp, #4
 8000cde:	2202      	movs	r2, #2
 8000ce0:	217d      	movs	r1, #125	; 0x7d
 8000ce2:	7800      	ldrb	r0, [r0, #0]
 8000ce4:	f002 f8d6 	bl	8002e94 <i2c_read>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d1e8      	bne.n	8000cbe <mpu_read_6500_accel_bias+0x16>
	accel_bias[0] = ((long)data[0]<<8) | data[1];
 8000cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8000cf0:	ba5b      	rev16	r3, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	6023      	str	r3, [r4, #0]
	accel_bias[1] = ((long)data[2]<<8) | data[3];
 8000cf6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000cfa:	ba5b      	rev16	r3, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	6063      	str	r3, [r4, #4]
	accel_bias[2] = ((long)data[4]<<8) | data[5];
 8000d00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000d04:	ba5b      	rev16	r3, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	60a3      	str	r3, [r4, #8]
	return 0;
 8000d0a:	e7da      	b.n	8000cc2 <mpu_read_6500_accel_bias+0x1a>
 8000d0c:	20000000 	.word	0x20000000

08000d10 <mpu_set_gyro_bias_reg>:
 *  in +-1000dps format.
 *  @param[in]  gyro_bias  New biases.
 *  @return     0 if successful.
 */
int mpu_set_gyro_bias_reg(long *gyro_bias)
{
 8000d10:	b513      	push	{r0, r1, r4, lr}
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
    int i=0;
    for(i=0;i<3;i++) {
    	gyro_bias[i]= (-gyro_bias[i]);
 8000d12:	6842      	ldr	r2, [r0, #4]
 8000d14:	6801      	ldr	r1, [r0, #0]
 8000d16:	6883      	ldr	r3, [r0, #8]
 8000d18:	4249      	negs	r1, r1
 8000d1a:	4252      	negs	r2, r2
 8000d1c:	425b      	negs	r3, r3
    data[1] = (gyro_bias[0]) & 0xff;
    data[2] = (gyro_bias[1] >> 8) & 0xff;
    data[3] = (gyro_bias[1]) & 0xff;
    data[4] = (gyro_bias[2] >> 8) & 0xff;
    data[5] = (gyro_bias[2]) & 0xff;
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000d1e:	4c1a      	ldr	r4, [pc, #104]	; (8000d88 <mpu_set_gyro_bias_reg+0x78>)
    	gyro_bias[i]= (-gyro_bias[i]);
 8000d20:	6001      	str	r1, [r0, #0]
 8000d22:	6042      	str	r2, [r0, #4]
 8000d24:	6083      	str	r3, [r0, #8]
    data[0] = (gyro_bias[0] >> 8) & 0xff;
 8000d26:	1208      	asrs	r0, r1, #8
 8000d28:	f88d 0000 	strb.w	r0, [sp]
    data[1] = (gyro_bias[0]) & 0xff;
 8000d2c:	f88d 1001 	strb.w	r1, [sp, #1]
    data[3] = (gyro_bias[1]) & 0xff;
 8000d30:	f88d 2003 	strb.w	r2, [sp, #3]
    data[2] = (gyro_bias[1] >> 8) & 0xff;
 8000d34:	1211      	asrs	r1, r2, #8
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000d36:	6860      	ldr	r0, [r4, #4]
    data[4] = (gyro_bias[2] >> 8) & 0xff;
 8000d38:	121a      	asrs	r2, r3, #8
    data[2] = (gyro_bias[1] >> 8) & 0xff;
 8000d3a:	f88d 1002 	strb.w	r1, [sp, #2]
    data[4] = (gyro_bias[2] >> 8) & 0xff;
 8000d3e:	f88d 2004 	strb.w	r2, [sp, #4]
    data[5] = (gyro_bias[2]) & 0xff;
 8000d42:	f88d 3005 	strb.w	r3, [sp, #5]
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000d46:	2202      	movs	r2, #2
 8000d48:	466b      	mov	r3, sp
 8000d4a:	2113      	movs	r1, #19
 8000d4c:	7800      	ldrb	r0, [r0, #0]
 8000d4e:	f002 f893 	bl	8002e78 <i2c_write>
 8000d52:	b118      	cbz	r0, 8000d5c <mpu_set_gyro_bias_reg+0x4c>
        return -1;
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
    if (i2c_write(st.hw->addr, 0x15, 2, &data[2]))
        return -1;
    if (i2c_write(st.hw->addr, 0x17, 2, &data[4]))
        return -1;
    return 0;
}
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd10      	pop	{r4, pc}
    if (i2c_write(st.hw->addr, 0x15, 2, &data[2]))
 8000d5c:	6860      	ldr	r0, [r4, #4]
 8000d5e:	f10d 0302 	add.w	r3, sp, #2
 8000d62:	2202      	movs	r2, #2
 8000d64:	2115      	movs	r1, #21
 8000d66:	7800      	ldrb	r0, [r0, #0]
 8000d68:	f002 f886 	bl	8002e78 <i2c_write>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d1f1      	bne.n	8000d54 <mpu_set_gyro_bias_reg+0x44>
    if (i2c_write(st.hw->addr, 0x17, 2, &data[4]))
 8000d70:	6860      	ldr	r0, [r4, #4]
 8000d72:	ab01      	add	r3, sp, #4
 8000d74:	2202      	movs	r2, #2
 8000d76:	2117      	movs	r1, #23
 8000d78:	7800      	ldrb	r0, [r0, #0]
 8000d7a:	f002 f87d 	bl	8002e78 <i2c_write>
 8000d7e:	3000      	adds	r0, #0
 8000d80:	bf18      	it	ne
 8000d82:	2001      	movne	r0, #1
 8000d84:	4240      	negs	r0, r0
 8000d86:	e7e7      	b.n	8000d58 <mpu_set_gyro_bias_reg+0x48>
 8000d88:	20000000 	.word	0x20000000

08000d8c <mpu_set_accel_bias_6500_reg>:
 *  in +-16G format.
 *  @param[in]  accel_bias  New biases.
 *  @return     0 if successful.
 */
int mpu_set_accel_bias_6500_reg(const long *accel_bias) {
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 8000d8c:	2300      	movs	r3, #0
int mpu_set_accel_bias_6500_reg(const long *accel_bias) {
 8000d8e:	b510      	push	{r4, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	4604      	mov	r4, r0
    long accel_reg_bias[3] = {0, 0, 0};

    if(mpu_read_6500_accel_bias(accel_reg_bias))
 8000d94:	a803      	add	r0, sp, #12
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	f8ad 3008 	strh.w	r3, [sp, #8]
    long accel_reg_bias[3] = {0, 0, 0};
 8000d9c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000da0:	9305      	str	r3, [sp, #20]
    if(mpu_read_6500_accel_bias(accel_reg_bias))
 8000da2:	f7ff ff81 	bl	8000ca8 <mpu_read_6500_accel_bias>
 8000da6:	b118      	cbz	r0, 8000db0 <mpu_set_accel_bias_6500_reg+0x24>
        return -1;
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
        return -1;
    if (i2c_write(st.hw->addr, 0x7D, 2, &data[4]))
        return -1;

    return 0;
}
 8000dac:	b006      	add	sp, #24
 8000dae:	bd10      	pop	{r4, pc}
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000db0:	6821      	ldr	r1, [r4, #0]
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000db2:	6862      	ldr	r2, [r4, #4]
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000db4:	f021 0301 	bic.w	r3, r1, #1
 8000db8:	9903      	ldr	r1, [sp, #12]
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000dba:	68a0      	ldr	r0, [r4, #8]
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000dbc:	1ac9      	subs	r1, r1, r3
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000dbe:	f022 0301 	bic.w	r3, r2, #1
 8000dc2:	9a04      	ldr	r2, [sp, #16]
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000dc4:	f020 0001 	bic.w	r0, r0, #1
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000dc8:	1ad2      	subs	r2, r2, r3
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000dca:	9b05      	ldr	r3, [sp, #20]
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000dcc:	4c19      	ldr	r4, [pc, #100]	; (8000e34 <mpu_set_accel_bias_6500_reg+0xa8>)
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000dce:	1a1b      	subs	r3, r3, r0
    data[0] = (accel_reg_bias[0] >> 8) & 0xff;
 8000dd0:	1208      	asrs	r0, r1, #8
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000dd2:	9103      	str	r1, [sp, #12]
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000dd4:	9204      	str	r2, [sp, #16]
    data[0] = (accel_reg_bias[0] >> 8) & 0xff;
 8000dd6:	f88d 0004 	strb.w	r0, [sp, #4]
    data[1] = (accel_reg_bias[0]) & 0xff;
 8000dda:	f88d 1005 	strb.w	r1, [sp, #5]
    data[3] = (accel_reg_bias[1]) & 0xff;
 8000dde:	f88d 2007 	strb.w	r2, [sp, #7]
    data[2] = (accel_reg_bias[1] >> 8) & 0xff;
 8000de2:	1211      	asrs	r1, r2, #8
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000de4:	6860      	ldr	r0, [r4, #4]
    data[4] = (accel_reg_bias[2] >> 8) & 0xff;
 8000de6:	121a      	asrs	r2, r3, #8
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000de8:	9305      	str	r3, [sp, #20]
    data[2] = (accel_reg_bias[1] >> 8) & 0xff;
 8000dea:	f88d 1006 	strb.w	r1, [sp, #6]
    data[4] = (accel_reg_bias[2] >> 8) & 0xff;
 8000dee:	f88d 2008 	strb.w	r2, [sp, #8]
    data[5] = (accel_reg_bias[2]) & 0xff;
 8000df2:	f88d 3009 	strb.w	r3, [sp, #9]
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000df6:	2202      	movs	r2, #2
 8000df8:	ab01      	add	r3, sp, #4
 8000dfa:	2177      	movs	r1, #119	; 0x77
 8000dfc:	7800      	ldrb	r0, [r0, #0]
 8000dfe:	f002 f83b 	bl	8002e78 <i2c_write>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d1d0      	bne.n	8000da8 <mpu_set_accel_bias_6500_reg+0x1c>
    if (i2c_write(st.hw->addr, 0x7A, 2, &data[2]))
 8000e06:	6860      	ldr	r0, [r4, #4]
 8000e08:	f10d 0306 	add.w	r3, sp, #6
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	217a      	movs	r1, #122	; 0x7a
 8000e10:	7800      	ldrb	r0, [r0, #0]
 8000e12:	f002 f831 	bl	8002e78 <i2c_write>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d1c6      	bne.n	8000da8 <mpu_set_accel_bias_6500_reg+0x1c>
    if (i2c_write(st.hw->addr, 0x7D, 2, &data[4]))
 8000e1a:	6860      	ldr	r0, [r4, #4]
 8000e1c:	ab02      	add	r3, sp, #8
 8000e1e:	2202      	movs	r2, #2
 8000e20:	217d      	movs	r1, #125	; 0x7d
 8000e22:	7800      	ldrb	r0, [r0, #0]
 8000e24:	f002 f828 	bl	8002e78 <i2c_write>
 8000e28:	3000      	adds	r0, #0
 8000e2a:	bf18      	it	ne
 8000e2c:	2001      	movne	r0, #1
 8000e2e:	4240      	negs	r0, r0
 8000e30:	e7bc      	b.n	8000dac <mpu_set_accel_bias_6500_reg+0x20>
 8000e32:	bf00      	nop
 8000e34:	20000000 	.word	0x20000000

08000e38 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000e3a:	4c4e      	ldr	r4, [pc, #312]	; (8000f74 <mpu_reset_fifo+0x13c>)
 8000e3c:	7aa3      	ldrb	r3, [r4, #10]
 8000e3e:	b91b      	cbnz	r3, 8000e48 <mpu_reset_fifo+0x10>
        return -1;
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000e44:	b003      	add	sp, #12
 8000e46:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000e48:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000e4a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8000e4e:	ad02      	add	r5, sp, #8
 8000e50:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000e54:	462b      	mov	r3, r5
 8000e56:	2201      	movs	r2, #1
 8000e58:	7c49      	ldrb	r1, [r1, #17]
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	f002 f80c 	bl	8002e78 <i2c_write>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d1ed      	bne.n	8000e40 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000e64:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e68:	462b      	mov	r3, r5
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	7949      	ldrb	r1, [r1, #5]
 8000e6e:	7800      	ldrb	r0, [r0, #0]
 8000e70:	f002 f802 	bl	8002e78 <i2c_write>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	d1e3      	bne.n	8000e40 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000e78:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e7c:	462b      	mov	r3, r5
 8000e7e:	2201      	movs	r2, #1
 8000e80:	7909      	ldrb	r1, [r1, #4]
 8000e82:	7800      	ldrb	r0, [r0, #0]
 8000e84:	f001 fff8 	bl	8002e78 <i2c_write>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d1d9      	bne.n	8000e40 <mpu_reset_fifo+0x8>
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	7818      	ldrb	r0, [r3, #0]
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8000e94:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d039      	beq.n	8000f10 <mpu_reset_fifo+0xd8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000e9c:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000e9e:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000ea0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	f001 ffe7 	bl	8002e78 <i2c_write>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d1c8      	bne.n	8000e40 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000eae:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000eb2:	23c0      	movs	r3, #192	; 0xc0
 8000eb4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000eb8:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000eba:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000ebc:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8000ebe:	bf44      	itt	mi
 8000ec0:	23e0      	movmi	r3, #224	; 0xe0
 8000ec2:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	462b      	mov	r3, r5
 8000eca:	7800      	ldrb	r0, [r0, #0]
 8000ecc:	f001 ffd4 	bl	8002e78 <i2c_write>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d1b5      	bne.n	8000e40 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000ed4:	7c63      	ldrb	r3, [r4, #17]
 8000ed6:	b103      	cbz	r3, 8000eda <mpu_reset_fifo+0xa2>
            data = BIT_DMP_INT_EN;
 8000ed8:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000eda:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000ede:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	7c49      	ldrb	r1, [r1, #17]
 8000ee8:	7800      	ldrb	r0, [r0, #0]
 8000eea:	f001 ffc5 	bl	8002e78 <i2c_write>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d1a6      	bne.n	8000e40 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000ef2:	462b      	mov	r3, r5
        data = 0;
 8000ef4:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000ef8:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000efc:	2201      	movs	r2, #1
 8000efe:	7949      	ldrb	r1, [r1, #5]
 8000f00:	7800      	ldrb	r0, [r0, #0]
 8000f02:	f001 ffb9 	bl	8002e78 <i2c_write>
 8000f06:	3000      	adds	r0, #0
 8000f08:	bf18      	it	ne
 8000f0a:	2001      	movne	r0, #1
 8000f0c:	4240      	negs	r0, r0
 8000f0e:	e799      	b.n	8000e44 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8000f10:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f12:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000f14:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f18:	462b      	mov	r3, r5
 8000f1a:	f001 ffad 	bl	8002e78 <i2c_write>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d18e      	bne.n	8000e40 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000f22:	7ca3      	ldrb	r3, [r4, #18]
 8000f24:	b913      	cbnz	r3, 8000f2c <mpu_reset_fifo+0xf4>
 8000f26:	7aa3      	ldrb	r3, [r4, #10]
 8000f28:	07db      	lsls	r3, r3, #31
 8000f2a:	d421      	bmi.n	8000f70 <mpu_reset_fifo+0x138>
            data = BIT_FIFO_EN;
 8000f2c:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000f32:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f36:	2201      	movs	r2, #1
 8000f38:	462b      	mov	r3, r5
 8000f3a:	7909      	ldrb	r1, [r1, #4]
 8000f3c:	7800      	ldrb	r0, [r0, #0]
 8000f3e:	f001 ff9b 	bl	8002e78 <i2c_write>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	f47f af7c 	bne.w	8000e40 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000f48:	7c63      	ldrb	r3, [r4, #17]
 8000f4a:	b103      	cbz	r3, 8000f4e <mpu_reset_fifo+0x116>
            data = BIT_DATA_RDY_EN;
 8000f4c:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000f4e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000f52:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000f56:	2201      	movs	r2, #1
 8000f58:	462b      	mov	r3, r5
 8000f5a:	7c49      	ldrb	r1, [r1, #17]
 8000f5c:	7800      	ldrb	r0, [r0, #0]
 8000f5e:	f001 ff8b 	bl	8002e78 <i2c_write>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	f47f af6c 	bne.w	8000e40 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000f68:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <mpu_reset_fifo+0x140>)
 8000f6e:	e7c5      	b.n	8000efc <mpu_reset_fifo+0xc4>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000f70:	2360      	movs	r3, #96	; 0x60
 8000f72:	e7dc      	b.n	8000f2e <mpu_reset_fifo+0xf6>
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000010 	.word	0x20000010

08000f7c <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8000f7c:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000f7e:	4c1a      	ldr	r4, [pc, #104]	; (8000fe8 <mpu_set_gyro_fsr+0x6c>)
 8000f80:	7aa3      	ldrb	r3, [r4, #10]
 8000f82:	b913      	cbnz	r3, 8000f8a <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	e01d      	b.n	8000fc6 <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8000f8a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000f8e:	d024      	beq.n	8000fda <mpu_set_gyro_fsr+0x5e>
 8000f90:	d81b      	bhi.n	8000fca <mpu_set_gyro_fsr+0x4e>
 8000f92:	28fa      	cmp	r0, #250	; 0xfa
 8000f94:	d1f6      	bne.n	8000f84 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8000f96:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8000f98:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8000f9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000fa0:	7a23      	ldrb	r3, [r4, #8]
 8000fa2:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000fa6:	d01c      	beq.n	8000fe2 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8000fa8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000fac:	f10d 0307 	add.w	r3, sp, #7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	7989      	ldrb	r1, [r1, #6]
 8000fb4:	7800      	ldrb	r0, [r0, #0]
 8000fb6:	f001 ff5f 	bl	8002e78 <i2c_write>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d1e2      	bne.n	8000f84 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8000fbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000fca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fce:	d006      	beq.n	8000fde <mpu_set_gyro_fsr+0x62>
 8000fd0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000fd4:	d1d6      	bne.n	8000f84 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8000fd6:	2318      	movs	r3, #24
 8000fd8:	e7de      	b.n	8000f98 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	e7dc      	b.n	8000f98 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	e7da      	b.n	8000f98 <mpu_set_gyro_fsr+0x1c>
        return 0;
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	e7ef      	b.n	8000fc6 <mpu_set_gyro_fsr+0x4a>
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000

08000fec <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8000fec:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000fee:	4c18      	ldr	r4, [pc, #96]	; (8001050 <mpu_set_accel_fsr+0x64>)
 8000ff0:	7aa3      	ldrb	r3, [r4, #10]
 8000ff2:	b913      	cbnz	r3, 8000ffa <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	e01c      	b.n	8001034 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8000ffa:	2804      	cmp	r0, #4
 8000ffc:	d022      	beq.n	8001044 <mpu_set_accel_fsr+0x58>
 8000ffe:	d81b      	bhi.n	8001038 <mpu_set_accel_fsr+0x4c>
 8001000:	2802      	cmp	r0, #2
 8001002:	d1f7      	bne.n	8000ff4 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8001004:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8001006:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800100a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800100e:	7a63      	ldrb	r3, [r4, #9]
 8001010:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001014:	d01a      	beq.n	800104c <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001016:	e9d4 1000 	ldrd	r1, r0, [r4]
 800101a:	f10d 0307 	add.w	r3, sp, #7
 800101e:	2201      	movs	r2, #1
 8001020:	79c9      	ldrb	r1, [r1, #7]
 8001022:	7800      	ldrb	r0, [r0, #0]
 8001024:	f001 ff28 	bl	8002e78 <i2c_write>
 8001028:	2800      	cmp	r0, #0
 800102a:	d1e3      	bne.n	8000ff4 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 800102c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8001034:	b002      	add	sp, #8
 8001036:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8001038:	2808      	cmp	r0, #8
 800103a:	d005      	beq.n	8001048 <mpu_set_accel_fsr+0x5c>
 800103c:	2810      	cmp	r0, #16
 800103e:	d1d9      	bne.n	8000ff4 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8001040:	2318      	movs	r3, #24
 8001042:	e7e0      	b.n	8001006 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8001044:	2308      	movs	r3, #8
 8001046:	e7de      	b.n	8001006 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8001048:	2310      	movs	r3, #16
 800104a:	e7dc      	b.n	8001006 <mpu_set_accel_fsr+0x1a>
        return 0;
 800104c:	2000      	movs	r0, #0
 800104e:	e7f1      	b.n	8001034 <mpu_set_accel_fsr+0x48>
 8001050:	20000000 	.word	0x20000000

08001054 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001054:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001056:	4c19      	ldr	r4, [pc, #100]	; (80010bc <mpu_set_lpf+0x68>)
 8001058:	7aa3      	ldrb	r3, [r4, #10]
 800105a:	b91b      	cbnz	r3, 8001064 <mpu_set_lpf+0x10>
        return -1;
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8001060:	b002      	add	sp, #8
 8001062:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8001064:	28bb      	cmp	r0, #187	; 0xbb
 8001066:	d916      	bls.n	8001096 <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8001068:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 800106a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 800106e:	7ae2      	ldrb	r2, [r4, #11]
 8001070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001074:	429a      	cmp	r2, r3
 8001076:	d01f      	beq.n	80010b8 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001078:	e9d4 1000 	ldrd	r1, r0, [r4]
 800107c:	f10d 0307 	add.w	r3, sp, #7
 8001080:	2201      	movs	r2, #1
 8001082:	7889      	ldrb	r1, [r1, #2]
 8001084:	7800      	ldrb	r0, [r0, #0]
 8001086:	f001 fef7 	bl	8002e78 <i2c_write>
 800108a:	2800      	cmp	r0, #0
 800108c:	d1e6      	bne.n	800105c <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 800108e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001092:	72e3      	strb	r3, [r4, #11]
    return 0;
 8001094:	e7e4      	b.n	8001060 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8001096:	2861      	cmp	r0, #97	; 0x61
 8001098:	d901      	bls.n	800109e <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 800109a:	2302      	movs	r3, #2
 800109c:	e7e5      	b.n	800106a <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 800109e:	2829      	cmp	r0, #41	; 0x29
 80010a0:	d901      	bls.n	80010a6 <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e7e1      	b.n	800106a <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 80010a6:	2813      	cmp	r0, #19
 80010a8:	d901      	bls.n	80010ae <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 80010aa:	2304      	movs	r3, #4
 80010ac:	e7dd      	b.n	800106a <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 80010ae:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 80010b0:	bf8c      	ite	hi
 80010b2:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 80010b4:	2306      	movls	r3, #6
 80010b6:	e7d8      	b.n	800106a <mpu_set_lpf+0x16>
        return 0;
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7d1      	b.n	8001060 <mpu_set_lpf+0xc>
 80010bc:	20000000 	.word	0x20000000

080010c0 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 80010c0:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80010c2:	b918      	cbnz	r0, 80010cc <mpu_set_compass_sample_rate+0xc>
        return -1;
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 80010c8:	b002      	add	sp, #8
 80010ca:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80010cc:	4c0e      	ldr	r4, [pc, #56]	; (8001108 <mpu_set_compass_sample_rate+0x48>)
 80010ce:	89e3      	ldrh	r3, [r4, #14]
 80010d0:	4283      	cmp	r3, r0
 80010d2:	d3f7      	bcc.n	80010c4 <mpu_set_compass_sample_rate+0x4>
 80010d4:	2864      	cmp	r0, #100	; 0x64
 80010d6:	d8f5      	bhi.n	80010c4 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 80010d8:	fbb3 f0f0 	udiv	r0, r3, r0
 80010dc:	ab02      	add	r3, sp, #8
 80010de:	3801      	subs	r0, #1
 80010e0:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80010e4:	2201      	movs	r2, #1
 80010e6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80010ea:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 80010ee:	7800      	ldrb	r0, [r0, #0]
 80010f0:	f001 fec2 	bl	8002e78 <i2c_write>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1e5      	bne.n	80010c4 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80010f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80010fc:	89e3      	ldrh	r3, [r4, #14]
 80010fe:	3201      	adds	r2, #1
 8001100:	fb93 f3f2 	sdiv	r3, r3, r2
 8001104:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8001106:	e7df      	b.n	80010c8 <mpu_set_compass_sample_rate+0x8>
 8001108:	20000000 	.word	0x20000000

0800110c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <mpu_configure_fifo+0x4c>)
 8001110:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001114:	461e      	mov	r6, r3
 8001116:	b9e2      	cbnz	r2, 8001152 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8001118:	7a9c      	ldrb	r4, [r3, #10]
 800111a:	b19c      	cbz	r4, 8001144 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 800111c:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001120:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8001122:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001124:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001126:	1b64      	subs	r4, r4, r5
 8001128:	bf18      	it	ne
 800112a:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 800112e:	b90d      	cbnz	r5, 8001134 <mpu_configure_fifo+0x28>
 8001130:	7d18      	ldrb	r0, [r3, #20]
 8001132:	b150      	cbz	r0, 800114a <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff fd8d 	bl	8000c54 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 800113a:	b145      	cbz	r5, 800114e <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 800113c:	f7ff fe7c 	bl	8000e38 <mpu_reset_fifo>
 8001140:	b128      	cbz	r0, 800114e <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8001142:	7437      	strb	r7, [r6, #16]
            return -1;
 8001144:	f04f 34ff 	mov.w	r4, #4294967295
 8001148:	e001      	b.n	800114e <mpu_configure_fifo+0x42>
            set_int_enable(0);
 800114a:	f7ff fd83 	bl	8000c54 <set_int_enable>
            }
        }
    }

    return result;
}
 800114e:	4620      	mov	r0, r4
 8001150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8001152:	2400      	movs	r4, #0
 8001154:	e7fb      	b.n	800114e <mpu_configure_fifo+0x42>
 8001156:	bf00      	nop
 8001158:	20000000 	.word	0x20000000

0800115c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800115c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001160:	4d24      	ldr	r5, [pc, #144]	; (80011f4 <mpu_read_fifo_stream+0x98>)
{
 8001162:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 8001164:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8001168:	4689      	mov	r9, r1
 800116a:	4617      	mov	r7, r2
 800116c:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 800116e:	b923      	cbnz	r3, 800117a <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 8001170:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 800117a:	7aab      	ldrb	r3, [r5, #10]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f7      	beq.n	8001170 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001180:	e9d5 1000 	ldrd	r1, r0, [r5]
 8001184:	ab01      	add	r3, sp, #4
 8001186:	2202      	movs	r2, #2
 8001188:	7b09      	ldrb	r1, [r1, #12]
 800118a:	7800      	ldrb	r0, [r0, #0]
 800118c:	f001 fe82 	bl	8002e94 <i2c_read>
 8001190:	2800      	cmp	r0, #0
 8001192:	d1ed      	bne.n	8001170 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001194:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001198:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800119c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 80011a0:	42b4      	cmp	r4, r6
 80011a2:	d201      	bcs.n	80011a8 <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 80011a4:	7038      	strb	r0, [r7, #0]
 80011a6:	e7e3      	b.n	8001170 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 80011a8:	6868      	ldr	r0, [r5, #4]
 80011aa:	8843      	ldrh	r3, [r0, #2]
 80011ac:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 80011b0:	d911      	bls.n	80011d6 <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 80011b2:	6829      	ldr	r1, [r5, #0]
 80011b4:	ab01      	add	r3, sp, #4
 80011b6:	2201      	movs	r2, #1
 80011b8:	7cc9      	ldrb	r1, [r1, #19]
 80011ba:	7800      	ldrb	r0, [r0, #0]
 80011bc:	f001 fe6a 	bl	8002e94 <i2c_read>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d1d5      	bne.n	8001170 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 80011c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011c8:	06db      	lsls	r3, r3, #27
 80011ca:	d504      	bpl.n	80011d6 <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 80011cc:	f7ff fe34 	bl	8000e38 <mpu_reset_fifo>
            return -2;
 80011d0:	f06f 0001 	mvn.w	r0, #1
 80011d4:	e7ce      	b.n	8001174 <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80011d6:	e9d8 1000 	ldrd	r1, r0, [r8]
 80011da:	464b      	mov	r3, r9
 80011dc:	b2f2      	uxtb	r2, r6
 80011de:	7b49      	ldrb	r1, [r1, #13]
 80011e0:	7800      	ldrb	r0, [r0, #0]
 80011e2:	f001 fe57 	bl	8002e94 <i2c_read>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1c2      	bne.n	8001170 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 80011ea:	fbb4 f4f6 	udiv	r4, r4, r6
 80011ee:	3c01      	subs	r4, #1
 80011f0:	703c      	strb	r4, [r7, #0]
    return 0;
 80011f2:	e7bf      	b.n	8001174 <mpu_read_fifo_stream+0x18>
 80011f4:	20000000 	.word	0x20000000

080011f8 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80011f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80011fa:	4c36      	ldr	r4, [pc, #216]	; (80012d4 <mpu_set_bypass+0xdc>)
{
 80011fc:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 80011fe:	7ca3      	ldrb	r3, [r4, #18]
 8001200:	4283      	cmp	r3, r0
 8001202:	d041      	beq.n	8001288 <mpu_set_bypass+0x90>
 8001204:	6863      	ldr	r3, [r4, #4]
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001206:	2201      	movs	r2, #1
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	7919      	ldrb	r1, [r3, #4]
 800120e:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8001212:	2d00      	cmp	r5, #0
 8001214:	d03a      	beq.n	800128c <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001216:	f001 fe3d 	bl	8002e94 <i2c_read>
 800121a:	b118      	cbz	r0, 8001224 <mpu_set_bypass+0x2c>
            return -1;
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8001220:	b003      	add	sp, #12
 8001222:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8001224:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001228:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 800122c:	f023 0320 	bic.w	r3, r3, #32
 8001230:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001234:	2201      	movs	r2, #1
 8001236:	f10d 0307 	add.w	r3, sp, #7
 800123a:	7909      	ldrb	r1, [r1, #4]
 800123c:	7800      	ldrb	r0, [r0, #0]
 800123e:	f001 fe1b 	bl	8002e78 <i2c_write>
 8001242:	2800      	cmp	r0, #0
 8001244:	d1ea      	bne.n	800121c <mpu_set_bypass+0x24>
        delay_ms(3);
 8001246:	2003      	movs	r0, #3
 8001248:	f001 fe32 	bl	8002eb0 <delay_ms>
        tmp = BIT_BYPASS_EN;
 800124c:	2302      	movs	r3, #2
 800124e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8001252:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001256:	b113      	cbz	r3, 800125e <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8001258:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 800125a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 800125e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001262:	b12b      	cbz	r3, 8001270 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001268:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800126c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001270:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001274:	f10d 0307 	add.w	r3, sp, #7
 8001278:	2201      	movs	r2, #1
 800127a:	7dc9      	ldrb	r1, [r1, #23]
 800127c:	7800      	ldrb	r0, [r0, #0]
 800127e:	f001 fdfb 	bl	8002e78 <i2c_write>
 8001282:	2800      	cmp	r0, #0
 8001284:	d1ca      	bne.n	800121c <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 8001286:	74a5      	strb	r5, [r4, #18]
        return 0;
 8001288:	2000      	movs	r0, #0
 800128a:	e7c9      	b.n	8001220 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800128c:	f001 fe02 	bl	8002e94 <i2c_read>
 8001290:	2800      	cmp	r0, #0
 8001292:	d1c3      	bne.n	800121c <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001294:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001298:	7aa2      	ldrb	r2, [r4, #10]
 800129a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800129e:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 80012a0:	bf4c      	ite	mi
 80012a2:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 80012a6:	f023 0320 	bicpl.w	r3, r3, #32
 80012aa:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80012ae:	2201      	movs	r2, #1
 80012b0:	f10d 0307 	add.w	r3, sp, #7
 80012b4:	7909      	ldrb	r1, [r1, #4]
 80012b6:	7800      	ldrb	r0, [r0, #0]
 80012b8:	f001 fdde 	bl	8002e78 <i2c_write>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d1ad      	bne.n	800121c <mpu_set_bypass+0x24>
        delay_ms(3);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f001 fdf5 	bl	8002eb0 <delay_ms>
        if (st.chip_cfg.active_low_int)
 80012c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0c5      	beq.n	800125a <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	e7c3      	b.n	800125a <mpu_set_bypass+0x62>
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000

080012d8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80012d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80012da:	4c18      	ldr	r4, [pc, #96]	; (800133c <mpu_set_int_latched+0x64>)
{
 80012dc:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 80012de:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80012e2:	4283      	cmp	r3, r0
 80012e4:	d028      	beq.n	8001338 <mpu_set_int_latched+0x60>
        return 0;

    if (enable)
 80012e6:	b308      	cbz	r0, 800132c <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80012e8:	2330      	movs	r3, #48	; 0x30
 80012ea:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 80012ee:	7ca3      	ldrb	r3, [r4, #18]
 80012f0:	b12b      	cbz	r3, 80012fe <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 80012f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 80012fe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001302:	b12b      	cbz	r3, 8001310 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001304:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001310:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001314:	f10d 0307 	add.w	r3, sp, #7
 8001318:	2201      	movs	r2, #1
 800131a:	7dc9      	ldrb	r1, [r1, #23]
 800131c:	7800      	ldrb	r0, [r0, #0]
 800131e:	f001 fdab 	bl	8002e78 <i2c_write>
 8001322:	b930      	cbnz	r0, 8001332 <mpu_set_int_latched+0x5a>
        return -1;
    st.chip_cfg.latched_int = enable;
 8001324:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8001328:	b003      	add	sp, #12
 800132a:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 800132c:	f88d 0007 	strb.w	r0, [sp, #7]
 8001330:	e7dd      	b.n	80012ee <mpu_set_int_latched+0x16>
        return -1;
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	e7f7      	b.n	8001328 <mpu_set_int_latched+0x50>
        return 0;
 8001338:	2000      	movs	r0, #0
 800133a:	e7f5      	b.n	8001328 <mpu_set_int_latched+0x50>
 800133c:	20000000 	.word	0x20000000

08001340 <mpu_lp_accel_mode>:
    if (rate > 40)
 8001340:	2828      	cmp	r0, #40	; 0x28
{
 8001342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001344:	4605      	mov	r5, r0
    if (rate > 40)
 8001346:	d902      	bls.n	800134e <mpu_lp_accel_mode+0xe>
        return -1;
 8001348:	f04f 35ff 	mov.w	r5, #4294967295
 800134c:	e013      	b.n	8001376 <mpu_lp_accel_mode+0x36>
 800134e:	4c28      	ldr	r4, [pc, #160]	; (80013f0 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 8001350:	b9a0      	cbnz	r0, 800137c <mpu_lp_accel_mode+0x3c>
        mpu_set_int_latched(0);
 8001352:	f7ff ffc1 	bl	80012d8 <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001356:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 800135a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800135e:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001362:	2202      	movs	r2, #2
 8001364:	ab01      	add	r3, sp, #4
 8001366:	7d49      	ldrb	r1, [r1, #21]
 8001368:	7800      	ldrb	r0, [r0, #0]
 800136a:	f001 fd85 	bl	8002e78 <i2c_write>
 800136e:	4605      	mov	r5, r0
 8001370:	2800      	cmp	r0, #0
 8001372:	d1e9      	bne.n	8001348 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8001374:	7520      	strb	r0, [r4, #20]
}
 8001376:	4628      	mov	r0, r5
 8001378:	b003      	add	sp, #12
 800137a:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ffab 	bl	80012d8 <mpu_set_int_latched>
    if (rate == 1)
 8001382:	2d01      	cmp	r5, #1
 8001384:	d122      	bne.n	80013cc <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_1_25HZ;
 8001386:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001388:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_40HZ;
 800138c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001390:	2201      	movs	r2, #1
 8001392:	ab01      	add	r3, sp, #4
 8001394:	7a49      	ldrb	r1, [r1, #9]
 8001396:	7800      	ldrb	r0, [r0, #0]
 8001398:	f001 fd6e 	bl	8002e78 <i2c_write>
 800139c:	2800      	cmp	r0, #0
 800139e:	d1d3      	bne.n	8001348 <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80013a0:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 80013a4:	2320      	movs	r3, #32
 80013a6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80013aa:	2201      	movs	r2, #1
 80013ac:	ab01      	add	r3, sp, #4
 80013ae:	7d49      	ldrb	r1, [r1, #21]
 80013b0:	7800      	ldrb	r0, [r0, #0]
 80013b2:	f001 fd61 	bl	8002e78 <i2c_write>
 80013b6:	4605      	mov	r5, r0
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d1c5      	bne.n	8001348 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80013bc:	2308      	movs	r3, #8
 80013be:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 80013c0:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 80013c2:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80013c4:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 80013c6:	f7ff fea1 	bl	800110c <mpu_configure_fifo>
 80013ca:	e7d4      	b.n	8001376 <mpu_lp_accel_mode+0x36>
    else if (rate == 2)
 80013cc:	2d02      	cmp	r5, #2
 80013ce:	d101      	bne.n	80013d4 <mpu_lp_accel_mode+0x94>
        tmp[0] = INV_LPA_2_5HZ;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e7d9      	b.n	8001388 <mpu_lp_accel_mode+0x48>
    else if (rate <= 5)
 80013d4:	2d05      	cmp	r5, #5
 80013d6:	d801      	bhi.n	80013dc <mpu_lp_accel_mode+0x9c>
        tmp[0] = INV_LPA_5HZ;
 80013d8:	2304      	movs	r3, #4
 80013da:	e7d5      	b.n	8001388 <mpu_lp_accel_mode+0x48>
    else if (rate <= 10)
 80013dc:	2d0a      	cmp	r5, #10
 80013de:	d801      	bhi.n	80013e4 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_10HZ;
 80013e0:	2305      	movs	r3, #5
 80013e2:	e7d1      	b.n	8001388 <mpu_lp_accel_mode+0x48>
    else if (rate <= 20)
 80013e4:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 80013e6:	bf94      	ite	ls
 80013e8:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 80013ea:	2307      	movhi	r3, #7
 80013ec:	e7cc      	b.n	8001388 <mpu_lp_accel_mode+0x48>
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <mpu_set_sample_rate>:
{
 80013f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <mpu_set_sample_rate+0x8c>)
{
 80013f8:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 80013fa:	7a9a      	ldrb	r2, [r3, #10]
 80013fc:	461e      	mov	r6, r3
 80013fe:	b922      	cbnz	r2, 800140a <mpu_set_sample_rate+0x16>
        return -1;
 8001400:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001404:	4620      	mov	r0, r4
 8001406:	b002      	add	sp, #8
 8001408:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 800140a:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 800140e:	2d00      	cmp	r5, #0
 8001410:	d1f6      	bne.n	8001400 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001412:	7d1b      	ldrb	r3, [r3, #20]
 8001414:	b14b      	cbz	r3, 800142a <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8001416:	1e43      	subs	r3, r0, #1
 8001418:	2b27      	cmp	r3, #39	; 0x27
 800141a:	d803      	bhi.n	8001424 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 800141c:	f7ff ff90 	bl	8001340 <mpu_lp_accel_mode>
                return 0;
 8001420:	462c      	mov	r4, r5
 8001422:	e7ef      	b.n	8001404 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8001424:	4628      	mov	r0, r5
 8001426:	f7ff ff8b 	bl	8001340 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800142a:	e9d6 1000 	ldrd	r1, r0, [r6]
 800142e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8001432:	bf28      	it	cs
 8001434:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8001438:	2c04      	cmp	r4, #4
 800143a:	bf38      	it	cc
 800143c:	2404      	movcc	r4, #4
 800143e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001442:	fb95 f4f4 	sdiv	r4, r5, r4
 8001446:	ab02      	add	r3, sp, #8
 8001448:	3c01      	subs	r4, #1
 800144a:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800144e:	2201      	movs	r2, #1
 8001450:	7849      	ldrb	r1, [r1, #1]
 8001452:	7800      	ldrb	r0, [r0, #0]
 8001454:	f001 fd10 	bl	8002e78 <i2c_write>
 8001458:	4604      	mov	r4, r0
 800145a:	2800      	cmp	r0, #0
 800145c:	d1d0      	bne.n	8001400 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800145e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001462:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001464:	3301      	adds	r3, #1
 8001466:	fb95 f5f3 	sdiv	r5, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800146a:	2864      	cmp	r0, #100	; 0x64
 800146c:	bf28      	it	cs
 800146e:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001470:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001472:	f7ff fe25 	bl	80010c0 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001476:	89f0      	ldrh	r0, [r6, #14]
 8001478:	0840      	lsrs	r0, r0, #1
 800147a:	f7ff fdeb 	bl	8001054 <mpu_set_lpf>
        return 0;
 800147e:	e7c1      	b.n	8001404 <mpu_set_sample_rate+0x10>
 8001480:	20000000 	.word	0x20000000

08001484 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 8001484:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 8001488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800148a:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 800148c:	d014      	beq.n	80014b8 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 800148e:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001490:	4c49      	ldr	r4, [pc, #292]	; (80015b8 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8001492:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001496:	e9d4 1000 	ldrd	r1, r0, [r4]
 800149a:	f10d 0306 	add.w	r3, sp, #6
 800149e:	2201      	movs	r2, #1
 80014a0:	7d49      	ldrb	r1, [r1, #21]
 80014a2:	7800      	ldrb	r0, [r0, #0]
 80014a4:	f001 fce8 	bl	8002e78 <i2c_write>
 80014a8:	b150      	cbz	r0, 80014c0 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	72a3      	strb	r3, [r4, #10]
        return -1;
 80014ae:	f04f 36ff 	mov.w	r6, #4294967295
}
 80014b2:	4630      	mov	r0, r6
 80014b4:	b002      	add	sp, #8
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1e9      	bne.n	8001490 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	e7e7      	b.n	8001490 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80014c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80014c4:	2201      	movs	r2, #1
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80014c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ca:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 80014cc:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 80014ce:	bf56      	itet	pl
 80014d0:	2304      	movpl	r3, #4
    data = 0;
 80014d2:	f88d 0006 	strbmi.w	r0, [sp, #6]
        data |= BIT_STBY_XG;
 80014d6:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 80014da:	06ae      	lsls	r6, r5, #26
        data |= BIT_STBY_YG;
 80014dc:	bf5e      	ittt	pl
 80014de:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 80014e2:	f043 0302 	orrpl.w	r3, r3, #2
 80014e6:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 80014ea:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 80014ec:	bf5e      	ittt	pl
 80014ee:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 80014f2:	f043 0301 	orrpl.w	r3, r3, #1
 80014f6:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 80014fa:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 80014fc:	bf58      	it	pl
 80014fe:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001502:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 8001506:	bf5c      	itt	pl
 8001508:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 800150c:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001510:	7d89      	ldrb	r1, [r1, #22]
 8001512:	f10d 0306 	add.w	r3, sp, #6
 8001516:	7800      	ldrb	r0, [r0, #0]
 8001518:	f001 fcae 	bl	8002e78 <i2c_write>
 800151c:	2800      	cmp	r0, #0
 800151e:	d1c4      	bne.n	80014aa <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001520:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8001524:	d001      	beq.n	800152a <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 8001526:	f7ff fed7 	bl	80012d8 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800152a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800152e:	f10d 0307 	add.w	r3, sp, #7
 8001532:	2201      	movs	r2, #1
 8001534:	7909      	ldrb	r1, [r1, #4]
 8001536:	7800      	ldrb	r0, [r0, #0]
 8001538:	f001 fcac 	bl	8002e94 <i2c_read>
 800153c:	2800      	cmp	r0, #0
 800153e:	d1b6      	bne.n	80014ae <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 8001540:	07ea      	lsls	r2, r5, #31
        data = AKM_SINGLE_MEASUREMENT;
 8001542:	bf4c      	ite	mi
 8001544:	2211      	movmi	r2, #17
        data = AKM_POWER_DOWN;
 8001546:	2210      	movpl	r2, #16
 8001548:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 800154c:	bf47      	ittee	mi
 800154e:	f88d 2006 	strbmi.w	r2, [sp, #6]
        user_ctrl |= BIT_AUX_IF_EN;
 8001552:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 8001556:	f023 0320 	bicpl.w	r3, r3, #32
        data = AKM_POWER_DOWN;
 800155a:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 800155e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8001562:	f88d 3007 	strb.w	r3, [sp, #7]
 8001566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 800156a:	b30a      	cbz	r2, 80015b0 <mpu_set_sensors+0x12c>
        user_ctrl |= BIT_DMP_EN;
 800156c:	f063 037f 	orn	r3, r3, #127	; 0x7f
        user_ctrl &= ~BIT_DMP_EN;
 8001570:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8001574:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001578:	f10d 0306 	add.w	r3, sp, #6
 800157c:	2201      	movs	r2, #1
 800157e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001582:	7800      	ldrb	r0, [r0, #0]
 8001584:	f001 fc78 	bl	8002e78 <i2c_write>
 8001588:	2800      	cmp	r0, #0
 800158a:	d190      	bne.n	80014ae <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800158c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001590:	f10d 0307 	add.w	r3, sp, #7
 8001594:	2201      	movs	r2, #1
 8001596:	7909      	ldrb	r1, [r1, #4]
 8001598:	7800      	ldrb	r0, [r0, #0]
 800159a:	f001 fc6d 	bl	8002e78 <i2c_write>
 800159e:	4606      	mov	r6, r0
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d184      	bne.n	80014ae <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 80015a4:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 80015a6:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 80015a8:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 80015aa:	f001 fc81 	bl	8002eb0 <delay_ms>
    return 0;
 80015ae:	e780      	b.n	80014b2 <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 80015b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b4:	e7dc      	b.n	8001570 <mpu_set_sensors+0xec>
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000

080015bc <mpu_init>:
{
 80015bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    data[0] = BIT_RESET;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80015c2:	4ca1      	ldr	r4, [pc, #644]	; (8001848 <mpu_init+0x28c>)
    data[0] = BIT_RESET;
 80015c4:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80015c8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80015cc:	462b      	mov	r3, r5
 80015ce:	2201      	movs	r2, #1
 80015d0:	7d49      	ldrb	r1, [r1, #21]
 80015d2:	7800      	ldrb	r0, [r0, #0]
 80015d4:	f001 fc50 	bl	8002e78 <i2c_write>
 80015d8:	4606      	mov	r6, r0
 80015da:	b120      	cbz	r0, 80015e6 <mpu_init+0x2a>
        return -1;
 80015dc:	f04f 34ff 	mov.w	r4, #4294967295
}
 80015e0:	4620      	mov	r0, r4
 80015e2:	b004      	add	sp, #16
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 80015e6:	2064      	movs	r0, #100	; 0x64
 80015e8:	f001 fc62 	bl	8002eb0 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80015ec:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 80015f0:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80015f4:	462b      	mov	r3, r5
 80015f6:	2201      	movs	r2, #1
 80015f8:	7d49      	ldrb	r1, [r1, #21]
 80015fa:	7800      	ldrb	r0, [r0, #0]
 80015fc:	f001 fc3c 	bl	8002e78 <i2c_write>
 8001600:	2800      	cmp	r0, #0
 8001602:	d1eb      	bne.n	80015dc <mpu_init+0x20>
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001604:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 8001606:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001608:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800160c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001610:	462b      	mov	r3, r5
 8001612:	2201      	movs	r2, #1
 8001614:	7a09      	ldrb	r1, [r1, #8]
 8001616:	7800      	ldrb	r0, [r0, #0]
 8001618:	f001 fc2e 	bl	8002e78 <i2c_write>
 800161c:	2800      	cmp	r0, #0
 800161e:	d1dd      	bne.n	80015dc <mpu_init+0x20>
    st.chip_cfg.sample_rate = 0xFFFF;
 8001620:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 8001624:	2501      	movs	r5, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 8001626:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001628:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800162a:	8523      	strh	r3, [r4, #40]	; 0x28
    st.chip_cfg.gyro_fsr = 0xFF;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
    st.chip_cfg.bypass_mode = 0xFF;
 8001630:	22ff      	movs	r2, #255	; 0xff
    st.chip_cfg.lp_accel_mode = 0;
 8001632:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001634:	f8c4 0016 	str.w	r0, [r4, #22]
 8001638:	f8c4 001a 	str.w	r0, [r4, #26]
 800163c:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 8001640:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 8001642:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 8001644:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 8001646:	8465      	strh	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 8001648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.bypass_mode = 0xFF;
 800164c:	74a2      	strb	r2, [r4, #18]
    if (mpu_set_gyro_fsr(2000))
 800164e:	f7ff fc95 	bl	8000f7c <mpu_set_gyro_fsr>
 8001652:	2800      	cmp	r0, #0
 8001654:	d1c2      	bne.n	80015dc <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 8001656:	2002      	movs	r0, #2
 8001658:	f7ff fcc8 	bl	8000fec <mpu_set_accel_fsr>
 800165c:	2800      	cmp	r0, #0
 800165e:	d1bd      	bne.n	80015dc <mpu_init+0x20>
    if (mpu_set_lpf(42))
 8001660:	202a      	movs	r0, #42	; 0x2a
 8001662:	f7ff fcf7 	bl	8001054 <mpu_set_lpf>
 8001666:	2800      	cmp	r0, #0
 8001668:	d1b8      	bne.n	80015dc <mpu_init+0x20>
    if (mpu_set_sample_rate(1000))
 800166a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800166e:	f7ff fec1 	bl	80013f4 <mpu_set_sample_rate>
 8001672:	2800      	cmp	r0, #0
 8001674:	d1b2      	bne.n	80015dc <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 8001676:	f7ff fd49 	bl	800110c <mpu_configure_fifo>
 800167a:	2800      	cmp	r0, #0
 800167c:	d1ae      	bne.n	80015dc <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fdba 	bl	80011f8 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001684:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8001686:	ab01      	add	r3, sp, #4
 8001688:	2201      	movs	r2, #1
 800168a:	2100      	movs	r1, #0
 800168c:	4628      	mov	r0, r5
 800168e:	f001 fc01 	bl	8002e94 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8001692:	b918      	cbnz	r0, 800169c <mpu_init+0xe0>
 8001694:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001698:	2b48      	cmp	r3, #72	; 0x48
 800169a:	d00c      	beq.n	80016b6 <mpu_init+0xfa>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 800169c:	3501      	adds	r5, #1
 800169e:	b2ed      	uxtb	r5, r5
 80016a0:	2d10      	cmp	r5, #16
 80016a2:	d1f0      	bne.n	8001686 <mpu_init+0xca>
    if (mpu_set_compass_sample_rate(10))
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fd0b 	bl	80010c0 <mpu_set_compass_sample_rate>
 80016aa:	4604      	mov	r4, r0
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d195      	bne.n	80015dc <mpu_init+0x20>
    mpu_set_sensors(0);
 80016b0:	f7ff fee8 	bl	8001484 <mpu_set_sensors>
    return 0;
 80016b4:	e794      	b.n	80015e0 <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 80016b6:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80016b8:	ab01      	add	r3, sp, #4
 80016ba:	2201      	movs	r2, #1
 80016bc:	210a      	movs	r1, #10
 80016be:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 80016c0:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 80016c4:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80016c8:	f001 fbd6 	bl	8002e78 <i2c_write>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d1e9      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f001 fbed 	bl	8002eb0 <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 80016d6:	231f      	movs	r3, #31
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80016d8:	2201      	movs	r2, #1
    data[0] = AKM_FUSE_ROM_ACCESS;
 80016da:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80016de:	210a      	movs	r1, #10
 80016e0:	ab01      	add	r3, sp, #4
 80016e2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80016e6:	f001 fbc7 	bl	8002e78 <i2c_write>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d1da      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f001 fbde 	bl	8002eb0 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 80016f4:	ab01      	add	r3, sp, #4
 80016f6:	2203      	movs	r2, #3
 80016f8:	4631      	mov	r1, r6
 80016fa:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80016fe:	f001 fbc9 	bl	8002e94 <i2c_read>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1ce      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001706:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800170a:	2201      	movs	r2, #1
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800170c:	3380      	adds	r3, #128	; 0x80
 800170e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001710:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001714:	210a      	movs	r1, #10
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001716:	3380      	adds	r3, #128	; 0x80
 8001718:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800171a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800171e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001722:	3380      	adds	r3, #128	; 0x80
 8001724:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001726:	ab01      	add	r3, sp, #4
    data[0] = AKM_POWER_DOWN;
 8001728:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800172c:	f001 fba4 	bl	8002e78 <i2c_write>
 8001730:	4605      	mov	r5, r0
 8001732:	2800      	cmp	r0, #0
 8001734:	d1b6      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fbba 	bl	8002eb0 <delay_ms>

    mpu_set_bypass(0);
 800173c:	4628      	mov	r0, r5
 800173e:	f7ff fd5b 	bl	80011f8 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001742:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800174c:	2201      	movs	r2, #1
 800174e:	ab01      	add	r3, sp, #4
 8001750:	7e89      	ldrb	r1, [r1, #26]
 8001752:	7800      	ldrb	r0, [r0, #0]
 8001754:	f001 fb90 	bl	8002e78 <i2c_write>
 8001758:	2800      	cmp	r0, #0
 800175a:	d1a3      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800175c:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001760:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001764:	2201      	movs	r2, #1
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800176e:	7f89      	ldrb	r1, [r1, #30]
 8001770:	ab01      	add	r3, sp, #4
 8001772:	7800      	ldrb	r0, [r0, #0]
 8001774:	f001 fb80 	bl	8002e78 <i2c_write>
 8001778:	2800      	cmp	r0, #0
 800177a:	d193      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800177c:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 8001780:	2302      	movs	r3, #2
 8001782:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001786:	2201      	movs	r2, #1
 8001788:	ab01      	add	r3, sp, #4
 800178a:	7fc9      	ldrb	r1, [r1, #31]
 800178c:	7800      	ldrb	r0, [r0, #0]
 800178e:	f001 fb73 	bl	8002e78 <i2c_write>
 8001792:	2800      	cmp	r0, #0
 8001794:	d186      	bne.n	80016a4 <mpu_init+0xe8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001796:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800179a:	2388      	movs	r3, #136	; 0x88
 800179c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80017a0:	2201      	movs	r2, #1
 80017a2:	ab01      	add	r3, sp, #4
 80017a4:	f891 1020 	ldrb.w	r1, [r1, #32]
 80017a8:	7800      	ldrb	r0, [r0, #0]
 80017aa:	f001 fb65 	bl	8002e78 <i2c_write>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	f47f af78 	bne.w	80016a4 <mpu_init+0xe8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80017b4:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 80017b8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80017bc:	2201      	movs	r2, #1
    data[0] = st.chip_cfg.compass_addr;
 80017be:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80017c2:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 80017c6:	ab01      	add	r3, sp, #4
 80017c8:	7800      	ldrb	r0, [r0, #0]
 80017ca:	f001 fb55 	bl	8002e78 <i2c_write>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	f47f af68 	bne.w	80016a4 <mpu_init+0xe8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80017d4:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 80017d8:	230a      	movs	r3, #10
 80017da:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80017de:	2201      	movs	r2, #1
 80017e0:	ab01      	add	r3, sp, #4
 80017e2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80017e6:	7800      	ldrb	r0, [r0, #0]
 80017e8:	f001 fb46 	bl	8002e78 <i2c_write>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	f47f af59 	bne.w	80016a4 <mpu_init+0xe8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 80017f2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 80017f6:	2381      	movs	r3, #129	; 0x81
 80017f8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 80017fc:	2201      	movs	r2, #1
 80017fe:	ab01      	add	r3, sp, #4
 8001800:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001804:	7800      	ldrb	r0, [r0, #0]
 8001806:	f001 fb37 	bl	8002e78 <i2c_write>
 800180a:	2800      	cmp	r0, #0
 800180c:	f47f af4a 	bne.w	80016a4 <mpu_init+0xe8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001810:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001814:	2311      	movs	r3, #17
 8001816:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800181a:	2201      	movs	r2, #1
 800181c:	ab01      	add	r3, sp, #4
 800181e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001822:	7800      	ldrb	r0, [r0, #0]
 8001824:	f001 fb28 	bl	8002e78 <i2c_write>
 8001828:	2800      	cmp	r0, #0
 800182a:	f47f af3b 	bne.w	80016a4 <mpu_init+0xe8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800182e:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 8001832:	2303      	movs	r3, #3
 8001834:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001838:	2201      	movs	r2, #1
 800183a:	ab01      	add	r3, sp, #4
 800183c:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8001840:	7800      	ldrb	r0, [r0, #0]
 8001842:	f001 fb19 	bl	8002e78 <i2c_write>
 8001846:	e72d      	b.n	80016a4 <mpu_init+0xe8>
 8001848:	20000000 	.word	0x20000000

0800184c <mpu_write_mem>:
{
 800184c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800184e:	460d      	mov	r5, r1
    if (!data)
 8001850:	4616      	mov	r6, r2
 8001852:	b91a      	cbnz	r2, 800185c <mpu_write_mem+0x10>
        return -1;
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001858:	b003      	add	sp, #12
 800185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 800185c:	4c12      	ldr	r4, [pc, #72]	; (80018a8 <mpu_write_mem+0x5c>)
 800185e:	7aa3      	ldrb	r3, [r4, #10]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f7      	beq.n	8001854 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001864:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001866:	0a03      	lsrs	r3, r0, #8
 8001868:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800186c:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800186e:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001870:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001874:	4408      	add	r0, r1
 8001876:	4298      	cmp	r0, r3
 8001878:	dcec      	bgt.n	8001854 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800187a:	6821      	ldr	r1, [r4, #0]
 800187c:	ab01      	add	r3, sp, #4
 800187e:	2202      	movs	r2, #2
 8001880:	7ec9      	ldrb	r1, [r1, #27]
 8001882:	7838      	ldrb	r0, [r7, #0]
 8001884:	f001 faf8 	bl	8002e78 <i2c_write>
 8001888:	2800      	cmp	r0, #0
 800188a:	d1e3      	bne.n	8001854 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800188c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001890:	4633      	mov	r3, r6
 8001892:	b2ea      	uxtb	r2, r5
 8001894:	7e09      	ldrb	r1, [r1, #24]
 8001896:	7800      	ldrb	r0, [r0, #0]
 8001898:	f001 faee 	bl	8002e78 <i2c_write>
 800189c:	3000      	adds	r0, #0
 800189e:	bf18      	it	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	4240      	negs	r0, r0
 80018a4:	e7d8      	b.n	8001858 <mpu_write_mem+0xc>
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000

080018ac <mpu_read_mem>:
{
 80018ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018ae:	460d      	mov	r5, r1
    if (!data)
 80018b0:	4616      	mov	r6, r2
 80018b2:	b91a      	cbnz	r2, 80018bc <mpu_read_mem+0x10>
        return -1;
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018b8:	b003      	add	sp, #12
 80018ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80018bc:	4c12      	ldr	r4, [pc, #72]	; (8001908 <mpu_read_mem+0x5c>)
 80018be:	7aa3      	ldrb	r3, [r4, #10]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f7      	beq.n	80018b4 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80018c4:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018c6:	0a03      	lsrs	r3, r0, #8
 80018c8:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018cc:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80018ce:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018d0:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80018d4:	4408      	add	r0, r1
 80018d6:	4298      	cmp	r0, r3
 80018d8:	dcec      	bgt.n	80018b4 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80018da:	6821      	ldr	r1, [r4, #0]
 80018dc:	ab01      	add	r3, sp, #4
 80018de:	2202      	movs	r2, #2
 80018e0:	7ec9      	ldrb	r1, [r1, #27]
 80018e2:	7838      	ldrb	r0, [r7, #0]
 80018e4:	f001 fac8 	bl	8002e78 <i2c_write>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1e3      	bne.n	80018b4 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80018ec:	e9d4 1000 	ldrd	r1, r0, [r4]
 80018f0:	4633      	mov	r3, r6
 80018f2:	b2ea      	uxtb	r2, r5
 80018f4:	7e09      	ldrb	r1, [r1, #24]
 80018f6:	7800      	ldrb	r0, [r0, #0]
 80018f8:	f001 facc 	bl	8002e94 <i2c_read>
 80018fc:	3000      	adds	r0, #0
 80018fe:	bf18      	it	ne
 8001900:	2001      	movne	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7d8      	b.n	80018b8 <mpu_read_mem+0xc>
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <mpu_load_firmware>:
{
 800190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001910:	4d25      	ldr	r5, [pc, #148]	; (80019a8 <mpu_load_firmware+0x9c>)
{
 8001912:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001914:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 8001918:	4607      	mov	r7, r0
 800191a:	4689      	mov	r9, r1
 800191c:	4616      	mov	r6, r2
 800191e:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 8001920:	b124      	cbz	r4, 800192c <mpu_load_firmware+0x20>
        return -1;
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001926:	b009      	add	sp, #36	; 0x24
 8001928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 800192c:	2900      	cmp	r1, #0
 800192e:	d0f8      	beq.n	8001922 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 8001930:	42bc      	cmp	r4, r7
 8001932:	d314      	bcc.n	800195e <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 8001934:	0a33      	lsrs	r3, r6, #8
 8001936:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 800193a:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800193e:	e9d5 1000 	ldrd	r1, r0, [r5]
 8001942:	ab03      	add	r3, sp, #12
 8001944:	2202      	movs	r2, #2
 8001946:	7f49      	ldrb	r1, [r1, #29]
 8001948:	7800      	ldrb	r0, [r0, #0]
 800194a:	f001 fa95 	bl	8002e78 <i2c_write>
 800194e:	2800      	cmp	r0, #0
 8001950:	d1e7      	bne.n	8001922 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 8001952:	2301      	movs	r3, #1
 8001954:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 800195c:	e7e3      	b.n	8001926 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 800195e:	eba7 0804 	sub.w	r8, r7, r4
 8001962:	f1b8 0f10 	cmp.w	r8, #16
 8001966:	bfa8      	it	ge
 8001968:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800196c:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 8001970:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8001974:	465a      	mov	r2, fp
 8001976:	4651      	mov	r1, sl
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff ff67 	bl	800184c <mpu_write_mem>
 800197e:	2800      	cmp	r0, #0
 8001980:	d1cf      	bne.n	8001922 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 8001982:	aa04      	add	r2, sp, #16
 8001984:	4651      	mov	r1, sl
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff90 	bl	80018ac <mpu_read_mem>
 800198c:	2800      	cmp	r0, #0
 800198e:	d1c8      	bne.n	8001922 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001990:	4652      	mov	r2, sl
 8001992:	a904      	add	r1, sp, #16
 8001994:	4658      	mov	r0, fp
 8001996:	f008 f935 	bl	8009c04 <memcmp>
 800199a:	b910      	cbnz	r0, 80019a2 <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 800199c:	4454      	add	r4, sl
 800199e:	b2a4      	uxth	r4, r4
 80019a0:	e7c6      	b.n	8001930 <mpu_load_firmware+0x24>
            return -2;
 80019a2:	f06f 0001 	mvn.w	r0, #1
 80019a6:	e7be      	b.n	8001926 <mpu_load_firmware+0x1a>
 80019a8:	20000000 	.word	0x20000000

080019ac <mpu_set_dmp_state>:
{
 80019ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 80019ae:	4d1c      	ldr	r5, [pc, #112]	; (8001a20 <mpu_set_dmp_state+0x74>)
{
 80019b0:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 80019b2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80019b6:	4283      	cmp	r3, r0
 80019b8:	d01d      	beq.n	80019f6 <mpu_set_dmp_state+0x4a>
    if (enable) {
 80019ba:	b1f8      	cbz	r0, 80019fc <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 80019bc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80019c0:	b35b      	cbz	r3, 8001a1a <mpu_set_dmp_state+0x6e>
        tmp = 0;
 80019c2:	2400      	movs	r4, #0
        set_int_enable(0);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff f945 	bl	8000c54 <set_int_enable>
        mpu_set_bypass(0);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff fc14 	bl	80011f8 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80019d0:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80019d2:	f7ff fd0f 	bl	80013f4 <mpu_set_sample_rate>
        tmp = 0;
 80019d6:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80019d8:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 80019da:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80019de:	2201      	movs	r2, #1
 80019e0:	2123      	movs	r1, #35	; 0x23
 80019e2:	7800      	ldrb	r0, [r0, #0]
 80019e4:	f001 fa48 	bl	8002e78 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 80019e8:	2001      	movs	r0, #1
 80019ea:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 80019ee:	f7ff f931 	bl	8000c54 <set_int_enable>
        mpu_reset_fifo();
 80019f2:	f7ff fa21 	bl	8000e38 <mpu_reset_fifo>
        return 0;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	b003      	add	sp, #12
 80019fa:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 80019fc:	f7ff f92a 	bl	8000c54 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001a00:	7c2a      	ldrb	r2, [r5, #16]
 8001a02:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a04:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 8001a06:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a0a:	2123      	movs	r1, #35	; 0x23
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	7800      	ldrb	r0, [r0, #0]
 8001a10:	f001 fa32 	bl	8002e78 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001a14:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001a18:	e7eb      	b.n	80019f2 <mpu_set_dmp_state+0x46>
            return -1;
 8001a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1e:	e7eb      	b.n	80019f8 <mpu_set_dmp_state+0x4c>
 8001a20:	20000000 	.word	0x20000000

08001a24 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <dmp_enable_gyro_cal.part.0+0x24>)
 8001a28:	ab01      	add	r3, sp, #4
 8001a2a:	6810      	ldr	r0, [r2, #0]
 8001a2c:	6851      	ldr	r1, [r2, #4]
 8001a2e:	7a12      	ldrb	r2, [r2, #8]
 8001a30:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a32:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001a34:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a36:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001a3a:	aa01      	add	r2, sp, #4
 8001a3c:	f7ff ff06 	bl	800184c <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001a40:	b005      	add	sp, #20
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a46:	bf00      	nop
 8001a48:	0800c408 	.word	0x0800c408

08001a4c <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001a4c:	23c8      	movs	r3, #200	; 0xc8
 8001a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a52:	4902      	ldr	r1, [pc, #8]	; (8001a5c <dmp_load_motion_driver_firmware+0x10>)
 8001a54:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8001a58:	f7ff bf58 	b.w	800190c <mpu_load_firmware>
 8001a5c:	0800c844 	.word	0x0800c844

08001a60 <dmp_set_orientation>:
{
 8001a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001a62:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 8001a66:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001a6a:	236c      	movs	r3, #108	; 0x6c
 8001a6c:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001a70:	f64c 130c 	movw	r3, #51468	; 0xc90c
 8001a74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001a78:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8001a7a:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001a7e:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 8001a82:	ab04      	add	r3, sp, #16
 8001a84:	4419      	add	r1, r3
 8001a86:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001a8a:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 8001a8e:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001a92:	ab04      	add	r3, sp, #16
 8001a94:	441a      	add	r2, r3
 8001a96:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 8001a9a:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001a9c:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001aa0:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8001aa4:	a804      	add	r0, sp, #16
 8001aa6:	4403      	add	r3, r0
 8001aa8:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 8001aac:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001ab0:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001ab4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001ab8:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 8001abc:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001ac0:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	466a      	mov	r2, sp
 8001ac8:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001acc:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001ad0:	f7ff febc 	bl	800184c <mpu_write_mem>
 8001ad4:	b118      	cbz	r0, 8001ade <dmp_set_orientation+0x7e>
        return -1;
 8001ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ada:	b004      	add	sp, #16
 8001adc:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001ade:	aa01      	add	r2, sp, #4
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	f240 402a 	movw	r0, #1066	; 0x42a
 8001ae6:	f7ff feb1 	bl	800184c <mpu_write_mem>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d1f3      	bne.n	8001ad6 <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8001aee:	f245 6336 	movw	r3, #22070	; 0x5636
 8001af2:	f8ad 3000 	strh.w	r3, [sp]
 8001af6:	2376      	movs	r3, #118	; 0x76
 8001af8:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001afc:	f244 6326 	movw	r3, #17958	; 0x4626
 8001b00:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001b04:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 8001b06:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8001b08:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001b0c:	bf41      	itttt	mi
 8001b0e:	2337      	movmi	r3, #55	; 0x37
 8001b10:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001b14:	2327      	movmi	r3, #39	; 0x27
 8001b16:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8001b1a:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001b1c:	bf41      	itttt	mi
 8001b1e:	2357      	movmi	r3, #87	; 0x57
 8001b20:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001b24:	2347      	movmi	r3, #71	; 0x47
 8001b26:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8001b2a:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001b2c:	bf42      	ittt	mi
 8001b2e:	2377      	movmi	r3, #119	; 0x77
 8001b30:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8001b34:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001b36:	466a      	mov	r2, sp
 8001b38:	f04f 0103 	mov.w	r1, #3
 8001b3c:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001b40:	bf48      	it	mi
 8001b42:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001b46:	f7ff fe81 	bl	800184c <mpu_write_mem>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1c3      	bne.n	8001ad6 <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001b4e:	aa01      	add	r2, sp, #4
 8001b50:	2103      	movs	r1, #3
 8001b52:	f240 4031 	movw	r0, #1073	; 0x431
 8001b56:	f7ff fe79 	bl	800184c <mpu_write_mem>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1bb      	bne.n	8001ad6 <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8001b5e:	4b01      	ldr	r3, [pc, #4]	; (8001b64 <dmp_set_orientation+0x104>)
 8001b60:	811c      	strh	r4, [r3, #8]
    return 0;
 8001b62:	e7ba      	b.n	8001ada <dmp_set_orientation+0x7a>
 8001b64:	200003ac 	.word	0x200003ac

08001b68 <dmp_set_fifo_rate>:
{
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <dmp_set_fifo_rate+0x58>)
{
 8001b6e:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001b70:	6810      	ldr	r0, [r2, #0]
 8001b72:	6851      	ldr	r1, [r2, #4]
 8001b74:	ab03      	add	r3, sp, #12
 8001b76:	c303      	stmia	r3!, {r0, r1}
 8001b78:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 8001b7a:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001b7c:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8001b7e:	d903      	bls.n	8001b88 <dmp_set_fifo_rate+0x20>
        return -1;
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b84:	b006      	add	sp, #24
 8001b86:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 8001b8e:	23c8      	movs	r3, #200	; 0xc8
 8001b90:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001b94:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8001b96:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001b98:	2102      	movs	r1, #2
 8001b9a:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 8001b9e:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001ba2:	f7ff fe53 	bl	800184c <mpu_write_mem>
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d1ea      	bne.n	8001b80 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8001baa:	aa03      	add	r2, sp, #12
 8001bac:	210c      	movs	r1, #12
 8001bae:	f640 20c1 	movw	r0, #2753	; 0xac1
 8001bb2:	f7ff fe4b 	bl	800184c <mpu_write_mem>
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d1e2      	bne.n	8001b80 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8001bba:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <dmp_set_fifo_rate+0x5c>)
 8001bbc:	819c      	strh	r4, [r3, #12]
    return 0;
 8001bbe:	e7e1      	b.n	8001b84 <dmp_set_fifo_rate+0x1c>
 8001bc0:	0800c411 	.word	0x0800c411
 8001bc4:	200003ac 	.word	0x200003ac

08001bc8 <dmp_enable_gyro_cal>:
{
 8001bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 8001bca:	b120      	cbz	r0, 8001bd6 <dmp_enable_gyro_cal+0xe>
 8001bcc:	f7ff ff2a 	bl	8001a24 <dmp_enable_gyro_cal.part.0>
}
 8001bd0:	b005      	add	sp, #20
 8001bd2:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <dmp_enable_gyro_cal+0x2c>)
 8001bd8:	ab01      	add	r3, sp, #4
 8001bda:	6810      	ldr	r0, [r2, #0]
 8001bdc:	6851      	ldr	r1, [r2, #4]
 8001bde:	7a12      	ldrb	r2, [r2, #8]
 8001be0:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001be2:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001be4:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001be6:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001bea:	aa01      	add	r2, sp, #4
 8001bec:	f7ff fe2e 	bl	800184c <mpu_write_mem>
 8001bf0:	e7ee      	b.n	8001bd0 <dmp_enable_gyro_cal+0x8>
 8001bf2:	bf00      	nop
 8001bf4:	0800c41d 	.word	0x0800c41d

08001bf8 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001bf8:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001bfa:	b160      	cbz	r0, 8001c16 <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001bfe:	aa01      	add	r2, sp, #4
 8001c00:	2104      	movs	r1, #4
 8001c02:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001c06:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001c08:	f7ff fe20 	bl	800184c <mpu_write_mem>

    return mpu_reset_fifo();
 8001c0c:	f7ff f914 	bl	8000e38 <mpu_reset_fifo>
}
 8001c10:	b003      	add	sp, #12
 8001c12:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8001c16:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8001c1a:	e7f0      	b.n	8001bfe <dmp_enable_lp_quat+0x6>
 8001c1c:	c6c4c2c0 	.word	0xc6c4c2c0

08001c20 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8001c20:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001c22:	b160      	cbz	r0, 8001c3e <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8001c26:	aa01      	add	r2, sp, #4
 8001c28:	2104      	movs	r1, #4
 8001c2a:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8001c2e:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8001c30:	f7ff fe0c 	bl	800184c <mpu_write_mem>

    return mpu_reset_fifo();
 8001c34:	f7ff f900 	bl	8000e38 <mpu_reset_fifo>
}
 8001c38:	b003      	add	sp, #12
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8001c3e:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8001c42:	e7f0      	b.n	8001c26 <dmp_enable_6x_lp_quat+0x6>
 8001c44:	38302820 	.word	0x38302820

08001c48 <dmp_enable_feature>:
{
 8001c48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <dmp_enable_feature+0x118>)
 8001c4e:	ad04      	add	r5, sp, #16
 8001c50:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001c54:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 8001c56:	462a      	mov	r2, r5
 8001c58:	2104      	movs	r1, #4
 8001c5a:	2068      	movs	r0, #104	; 0x68
 8001c5c:	f7ff fdf6 	bl	800184c <mpu_write_mem>
    tmp[0] = 0xA3;
 8001c60:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001c62:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001c66:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8001c6a:	bf1f      	itttt	ne
 8001c6c:	23c0      	movne	r3, #192	; 0xc0
 8001c6e:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8001c72:	23c8      	movne	r3, #200	; 0xc8
 8001c74:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8001c78:	bf12      	itee	ne
 8001c7a:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8001c7c:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8001c80:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001c84:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8001c88:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8001c8c:	bf15      	itete	ne
 8001c8e:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001c92:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 8001c96:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 8001c9a:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8001c9e:	bf14      	ite	ne
 8001ca0:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 8001ca2:	23a3      	moveq	r3, #163	; 0xa3
 8001ca4:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8001ca8:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8001caa:	462a      	mov	r2, r5
 8001cac:	210a      	movs	r1, #10
 8001cae:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001cb2:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8001cb6:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8001cba:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8001cbe:	f7ff fdc5 	bl	800184c <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001cc2:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8001cc6:	bf14      	ite	ne
 8001cc8:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8001cca:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001ccc:	462a      	mov	r2, r5
 8001cce:	2101      	movs	r1, #1
 8001cd0:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8001cd4:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8001cd8:	f7ff fdb8 	bl	800184c <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001cdc:	f014 0020 	ands.w	r0, r4, #32
 8001ce0:	d038      	beq.n	8001d54 <dmp_enable_feature+0x10c>
 8001ce2:	f7ff fe9f 	bl	8001a24 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001ce6:	f1b8 0f00 	cmp.w	r8, #0
 8001cea:	d00a      	beq.n	8001d02 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001cec:	05e3      	lsls	r3, r4, #23
            tmp[0] = 0xB2;
 8001cee:	bf4c      	ite	mi
 8001cf0:	4b1c      	ldrmi	r3, [pc, #112]	; (8001d64 <dmp_enable_feature+0x11c>)
            tmp[0] = DINAC0;
 8001cf2:	4b1d      	ldrpl	r3, [pc, #116]	; (8001d68 <dmp_enable_feature+0x120>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001cfc:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001cfe:	f7ff fda5 	bl	800184c <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001d02:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8001d06:	bf18      	it	ne
 8001d08:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8001d0a:	f7ff ff75 	bl	8001bf8 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001d0e:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8001d12:	bf18      	it	ne
 8001d14:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001d16:	4d15      	ldr	r5, [pc, #84]	; (8001d6c <dmp_enable_feature+0x124>)
        dmp_enable_6x_lp_quat(0);
 8001d18:	f7ff ff82 	bl	8001c20 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001d1c:	f044 0308 	orr.w	r3, r4, #8
 8001d20:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001d22:	f7ff f889 	bl	8000e38 <mpu_reset_fifo>
 8001d26:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001d28:	b9bf      	cbnz	r7, 8001d5a <dmp_enable_feature+0x112>
    dmp.packet_length = 0;
 8001d2a:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001d2c:	f1b8 0f00 	cmp.w	r8, #0
 8001d30:	d002      	beq.n	8001d38 <dmp_enable_feature+0xf0>
        dmp.packet_length += 6;
 8001d32:	7b9a      	ldrb	r2, [r3, #14]
 8001d34:	3206      	adds	r2, #6
 8001d36:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001d38:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001d3c:	bf1e      	ittt	ne
 8001d3e:	7b9a      	ldrbne	r2, [r3, #14]
 8001d40:	3210      	addne	r2, #16
 8001d42:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001d44:	b116      	cbz	r6, 8001d4c <dmp_enable_feature+0x104>
        dmp.packet_length += 4;
 8001d46:	7b9a      	ldrb	r2, [r3, #14]
 8001d48:	3204      	adds	r2, #4
 8001d4a:	739a      	strb	r2, [r3, #14]
}
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	b004      	add	sp, #16
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8001d54:	f7ff ff38 	bl	8001bc8 <dmp_enable_gyro_cal>
 8001d58:	e7c5      	b.n	8001ce6 <dmp_enable_feature+0x9e>
        dmp.packet_length += 6;
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	73aa      	strb	r2, [r5, #14]
 8001d5e:	e7e5      	b.n	8001d2c <dmp_enable_feature+0xe4>
 8001d60:	09e3ca02 	.word	0x09e3ca02
 8001d64:	9bb68bb2 	.word	0x9bb68bb2
 8001d68:	90b480b0 	.word	0x90b480b0
 8001d6c:	200003ac 	.word	0x200003ac

08001d70 <dmp_read_fifo>:
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001d70:	2300      	movs	r3, #0
{
 8001d72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	9c10      	ldr	r4, [sp, #64]	; 0x40

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001d7a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001e84 <dmp_read_fifo+0x114>
{
 8001d7e:	4605      	mov	r5, r0
 8001d80:	460e      	mov	r6, r1
 8001d82:	4690      	mov	r8, r2
    sensors[0] = 0;
 8001d84:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001d86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d88:	4669      	mov	r1, sp
 8001d8a:	f899 000e 	ldrb.w	r0, [r9, #14]
 8001d8e:	f7ff f9e5 	bl	800115c <mpu_read_fifo_stream>
 8001d92:	4607      	mov	r7, r0
 8001d94:	bb50      	cbnz	r0, 8001dec <dmp_read_fifo+0x7c>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001d96:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8001d9a:	f011 0f14 	tst.w	r1, #20
 8001d9e:	d06e      	beq.n	8001e7e <dmp_read_fifo+0x10e>
 8001da0:	9a01      	ldr	r2, [sp, #4]
 8001da2:	9800      	ldr	r0, [sp, #0]
 8001da4:	fa92 fc82 	rev.w	ip, r2
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001da8:	f8c8 c004 	str.w	ip, [r8, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8001dac:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001db0:	fb0c fc0c 	mul.w	ip, ip, ip
 8001db4:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001db6:	f8c8 0000 	str.w	r0, [r8]
        quat_q14[0] = quat[0] >> 16;
 8001dba:	1400      	asrs	r0, r0, #16
 8001dbc:	9a02      	ldr	r2, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001dbe:	fb00 c000 	mla	r0, r0, r0, ip
 8001dc2:	ba12      	rev	r2, r2
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8001dc4:	f8c8 2008 	str.w	r2, [r8, #8]
        quat_q14[2] = quat[2] >> 16;
 8001dc8:	1412      	asrs	r2, r2, #16
 8001dca:	9b03      	ldr	r3, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001dcc:	fb02 0202 	mla	r2, r2, r2, r0
 8001dd0:	ba1b      	rev	r3, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001dd2:	f8c8 300c 	str.w	r3, [r8, #12]
        quat_q14[3] = quat[3] >> 16;
 8001dd6:	141b      	asrs	r3, r3, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001dd8:	fb03 2303 	mla	r3, r3, r3, r2
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001ddc:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8001de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001de4:	d905      	bls.n	8001df2 <dmp_read_fifo+0x82>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8001de6:	f7ff f827 	bl	8000e38 <mpu_reset_fifo>
            sensors[0] = 0;
 8001dea:	8027      	strh	r7, [r4, #0]
        return -1;
 8001dec:	f04f 37ff 	mov.w	r7, #4294967295
 8001df0:	e041      	b.n	8001e76 <dmp_read_fifo+0x106>
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8001df2:	8823      	ldrh	r3, [r4, #0]
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8001dfa:	2310      	movs	r3, #16
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001dfc:	064a      	lsls	r2, r1, #25
 8001dfe:	d51c      	bpl.n	8001e3a <dmp_read_fifo+0xca>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e00:	aa08      	add	r2, sp, #32
 8001e02:	441a      	add	r2, r3
 8001e04:	f812 cc20 	ldrb.w	ip, [r2, #-32]
 8001e08:	f812 0c1f 	ldrb.w	r0, [r2, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8001e0c:	3306      	adds	r3, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e0e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001e12:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e14:	f812 cc1e 	ldrb.w	ip, [r2, #-30]
 8001e18:	f812 0c1d 	ldrb.w	r0, [r2, #-29]
        ii += 6;
 8001e1c:	b2db      	uxtb	r3, r3
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e1e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001e22:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e24:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8001e28:	f812 2c1b 	ldrb.w	r2, [r2, #-27]
 8001e2c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e30:	80b2      	strh	r2, [r6, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001e32:	8822      	ldrh	r2, [r4, #0]
 8001e34:	f042 0208 	orr.w	r2, r2, #8
 8001e38:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001e3a:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8001e3e:	d01a      	beq.n	8001e76 <dmp_read_fifo+0x106>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e40:	aa08      	add	r2, sp, #32
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8001e48:	f813 2c1f 	ldrb.w	r2, [r3, #-31]
 8001e4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e50:	802a      	strh	r2, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e52:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8001e56:	f813 2c1d 	ldrb.w	r2, [r3, #-29]
 8001e5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e5e:	806a      	strh	r2, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e60:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8001e64:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e6c:	80ab      	strh	r3, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001e6e:	8823      	ldrh	r3, [r4, #0]
 8001e70:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e74:	8023      	strh	r3, [r4, #0]
    }

    //get_ms(timestamp);
    return 0;
}
 8001e76:	4638      	mov	r0, r7
 8001e78:	b009      	add	sp, #36	; 0x24
 8001e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char ii = 0;
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e7bc      	b.n	8001dfc <dmp_read_fifo+0x8c>
 8001e82:	bf00      	nop
 8001e84:	200003ac 	.word	0x200003ac

08001e88 <DMP_Init>:

int DMP_Init(void){
 8001e88:	b507      	push	{r0, r1, r2, lr}

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001e8a:	a801      	add	r0, sp, #4
 8001e8c:	f7ff fb96 	bl	80015bc <mpu_init>
 8001e90:	b9e8      	cbnz	r0, 8001ece <DMP_Init+0x46>
		return 1;
	}

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001e92:	2079      	movs	r0, #121	; 0x79
 8001e94:	f7ff faf6 	bl	8001484 <mpu_set_sensors>
 8001e98:	b9d8      	cbnz	r0, 8001ed2 <DMP_Init+0x4a>
		return 2;
	}

	if(dmp_load_motion_driver_firmware()){
 8001e9a:	f7ff fdd7 	bl	8001a4c <dmp_load_motion_driver_firmware>
 8001e9e:	b9d0      	cbnz	r0, 8001ed6 <DMP_Init+0x4e>

		return 4;//ERROR
	}

	if(dmp_set_orientation(0x88)){//set identity matrix
 8001ea0:	2088      	movs	r0, #136	; 0x88
 8001ea2:	f7ff fddd 	bl	8001a60 <dmp_set_orientation>
 8001ea6:	b9c0      	cbnz	r0, 8001eda <DMP_Init+0x52>
	}

	unsigned short dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL
								| DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if(dmp_enable_feature(dmp_features)){
 8001ea8:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001eac:	f7ff fecc 	bl	8001c48 <dmp_enable_feature>
 8001eb0:	b9a8      	cbnz	r0, 8001ede <DMP_Init+0x56>
		return 6;
	}

	if(dmp_set_fifo_rate(100)){
 8001eb2:	2064      	movs	r0, #100	; 0x64
 8001eb4:	f7ff fe58 	bl	8001b68 <dmp_set_fifo_rate>
 8001eb8:	b998      	cbnz	r0, 8001ee2 <DMP_Init+0x5a>
		return 7;
	}

	if (mpu_set_dmp_state(1)){
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff fd76 	bl	80019ac <mpu_set_dmp_state>
		return 8;
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2008      	movne	r0, #8
 8001ec6:	2000      	moveq	r0, #0
	}

	return 0;
}
 8001ec8:	b003      	add	sp, #12
 8001eca:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8001ece:	2001      	movs	r0, #1
 8001ed0:	e7fa      	b.n	8001ec8 <DMP_Init+0x40>
		return 2;
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	e7f8      	b.n	8001ec8 <DMP_Init+0x40>
		return 4;//ERROR
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	e7f6      	b.n	8001ec8 <DMP_Init+0x40>
		return 5;
 8001eda:	2005      	movs	r0, #5
 8001edc:	e7f4      	b.n	8001ec8 <DMP_Init+0x40>
		return 6;
 8001ede:	2006      	movs	r0, #6
 8001ee0:	e7f2      	b.n	8001ec8 <DMP_Init+0x40>
		return 7;
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	e7f0      	b.n	8001ec8 <DMP_Init+0x40>

08001ee6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee6:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee8:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eea:	2610      	movs	r6, #16
{
 8001eec:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	4622      	mov	r2, r4
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	a80c      	add	r0, sp, #48	; 0x30
 8001ef4:	f007 fea0 	bl	8009c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	4622      	mov	r2, r4
 8001efa:	eb0d 0004 	add.w	r0, sp, r4
 8001efe:	2100      	movs	r1, #0
 8001f00:	f007 fe9a 	bl	8009c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	4632      	mov	r2, r6
 8001f06:	2100      	movs	r1, #0
 8001f08:	a801      	add	r0, sp, #4
 8001f0a:	f007 fe95 	bl	8009c38 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1a:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f24:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f26:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f28:	f005 fba2 	bl	8007670 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f2e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f30:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f38:	4629      	mov	r1, r5
 8001f3a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3c:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f40:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f42:	f005 fd6d 	bl	8007a20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f46:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f48:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001f4a:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4c:	f005 fe42 	bl	8007bd4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001f50:	b014      	add	sp, #80	; 0x50
 8001f52:	bd70      	pop	{r4, r5, r6, pc}

08001f54 <main>:
{
 8001f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8001f58:	2400      	movs	r4, #0
{
 8001f5a:	b08f      	sub	sp, #60	; 0x3c
	ximu_state = XIMU_STATE_STM_INIT;
 8001f5c:	f8df a300 	ldr.w	sl, [pc, #768]	; 8002260 <main+0x30c>
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f60:	4daa      	ldr	r5, [pc, #680]	; (800220c <main+0x2b8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	ae0a      	add	r6, sp, #40	; 0x28
	ximu_state = XIMU_STATE_STM_INIT;
 8001f64:	f88a 4000 	strb.w	r4, [sl]
  HAL_Init();
 8001f68:	f004 f938 	bl	80061dc <HAL_Init>
  SystemClock_Config();
 8001f6c:	f7ff ffbb 	bl	8001ee6 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	2210      	movs	r2, #16
 8001f72:	4621      	mov	r1, r4
 8001f74:	4630      	mov	r0, r6
 8001f76:	f007 fe5f 	bl	8009c38 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f7c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	61ab      	str	r3, [r5, #24]
 8001f84:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	9303      	str	r3, [sp, #12]
 8001f90:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f94:	489e      	ldr	r0, [pc, #632]	; (8002210 <main+0x2bc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	f043 0320 	orr.w	r3, r3, #32
 8001f9a:	61ab      	str	r3, [r5, #24]
 8001f9c:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	9304      	str	r3, [sp, #16]
 8001fa8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8001fac:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8002264 <main+0x310>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	61ab      	str	r3, [r5, #24]
 8001fb6:	69ab      	ldr	r3, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	f10d 091c 	add.w	r9, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	9305      	str	r3, [sp, #20]
 8001fc2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 8001fc6:	4f93      	ldr	r7, [pc, #588]	; (8002214 <main+0x2c0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	61ab      	str	r3, [r5, #24]
 8001fce:	69ab      	ldr	r3, [r5, #24]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	9306      	str	r3, [sp, #24]
 8001fd6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fd8:	f004 fb6c 	bl	80066b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe0:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	4631      	mov	r1, r6
 8001fe8:	4889      	ldr	r0, [pc, #548]	; (8002210 <main+0x2bc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f004 fa81 	bl	80064f4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ff2:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ff4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ff6:	ea43 030b 	orr.w	r3, r3, fp
 8001ffa:	616b      	str	r3, [r5, #20]
 8001ffc:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ffe:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002000:	ea03 030b 	and.w	r3, r3, fp
 8002004:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002006:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002008:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800200a:	f004 f92f 	bl	800626c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800200e:	200f      	movs	r0, #15
 8002010:	f004 f960 	bl	80062d4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8002014:	4d80      	ldr	r5, [pc, #512]	; (8002218 <main+0x2c4>)
  hi2c1.Init.ClockSpeed = 100000;
 8002016:	4a81      	ldr	r2, [pc, #516]	; (800221c <main+0x2c8>)
 8002018:	4b81      	ldr	r3, [pc, #516]	; (8002220 <main+0x2cc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800201a:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 800201c:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002024:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800202c:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002030:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002032:	f004 fd07 	bl	8006a44 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8002036:	f007 f9e7 	bl	8009408 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203a:	2210      	movs	r2, #16
 800203c:	4621      	mov	r1, r4
 800203e:	4630      	mov	r0, r6
 8002040:	f007 fdfa 	bl	8009c38 <memset>
  htim2.Init.Period = 1250;
 8002044:	f240 42e2 	movw	r2, #1250	; 0x4e2
  htim2.Init.Prescaler = 7200;
 8002048:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800204c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002050:	4640      	mov	r0, r8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	e9c8 2403 	strd	r2, r4, [r8, #12]
  htim2.Init.Prescaler = 7200;
 8002056:	e9c8 1300 	strd	r1, r3, [r8]
 800205a:	9301      	str	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	9407      	str	r4, [sp, #28]
 800205e:	f8c9 4004 	str.w	r4, [r9, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206a:	f005 ff19 	bl	8007ea0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002072:	4631      	mov	r1, r6
 8002074:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002076:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002078:	f005 ff36 	bl	8007ee8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207c:	4649      	mov	r1, r9
 800207e:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	f005 ffc4 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002088:	2210      	movs	r2, #16
 800208a:	4621      	mov	r1, r4
 800208c:	4630      	mov	r0, r6
 800208e:	f007 fdd3 	bl	8009c38 <memset>
  htim3.Init.Prescaler = 7200;
 8002092:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8002094:	4963      	ldr	r1, [pc, #396]	; (8002224 <main+0x2d0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	e9c7 3401 	strd	r3, r4, [r7, #4]
  htim3.Init.Period = 50;
 800209a:	2332      	movs	r3, #50	; 0x32
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209c:	4638      	mov	r0, r7
  htim3.Instance = TIM3;
 800209e:	6039      	str	r1, [r7, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	9407      	str	r4, [sp, #28]
 80020a8:	f8c9 4004 	str.w	r4, [r9, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020ac:	f005 fef8 	bl	8007ea0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b4:	4631      	mov	r1, r6
 80020b6:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020ba:	f005 ff15 	bl	8007ee8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020be:	4649      	mov	r1, r9
 80020c0:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c6:	f005 ffa3 	bl	8008010 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 80020ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80020ce:	4f56      	ldr	r7, [pc, #344]	; (8002228 <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 80020d0:	4856      	ldr	r0, [pc, #344]	; (800222c <main+0x2d8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d2:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 80020d6:	e9c7 0300 	strd	r0, r3, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020da:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020dc:	4638      	mov	r0, r7
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	e9c7 3405 	strd	r3, r4, [r7, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e2:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e6:	f005 fffb 	bl	80080e0 <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80020ea:	4640      	mov	r0, r8
 80020ec:	f005 fdea 	bl	8007cc4 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 80020f0:	20cc      	movs	r0, #204	; 0xcc
 80020f2:	f000 feb5 	bl	8002e60 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 80020f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020fa:	f004 f893 	bl	8006224 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 80020fe:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8002100:	f88a b000 	strb.w	fp, [sl]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002104:	f000 feac 	bl	8002e60 <led_set>
  mpu_set_i2c(&hi2c1);
 8002108:	4628      	mov	r0, r5
 800210a:	f000 feaf 	bl	8002e6c <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 800210e:	4628      	mov	r0, r5
 8002110:	f000 fed0 	bl	8002eb4 <ms5611_set_i2c>
  ms5611_init();
 8002114:	f000 ff70 	bl	8002ff8 <ms5611_init>
  ms5611_update();
 8002118:	f000 ff66 	bl	8002fe8 <ms5611_update>
  GNSS_set_huart(&huart1);
 800211c:	4638      	mov	r0, r7
 800211e:	f000 fd11 	bl	8002b44 <GNSS_set_huart>
  GNSS_Init();
 8002122:	f000 fd55 	bl	8002bd0 <GNSS_Init>
  HMC5883L_I2C_set(&hi2c1);
 8002126:	4628      	mov	r0, r5
 8002128:	f000 fbda 	bl	80028e0 <HMC5883L_I2C_set>
  HMC5883L_Initialize();
 800212c:	f000 fc08 	bl	8002940 <HMC5883L_Initialize>
	  HAL_Delay(10);
 8002130:	200a      	movs	r0, #10
 8002132:	f004 f877 	bl	8006224 <HAL_Delay>
  while (HMC5883L_TestConnection() == 0){
 8002136:	f000 fc23 	bl	8002980 <HMC5883L_TestConnection>
 800213a:	2800      	cmp	r0, #0
 800213c:	d0f8      	beq.n	8002130 <main+0x1dc>
  int dmp_state = DMP_Init();
 800213e:	f7ff fea3 	bl	8001e88 <DMP_Init>
  if (dmp_state){
 8002142:	b100      	cbz	r0, 8002146 <main+0x1f2>
 8002144:	e7fe      	b.n	8002144 <main+0x1f0>
  long accel_bias[3] = {-333.0909/8.0, 69.6663/8.0, 102.8412/8.0}; // from +- 2g to +- 16g
 8002146:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <main+0x2dc>)
 8002148:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  long gyro_bias[3] = {-66.4549,   57.2769,  -16.6647};
 800214c:	330c      	adds	r3, #12
  long accel_bias[3] = {-333.0909/8.0, 69.6663/8.0, 102.8412/8.0}; // from +- 2g to +- 16g
 800214e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
  long gyro_bias[3] = {-66.4549,   57.2769,  -16.6647};
 8002152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002156:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  if (mpu_set_accel_bias_6500_reg(accel_bias)){
 800215a:	4648      	mov	r0, r9
 800215c:	f7fe fe16 	bl	8000d8c <mpu_set_accel_bias_6500_reg>
 8002160:	b100      	cbz	r0, 8002164 <main+0x210>
 8002162:	e7fe      	b.n	8002162 <main+0x20e>
  if(mpu_set_gyro_bias_reg(gyro_bias)){
 8002164:	4630      	mov	r0, r6
 8002166:	f7fe fdd3 	bl	8000d10 <mpu_set_gyro_bias_reg>
 800216a:	4604      	mov	r4, r0
 800216c:	b100      	cbz	r0, 8002170 <main+0x21c>
 800216e:	e7fe      	b.n	800216e <main+0x21a>
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 8002170:	4828      	ldr	r0, [pc, #160]	; (8002214 <main+0x2c0>)
 8002172:	f005 fda7 	bl	8007cc4 <HAL_TIM_Base_Start_IT>
  ximu_state = XIMU_STATE_GPS_INIT;
 8002176:	2302      	movs	r3, #2
  led_set(LED_DISCONNECTED);//Fault cleared
 8002178:	4620      	mov	r0, r4
  ximu_state = XIMU_STATE_GPS_INIT;
 800217a:	f88a 3000 	strb.w	r3, [sl]
  led_set(LED_DISCONNECTED);//Fault cleared
 800217e:	f000 fe6f 	bl	8002e60 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8002182:	4c2c      	ldr	r4, [pc, #176]	; (8002234 <main+0x2e0>)
 8002184:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002188:	2b03      	cmp	r3, #3
 800218a:	d132      	bne.n	80021f2 <main+0x29e>
  ros_init();
 800218c:	f003 f806 	bl	800519c <ros_init>
  led_set(LED_IDLE);//connection formed
 8002190:	20ff      	movs	r0, #255	; 0xff
 8002192:	f000 fe65 	bl	8002e60 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 8002196:	4f28      	ldr	r7, [pc, #160]	; (8002238 <main+0x2e4>)
 8002198:	4c28      	ldr	r4, [pc, #160]	; (800223c <main+0x2e8>)
 800219a:	4d29      	ldr	r5, [pc, #164]	; (8002240 <main+0x2ec>)
	  led_set(LED_MEASURING);
 800219c:	20fe      	movs	r0, #254	; 0xfe
 800219e:	f000 fe5f 	bl	8002e60 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	4e27      	ldr	r6, [pc, #156]	; (8002244 <main+0x2f0>)
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d027      	beq.n	80021fa <main+0x2a6>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <main+0x268>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <main+0x268>
 80021b6:	6833      	ldr	r3, [r6, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d1ef      	bne.n	800219c <main+0x248>
		  if (send_mag_data == 1){
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d104      	bne.n	80021cc <main+0x278>
			  MAG_pub(m);
 80021c2:	4821      	ldr	r0, [pc, #132]	; (8002248 <main+0x2f4>)
 80021c4:	f003 f89e 	bl	8005304 <MAG_pub>
			  send_mag_data = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	6023      	str	r3, [r4, #0]
		  if (send_gps_data == 1){
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d104      	bne.n	80021dc <main+0x288>
			  GPS_pub(lla);
 80021d2:	481e      	ldr	r0, [pc, #120]	; (800224c <main+0x2f8>)
 80021d4:	f003 f8d8 	bl	8005388 <GPS_pub>
			  send_gps_data = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	602b      	str	r3, [r5, #0]
		  if (send_pt_data == 1){
 80021dc:	6833      	ldr	r3, [r6, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d104      	bne.n	80021ec <main+0x298>
		  	  PT_pub(pt);
 80021e2:	481b      	ldr	r0, [pc, #108]	; (8002250 <main+0x2fc>)
 80021e4:	f003 f90c 	bl	8005400 <PT_pub>
		  	  send_pt_data = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	6033      	str	r3, [r6, #0]
		  spinOnce();
 80021ec:	f003 f950 	bl	8005490 <spinOnce>
 80021f0:	e7d4      	b.n	800219c <main+0x248>
	  led_set(LED_DISCONNECTED);//wait for connection
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 fe34 	bl	8002e60 <led_set>
 80021f8:	e7c4      	b.n	8002184 <main+0x230>
			  IMU_pub(a,w,q);
 80021fa:	4a16      	ldr	r2, [pc, #88]	; (8002254 <main+0x300>)
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <main+0x304>)
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <main+0x308>)
 8002200:	f002 fff6 	bl	80051f0 <IMU_pub>
			  send_imu_data = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	e7d8      	b.n	80021bc <main+0x268>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40011000 	.word	0x40011000
 8002214:	20001a2c 	.word	0x20001a2c
 8002218:	200019d8 	.word	0x200019d8
 800221c:	40005400 	.word	0x40005400
 8002220:	000186a0 	.word	0x000186a0
 8002224:	40000400 	.word	0x40000400
 8002228:	20001ab8 	.word	0x20001ab8
 800222c:	40013800 	.word	0x40013800
 8002230:	0800c43c 	.word	0x0800c43c
 8002234:	2000205c 	.word	0x2000205c
 8002238:	2000043c 	.word	0x2000043c
 800223c:	20000440 	.word	0x20000440
 8002240:	20000438 	.word	0x20000438
 8002244:	20000444 	.word	0x20000444
 8002248:	200003f0 	.word	0x200003f0
 800224c:	200003d8 	.word	0x200003d8
 8002250:	20000408 	.word	0x20000408
 8002254:	20000418 	.word	0x20000418
 8002258:	20000448 	.word	0x20000448
 800225c:	200003c0 	.word	0x200003c0
 8002260:	20001ab4 	.word	0x20001ab4
 8002264:	20001fc0 	.word	0x20001fc0

08002268 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002268:	6802      	ldr	r2, [r0, #0]
 800226a:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800226c:	429a      	cmp	r2, r3
 800226e:	d101      	bne.n	8002274 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002270:	f003 bfc6 	b.w	8006200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00

0800227c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_MspInit+0x3c>)
{
 8002282:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	619a      	str	r2, [r3, #24]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	f002 0201 	and.w	r2, r2, #1
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800229c:	61da      	str	r2, [r3, #28]
 800229e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80022aa:	6853      	ldr	r3, [r2, #4]
 80022ac:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	b002      	add	sp, #8
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010000 	.word	0x40010000

080022c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	4604      	mov	r4, r0
 80022c8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	2210      	movs	r2, #16
 80022cc:	2100      	movs	r1, #0
 80022ce:	a802      	add	r0, sp, #8
 80022d0:	f007 fcb2 	bl	8009c38 <memset>
  if(hi2c->Instance==I2C1)
 80022d4:	6822      	ldr	r2, [r4, #0]
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_I2C_MspInit+0x58>)
 80022d8:	429a      	cmp	r2, r3
 80022da:	d11c      	bne.n	8002316 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4c10      	ldr	r4, [pc, #64]	; (8002320 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022de:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	61a3      	str	r3, [r4, #24]
 80022ea:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f004 f8f8 	bl	80064f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002304:	69e3      	ldr	r3, [r4, #28]
 8002306:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800230a:	61e3      	str	r3, [r4, #28]
 800230c:	69e3      	ldr	r3, [r4, #28]
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002316:	b006      	add	sp, #24
 8002318:	bd10      	pop	{r4, pc}
 800231a:	bf00      	nop
 800231c:	40005400 	.word	0x40005400
 8002320:	40021000 	.word	0x40021000
 8002324:	40010c00 	.word	0x40010c00

08002328 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002328:	6803      	ldr	r3, [r0, #0]
{
 800232a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d115      	bne.n	800235e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002332:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002336:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002338:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002342:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002344:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800234e:	f003 ff8d 	bl	800626c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002352:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002354:	b003      	add	sp, #12
 8002356:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800235a:	f003 bfbb 	b.w	80062d4 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_TIM_Base_MspInit+0x64>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d110      	bne.n	8002386 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002366:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	f042 0202 	orr.w	r2, r2, #2
 800236e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002374:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237e:	f003 ff75 	bl	800626c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002382:	201d      	movs	r0, #29
 8002384:	e7e6      	b.n	8002354 <HAL_TIM_Base_MspInit+0x2c>
}
 8002386:	b003      	add	sp, #12
 8002388:	f85d fb04 	ldr.w	pc, [sp], #4
 800238c:	40000400 	.word	0x40000400
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4606      	mov	r6, r0
 8002398:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239a:	2210      	movs	r2, #16
 800239c:	2100      	movs	r1, #0
 800239e:	a802      	add	r0, sp, #8
 80023a0:	f007 fc4a 	bl	8009c38 <memset>
  if(huart->Instance==USART1)
 80023a4:	6832      	ldr	r2, [r6, #0]
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_UART_MspInit+0x9c>)
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d13e      	bne.n	800242a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80023b0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	481d      	ldr	r0, [pc, #116]	; (8002434 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80023be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023c2:	9200      	str	r2, [sp, #0]
 80023c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	f042 0204 	orr.w	r2, r2, #4
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f004 f884 	bl	80064f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	a902      	add	r1, sp, #8
 80023f2:	4810      	ldr	r0, [pc, #64]	; (8002434 <HAL_UART_MspInit+0xa0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023f4:	4c10      	ldr	r4, [pc, #64]	; (8002438 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f004 f87a 	bl	80064f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <HAL_UART_MspInit+0xa8>)
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002402:	2120      	movs	r1, #32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002404:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002408:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800240a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800240e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002412:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002414:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002416:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002418:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800241c:	f003 ff68 	bl	80062f0 <HAL_DMA_Init>
 8002420:	b108      	cbz	r0, 8002426 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8002422:	f7ff ff2b 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002426:	6374      	str	r4, [r6, #52]	; 0x34
 8002428:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800242a:	b006      	add	sp, #24
 800242c:	bd70      	pop	{r4, r5, r6, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	40010800 	.word	0x40010800
 8002438:	20001a70 	.word	0x20001a70
 800243c:	40020058 	.word	0x40020058

08002440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002442:	4601      	mov	r1, r0
{
 8002444:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002446:	2200      	movs	r2, #0
 8002448:	2019      	movs	r0, #25
 800244a:	f003 ff0f 	bl	800626c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800244e:	2019      	movs	r0, #25
 8002450:	f003 ff40 	bl	80062d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002456:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002458:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800245a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800245c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002460:	619a      	str	r2, [r3, #24]
 8002462:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002464:	4c11      	ldr	r4, [pc, #68]	; (80024ac <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800246e:	f005 fb93 	bl	8007b98 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002472:	f005 fb81 	bl	8007b78 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_InitTick+0x70>)
 8002478:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800247a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800247e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_InitTick+0x74>)
 8002482:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002486:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002488:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800248a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800248c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800248e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002492:	f005 fd05 	bl	8007ea0 <HAL_TIM_Base_Init>
 8002496:	b920      	cbnz	r0, 80024a2 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002498:	4620      	mov	r0, r4
 800249a:	f005 fc13 	bl	8007cc4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800249e:	b008      	add	sp, #32
 80024a0:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80024a2:	2001      	movs	r0, #1
 80024a4:	e7fb      	b.n	800249e <HAL_InitTick+0x5e>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	20002000 	.word	0x20002000
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	000f4240 	.word	0x000f4240

080024b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024b8:	4770      	bx	lr

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	e7fe      	b.n	80024ba <HardFault_Handler>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	e7fe      	b.n	80024bc <MemManage_Handler>

080024be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024be:	e7fe      	b.n	80024be <BusFault_Handler>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	e7fe      	b.n	80024c0 <UsageFault_Handler>

080024c2 <SVC_Handler>:
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:
 80024c8:	4770      	bx	lr
	...

080024cc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <DMA1_Channel5_IRQHandler+0x8>)
 80024ce:	f003 bf7d 	b.w	80063cc <HAL_DMA_IRQHandler>
 80024d2:	bf00      	nop
 80024d4:	20001a70 	.word	0x20001a70

080024d8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024d8:	4801      	ldr	r0, [pc, #4]	; (80024e0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80024da:	f004 be33 	b.w	8007144 <HAL_PCD_IRQHandler>
 80024de:	bf00      	nop
 80024e0:	20003d20 	.word	0x20003d20

080024e4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e4:	4801      	ldr	r0, [pc, #4]	; (80024ec <TIM1_UP_IRQHandler+0x8>)
 80024e6:	f005 bc01 	b.w	8007cec <HAL_TIM_IRQHandler>
 80024ea:	bf00      	nop
 80024ec:	20002000 	.word	0x20002000

080024f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024f2:	4803      	ldr	r0, [pc, #12]	; (8002500 <TIM2_IRQHandler+0x10>)
 80024f4:	f005 fbfa 	bl	8007cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 80024f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 80024fc:	f000 bc94 	b.w	8002e28 <led_update>
 8002500:	20001fc0 	.word	0x20001fc0
 8002504:	00000000 	.word	0x00000000

08002508 <TIM3_IRQHandler>:
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz.
	if (timer_index % 1 == 0){
		//code here runs on 200Hz, the data is updating at 100Hz.
		//Over-sampling ensures the data be updated at 100Hz.
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002508:	2300      	movs	r3, #0
{
 800250a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			  q[2] = ((double)quat[2]) / 1073741824.0;
			  q[3] = ((double)quat[3]) / 1073741824.0;


			  //32768 = 2.0g
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 800250e:	a7a2      	add	r7, pc, #648	; (adr r7, 8002798 <TIM3_IRQHandler+0x290>)
 8002510:	e9d7 6700 	ldrd	r6, r7, [r7]
			  q[0] = ((double)quat[0]) / 1073741824.0;
 8002514:	2400      	movs	r4, #0
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 8002516:	f04f 0800 	mov.w	r8, #0
{
 800251a:	b08e      	sub	sp, #56	; 0x38
			  q[0] = ((double)quat[0]) / 1073741824.0;
 800251c:	4da2      	ldr	r5, [pc, #648]	; (80027a8 <TIM3_IRQHandler+0x2a0>)
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 800251e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 80027e4 <TIM3_IRQHandler+0x2dc>
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002522:	9304      	str	r3, [sp, #16]
 8002524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002528:	9306      	str	r3, [sp, #24]
 800252a:	f8ad 301c 	strh.w	r3, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 800252e:	f10d 0309 	add.w	r3, sp, #9
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	f10d 030a 	add.w	r3, sp, #10
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	aa08      	add	r2, sp, #32
 800253c:	ab03      	add	r3, sp, #12
 800253e:	a906      	add	r1, sp, #24
 8002540:	a804      	add	r0, sp, #16
 8002542:	f7ff fc15 	bl	8001d70 <dmp_read_fifo>
		  if (status == 0){
 8002546:	2800      	cmp	r0, #0
 8002548:	f040 809f 	bne.w	800268a <TIM3_IRQHandler+0x182>
			  q[0] = ((double)quat[0]) / 1073741824.0;
 800254c:	9808      	ldr	r0, [sp, #32]
 800254e:	f7fd ff59 	bl	8000404 <__aeabi_i2d>
 8002552:	4622      	mov	r2, r4
 8002554:	462b      	mov	r3, r5
 8002556:	f7fd ffbf 	bl	80004d8 <__aeabi_dmul>
 800255a:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80027e8 <TIM3_IRQHandler+0x2e0>
 800255e:	e9ca 0100 	strd	r0, r1, [sl]
			  q[1] = ((double)quat[1]) / 1073741824.0;
 8002562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002564:	f7fd ff4e 	bl	8000404 <__aeabi_i2d>
 8002568:	4622      	mov	r2, r4
 800256a:	462b      	mov	r3, r5
 800256c:	f7fd ffb4 	bl	80004d8 <__aeabi_dmul>
 8002570:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  q[2] = ((double)quat[2]) / 1073741824.0;
 8002574:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002576:	f7fd ff45 	bl	8000404 <__aeabi_i2d>
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	f7fd ffab 	bl	80004d8 <__aeabi_dmul>
 8002582:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  q[3] = ((double)quat[3]) / 1073741824.0;
 8002586:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002588:	f7fd ff3c 	bl	8000404 <__aeabi_i2d>
 800258c:	4622      	mov	r2, r4
 800258e:	462b      	mov	r3, r5
 8002590:	f7fd ffa2 	bl	80004d8 <__aeabi_dmul>
 8002594:	e9ca 0106 	strd	r0, r1, [sl, #24]
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 8002598:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800259c:	f7fd ff32 	bl	8000404 <__aeabi_i2d>
 80025a0:	4632      	mov	r2, r6
 80025a2:	463b      	mov	r3, r7
 80025a4:	f7fd ff98 	bl	80004d8 <__aeabi_dmul>
 80025a8:	4642      	mov	r2, r8
 80025aa:	464b      	mov	r3, r9
 80025ac:	f7fd ff94 	bl	80004d8 <__aeabi_dmul>
 80025b0:	f8df a238 	ldr.w	sl, [pc, #568]	; 80027ec <TIM3_IRQHandler+0x2e4>
 80025b4:	e9ca 0100 	strd	r0, r1, [sl]
			  a[1] = ((double)accel[1]) * 9.80655 / 16384.0;
 80025b8:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 80025bc:	f7fd ff22 	bl	8000404 <__aeabi_i2d>
 80025c0:	4632      	mov	r2, r6
 80025c2:	463b      	mov	r3, r7
 80025c4:	f7fd ff88 	bl	80004d8 <__aeabi_dmul>
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	f7fd ff84 	bl	80004d8 <__aeabi_dmul>
 80025d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  a[2] = ((double)accel[2]) * 9.80655 / 16384.0;
 80025d4:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80025d8:	f7fd ff14 	bl	8000404 <__aeabi_i2d>
 80025dc:	4632      	mov	r2, r6
 80025de:	463b      	mov	r3, r7
 80025e0:	f7fd ff7a 	bl	80004d8 <__aeabi_dmul>
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	f7fd ff76 	bl	80004d8 <__aeabi_dmul>
 80025ec:	e9ca 0104 	strd	r0, r1, [sl, #16]

			  w[0] = ((double)gyro[0]) * M_PI * 2000.0 / 180.0 / 32768.0; //32768 = 2000DEG/s
 80025f0:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80025f4:	f7fd ff06 	bl	8000404 <__aeabi_i2d>
 80025f8:	a369      	add	r3, pc, #420	; (adr r3, 80027a0 <TIM3_IRQHandler+0x298>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd ff6b 	bl	80004d8 <__aeabi_dmul>
 8002602:	2200      	movs	r2, #0
 8002604:	4b69      	ldr	r3, [pc, #420]	; (80027ac <TIM3_IRQHandler+0x2a4>)
 8002606:	f7fd ff67 	bl	80004d8 <__aeabi_dmul>
 800260a:	2200      	movs	r2, #0
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <TIM3_IRQHandler+0x2a8>)
 800260e:	f7fe f88d 	bl	800072c <__aeabi_ddiv>
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002618:	f7fd ff5e 	bl	80004d8 <__aeabi_dmul>
 800261c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80027f0 <TIM3_IRQHandler+0x2e8>
 8002620:	e9ca 0100 	strd	r0, r1, [sl]
			  w[1] = ((double)gyro[1]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002624:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002628:	f7fd feec 	bl	8000404 <__aeabi_i2d>
 800262c:	a35c      	add	r3, pc, #368	; (adr r3, 80027a0 <TIM3_IRQHandler+0x298>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fd ff51 	bl	80004d8 <__aeabi_dmul>
 8002636:	2200      	movs	r2, #0
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <TIM3_IRQHandler+0x2a4>)
 800263a:	f7fd ff4d 	bl	80004d8 <__aeabi_dmul>
 800263e:	2200      	movs	r2, #0
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <TIM3_IRQHandler+0x2a8>)
 8002642:	f7fe f873 	bl	800072c <__aeabi_ddiv>
 8002646:	2200      	movs	r2, #0
 8002648:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800264c:	f7fd ff44 	bl	80004d8 <__aeabi_dmul>
 8002650:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002654:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002658:	f7fd fed4 	bl	8000404 <__aeabi_i2d>
 800265c:	a350      	add	r3, pc, #320	; (adr r3, 80027a0 <TIM3_IRQHandler+0x298>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd ff39 	bl	80004d8 <__aeabi_dmul>
 8002666:	2200      	movs	r2, #0
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <TIM3_IRQHandler+0x2a4>)
 800266a:	f7fd ff35 	bl	80004d8 <__aeabi_dmul>
 800266e:	2200      	movs	r2, #0
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <TIM3_IRQHandler+0x2a8>)
 8002672:	f7fe f85b 	bl	800072c <__aeabi_ddiv>
 8002676:	2200      	movs	r2, #0
 8002678:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800267c:	f7fd ff2c 	bl	80004d8 <__aeabi_dmul>

			  send_imu_data = 1;
 8002680:	2201      	movs	r2, #1
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <TIM3_IRQHandler+0x2ac>)
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002684:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  send_imu_data = 1;
 8002688:	601a      	str	r2, [r3, #0]
		  }
		  }while(more != 0 && initialize == 0);
 800268a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800268e:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <TIM3_IRQHandler+0x2b0>)
 8002690:	b11a      	cbz	r2, 800269a <TIM3_IRQHandler+0x192>
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2a00      	cmp	r2, #0
 8002696:	f43f af4a 	beq.w	800252e <TIM3_IRQHandler+0x26>
		  initialize = 1;
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 10 == 1){//avoid IMU update
 800269e:	220a      	movs	r2, #10
 80026a0:	4c46      	ldr	r4, [pc, #280]	; (80027bc <TIM3_IRQHandler+0x2b4>)
 80026a2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80026a6:	fb91 f3f2 	sdiv	r3, r1, r2
 80026aa:	fb02 1313 	mls	r3, r2, r3, r1
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d11d      	bne.n	80026f0 <TIM3_IRQHandler+0x1e8>

		if (ms5611_read_index == 0){
 80026b4:	4d42      	ldr	r5, [pc, #264]	; (80027c0 <TIM3_IRQHandler+0x2b8>)
 80026b6:	4e43      	ldr	r6, [pc, #268]	; (80027c4 <TIM3_IRQHandler+0x2bc>)
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	b953      	cbnz	r3, 80026d2 <TIM3_IRQHandler+0x1ca>
			ms5611_retrieve_temperature();
 80026bc:	f000 fc64 	bl	8002f88 <ms5611_retrieve_temperature>
			pt[1] = ms5611_get_temperature();
 80026c0:	f000 fcb4 	bl	800302c <ms5611_get_temperature>
 80026c4:	e9c6 0102 	strd	r0, r1, [r6, #8]
			ms5611_request_temperature();
			ms5611_read_index = 0;
		}else{
			ms5611_retrieve_pressure();
			pt[0] = ms5611_get_pressure();
			ms5611_request_pressure();
 80026c8:	f000 fc16 	bl	8002ef8 <ms5611_request_pressure>
			ms5611_read_index++;
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	e00a      	b.n	80026e8 <TIM3_IRQHandler+0x1e0>
		}else if (ms5611_read_index == TEMP_READ_INTERVAL - 1){
 80026d2:	2b09      	cmp	r3, #9
 80026d4:	d159      	bne.n	800278a <TIM3_IRQHandler+0x282>
			ms5611_retrieve_pressure();
 80026d6:	f000 fc25 	bl	8002f24 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 80026da:	f000 fce9 	bl	80030b0 <ms5611_get_pressure>
 80026de:	e9c6 0100 	strd	r0, r1, [r6]
			ms5611_request_temperature();
 80026e2:	f000 fc3b 	bl	8002f5c <ms5611_request_temperature>
			ms5611_read_index = 0;
 80026e6:	2300      	movs	r3, #0
		}
		send_pt_data = 1;
 80026e8:	2201      	movs	r2, #1
			ms5611_read_index++;
 80026ea:	602b      	str	r3, [r5, #0]
		send_pt_data = 1;
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <TIM3_IRQHandler+0x2c0>)
 80026ee:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 20 == 1){//avoid IMU update
 80026f0:	2314      	movs	r3, #20
 80026f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80026f6:	fb92 f5f3 	sdiv	r5, r2, r3
 80026fa:	fb03 2515 	mls	r5, r3, r5, r2
 80026fe:	b22d      	sxth	r5, r5
 8002700:	2d01      	cmp	r5, #1
 8002702:	d135      	bne.n	8002770 <TIM3_IRQHandler+0x268>
		//code here runs on 10Hz
		short data[3];


		HMC5883L_GetHeading(data);
 8002704:	a806      	add	r0, sp, #24
 8002706:	f000 f959 	bl	80029bc <HMC5883L_GetHeading>

		double raw_mag[3];
		raw_mag[0] = (double)data[0];
 800270a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800270e:	f7fd fe79 	bl	8000404 <__aeabi_i2d>
 8002712:	e9cd 0108 	strd	r0, r1, [sp, #32]
		raw_mag[1] = (double)data[2];//for HMC5883L, data is in X Z Y format
 8002716:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800271a:	f7fd fe73 	bl	8000404 <__aeabi_i2d>
 800271e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		raw_mag[2] = (double)data[1];//for HMC5883L, data is in X Z Y format
 8002722:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002726:	f7fd fe6d 	bl	8000404 <__aeabi_i2d>
 800272a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		calibrate_and_convert_mag_reading(raw_mag,m);
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <TIM3_IRQHandler+0x2c4>)
 8002730:	a808      	add	r0, sp, #32
 8002732:	f000 f975 	bl	8002a20 <calibrate_and_convert_mag_reading>
		send_mag_data = 1;
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <TIM3_IRQHandler+0x2c8>)
 8002738:	601d      	str	r5, [r3, #0]

		//poll DMA buffer
		GNSS_RX_Update();
 800273a:	f000 fa55 	bl	8002be8 <GNSS_RX_Update>

		//Record GPS data
		if (GNSS.GNGGA.status != 0){//data is valid
 800273e:	4925      	ldr	r1, [pc, #148]	; (80027d4 <TIM3_IRQHandler+0x2cc>)
 8002740:	f8d1 34a4 	ldr.w	r3, [r1, #1188]	; 0x4a4
 8002744:	b1a3      	cbz	r3, 8002770 <TIM3_IRQHandler+0x268>
			lla[0] = GNSS.GNGGA.lat;
 8002746:	4e24      	ldr	r6, [pc, #144]	; (80027d8 <TIM3_IRQHandler+0x2d0>)
 8002748:	f501 6390 	add.w	r3, r1, #1152	; 0x480
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	e9c6 2300 	strd	r2, r3, [r6]
			lla[1] = GNSS.GNGGA.lon;
 8002754:	f501 6393 	add.w	r3, r1, #1176	; 0x498
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
			lla[2] = GNSS.GNGGA.MSL_alt;
 800275c:	f8d1 04b0 	ldr.w	r0, [r1, #1200]	; 0x4b0
			lla[1] = GNSS.GNGGA.lon;
 8002760:	e9c6 2302 	strd	r2, r3, [r6, #8]
			lla[2] = GNSS.GNGGA.MSL_alt;
 8002764:	f7fd fe60 	bl	8000428 <__aeabi_f2d>
			send_gps_data = 1;
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <TIM3_IRQHandler+0x2d4>)
			lla[2] = GNSS.GNGGA.MSL_alt;
 800276a:	e9c6 0104 	strd	r0, r1, [r6, #16]
			send_gps_data = 1;
 800276e:	601d      	str	r5, [r3, #0]
		}
	}

	timer_index++;
 8002770:	8823      	ldrh	r3, [r4, #0]
	if (timer_index == 200){
		timer_index = 0;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002772:	481b      	ldr	r0, [pc, #108]	; (80027e0 <TIM3_IRQHandler+0x2d8>)
	timer_index++;
 8002774:	3301      	adds	r3, #1
 8002776:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002778:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 800277a:	bf08      	it	eq
 800277c:	2300      	moveq	r3, #0
 800277e:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002780:	f005 fab4 	bl	8007cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002784:	b00e      	add	sp, #56	; 0x38
 8002786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ms5611_retrieve_pressure();
 800278a:	f000 fbcb 	bl	8002f24 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 800278e:	f000 fc8f 	bl	80030b0 <ms5611_get_pressure>
 8002792:	e9c6 0100 	strd	r0, r1, [r6]
 8002796:	e797      	b.n	80026c8 <TIM3_IRQHandler+0x1c0>
 8002798:	1f212d77 	.word	0x1f212d77
 800279c:	40239cf4 	.word	0x40239cf4
 80027a0:	54442d18 	.word	0x54442d18
 80027a4:	400921fb 	.word	0x400921fb
 80027a8:	3e100000 	.word	0x3e100000
 80027ac:	409f4000 	.word	0x409f4000
 80027b0:	40668000 	.word	0x40668000
 80027b4:	2000043c 	.word	0x2000043c
 80027b8:	20000460 	.word	0x20000460
 80027bc:	20000468 	.word	0x20000468
 80027c0:	20000464 	.word	0x20000464
 80027c4:	20000408 	.word	0x20000408
 80027c8:	20000444 	.word	0x20000444
 80027cc:	200003f0 	.word	0x200003f0
 80027d0:	20000440 	.word	0x20000440
 80027d4:	20001af8 	.word	0x20001af8
 80027d8:	200003d8 	.word	0x200003d8
 80027dc:	20000438 	.word	0x20000438
 80027e0:	20001a2c 	.word	0x20001a2c
 80027e4:	3f100000 	.word	0x3f100000
 80027e8:	20000418 	.word	0x20000418
 80027ec:	200003c0 	.word	0x200003c0
 80027f0:	20000448 	.word	0x20000448

080027f4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <_kill>:

int _kill(int pid, int sig)
{
 80027f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027fa:	f007 f9d9 	bl	8009bb0 <__errno>
 80027fe:	2316      	movs	r3, #22
 8002800:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
 8002806:	bd08      	pop	{r3, pc}

08002808 <_exit>:

void _exit (int status)
{
 8002808:	b508      	push	{r3, lr}
	errno = EINVAL;
 800280a:	f007 f9d1 	bl	8009bb0 <__errno>
 800280e:	2316      	movs	r3, #22
 8002810:	6003      	str	r3, [r0, #0]
 8002812:	e7fe      	b.n	8002812 <_exit+0xa>

08002814 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002814:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <_sbrk+0x2c>)
{
 8002818:	4602      	mov	r2, r0
	if (heap_end == 0)
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	b909      	cbnz	r1, 8002822 <_sbrk+0xe>
		heap_end = &end;
 800281e:	4909      	ldr	r1, [pc, #36]	; (8002844 <_sbrk+0x30>)
 8002820:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002822:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002824:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002826:	4402      	add	r2, r0
 8002828:	428a      	cmp	r2, r1
 800282a:	d906      	bls.n	800283a <_sbrk+0x26>
	{
		errno = ENOMEM;
 800282c:	f007 f9c0 	bl	8009bb0 <__errno>
 8002830:	230c      	movs	r3, #12
 8002832:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002838:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800283a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800283c:	e7fc      	b.n	8002838 <_sbrk+0x24>
 800283e:	bf00      	nop
 8002840:	2000046c 	.word	0x2000046c
 8002844:	20003f90 	.word	0x20003f90

08002848 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <SystemInit+0x40>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <SystemInit+0x44>)
 8002856:	400a      	ands	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002864:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800286c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002874:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002876:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800287a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800287c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <SystemInit+0x48>)
 8002882:	609a      	str	r2, [r3, #8]
#endif 
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	f8ff0000 	.word	0xf8ff0000
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002894:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002896:	e003      	b.n	80028a0 <LoopCopyDataInit>

08002898 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800289a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800289c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800289e:	3104      	adds	r1, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028a8:	d3f6      	bcc.n	8002898 <CopyDataInit>
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028ac:	e002      	b.n	80028b4 <LoopFillZerobss>

080028ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028b0:	f842 3b04 	str.w	r3, [r2], #4

080028b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028b8:	d3f9      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028ba:	f7ff ffc5 	bl	8002848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f007 f97d 	bl	8009bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028c2:	f7ff fb47 	bl	8001f54 <main>
  bx lr
 80028c6:	4770      	bx	lr
  ldr r3, =_sidata
 80028c8:	0800d948 	.word	0x0800d948
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028d0:	2000038c 	.word	0x2000038c
  ldr r2, =_sbss
 80028d4:	20000390 	.word	0x20000390
  ldr r3, = _ebss
 80028d8:	20003f90 	.word	0x20003f90

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>
	...

080028e0 <HMC5883L_I2C_set>:
 * @param  None
 * @retval None
 */
void HMC5883L_I2C_set(I2C_HandleTypeDef* i2cx)
{
	hmc5883l_i2cx = i2cx;
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <HMC5883L_I2C_set+0x8>)
 80028e2:	6018      	str	r0, [r3, #0]
}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20001a6c 	.word	0x20001a6c

080028ec <HMC5883L_I2C_ByteWrite>:
 * @param  pBuffer : pointer to the buffer  containing the data to be written to the HMC5883L.
 * @param  WriteAddr : address of the register in which the data will be written
 * @retval None
 */
void HMC5883L_I2C_ByteWrite(uint8_t slaveAddr, uint8_t* pBuffer, uint8_t WriteAddr)
{
 80028ec:	b507      	push	{r0, r1, r2, lr}
	I2C_write(hmc5883l_i2cx, slaveAddr, WriteAddr,1, pBuffer);
 80028ee:	9100      	str	r1, [sp, #0]
 80028f0:	4601      	mov	r1, r0
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <HMC5883L_I2C_ByteWrite+0x18>)
 80028f4:	2301      	movs	r3, #1
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	f000 fa88 	bl	8002e0c <I2C_write>
}
 80028fc:	b003      	add	sp, #12
 80028fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002902:	bf00      	nop
 8002904:	20001a6c 	.word	0x20001a6c

08002908 <HMC5883L_SetGain>:
{
 8002908:	b507      	push	{r0, r1, r2, lr}
    uint8_t tmp = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 800290a:	0140      	lsls	r0, r0, #5
 800290c:	a902      	add	r1, sp, #8
 800290e:	f801 0d01 	strb.w	r0, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_CONFIG_B);
 8002912:	2201      	movs	r2, #1
 8002914:	201e      	movs	r0, #30
 8002916:	f7ff ffe9 	bl	80028ec <HMC5883L_I2C_ByteWrite>
}
 800291a:	b003      	add	sp, #12
 800291c:	f85d fb04 	ldr.w	pc, [sp], #4

08002920 <HMC5883L_SetMode>:
{
 8002920:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t tmp = HMC5883Lmode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 8002922:	4c06      	ldr	r4, [pc, #24]	; (800293c <HMC5883L_SetMode+0x1c>)
 8002924:	a902      	add	r1, sp, #8
 8002926:	7823      	ldrb	r3, [r4, #0]
{
 8002928:	4605      	mov	r5, r0
    uint8_t tmp = HMC5883Lmode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800292a:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_MODE);
 800292e:	2202      	movs	r2, #2
 8002930:	201e      	movs	r0, #30
 8002932:	f7ff ffdb 	bl	80028ec <HMC5883L_I2C_ByteWrite>
    HMC5883Lmode = newMode; // track to tell if we have to clear bit 7 after a read
 8002936:	7025      	strb	r5, [r4, #0]
}
 8002938:	b003      	add	sp, #12
 800293a:	bd30      	pop	{r4, r5, pc}
 800293c:	20002040 	.word	0x20002040

08002940 <HMC5883L_Initialize>:
    uint8_t tmp = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1))
 8002940:	2370      	movs	r3, #112	; 0x70
{
 8002942:	b507      	push	{r0, r1, r2, lr}
    uint8_t tmp = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1))
 8002944:	a902      	add	r1, sp, #8
 8002946:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_CONFIG_A);
 800294a:	2200      	movs	r2, #0
 800294c:	201e      	movs	r0, #30
 800294e:	f7ff ffcd 	bl	80028ec <HMC5883L_I2C_ByteWrite>
    HMC5883L_SetGain(HMC5883L_GAIN_1090);
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff ffd8 	bl	8002908 <HMC5883L_SetGain>
    HMC5883L_SetMode(HMC5883L_MODE_CONTINUOUS);
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff ffe1 	bl	8002920 <HMC5883L_SetMode>
}
 800295e:	b003      	add	sp, #12
 8002960:	f85d fb04 	ldr.w	pc, [sp], #4

08002964 <HMC5883L_I2C_BufferRead>:
 * @param  ReadAddr : HMC5883L's internal address to read from.
 * @param  NumByteToRead : number of bytes to read from the HMC5883L ( NumByteToRead >1  only for the Magnetometer reading).
 * @retval None
 */
void HMC5883L_I2C_BufferRead(uint8_t slaveAddr, uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002964:	b507      	push	{r0, r1, r2, lr}
	I2C_read(hmc5883l_i2cx, slaveAddr, ReadAddr, NumByteToRead, pBuffer);
 8002966:	9100      	str	r1, [sp, #0]
 8002968:	4601      	mov	r1, r0
 800296a:	4804      	ldr	r0, [pc, #16]	; (800297c <HMC5883L_I2C_BufferRead+0x18>)
 800296c:	b2db      	uxtb	r3, r3
 800296e:	6800      	ldr	r0, [r0, #0]
 8002970:	f000 fa3e 	bl	8002df0 <I2C_read>
}
 8002974:	b003      	add	sp, #12
 8002976:	f85d fb04 	ldr.w	pc, [sp], #4
 800297a:	bf00      	nop
 800297c:	20001a6c 	.word	0x20001a6c

08002980 <HMC5883L_TestConnection>:
{
 8002980:	b513      	push	{r0, r1, r4, lr}
    uint8_t tmp[3] = { 0 };
 8002982:	2400      	movs	r4, #0
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmp, HMC5883L_RA_ID_A, 3);
 8002984:	2303      	movs	r3, #3
 8002986:	220a      	movs	r2, #10
 8002988:	a901      	add	r1, sp, #4
 800298a:	201e      	movs	r0, #30
    uint8_t tmp[3] = { 0 };
 800298c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002990:	f88d 4006 	strb.w	r4, [sp, #6]
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmp, HMC5883L_RA_ID_A, 3);
 8002994:	f7ff ffe6 	bl	8002964 <HMC5883L_I2C_BufferRead>
    return (tmp[0] == 'H' && tmp[1] == '4' && tmp[2] == '3') ? 1 : 0;
 8002998:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800299c:	2b48      	cmp	r3, #72	; 0x48
 800299e:	d109      	bne.n	80029b4 <HMC5883L_TestConnection+0x34>
 80029a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029a4:	2b34      	cmp	r3, #52	; 0x34
 80029a6:	d105      	bne.n	80029b4 <HMC5883L_TestConnection+0x34>
 80029a8:	f89d 4006 	ldrb.w	r4, [sp, #6]
 80029ac:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
 80029b0:	425c      	negs	r4, r3
 80029b2:	415c      	adcs	r4, r3
}
 80029b4:	4620      	mov	r0, r4
 80029b6:	b002      	add	sp, #8
 80029b8:	bd10      	pop	{r4, pc}
	...

080029bc <HMC5883L_GetHeading>:
{
 80029bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tmpbuff[6] = { 0 };
 80029be:	2300      	movs	r3, #0
{
 80029c0:	4604      	mov	r4, r0
    uint8_t tmpbuff[6] = { 0 };
 80029c2:	9302      	str	r3, [sp, #8]
 80029c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmpbuff, HMC5883L_RA_DATAX_H, 6);
 80029c8:	2203      	movs	r2, #3
 80029ca:	2306      	movs	r3, #6
 80029cc:	a902      	add	r1, sp, #8
 80029ce:	201e      	movs	r0, #30
 80029d0:	f7ff ffc8 	bl	8002964 <HMC5883L_I2C_BufferRead>
    uint8_t tmp = HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 80029d4:	2301      	movs	r3, #1
 80029d6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (HMC5883Lmode == HMC5883L_MODE_SINGLE)
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HMC5883L_GetHeading+0x60>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HMC5883L_GetHeading+0x32>
        HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_MODE);
 80029e2:	2202      	movs	r2, #2
 80029e4:	f10d 0107 	add.w	r1, sp, #7
 80029e8:	201e      	movs	r0, #30
 80029ea:	f7ff ff7f 	bl	80028ec <HMC5883L_I2C_ByteWrite>
        Mag[i] = ((int16_t) ((uint16_t) tmpbuff[2 * i] << 8) + tmpbuff[2 * i + 1]);
 80029ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80029f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80029f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029fa:	8023      	strh	r3, [r4, #0]
 80029fc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002a00:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002a04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a08:	8063      	strh	r3, [r4, #2]
 8002a0a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002a0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002a12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a16:	80a3      	strh	r3, [r4, #4]
}
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd10      	pop	{r4, pc}
 8002a1c:	20002040 	.word	0x20002040

08002a20 <calibrate_and_convert_mag_reading>:

/**
 * Calibrate magnetic sensor reading and convert readings from magnetic sensor
 * frame to IMU(accel and gyroscope) frame.
 */
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 8002a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	double m_unbias[3]; //magnatic readings minus offset
	double m_mag[3];

	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002a24:	2200      	movs	r2, #0
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 8002a26:	b086      	sub	sp, #24
 8002a28:	468a      	mov	sl, r1
 8002a2a:	4604      	mov	r4, r0
	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002a2c:	c803      	ldmia	r0, {r0, r1}
 8002a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a32:	f7fd fb9b 	bl	800016c <__adddf3>
 8002a36:	2200      	movs	r2, #0
 8002a38:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <calibrate_and_convert_mag_reading+0x118>)
 8002a3a:	f7fd fb97 	bl	800016c <__adddf3>
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002a3e:	2200      	movs	r2, #0
	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002a40:	4680      	mov	r8, r0
 8002a42:	4689      	mov	r9, r1
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002a44:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <calibrate_and_convert_mag_reading+0x11c>)
 8002a4a:	f7fd fb8f 	bl	800016c <__adddf3>
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002a4e:	2200      	movs	r2, #0
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002a50:	4606      	mov	r6, r0
 8002a52:	460f      	mov	r7, r1
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002a54:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <calibrate_and_convert_mag_reading+0x120>)
 8002a5a:	f7fd fb85 	bl	8000168 <__aeabi_dsub>

	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002a5e:	2200      	movs	r2, #0
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002a60:	e9cd 0100 	strd	r0, r1, [sp]
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002a64:	2300      	movs	r3, #0
 8002a66:	4630      	mov	r0, r6
 8002a68:	4639      	mov	r1, r7
 8002a6a:	f7fd fd35 	bl	80004d8 <__aeabi_dmul>
 8002a6e:	2200      	movs	r2, #0
 8002a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f7fd fd2d 	bl	80004d8 <__aeabi_dmul>
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002a7e:	2200      	movs	r2, #0
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002a84:	2300      	movs	r3, #0
 8002a86:	4640      	mov	r0, r8
 8002a88:	4649      	mov	r1, r9
 8002a8a:	f7fd fd25 	bl	80004d8 <__aeabi_dmul>
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002a8e:	a324      	add	r3, pc, #144	; (adr r3, 8002b20 <calibrate_and_convert_mag_reading+0x100>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002a98:	4640      	mov	r0, r8
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	f7fd fd1c 	bl	80004d8 <__aeabi_dmul>
 8002aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aa4:	f7fd fb62 	bl	800016c <__adddf3>
 8002aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002aac:	f7fd fb5e 	bl	800016c <__adddf3>
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002ab0:	a31d      	add	r3, pc, #116	; (adr r3, 8002b28 <calibrate_and_convert_mag_reading+0x108>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
	 * 		+Y	-------------------------	-Y
	 * 		+Z	-------------------------	-Z
	 *
	 */

	m[0] = m_mag[0];
 8002ab6:	e9ca 0100 	strd	r0, r1, [sl]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002aba:	4630      	mov	r0, r6
 8002abc:	4639      	mov	r1, r7
 8002abe:	f7fd fd0b 	bl	80004d8 <__aeabi_dmul>
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	462b      	mov	r3, r5
 8002ac6:	f7fd fb51 	bl	800016c <__adddf3>
 8002aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ace:	f7fd fb4d 	bl	800016c <__adddf3>
	m[1] = -m_mag[1];
 8002ad2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002ad6:	f8ca 0008 	str.w	r0, [sl, #8]
 8002ada:	f8ca 100c 	str.w	r1, [sl, #12]
	m_mag[2] = MAG_TRANSF_31*m_unbias[0] + MAG_TRANSF_32*m_unbias[1] + MAG_TRANSF_33*m_unbias[2];
 8002ade:	4622      	mov	r2, r4
 8002ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	f7fd fb41 	bl	800016c <__adddf3>
 8002aea:	a311      	add	r3, pc, #68	; (adr r3, 8002b30 <calibrate_and_convert_mag_reading+0x110>)
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	4604      	mov	r4, r0
 8002af2:	460d      	mov	r5, r1
 8002af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002af8:	f7fd fcee 	bl	80004d8 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fb32 	bl	800016c <__adddf3>
	m[2] = -m_mag[2];
 8002b08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002b0c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002b10:	f8ca 1014 	str.w	r1, [sl, #20]
}
 8002b14:	b006      	add	sp, #24
 8002b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	40e53dbc 	.word	0x40e53dbc
 8002b24:	3f5af834 	.word	0x3f5af834
 8002b28:	1b31801b 	.word	0x1b31801b
 8002b2c:	3f5b3180 	.word	0x3f5b3180
 8002b30:	1d41d41d 	.word	0x1d41d41d
 8002b34:	3f5d41d4 	.word	0x3f5d41d4
 8002b38:	403b8000 	.word	0x403b8000
 8002b3c:	40600000 	.word	0x40600000
 8002b40:	40564000 	.word	0x40564000

08002b44 <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8002b44:	4b01      	ldr	r3, [pc, #4]	; (8002b4c <GNSS_set_huart+0x8>)
 8002b46:	6018      	str	r0, [r3, #0]
}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20001fbc 	.word	0x20001fbc

08002b50 <parse_GNGGA>:
/**
 * parse GNSS.GNGGA sentence into fields as strings.(char[] s)
 * @param msg GNSS.GNGGA message
 * @param fields GNSS.GNGGA message parser output
 */
void parse_GNGGA(unsigned char* msg, char fields[][MAX_FIELD_SIZE]){
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
	        fields[current_field][current_pos] = *ch_ptr;
	        current_pos++;
	        ch_ptr++;
	    }
        fields[current_field][current_pos]='\0';
 8002b52:	2600      	movs	r6, #0
    while (*ch_ptr != '\0'){
 8002b54:	7803      	ldrb	r3, [r0, #0]
 8002b56:	b19b      	cbz	r3, 8002b80 <parse_GNGGA+0x30>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	1e4d      	subs	r5, r1, #1
	        fields[current_field][current_pos] = *ch_ptr;
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	e001      	b.n	8002b64 <parse_GNGGA+0x14>
 8002b60:	f805 2f01 	strb.w	r2, [r5, #1]!
 8002b64:	4618      	mov	r0, r3
 8002b66:	1b1f      	subs	r7, r3, r4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8002b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b6c:	2a2c      	cmp	r2, #44	; 0x2c
 8002b6e:	d001      	beq.n	8002b74 <parse_GNGGA+0x24>
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	d1f5      	bne.n	8002b60 <parse_GNGGA+0x10>
        fields[current_field][current_pos]='\0';
 8002b74:	55ce      	strb	r6, [r1, r7]
	    current_field++;
	    if (*ch_ptr != '\0'){ // skip ',' when not at end of string
 8002b76:	7803      	ldrb	r3, [r0, #0]
 8002b78:	b103      	cbz	r3, 8002b7c <parse_GNGGA+0x2c>
	        ch_ptr++;
 8002b7a:	3001      	adds	r0, #1
 8002b7c:	310c      	adds	r1, #12
 8002b7e:	e7e9      	b.n	8002b54 <parse_GNGGA+0x4>
	    }
    }
}
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b84 <convert_raw_lat_lon>:
 * convert raw latitude and longitude, which have format dddmm.mmmm
 * into decimal.
 * @param raw raw latitude and longitude input
 * @return decimal latitude and longitude
 */
double convert_raw_lat_lon(double raw){
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002b86:	2200      	movs	r2, #0
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <convert_raw_lat_lon+0x44>)
double convert_raw_lat_lon(double raw){
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	460d      	mov	r5, r1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002b8e:	f006 fe99 	bl	80098c4 <fmod>
 8002b92:	4606      	mov	r6, r0
 8002b94:	460f      	mov	r7, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd ff4d 	bl	8000a38 <__aeabi_d2iz>
 8002b9e:	2364      	movs	r3, #100	; 0x64
 8002ba0:	fb90 f0f3 	sdiv	r0, r0, r3
 8002ba4:	f7fd fc2e 	bl	8000404 <__aeabi_i2d>
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <convert_raw_lat_lon+0x48>)
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	4639      	mov	r1, r7
 8002bb4:	f7fd fdba 	bl	800072c <__aeabi_ddiv>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fad4 	bl	800016c <__adddf3>
}
 8002bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40590000 	.word	0x40590000
 8002bcc:	404e0000 	.word	0x404e0000

08002bd0 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <GNSS_Init+0x10>)
 8002bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd6:	4903      	ldr	r1, [pc, #12]	; (8002be4 <GNSS_Init+0x14>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f005 baaf 	b.w	800813c <HAL_UART_Receive_DMA>
 8002bde:	bf00      	nop
 8002be0:	20001fbc 	.word	0x20001fbc
 8002be4:	20001af8 	.word	0x20001af8

08002be8 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	b0b3      	sub	sp, #204	; 0xcc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bee:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8002bf0:	4b77      	ldr	r3, [pc, #476]	; (8002dd0 <GNSS_RX_Update+0x1e8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685e      	ldr	r6, [r3, #4]
 8002bfa:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfe:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8002c00:	f04f 0800 	mov.w	r8, #0

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002c04:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002dec <GNSS_RX_Update+0x204>
			//field 14: checksum
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
			GNSS.GNGGA.checksum[1] = fields[14][2];

			//convert raw latitude and longitude to decimal format
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002c08:	f109 070c 	add.w	r7, r9, #12
	while (GNSS.start != i){
 8002c0c:	4c71      	ldr	r4, [pc, #452]	; (8002dd4 <GNSS_RX_Update+0x1ec>)
 8002c0e:	f04f 0b00 	mov.w	fp, #0
 8002c12:	4625      	mov	r5, r4
		GNSS.message_buffer[counter] = '\n';
 8002c14:	f04f 0a0a 	mov.w	sl, #10
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002c18:	f504 6280 	add.w	r2, r4, #1024	; 0x400
	while (GNSS.start != i){
 8002c1c:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 8002c20:	42b3      	cmp	r3, r6
 8002c22:	d00f      	beq.n	8002c44 <GNSS_RX_Update+0x5c>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8002c24:	5ce1      	ldrb	r1, [r4, r3]
 8002c26:	2924      	cmp	r1, #36	; 0x24
 8002c28:	d006      	beq.n	8002c38 <GNSS_RX_Update+0x50>
 8002c2a:	2100      	movs	r1, #0
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8002c2c:	5ce8      	ldrb	r0, [r5, r3]
 8002c2e:	2824      	cmp	r0, #36	; 0x24
 8002c30:	d10c      	bne.n	8002c4c <GNSS_RX_Update+0x64>
 8002c32:	b109      	cbz	r1, 8002c38 <GNSS_RX_Update+0x50>
 8002c34:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		if (GNSS.dma_buffer[GNSS.start] != '$'){break;}//if start not found, return.
 8002c38:	f8d5 1464 	ldr.w	r1, [r5, #1124]	; 0x464
 8002c3c:	5c6b      	ldrb	r3, [r5, r1]
 8002c3e:	2b24      	cmp	r3, #36	; 0x24
 8002c40:	f000 80b2 	beq.w	8002da8 <GNSS_RX_Update+0x1c0>
			new_information = 1;
		}
	}

	return new_information;
}
 8002c44:	4640      	mov	r0, r8
 8002c46:	b033      	add	sp, #204	; 0xcc
 8002c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4259      	negs	r1, r3
 8002c50:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c58:	bf58      	it	pl
 8002c5a:	424b      	negpl	r3, r1
 8002c5c:	42b3      	cmp	r3, r6
 8002c5e:	f04f 0101 	mov.w	r1, #1
 8002c62:	d1e3      	bne.n	8002c2c <GNSS_RX_Update+0x44>
 8002c64:	f8c5 6464 	str.w	r6, [r5, #1124]	; 0x464
 8002c68:	e7e6      	b.n	8002c38 <GNSS_RX_Update+0x50>
			if (GNSS.dma_buffer[end] == '\n'){
 8002c6a:	5ce8      	ldrb	r0, [r5, r3]
 8002c6c:	280a      	cmp	r0, #10
 8002c6e:	d009      	beq.n	8002c84 <GNSS_RX_Update+0x9c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002c70:	3301      	adds	r3, #1
 8002c72:	4258      	negs	r0, r3
 8002c74:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7c:	bf58      	it	pl
 8002c7e:	4243      	negpl	r3, r0
 8002c80:	42b3      	cmp	r3, r6
 8002c82:	d1f2      	bne.n	8002c6a <GNSS_RX_Update+0x82>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8002c84:	5ce8      	ldrb	r0, [r5, r3]
 8002c86:	280a      	cmp	r0, #10
 8002c88:	d1dc      	bne.n	8002c44 <GNSS_RX_Update+0x5c>
		int counter = 0;
 8002c8a:	f04f 0c00 	mov.w	ip, #0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002c8e:	428b      	cmp	r3, r1
 8002c90:	f10c 0001 	add.w	r0, ip, #1
 8002c94:	f040 808a 	bne.w	8002dac <GNSS_RX_Update+0x1c4>
		GNSS.message_buffer[counter] = '\n';
 8002c98:	44ac      	add	ip, r5
		GNSS.message_buffer[counter+1] = '\0';
 8002c9a:	4428      	add	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8002c9c:	f88c a400 	strb.w	sl, [ip, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002ca0:	494d      	ldr	r1, [pc, #308]	; (8002dd8 <GNSS_RX_Update+0x1f0>)
		GNSS.message_buffer[counter+1] = '\0';
 8002ca2:	f880 b400 	strb.w	fp, [r0, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	9203      	str	r2, [sp, #12]
		GNSS.start = end;
 8002caa:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002cae:	f007 f843 	bl	8009d38 <strstr>
		if (str != NULL){
 8002cb2:	9a03      	ldr	r2, [sp, #12]
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0b1      	beq.n	8002c1c <GNSS_RX_Update+0x34>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002cb8:	4d48      	ldr	r5, [pc, #288]	; (8002ddc <GNSS_RX_Update+0x1f4>)
			parse_GNGGA(GNSS.message_buffer,fields);
 8002cba:	a905      	add	r1, sp, #20
 8002cbc:	4848      	ldr	r0, [pc, #288]	; (8002de0 <GNSS_RX_Update+0x1f8>)
 8002cbe:	f7ff ff47 	bl	8002b50 <parse_GNGGA>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002cc2:	f1a5 0208 	sub.w	r2, r5, #8
 8002cc6:	1f2b      	subs	r3, r5, #4
 8002cc8:	4946      	ldr	r1, [pc, #280]	; (8002de4 <GNSS_RX_Update+0x1fc>)
 8002cca:	f8cd 9004 	str.w	r9, [sp, #4]
 8002cce:	9500      	str	r5, [sp, #0]
 8002cd0:	a808      	add	r0, sp, #32
 8002cd2:	f007 f805 	bl	8009ce0 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002cd6:	a80b      	add	r0, sp, #44	; 0x2c
 8002cd8:	f006 ff63 	bl	8009ba2 <atof>
 8002cdc:	f7fd fef4 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8002ce0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002ce4:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002ce8:	a811      	add	r0, sp, #68	; 0x44
			GNSS.GNGGA.North_South = fields[3][0];
 8002cea:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002cee:	f006 ff58 	bl	8009ba2 <atof>
			GNSS.GNGGA.East_West = fields[5][0];
 8002cf2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002cf6:	e9c5 0108 	strd	r0, r1, [r5, #32]
			GNSS.GNGGA.status = atoi(fields[6]);
 8002cfa:	a817      	add	r0, sp, #92	; 0x5c
			GNSS.GNGGA.East_West = fields[5][0];
 8002cfc:	f884 34a0 	strb.w	r3, [r4, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8002d00:	f006 ff52 	bl	8009ba8 <atoi>
 8002d04:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8002d08:	a81a      	add	r0, sp, #104	; 0x68
 8002d0a:	f006 ff4d 	bl	8009ba8 <atoi>
 8002d0e:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8002d12:	a81d      	add	r0, sp, #116	; 0x74
 8002d14:	f006 ff45 	bl	8009ba2 <atof>
 8002d18:	f7fd fed6 	bl	8000ac8 <__aeabi_d2f>
 8002d1c:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002d20:	a820      	add	r0, sp, #128	; 0x80
 8002d22:	f006 ff3e 	bl	8009ba2 <atof>
 8002d26:	f7fd fecf 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002d2a:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002d2e:	f8c4 04b0 	str.w	r0, [r4, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002d32:	a826      	add	r0, sp, #152	; 0x98
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002d34:	f884 34b4 	strb.w	r3, [r4, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002d38:	f006 ff33 	bl	8009ba2 <atof>
 8002d3c:	f7fd fec4 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002d40:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002d44:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002d48:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002d4c:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002d50:	f8d4 0478 	ldr.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002d54:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002d58:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
			new_information = 1;
 8002d5c:	f04f 0801 	mov.w	r8, #1
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002d60:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002d64:	f7fd fb60 	bl	8000428 <__aeabi_f2d>
 8002d68:	f7ff ff0c 	bl	8002b84 <convert_raw_lat_lon>
 8002d6c:	e9c7 0100 	strd	r0, r1, [r7]
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8002d70:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8002d74:	f7ff ff06 	bl	8002b84 <convert_raw_lat_lon>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002d78:	f894 3488 	ldrb.w	r3, [r4, #1160]	; 0x488
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	2b4e      	cmp	r3, #78	; 0x4e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4692      	mov	sl, r2
 8002d84:	bf18      	it	ne
 8002d86:	f103 4300 	addne.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	469b      	mov	fp, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002d8c:	f894 34a0 	ldrb.w	r3, [r4, #1184]	; 0x4a0
 8002d90:	4602      	mov	r2, r0
 8002d92:	2b45      	cmp	r3, #69	; 0x45
 8002d94:	bf18      	it	ne
 8002d96:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4912      	ldr	r1, [pc, #72]	; (8002de8 <GNSS_RX_Update+0x200>)
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002d9e:	e9c7 ab00 	strd	sl, fp, [r7]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002da2:	e9c1 2300 	strd	r2, r3, [r1]
 8002da6:	e731      	b.n	8002c0c <GNSS_RX_Update+0x24>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002da8:	460b      	mov	r3, r1
 8002daa:	e769      	b.n	8002c80 <GNSS_RX_Update+0x98>
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002dac:	f815 e001 	ldrb.w	lr, [r5, r1]
 8002db0:	eb05 0c00 	add.w	ip, r5, r0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002db4:	3101      	adds	r1, #1
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002db6:	f88c e3ff 	strb.w	lr, [ip, #1023]	; 0x3ff
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002dba:	f1d1 0c00 	rsbs	ip, r1, #0
 8002dbe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002dc2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002dc6:	bf58      	it	pl
 8002dc8:	f1cc 0100 	rsbpl	r1, ip, #0
 8002dcc:	4684      	mov	ip, r0
 8002dce:	e75e      	b.n	8002c8e <GNSS_RX_Update+0xa6>
 8002dd0:	20001fbc 	.word	0x20001fbc
 8002dd4:	20001af8 	.word	0x20001af8
 8002dd8:	0800d452 	.word	0x0800d452
 8002ddc:	20001f68 	.word	0x20001f68
 8002de0:	20001ef8 	.word	0x20001ef8
 8002de4:	0800d45a 	.word	0x0800d45a
 8002de8:	20001f90 	.word	0x20001f90
 8002dec:	20001f6c 	.word	0x20001f6c

08002df0 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8002df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8002df2:	2414      	movs	r4, #20
 8002df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002df8:	9b06      	ldr	r3, [sp, #24]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4099      	lsls	r1, r3
 8002e00:	f003 ff54 	bl	8006cac <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8002e04:	b100      	cbz	r0, 8002e08 <I2C_read+0x18>
		__NOP();
 8002e06:	bf00      	nop
	}
	return state;
}
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd10      	pop	{r4, pc}

08002e0c <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8002e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8002e0e:	2414      	movs	r4, #20
 8002e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e14:	9b06      	ldr	r3, [sp, #24]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4099      	lsls	r1, r3
 8002e1c:	f003 feb6 	bl	8006b8c <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8002e20:	b100      	cbz	r0, 8002e24 <I2C_write+0x18>
			__NOP();
 8002e22:	bf00      	nop
		}
	return state;
}
 8002e24:	b004      	add	sp, #16
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8002e28:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <led_update+0x2c>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <led_update+0x30>)
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	7823      	ldrb	r3, [r4, #0]
 8002e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e36:	411a      	asrs	r2, r3
 8002e38:	f1c2 0201 	rsb	r2, r2, #1
 8002e3c:	f002 0201 	and.w	r2, r2, #1
 8002e40:	4806      	ldr	r0, [pc, #24]	; (8002e5c <led_update+0x34>)
 8002e42:	f003 fc37 	bl	80066b4 <HAL_GPIO_WritePin>
	led_state++;
 8002e46:	7823      	ldrb	r3, [r4, #0]
 8002e48:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	7023      	strb	r3, [r4, #0]
}
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	bf00      	nop
 8002e54:	20000470 	.word	0x20000470
 8002e58:	20000471 	.word	0x20000471
 8002e5c:	40011000 	.word	0x40011000

08002e60 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8002e60:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <led_set+0x8>)
 8002e62:	7018      	strb	r0, [r3, #0]
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000470 	.word	0x20000470

08002e6c <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8002e6c:	4b01      	ldr	r3, [pc, #4]	; (8002e74 <mpu_set_i2c+0x8>)
 8002e6e:	6018      	str	r0, [r3, #0]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200019d4 	.word	0x200019d4

08002e78 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8002e78:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	460a      	mov	r2, r1
 8002e80:	4601      	mov	r1, r0
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <i2c_write+0x18>)
 8002e84:	6800      	ldr	r0, [r0, #0]
 8002e86:	f7ff ffc1 	bl	8002e0c <I2C_write>
}
 8002e8a:	b003      	add	sp, #12
 8002e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e90:	200019d4 	.word	0x200019d4

08002e94 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8002e94:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4803      	ldr	r0, [pc, #12]	; (8002eac <i2c_read+0x18>)
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f7ff ffa5 	bl	8002df0 <I2C_read>
}
 8002ea6:	b003      	add	sp, #12
 8002ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eac:	200019d4 	.word	0x200019d4

08002eb0 <delay_ms>:

void delay_ms(unsigned long num_ms){
	HAL_Delay(num_ms);
 8002eb0:	f003 b9b8 	b.w	8006224 <HAL_Delay>

08002eb4 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8002eb4:	4b01      	ldr	r3, [pc, #4]	; (8002ebc <ms5611_set_i2c+0x8>)
 8002eb6:	6018      	str	r0, [r3, #0]
}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20001fb8 	.word	0x20001fb8

08002ec0 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8002ec0:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8002ec2:	9200      	str	r2, [sp, #0]
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <ms5611_read_i2c+0x18>)
 8002ec8:	460b      	mov	r3, r1
 8002eca:	6800      	ldr	r0, [r0, #0]
 8002ecc:	2177      	movs	r1, #119	; 0x77
 8002ece:	f7ff ff8f 	bl	8002df0 <I2C_read>
}
 8002ed2:	b003      	add	sp, #12
 8002ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ed8:	20001fb8 	.word	0x20001fb8

08002edc <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 8002edc:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8002ede:	9200      	str	r2, [sp, #0]
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <ms5611_write_i2c+0x18>)
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2177      	movs	r1, #119	; 0x77
 8002eea:	f7ff ff8f 	bl	8002e0c <I2C_write>
}
 8002eee:	b003      	add	sp, #12
 8002ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ef4:	20001fb8 	.word	0x20001fb8

08002ef8 <ms5611_request_pressure>:

/**
 * Start ADC conversion of raw pressure in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_pressure(){
 8002ef8:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002efa:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <ms5611_request_pressure+0x28>)
 8002efe:	aa01      	add	r2, sp, #4
 8002f00:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f02:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002f06:	0040      	lsls	r0, r0, #1
 8002f08:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002f0c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f10:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002f14:	f7ff ffe2 	bl	8002edc <ms5611_write_i2c>
}
 8002f18:	b003      	add	sp, #12
 8002f1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f1e:	bf00      	nop
 8002f20:	2000003c 	.word	0x2000003c

08002f24 <ms5611_retrieve_pressure>:

/**
 * Read result of ADC conversion of raw pressure.
 */
void ms5611_retrieve_pressure(){
 8002f24:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f26:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002f28:	aa01      	add	r2, sp, #4
 8002f2a:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f2c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002f30:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002f34:	f7ff ffc4 	bl	8002ec0 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002f38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f46:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8002f4a:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8002f4c:	bf1c      	itt	ne
 8002f4e:	4a02      	ldrne	r2, [pc, #8]	; (8002f58 <ms5611_retrieve_pressure+0x34>)
 8002f50:	6013      	strne	r3, [r2, #0]
	}
}
 8002f52:	b003      	add	sp, #12
 8002f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f58:	20002044 	.word	0x20002044

08002f5c <ms5611_request_temperature>:

/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
 8002f5c:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f5e:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <ms5611_request_temperature+0x28>)
 8002f62:	aa01      	add	r2, sp, #4
 8002f64:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f66:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002f6a:	0040      	lsls	r0, r0, #1
 8002f6c:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8002f70:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f74:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002f78:	f7ff ffb0 	bl	8002edc <ms5611_write_i2c>
}
 8002f7c:	b003      	add	sp, #12
 8002f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f82:	bf00      	nop
 8002f84:	2000003c 	.word	0x2000003c

08002f88 <ms5611_retrieve_temperature>:

/**
 * Read result of ADC conversion of raw temperature.
 */
void ms5611_retrieve_temperature(){
 8002f88:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f8a:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002f8c:	aa01      	add	r2, sp, #4
 8002f8e:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f90:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002f94:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002f98:	f7ff ff92 	bl	8002ec0 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002f9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002fa0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002faa:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8002fae:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8002fb0:	bf1c      	itt	ne
 8002fb2:	4a02      	ldrne	r2, [pc, #8]	; (8002fbc <ms5611_retrieve_temperature+0x34>)
 8002fb4:	6013      	strne	r3, [r2, #0]
	}
}
 8002fb6:	b003      	add	sp, #12
 8002fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fbc:	20002054 	.word	0x20002054

08002fc0 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8002fc0:	b508      	push	{r3, lr}

	ms5611_request_pressure();
 8002fc2:	f7ff ff99 	bl	8002ef8 <ms5611_request_pressure>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8002fc6:	200c      	movs	r0, #12
 8002fc8:	f003 f92c 	bl	8006224 <HAL_Delay>
	ms5611_retrieve_pressure();

}
 8002fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_pressure();
 8002fd0:	f7ff bfa8 	b.w	8002f24 <ms5611_retrieve_pressure>

08002fd4 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8002fd4:	b508      	push	{r3, lr}

	ms5611_request_temperature();
 8002fd6:	f7ff ffc1 	bl	8002f5c <ms5611_request_temperature>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8002fda:	200c      	movs	r0, #12
 8002fdc:	f003 f922 	bl	8006224 <HAL_Delay>
	ms5611_retrieve_temperature();

}
 8002fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_temperature();
 8002fe4:	f7ff bfd0 	b.w	8002f88 <ms5611_retrieve_temperature>

08002fe8 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8002fe8:	b508      	push	{r3, lr}
	ms5611_update_temperature();
 8002fea:	f7ff fff3 	bl	8002fd4 <ms5611_update_temperature>
	ms5611_update_pressure();
}
 8002fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_update_pressure();
 8002ff2:	f7ff bfe5 	b.w	8002fc0 <ms5611_update_pressure>
	...

08002ff8 <ms5611_init>:
void ms5611_init(){
 8002ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ffa:	24a2      	movs	r4, #162	; 0xa2
 8002ffc:	4d0a      	ldr	r5, [pc, #40]	; (8003028 <ms5611_init+0x30>)
		ms5611_read_i2c(reg_addr,2,buffer);
 8002ffe:	aa01      	add	r2, sp, #4
 8003000:	4620      	mov	r0, r4
 8003002:	2102      	movs	r1, #2
 8003004:	f7ff ff5c 	bl	8002ec0 <ms5611_read_i2c>
 8003008:	3402      	adds	r4, #2
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800300a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800300e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003012:	b2e4      	uxtb	r4, r4
 8003014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003018:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800301a:	f825 3f02 	strh.w	r3, [r5, #2]!
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800301e:	d1ee      	bne.n	8002ffe <ms5611_init+0x6>
	ms5611_update();
 8003020:	f7ff ffe2 	bl	8002fe8 <ms5611_update>
}
 8003024:	b003      	add	sp, #12
 8003026:	bd30      	pop	{r4, r5, pc}
 8003028:	20002046 	.word	0x20002046

0800302c <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <ms5611_get_temperature+0x74>)
 8003030:	4e1c      	ldr	r6, [pc, #112]	; (80030a4 <ms5611_get_temperature+0x78>)
 8003032:	6810      	ldr	r0, [r2, #0]
 8003034:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003036:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 800303a:	f7fd f9d3 	bl	80003e4 <__aeabi_ui2d>
 800303e:	4604      	mov	r4, r0
 8003040:	460d      	mov	r5, r1
 8003042:	8970      	ldrh	r0, [r6, #10]
 8003044:	f7fd f9de 	bl	8000404 <__aeabi_i2d>
 8003048:	2200      	movs	r2, #0
 800304a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800304e:	f7fd fa43 	bl	80004d8 <__aeabi_dmul>
 8003052:	4622      	mov	r2, r4
 8003054:	462b      	mov	r3, r5
 8003056:	f7fd fa3f 	bl	80004d8 <__aeabi_dmul>
 800305a:	2200      	movs	r2, #0
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <ms5611_get_temperature+0x7c>)
 800305e:	f7fd f885 	bl	800016c <__adddf3>

	double T2=0;
	if (TEMP < 2000.0){
 8003062:	2200      	movs	r2, #0
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <ms5611_get_temperature+0x7c>)
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003066:	4606      	mov	r6, r0
 8003068:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 800306a:	f7fd fca7 	bl	80009bc <__aeabi_dcmplt>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 800306e:	2200      	movs	r2, #0
	if (TEMP < 2000.0){
 8003070:	b1a0      	cbz	r0, 800309c <ms5611_get_temperature+0x70>
		T2 = dT * (dT / (2147483648.0));
 8003072:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd fa2d 	bl	80004d8 <__aeabi_dmul>
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	f7fd fa29 	bl	80004d8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
	}

	TEMP = TEMP - T2;
 800308a:	4630      	mov	r0, r6
 800308c:	4639      	mov	r1, r7
 800308e:	f7fd f86b 	bl	8000168 <__aeabi_dsub>
	return TEMP / 100.0;
 8003092:	2200      	movs	r2, #0
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <ms5611_get_temperature+0x80>)
 8003096:	f7fd fb49 	bl	800072c <__aeabi_ddiv>
}
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	double T2=0;
 800309c:	2300      	movs	r3, #0
 800309e:	e7f4      	b.n	800308a <ms5611_get_temperature+0x5e>
 80030a0:	20002054 	.word	0x20002054
 80030a4:	20002048 	.word	0x20002048
 80030a8:	409f4000 	.word	0x409f4000
 80030ac:	40590000 	.word	0x40590000

080030b0 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80030b4:	4b70      	ldr	r3, [pc, #448]	; (8003278 <ms5611_get_pressure+0x1c8>)
 80030b6:	4e71      	ldr	r6, [pc, #452]	; (800327c <ms5611_get_pressure+0x1cc>)
 80030b8:	681f      	ldr	r7, [r3, #0]
 80030ba:	8930      	ldrh	r0, [r6, #8]
double ms5611_get_pressure(){
 80030bc:	b085      	sub	sp, #20
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80030be:	eba7 2700 	sub.w	r7, r7, r0, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80030c2:	8970      	ldrh	r0, [r6, #10]
 80030c4:	f7fd f99e 	bl	8000404 <__aeabi_i2d>
 80030c8:	2200      	movs	r2, #0
 80030ca:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80030ce:	f7fd fa03 	bl	80004d8 <__aeabi_dmul>
 80030d2:	4604      	mov	r4, r0
 80030d4:	4638      	mov	r0, r7
 80030d6:	460d      	mov	r5, r1
 80030d8:	f7fd f984 	bl	80003e4 <__aeabi_ui2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd f9f8 	bl	80004d8 <__aeabi_dmul>
 80030e8:	2200      	movs	r2, #0
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <ms5611_get_pressure+0x1d0>)
 80030ec:	f7fd f83e 	bl	800016c <__adddf3>
 80030f0:	4680      	mov	r8, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 80030f2:	88f0      	ldrh	r0, [r6, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80030f4:	4689      	mov	r9, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 80030f6:	4378      	muls	r0, r7
 80030f8:	09c0      	lsrs	r0, r0, #7
 80030fa:	f7fd f973 	bl	80003e4 <__aeabi_ui2d>
 80030fe:	4604      	mov	r4, r0
 8003100:	8870      	ldrh	r0, [r6, #2]
 8003102:	460d      	mov	r5, r1
 8003104:	f7fd f97e 	bl	8000404 <__aeabi_i2d>
 8003108:	2200      	movs	r2, #0
 800310a:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <ms5611_get_pressure+0x1d4>)
 800310c:	f7fd f9e4 	bl	80004d8 <__aeabi_dmul>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4620      	mov	r0, r4
 8003116:	4629      	mov	r1, r5
 8003118:	f7fd f828 	bl	800016c <__adddf3>
 800311c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8003120:	88b0      	ldrh	r0, [r6, #4]
 8003122:	4378      	muls	r0, r7
 8003124:	0a00      	lsrs	r0, r0, #8
 8003126:	f7fd f95d 	bl	80003e4 <__aeabi_ui2d>
 800312a:	4604      	mov	r4, r0
 800312c:	8830      	ldrh	r0, [r6, #0]
 800312e:	460d      	mov	r5, r1
 8003130:	f7fd f968 	bl	8000404 <__aeabi_i2d>
 8003134:	2200      	movs	r2, #0
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <ms5611_get_pressure+0x1d8>)
 8003138:	f7fd f9ce 	bl	80004d8 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f812 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <ms5611_get_pressure+0x1dc>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 800314a:	4682      	mov	sl, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 800314c:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 800314e:	468b      	mov	fp, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003150:	f7fd f948 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 8003154:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003156:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <ms5611_get_pressure+0x1d0>)
 800315c:	4640      	mov	r0, r8
 800315e:	4649      	mov	r1, r9
 8003160:	f7fd fc2c 	bl	80009bc <__aeabi_dcmplt>
 8003164:	2800      	cmp	r0, #0
 8003166:	d07a      	beq.n	800325e <ms5611_get_pressure+0x1ae>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648.0);
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003168:	2200      	movs	r2, #0
 800316a:	4b45      	ldr	r3, [pc, #276]	; (8003280 <ms5611_get_pressure+0x1d0>)
 800316c:	4640      	mov	r0, r8
 800316e:	4649      	mov	r1, r9
 8003170:	f7fc fffa 	bl	8000168 <__aeabi_dsub>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	2200      	movs	r2, #0
 800317a:	4b45      	ldr	r3, [pc, #276]	; (8003290 <ms5611_get_pressure+0x1e0>)
 800317c:	f7fd f9ac 	bl	80004d8 <__aeabi_dmul>
 8003180:	4622      	mov	r2, r4
 8003182:	462b      	mov	r3, r5
 8003184:	f7fd f9a8 	bl	80004d8 <__aeabi_dmul>
 8003188:	2200      	movs	r2, #0
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <ms5611_get_pressure+0x1e4>)
 800318c:	4604      	mov	r4, r0
 800318e:	460d      	mov	r5, r1
 8003190:	f7fd f9a2 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003194:	2200      	movs	r2, #0
 8003196:	4b40      	ldr	r3, [pc, #256]	; (8003298 <ms5611_get_pressure+0x1e8>)
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003198:	4606      	mov	r6, r0
 800319a:	460f      	mov	r7, r1
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f99a 	bl	80004d8 <__aeabi_dmul>

		if (TEMP < -1500){
 80031a4:	a330      	add	r3, pc, #192	; (adr r3, 8003268 <ms5611_get_pressure+0x1b8>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
		if (TEMP < -1500){
 80031ae:	4640      	mov	r0, r8
 80031b0:	4649      	mov	r1, r9
 80031b2:	f7fd fc03 	bl	80009bc <__aeabi_dcmplt>
 80031b6:	b350      	cbz	r0, 800320e <ms5611_get_pressure+0x15e>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80031b8:	a32d      	add	r3, pc, #180	; (adr r3, 8003270 <ms5611_get_pressure+0x1c0>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	4640      	mov	r0, r8
 80031c0:	4649      	mov	r1, r9
 80031c2:	f7fc ffd3 	bl	800016c <__adddf3>
 80031c6:	4680      	mov	r8, r0
 80031c8:	4689      	mov	r9, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <ms5611_get_pressure+0x1ec>)
 80031ce:	f7fd f983 	bl	80004d8 <__aeabi_dmul>
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	f7fd f97f 	bl	80004d8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4630      	mov	r0, r6
 80031e0:	4639      	mov	r1, r7
 80031e2:	f7fc ffc3 	bl	800016c <__adddf3>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 80031e6:	2200      	movs	r2, #0
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <ms5611_get_pressure+0x1e0>)
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80031ea:	4606      	mov	r6, r0
 80031ec:	460f      	mov	r7, r1
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 80031ee:	4640      	mov	r0, r8
 80031f0:	4649      	mov	r1, r9
 80031f2:	f7fd f971 	bl	80004d8 <__aeabi_dmul>
 80031f6:	4642      	mov	r2, r8
 80031f8:	464b      	mov	r3, r9
 80031fa:	f7fd f96d 	bl	80004d8 <__aeabi_dmul>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fc ffb1 	bl	800016c <__adddf3>
 800320a:	4604      	mov	r4, r0
 800320c:	460d      	mov	r5, r1
		}
	}

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	4650      	mov	r0, sl
 8003214:	4659      	mov	r1, fp
 8003216:	f7fc ffa7 	bl	8000168 <__aeabi_dsub>

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800321a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800321e:	f7fd f95b 	bl	80004d8 <__aeabi_dmul>
 8003222:	2200      	movs	r2, #0
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <ms5611_get_pressure+0x1f0>)
 8003226:	f7fd f957 	bl	80004d8 <__aeabi_dmul>
	OFF = OFF - OFF2;
 800322a:	4632      	mov	r2, r6
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
	OFF = OFF - OFF2;
 8003230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003234:	463b      	mov	r3, r7
 8003236:	f7fc ff97 	bl	8000168 <__aeabi_dsub>
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4620      	mov	r0, r4
 8003240:	4629      	mov	r1, r5
 8003242:	f7fc ff91 	bl	8000168 <__aeabi_dsub>
 8003246:	2200      	movs	r2, #0
 8003248:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800324c:	f7fd f944 	bl	80004d8 <__aeabi_dmul>
	return P / 100;//unit mbar
 8003250:	2200      	movs	r2, #0
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <ms5611_get_pressure+0x1f4>)
 8003254:	f7fd fa6a 	bl	800072c <__aeabi_ddiv>
}
 8003258:	b005      	add	sp, #20
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double T2=0, OFF2=0, SENS2=0;
 800325e:	2400      	movs	r4, #0
 8003260:	2500      	movs	r5, #0
 8003262:	4626      	mov	r6, r4
 8003264:	462f      	mov	r7, r5
 8003266:	e7d2      	b.n	800320e <ms5611_get_pressure+0x15e>
 8003268:	00000000 	.word	0x00000000
 800326c:	c0977000 	.word	0xc0977000
 8003270:	00000000 	.word	0x00000000
 8003274:	40977000 	.word	0x40977000
 8003278:	20002054 	.word	0x20002054
 800327c:	20002048 	.word	0x20002048
 8003280:	409f4000 	.word	0x409f4000
 8003284:	40f00000 	.word	0x40f00000
 8003288:	40e00000 	.word	0x40e00000
 800328c:	20002044 	.word	0x20002044
 8003290:	40140000 	.word	0x40140000
 8003294:	3fe00000 	.word	0x3fe00000
 8003298:	3fd00000 	.word	0x3fd00000
 800329c:	401c0000 	.word	0x401c0000
 80032a0:	3ea00000 	.word	0x3ea00000
 80032a4:	40590000 	.word	0x40590000

080032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  {
    const int32_t* val = (int32_t*) &f;
 80032b2:	463b      	mov	r3, r7
 80032b4:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	15db      	asrs	r3, r3, #23
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x26>
    {
      exp += 1023 - 127;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80032cc:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0159      	lsls	r1, r3, #5
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	b2ca      	uxtb	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	10d9      	asrs	r1, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	b2ca      	uxtb	r2, r1
 800330c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	12d9      	asrs	r1, r3, #11
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	b2ca      	uxtb	r2, r1
 800331a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	b25a      	sxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	14db      	asrs	r3, r3, #19
 8003326:	b25b      	sxtb	r3, r3
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	b25b      	sxtb	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b259      	sxtb	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	b2ca      	uxtb	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	111b      	asrs	r3, r3, #4
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1c59      	adds	r1, r3, #1
 8003346:	6079      	str	r1, [r7, #4]
 8003348:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fc54 	bl	8000c04 <__aeabi_fcmplt>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xcc>
    {
      *(outbuffer - 1) |= 0x80;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3b01      	subs	r3, #1
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8003374:	2308      	movs	r3, #8
  }
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3303      	adds	r3, #3
 8003390:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	f003 0207 	and.w	r2, r3, #7
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	00da      	lsls	r2, r3, #3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	02da      	lsls	r2, r3, #11
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	04db      	lsls	r3, r3, #19
 80033d6:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8003410:	05db      	lsls	r3, r3, #23
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	431a      	orrs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

    return 8;
 8003430:	2308      	movs	r3, #8
  }
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <_ZN3ros3MsgC1Ev>:
class Msg
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <_ZN3ros3MsgC1Ev+0x1c>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	0800d5ec 	.word	0x0800d5ec

0800347c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
      data()
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ffe8 	bl	800345c <_ZN3ros3MsgC1Ev>
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffd0 	bl	800343c <_ZN3ros4TimeC1Ev>
    {
    }
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	0800d5d4 	.word	0x0800d5d4

080034ac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	b2ca      	uxtb	r2, r1
 80034c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0a19      	lsrs	r1, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	b2ca      	uxtb	r2, r1
 80034d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0c19      	lsrs	r1, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3302      	adds	r3, #2
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	b2ca      	uxtb	r2, r1
 80034ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0e19      	lsrs	r1, r3, #24
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3303      	adds	r3, #3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	b2ca      	uxtb	r2, r1
 80034fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3304      	adds	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4413      	add	r3, r2
 800350e:	b2ca      	uxtb	r2, r1
 8003510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a19      	lsrs	r1, r3, #8
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	4413      	add	r3, r2
 8003520:	b2ca      	uxtb	r2, r1
 8003522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	0c19      	lsrs	r1, r3, #16
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3302      	adds	r3, #2
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	4413      	add	r3, r2
 8003532:	b2ca      	uxtb	r2, r1
 8003534:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0e19      	lsrs	r1, r3, #24
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3303      	adds	r3, #3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4413      	add	r3, r2
 8003544:	b2ca      	uxtb	r2, r1
 8003546:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
      return offset;
 800354e:	68fb      	ldr	r3, [r7, #12]
    }
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	440b      	add	r3, r1
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3302      	adds	r3, #2
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	440b      	add	r3, r1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3303      	adds	r3, #3
 80035aa:	6839      	ldr	r1, [r7, #0]
 80035ac:	440b      	add	r3, r1
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3304      	adds	r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	440b      	add	r3, r1
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3302      	adds	r3, #2
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	440b      	add	r3, r1
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3303      	adds	r3, #3
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	440b      	add	r3, r1
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3304      	adds	r3, #4
 8003612:	60fb      	str	r3, [r7, #12]
     return offset;
 8003614:	68fb      	ldr	r3, [r7, #12]
    }
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	0800c454 	.word	0x0800c454

08003638 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	0800c464 	.word	0x0800c464

08003650 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fefe 	bl	800345c <_ZN3ros3MsgC1Ev>
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	809a      	strh	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a07      	ldr	r2, [pc, #28]	; (8003694 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a06      	ldr	r2, [pc, #24]	; (8003694 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800367c:	611a      	str	r2, [r3, #16]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
    {
    }
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	0800d5bc 	.word	0x0800d5bc
 8003694:	0800c488 	.word	0x0800c488

08003698 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8899      	ldrh	r1, [r3, #4]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	b2ca      	uxtb	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	889b      	ldrh	r3, [r3, #4]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b299      	uxth	r1, r3
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	b2ca      	uxtb	r2, r1
 80036c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3302      	adds	r3, #2
 80036cc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc fd3c 	bl	8000150 <strlen>
 80036d8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fede 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3304      	adds	r3, #4
 80036ec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	18d0      	adds	r0, r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4619      	mov	r1, r3
 80036fc:	f006 fa91 	bl	8009c22 <memcpy>
      offset += length_topic_name;
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4618      	mov	r0, r3
 800370e:	f7fc fd1f 	bl	8000150 <strlen>
 8003712:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	6979      	ldr	r1, [r7, #20]
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fec1 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3304      	adds	r3, #4
 8003726:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	18d0      	adds	r0, r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4619      	mov	r1, r3
 8003736:	f006 fa74 	bl	8009c22 <memcpy>
      offset += length_message_type;
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4413      	add	r3, r2
 8003740:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fc fd02 	bl	8000150 <strlen>
 800374c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	4413      	add	r3, r2
 8003754:	6939      	ldr	r1, [r7, #16]
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fea4 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3304      	adds	r3, #4
 8003760:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	18d0      	adds	r0, r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4619      	mov	r1, r3
 8003770:	f006 fa57 	bl	8009c22 <memcpy>
      offset += length_md5sum;
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	b2ca      	uxtb	r2, r1
 800378c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0a19      	lsrs	r1, r3, #8
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3301      	adds	r3, #1
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	4413      	add	r3, r2
 800379a:	b2ca      	uxtb	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0c19      	lsrs	r1, r3, #16
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3302      	adds	r3, #2
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	4413      	add	r3, r2
 80037aa:	b2ca      	uxtb	r2, r1
 80037ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0e19      	lsrs	r1, r3, #24
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3303      	adds	r3, #3
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	b2ca      	uxtb	r2, r1
 80037bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	61fb      	str	r3, [r7, #28]
      return offset;
 80037c4:	69fb      	ldr	r3, [r7, #28]
    }
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08a      	sub	sp, #40	; 0x28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	889b      	ldrh	r3, [r3, #4]
 80037ee:	b21a      	sxth	r2, r3
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	3301      	adds	r3, #1
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	440b      	add	r3, r1
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b21b      	sxth	r3, r3
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3302      	adds	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	441a      	add	r2, r3
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fe5f 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	3304      	adds	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4413      	add	r3, r2
 8003830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003832:	429a      	cmp	r2, r3
 8003834:	d20c      	bcs.n	8003850 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	441a      	add	r2, r3
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	440b      	add	r3, r1
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	3301      	adds	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e7ec      	b.n	800382a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	4413      	add	r3, r2
 8003856:	3b01      	subs	r3, #1
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	4413      	add	r3, r2
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	3b01      	subs	r3, #1
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	441a      	add	r2, r3
 800387a:	f107 0310 	add.w	r3, r7, #16
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fe2c 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3304      	adds	r3, #4
 800388a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	6a3a      	ldr	r2, [r7, #32]
 8003898:	429a      	cmp	r2, r3
 800389a:	d20c      	bcs.n	80038b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	441a      	add	r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	440b      	add	r3, r1
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	3301      	adds	r3, #1
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	e7ec      	b.n	8003890 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	3b01      	subs	r3, #1
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	441a      	add	r2, r3
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fdf9 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	3304      	adds	r3, #4
 80038f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20c      	bcs.n	800391c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	441a      	add	r2, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3b01      	subs	r3, #1
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	440b      	add	r3, r1
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e7ec      	b.n	80038f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	3b01      	subs	r3, #1
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	4413      	add	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3b01      	subs	r3, #1
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	440a      	add	r2, r1
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	3301      	adds	r3, #1
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	440b      	add	r3, r1
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	3302      	adds	r3, #2
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	440b      	add	r3, r1
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	4313      	orrs	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3303      	adds	r3, #3
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	440b      	add	r3, r1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3304      	adds	r3, #4
 8003992:	61bb      	str	r3, [r7, #24]
     return offset;
 8003994:	69bb      	ldr	r3, [r7, #24]
    }
 8003996:	4618      	mov	r0, r3
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	0800c48c 	.word	0x0800c48c

080039b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	0800c4a8 	.word	0x0800c4a8

080039d0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fd3e 	bl	800345c <_ZN3ros3MsgC1Ev>
 80039e0:	4a06      	ldr	r2, [pc, #24]	; (80039fc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	711a      	strb	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80039f0:	609a      	str	r2, [r3, #8]
    {
    }
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	0800d5a4 	.word	0x0800d5a4
 8003a00:	0800c488 	.word	0x0800c488

08003a04 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	7912      	ldrb	r2, [r2, #4]
 8003a1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fb91 	bl	8000150 <strlen>
 8003a2e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4413      	add	r3, r2
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fd33 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3304      	adds	r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	18d0      	adds	r0, r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f006 f8e6 	bl	8009c22 <memcpy>
      offset += length_msg;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
    }
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3301      	adds	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fd22 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d20c      	bcs.n	8003aca <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	6839      	ldr	r1, [r7, #0]
 8003abc:	440b      	add	r3, r1
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e7ec      	b.n	8003aa4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
     return offset;
 8003aee:	693b      	ldr	r3, [r7, #16]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	0800c4cc 	.word	0x0800c4cc

08003b10 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	4b02      	ldr	r3, [pc, #8]	; (8003b24 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	0800c4e0 	.word	0x0800c4e0

08003b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fc92 	bl	800345c <_ZN3ros3MsgC1Ev>
 8003b38:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	619a      	str	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	61da      	str	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0800d58c 	.word	0x0800d58c

08003b70 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	b2ca      	uxtb	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0a19      	lsrs	r1, r3, #8
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	3301      	adds	r3, #1
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	b2ca      	uxtb	r2, r1
 8003b9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c19      	lsrs	r1, r3, #16
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2ca      	uxtb	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	0e19      	lsrs	r1, r3, #24
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	3303      	adds	r3, #3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b2ca      	uxtb	r2, r1
 8003bc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d22b      	bcs.n	8003c2e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003be4:	6939      	ldr	r1, [r7, #16]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	b2ca      	uxtb	r2, r1
 8003bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	0a19      	lsrs	r1, r3, #8
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b2ca      	uxtb	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	0c19      	lsrs	r1, r3, #16
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3302      	adds	r3, #2
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b2ca      	uxtb	r2, r1
 8003c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	0e19      	lsrs	r1, r3, #24
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3303      	adds	r3, #3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b2ca      	uxtb	r2, r1
 8003c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	3304      	adds	r3, #4
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	e7ce      	b.n	8003bcc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6919      	ldr	r1, [r3, #16]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	b2ca      	uxtb	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	0a19      	lsrs	r1, r3, #8
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	3301      	adds	r3, #1
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	4413      	add	r3, r2
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	0c19      	lsrs	r1, r3, #16
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	3302      	adds	r3, #2
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b2ca      	uxtb	r2, r1
 8003c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	0e19      	lsrs	r1, r3, #24
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	3303      	adds	r3, #3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b2ca      	uxtb	r2, r1
 8003c70:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	3304      	adds	r3, #4
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d22b      	bcs.n	8003cde <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	b2ca      	uxtb	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	0a19      	lsrs	r1, r3, #8
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	b2ca      	uxtb	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0c19      	lsrs	r1, r3, #16
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	b2ca      	uxtb	r2, r1
 8003cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	0e19      	lsrs	r1, r3, #24
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	3303      	adds	r3, #3
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	b2ca      	uxtb	r2, r1
 8003cce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	e7ce      	b.n	8003c7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69d9      	ldr	r1, [r3, #28]
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2ca      	uxtb	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	0a19      	lsrs	r1, r3, #8
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b2ca      	uxtb	r2, r1
 8003cfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	0c19      	lsrs	r1, r3, #16
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	3302      	adds	r3, #2
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b2ca      	uxtb	r2, r1
 8003d0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	0e19      	lsrs	r1, r3, #24
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	3303      	adds	r3, #3
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	b2ca      	uxtb	r2, r1
 8003d20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	3304      	adds	r3, #4
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d228      	bcs.n	8003d88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fa04 	bl	8000150 <strlen>
 8003d48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 fba6 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	18d0      	adds	r0, r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4619      	mov	r1, r3
 8003d74:	f005 ff55 	bl	8009c22 <memcpy>
      offset += length_stringsi;
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	e7d1      	b.n	8003d2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3728      	adds	r7, #40	; 0x28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08e      	sub	sp, #56	; 0x38
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	3301      	adds	r3, #1
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd0:	3303      	adds	r3, #3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	6a3a      	ldr	r2, [r7, #32]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	3304      	adds	r3, #4
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d90a      	bls.n	8003e06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f005 ff24 	bl	8009c48 <realloc>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a3a      	ldr	r2, [r7, #32]
 8003e0a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d236      	bcs.n	8003e88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e22:	6839      	ldr	r1, [r7, #0]
 8003e24:	440a      	add	r2, r1
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	3301      	adds	r3, #1
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	440b      	add	r3, r1
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	3302      	adds	r3, #2
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	440b      	add	r3, r1
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	3303      	adds	r3, #3
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	440b      	add	r3, r1
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	3208      	adds	r2, #8
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	3301      	adds	r3, #1
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	e7c3      	b.n	8003e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	3301      	adds	r3, #1
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	3303      	adds	r3, #3
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eca:	3304      	adds	r3, #4
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d90a      	bls.n	8003eee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f005 feb0 	bl	8009c48 <realloc>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d236      	bcs.n	8003f70 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	3301      	adds	r3, #1
 8003f1a:	6839      	ldr	r1, [r7, #0]
 8003f1c:	440b      	add	r3, r1
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	440b      	add	r3, r1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	440b      	add	r3, r1
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f52:	3304      	adds	r3, #4
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	3214      	adds	r2, #20
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	e7c3      	b.n	8003ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	3302      	adds	r3, #2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d90a      	bls.n	8003fd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f005 fe3c 	bl	8009c48 <realloc>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d23f      	bcs.n	800406a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	441a      	add	r2, r3
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fa71 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	3304      	adds	r3, #4
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	429a      	cmp	r2, r3
 8004010:	d20c      	bcs.n	800402c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	441a      	add	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	3b01      	subs	r3, #1
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	440b      	add	r3, r1
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	3301      	adds	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	e7ec      	b.n	8004006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800402c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	3b01      	subs	r3, #1
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	4413      	add	r3, r2
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800403c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403e:	3b01      	subs	r3, #1
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4413      	add	r3, r2
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	3220      	adds	r2, #32
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	3301      	adds	r3, #1
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
 8004068:	e7ba      	b.n	8003fe0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800406c:	4618      	mov	r0, r3
 800406e:	3738      	adds	r7, #56	; 0x38
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	0800d468 	.word	0x0800d468

0800408c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	0800c504 	.word	0x0800c504

080040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6891      	ldr	r1, [r2, #8]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4798      	blx	r3
 80040ee:	4603      	mov	r3, r0
  };
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
  }
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <_ZN13STM32HardwareC1Ev>:
class STM32Hardware
{

	public:

	STM32Hardware(){
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]

	}
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <_ZN13STM32Hardware4initEv>:

	void init(){
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]

	}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from received bytes
	// If no new data is available, returns -1
	int read(){
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
		return vcp_read();
 800413c:	f005 f9e4 	bl	8009508 <vcp_read>
 8004140:	4603      	mov	r3, r0
	}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length){
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
		vcp_write(data,length);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f005 f9e9 	bl	8009534 <vcp_write>
	}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void){
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();
 8004172:	f002 f851 	bl	8006218 <HAL_GetTick>
 8004176:	4603      	mov	r3, r0
	}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff f966 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004190:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3308      	adds	r3, #8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff f94b 	bl	800343c <_ZN3ros4TimeC1Ev>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80041aa:	611a      	str	r2, [r3, #16]
    {
    }
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	0800d560 	.word	0x0800d560
 80041bc:	0800c488 	.word	0x0800c488

080041c0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6859      	ldr	r1, [r3, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	b2ca      	uxtb	r2, r1
 80041da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0a19      	lsrs	r1, r3, #8
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	b2ca      	uxtb	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	0c19      	lsrs	r1, r3, #16
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3302      	adds	r3, #2
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	b2ca      	uxtb	r2, r1
 80041fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0e19      	lsrs	r1, r3, #24
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3303      	adds	r3, #3
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	b2ca      	uxtb	r2, r1
 8004210:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	b2ca      	uxtb	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a19      	lsrs	r1, r3, #8
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	4413      	add	r3, r2
 8004234:	b2ca      	uxtb	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	0c19      	lsrs	r1, r3, #16
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3302      	adds	r3, #2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4413      	add	r3, r2
 8004246:	b2ca      	uxtb	r2, r1
 8004248:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0e19      	lsrs	r1, r3, #24
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3303      	adds	r3, #3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	4413      	add	r3, r2
 8004258:	b2ca      	uxtb	r2, r1
 800425a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68d9      	ldr	r1, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	4413      	add	r3, r2
 800426c:	b2ca      	uxtb	r2, r1
 800426e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0a19      	lsrs	r1, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4413      	add	r3, r2
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	0c19      	lsrs	r1, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3302      	adds	r3, #2
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	4413      	add	r3, r2
 8004290:	b2ca      	uxtb	r2, r1
 8004292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0e19      	lsrs	r1, r3, #24
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3303      	adds	r3, #3
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	b2ca      	uxtb	r2, r1
 80042a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fb ff4d 	bl	8000150 <strlen>
 80042b6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f8ef 	bl	80054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	18d0      	adds	r0, r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4619      	mov	r1, r3
 80042da:	f005 fca2 	bl	8009c22 <memcpy>
      offset += length_frame_id;
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4413      	add	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80042e6:	68fb      	ldr	r3, [r7, #12]
    }
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3301      	adds	r3, #1
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	440b      	add	r3, r1
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3302      	adds	r3, #2
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	440b      	add	r3, r1
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3303      	adds	r3, #3
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	440b      	add	r3, r1
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3304      	adds	r3, #4
 8004352:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4413      	add	r3, r2
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	6839      	ldr	r1, [r7, #0]
 800436c:	440b      	add	r3, r1
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3302      	adds	r3, #2
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	440b      	add	r3, r1
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	041b      	lsls	r3, r3, #16
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	3303      	adds	r3, #3
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	440b      	add	r3, r1
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3304      	adds	r3, #4
 80043a8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	3301      	adds	r3, #1
 80043c0:	6839      	ldr	r1, [r7, #0]
 80043c2:	440b      	add	r3, r1
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3302      	adds	r3, #2
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	440b      	add	r3, r1
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3303      	adds	r3, #3
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	440b      	add	r3, r1
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	3304      	adds	r3, #4
 80043fe:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	441a      	add	r2, r3
 8004406:	f107 030c 	add.w	r3, r7, #12
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f866 	bl	80054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3304      	adds	r3, #4
 8004416:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	429a      	cmp	r2, r3
 8004426:	d20c      	bcs.n	8004442 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	441a      	add	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3b01      	subs	r3, #1
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	440b      	add	r3, r1
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e7ec      	b.n	800441c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	3b01      	subs	r3, #1
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4413      	add	r3, r2
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3b01      	subs	r3, #1
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
     return offset;
 8004466:	693b      	ldr	r3, [r7, #16]
    }
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	0800c528 	.word	0x0800c528

08004488 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	0800c538 	.word	0x0800c538

080044a0 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe ffd6 	bl	800345c <_ZN3ros3MsgC1Ev>
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    {
    }
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	0800d548 	.word	0x0800d548

080044e4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	441a      	add	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe fed2 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fe fec5 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe feb8 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7fe feab 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
      return offset;
 800455a:	68fb      	ldr	r3, [r7, #12]
    }
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7fe fefd 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3308      	adds	r3, #8
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7fe fef0 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800459e:	4602      	mov	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	441a      	add	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	330c      	adds	r3, #12
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f7fe fee3 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	441a      	add	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3310      	adds	r3, #16
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f7fe fed6 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80045da:	68fb      	ldr	r3, [r7, #12]
    }
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	4b02      	ldr	r3, [pc, #8]	; (80045f8 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	0800c55c 	.word	0x0800c55c

080045fc <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	4b02      	ldr	r3, [pc, #8]	; (8004610 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	0800c578 	.word	0x0800c578

08004614 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe ff1c 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004624:	4a09      	ldr	r2, [pc, #36]	; (800464c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
    {
    }
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	0800d530 	.word	0x0800d530

08004650 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	441a      	add	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe fe1c 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f7fe fe0f 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800468a:	4602      	mov	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	441a      	add	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f7fe fe02 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
      return offset;
 80046ac:	68fb      	ldr	r3, [r7, #12]
    }
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7fe fe54 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	441a      	add	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3308      	adds	r3, #8
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fe47 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	330c      	adds	r3, #12
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe fe3a 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
     return offset;
 8004712:	68fb      	ldr	r3, [r7, #12]
    }
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	4b02      	ldr	r3, [pc, #8]	; (8004730 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	0800c59c 	.word	0x0800c59c

08004734 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	0800c5b4 	.word	0x0800c5b4

0800474c <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fe80 	bl	800345c <_ZN3ros3MsgC1Ev>
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fd0a 	bl	8004180 <_ZN8std_msgs6HeaderC1Ev>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3318      	adds	r3, #24
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fe95 	bl	80044a0 <_ZN13geometry_msgs10QuaternionC1Ev>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800477c:	2308      	movs	r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	db05      	blt.n	800478e <_ZN11sensor_msgs3ImuC1Ev+0x42>
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	6011      	str	r1, [r2, #0]
 8004788:	3204      	adds	r2, #4
 800478a:	3b01      	subs	r3, #1
 800478c:	e7f7      	b.n	800477e <_ZN11sensor_msgs3ImuC1Ev+0x32>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3350      	adds	r3, #80	; 0x50
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff3e 	bl	8004614 <_ZN13geometry_msgs7Vector3C1Ev>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800479e:	2308      	movs	r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	db05      	blt.n	80047b0 <_ZN11sensor_msgs3ImuC1Ev+0x64>
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	3204      	adds	r2, #4
 80047ac:	3b01      	subs	r3, #1
 80047ae:	e7f7      	b.n	80047a0 <_ZN11sensor_msgs3ImuC1Ev+0x54>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3384      	adds	r3, #132	; 0x84
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff2d 	bl	8004614 <_ZN13geometry_msgs7Vector3C1Ev>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80047c0:	2308      	movs	r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	db05      	blt.n	80047d2 <_ZN11sensor_msgs3ImuC1Ev+0x86>
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	6011      	str	r1, [r2, #0]
 80047cc:	3204      	adds	r2, #4
 80047ce:	3b01      	subs	r3, #1
 80047d0:	e7f7      	b.n	80047c2 <_ZN11sensor_msgs3ImuC1Ev+0x76>
    {
    }
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	0800d518 	.word	0x0800d518

080047e0 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1d18      	adds	r0, r3, #4
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f7ff fce1 	bl	80041c0 <_ZNK8std_msgs6Header9serializeEPh>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f103 0018 	add.w	r0, r3, #24
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	4619      	mov	r1, r3
 8004814:	f7ff fe66 	bl	80044e4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b08      	cmp	r3, #8
 8004828:	d813      	bhi.n	8004852 <_ZNK11sensor_msgs3Imu9serializeEPh+0x72>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	18d0      	adds	r0, r2, r3
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	330a      	adds	r3, #10
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	f7fe fd33 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4413      	add	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e7e8      	b.n	8004824 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4413      	add	r3, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f7ff fef6 	bl	8004650 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4413      	add	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d812      	bhi.n	800489c <_ZNK11sensor_msgs3Imu9serializeEPh+0xbc>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	18d0      	adds	r0, r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	3218      	adds	r2, #24
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	4619      	mov	r1, r3
 8004888:	f7fe fd0e 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e7e9      	b.n	8004870 <_ZNK11sensor_msgs3Imu9serializeEPh+0x90>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff fed1 	bl	8004650 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4413      	add	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d813      	bhi.n	80048e8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x108>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	18d0      	adds	r0, r2, r3
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	3324      	adds	r3, #36	; 0x24
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4619      	mov	r1, r3
 80048d4:	f7fe fce8 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80048d8:	4602      	mov	r2, r0
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	e7e8      	b.n	80048ba <_ZNK11sensor_msgs3Imu9serializeEPh+0xda>
      }
      return offset;
 80048e8:	697b      	ldr	r3, [r7, #20]
    }
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	1d18      	adds	r0, r3, #4
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	4413      	add	r3, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7ff fcf0 	bl	80042f0 <_ZN8std_msgs6Header11deserializeEPh>
 8004910:	4602      	mov	r2, r0
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4413      	add	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0018 	add.w	r0, r3, #24
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	4413      	add	r3, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f7ff fe1d 	bl	8004564 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800492a:	4602      	mov	r2, r0
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d813      	bhi.n	8004964 <_ZN11sensor_msgs3Imu11deserializeEPh+0x72>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	18d0      	adds	r0, r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	330a      	adds	r3, #10
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4413      	add	r3, r2
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	f7fe fd15 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004954:	4602      	mov	r2, r0
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3301      	adds	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	e7e8      	b.n	8004936 <_ZN11sensor_msgs3Imu11deserializeEPh+0x44>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fea0 	bl	80046b6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d812      	bhi.n	80049ae <_ZN11sensor_msgs3Imu11deserializeEPh+0xbc>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	18d0      	adds	r0, r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3318      	adds	r3, #24
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	4619      	mov	r1, r3
 800499a:	f7fe fcf0 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e7e9      	b.n	8004982 <_ZN11sensor_msgs3Imu11deserializeEPh+0x90>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f7ff fe7b 	bl	80046b6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80049c0:	4602      	mov	r2, r0
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d813      	bhi.n	80049fa <_ZN11sensor_msgs3Imu11deserializeEPh+0x108>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	18d0      	adds	r0, r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe fcca 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	e7e8      	b.n	80049cc <_ZN11sensor_msgs3Imu11deserializeEPh+0xda>
      }
     return offset;
 80049fa:	697b      	ldr	r3, [r7, #20]
    }
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	4b02      	ldr	r3, [pc, #8]	; (8004a18 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	0800c5d8 	.word	0x0800c5d8

08004a1c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	0800c5e8 	.word	0x0800c5e8

08004a34 <_ZN11sensor_msgs13MagneticFieldC1Ev>:
      _header_type header;
      typedef geometry_msgs::Vector3 _magnetic_field_type;
      _magnetic_field_type magnetic_field;
      float magnetic_field_covariance[9];

    MagneticField():
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
      header(),
      magnetic_field(),
      magnetic_field_covariance()
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fd0c 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x4c>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fb96 	bl	8004180 <_ZN8std_msgs6HeaderC1Ev>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3318      	adds	r3, #24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fddb 	bl	8004614 <_ZN13geometry_msgs7Vector3C1Ev>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004a64:	2308      	movs	r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db05      	blt.n	8004a76 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x42>
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	6011      	str	r1, [r2, #0]
 8004a70:	3204      	adds	r2, #4
 8004a72:	3b01      	subs	r3, #1
 8004a74:	e7f7      	b.n	8004a66 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x32>
    {
    }
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	0800d500 	.word	0x0800d500

08004a84 <_ZNK11sensor_msgs13MagneticField9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1d18      	adds	r0, r3, #4
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7ff fb8f 	bl	80041c0 <_ZNK8std_msgs6Header9serializeEPh>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.serialize(outbuffer + offset);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0018 	add.w	r0, r3, #24
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7ff fdca 	bl	8004650 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d812      	bhi.n	8004af4 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x70>
      offset += serializeAvrFloat64(outbuffer + offset, this->magnetic_field_covariance[i]);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	18d0      	adds	r0, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	320a      	adds	r2, #10
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f7fe fbe2 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	e7e9      	b.n	8004ac8 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x44>
      }
      return offset;
 8004af4:	68fb      	ldr	r3, [r7, #12]
    }
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_ZN11sensor_msgs13MagneticField11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1d18      	adds	r0, r3, #4
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	f7ff fbea 	bl	80042f0 <_ZN8std_msgs6Header11deserializeEPh>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.deserialize(inbuffer + offset);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0018 	add.w	r0, r3, #24
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	4413      	add	r3, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7ff fdc0 	bl	80046b6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d812      	bhi.n	8004b6e <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x70>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->magnetic_field_covariance[i]));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	18d0      	adds	r0, r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	330a      	adds	r3, #10
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f7fe fc10 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	e7e9      	b.n	8004b42 <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x44>
      }
     return offset;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
    }
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZN11sensor_msgs13MagneticField7getTypeEv>:

    const char * getType(){ return "sensor_msgs/MagneticField"; };
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <_ZN11sensor_msgs13MagneticField7getTypeEv+0x14>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	0800c60c 	.word	0x0800c60c

08004b90 <_ZN11sensor_msgs13MagneticField6getMD5Ev>:
    const char * getMD5(){ return "2f3b0b43eed0c9501de0fa3ff89a45aa"; };
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <_ZN11sensor_msgs13MagneticField6getMD5Ev+0x14>)
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	0800c628 	.word	0x0800c628

08004ba8 <_ZN11sensor_msgs12NavSatStatusC1Ev>:
      enum { SERVICE_GPS =      1 };
      enum { SERVICE_GLONASS =  2 };
      enum { SERVICE_COMPASS =  4       };
      enum { SERVICE_GALILEO =  8 };

    NavSatStatus():
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
      status(0),
      service(0)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fc52 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <_ZN11sensor_msgs12NavSatStatusC1Ev+0x2c>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	711a      	strb	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	80da      	strh	r2, [r3, #6]
    {
    }
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	0800d4e8 	.word	0x0800d4e8

08004bd8 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.real = this->status;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004bec:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_status.base >> (8 * 0)) & 0xFF;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	7a3a      	ldrb	r2, [r7, #8]
 8004bf6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->status);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->service >> (8 * 0)) & 0xFF;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	88d9      	ldrh	r1, [r3, #6]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	b2ca      	uxtb	r2, r1
 8004c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->service >> (8 * 1)) & 0xFF;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	88db      	ldrh	r3, [r3, #6]
 8004c10:	0a1b      	lsrs	r3, r3, #8
 8004c12:	b299      	uxth	r1, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	b2ca      	uxtb	r2, r1
 8004c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->service);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3302      	adds	r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c26:	68fb      	ldr	r3, [r7, #12]
    }
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.base = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	723b      	strb	r3, [r7, #8]
      u_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c44:	7a3a      	ldrb	r2, [r7, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	440b      	add	r3, r1
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	723b      	strb	r3, [r7, #8]
      this->status = u_status.real;
 8004c54:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->status);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      this->service =  ((uint16_t) (*(inbuffer + offset)));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	80da      	strh	r2, [r3, #6]
      this->service |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	88db      	ldrh	r3, [r3, #6]
 8004c74:	b21a      	sxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	440b      	add	r3, r1
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	80da      	strh	r2, [r3, #6]
      offset += sizeof(this->service);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3302      	adds	r3, #2
 8004c92:	60fb      	str	r3, [r7, #12]
     return offset;
 8004c94:	68fb      	ldr	r3, [r7, #12]
    }
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <_ZN11sensor_msgs12NavSatStatus7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatStatus"; };
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	4b02      	ldr	r3, [pc, #8]	; (8004cb4 <_ZN11sensor_msgs12NavSatStatus7getTypeEv+0x14>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	0800c64c 	.word	0x0800c64c

08004cb8 <_ZN11sensor_msgs12NavSatStatus6getMD5Ev>:
    const char * getMD5(){ return "331cdbddfa4bc96ffc3b9ad98900a54c"; };
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <_ZN11sensor_msgs12NavSatStatus6getMD5Ev+0x14>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	0800c668 	.word	0x0800c668

08004cd0 <_ZN11sensor_msgs9NavSatFixC1Ev>:
      enum { COVARIANCE_TYPE_UNKNOWN =  0 };
      enum { COVARIANCE_TYPE_APPROXIMATED =  1 };
      enum { COVARIANCE_TYPE_DIAGONAL_KNOWN =  2 };
      enum { COVARIANCE_TYPE_KNOWN =  3 };

    NavSatFix():
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
      status(),
      latitude(0),
      longitude(0),
      altitude(0),
      position_covariance(),
      position_covariance_type(0)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fbbe 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004ce0:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <_ZN11sensor_msgs9NavSatFixC1Ev+0x6c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fa48 	bl	8004180 <_ZN8std_msgs6HeaderC1Ev>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff57 	bl	8004ba8 <_ZN11sensor_msgs12NavSatStatusC1Ev>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	621a      	str	r2, [r3, #32]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004d18:	2308      	movs	r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	db05      	blt.n	8004d2a <_ZN11sensor_msgs9NavSatFixC1Ev+0x5a>
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	6011      	str	r1, [r2, #0]
 8004d24:	3204      	adds	r2, #4
 8004d26:	3b01      	subs	r3, #1
 8004d28:	e7f7      	b.n	8004d1a <_ZN11sensor_msgs9NavSatFixC1Ev+0x4a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    {
    }
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800d4d0 	.word	0x0800d4d0

08004d40 <_ZNK11sensor_msgs9NavSatFix9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	1d18      	adds	r0, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	4413      	add	r3, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7ff fa31 	bl	80041c0 <_ZNK8std_msgs6Header9serializeEPh>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
      offset += this->status.serialize(outbuffer + offset);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f103 0018 	add.w	r0, r3, #24
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	f7ff ff30 	bl	8004bd8 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->latitude);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe fa8b 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->longitude);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe fa7e 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->altitude);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fe fa71 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d813      	bhi.n	8004e00 <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0xc0>
      offset += serializeAvrFloat64(outbuffer + offset, this->position_covariance[i]);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	18d0      	adds	r0, r2, r3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	330a      	adds	r3, #10
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4619      	mov	r1, r3
 8004dec:	f7fe fa5c 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	e7e8      	b.n	8004dd2 <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0x92>
      }
      *(outbuffer + offset + 0) = (this->position_covariance_type >> (8 * 0)) & 0xFF;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8004e0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_covariance_type);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
      return offset;
 8004e14:	68fb      	ldr	r3, [r7, #12]
    }
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZN11sensor_msgs9NavSatFix11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1d18      	adds	r0, r3, #4
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7ff fa5a 	bl	80042f0 <_ZN8std_msgs6Header11deserializeEPh>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
      offset += this->status.deserialize(inbuffer + offset);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 0018 	add.w	r0, r3, #24
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	f7ff feee 	bl	8004c32 <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->latitude));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	441a      	add	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3320      	adds	r3, #32
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7fe fa87 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->longitude));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3324      	adds	r3, #36	; 0x24
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f7fe fa7a 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->altitude));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3328      	adds	r3, #40	; 0x28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7fe fa6d 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d813      	bhi.n	8004ede <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0xc0>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->position_covariance[i]));
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	18d0      	adds	r0, r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	330a      	adds	r3, #10
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fe fa58 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	e7e8      	b.n	8004eb0 <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0x92>
      }
      this->position_covariance_type =  ((uint8_t) (*(inbuffer + offset)));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      offset += sizeof(this->position_covariance_type);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
     return offset;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
    }
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_ZN11sensor_msgs9NavSatFix7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatFix"; };
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <_ZN11sensor_msgs9NavSatFix7getTypeEv+0x14>)
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	0800c68c 	.word	0x0800c68c

08004f14 <_ZN11sensor_msgs9NavSatFix6getMD5Ev>:
    const char * getMD5(){ return "2d3a8cd499b9b4a0249fb98fd05cfa48"; };
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <_ZN11sensor_msgs9NavSatFix6getMD5Ev+0x14>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	0800c6a4 	.word	0x0800c6a4

08004f2c <_ZN11sensor_msgs13FluidPressureC1Ev>:
      typedef float _fluid_pressure_type;
      _fluid_pressure_type fluid_pressure;
      typedef float _variance_type;
      _variance_type variance;

    FluidPressure():
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
      header(),
      fluid_pressure(0),
      variance(0)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fa90 	bl	800345c <_ZN3ros3MsgC1Ev>
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <_ZN11sensor_msgs13FluidPressureC1Ev+0x3c>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f91a 	bl	8004180 <_ZN8std_msgs6HeaderC1Ev>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	61da      	str	r2, [r3, #28]
    {
    }
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	0800d4b8 	.word	0x0800d4b8

08004f6c <_ZNK11sensor_msgs13FluidPressure9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1d18      	adds	r0, r3, #4
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	4413      	add	r3, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7ff f91b 	bl	80041c0 <_ZNK8std_msgs6Header9serializeEPh>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->fluid_pressure);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fe f982 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fe f975 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
    }
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_ZN11sensor_msgs13FluidPressure11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1d18      	adds	r0, r3, #4
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f7ff f981 	bl	80042f0 <_ZN8std_msgs6Header11deserializeEPh>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->fluid_pressure));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	441a      	add	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3318      	adds	r3, #24
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7fe f9bb 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	331c      	adds	r3, #28
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7fe f9ae 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
     return offset;
 800502a:	68fb      	ldr	r3, [r7, #12]
    }
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_ZN11sensor_msgs13FluidPressure7getTypeEv>:

    const char * getType(){ return "sensor_msgs/FluidPressure"; };
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <_ZN11sensor_msgs13FluidPressure7getTypeEv+0x14>)
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	0800c6c8 	.word	0x0800c6c8

0800504c <_ZN11sensor_msgs13FluidPressure6getMD5Ev>:
    const char * getMD5(){ return "804dc5cea1c5306d6a2eb80b9833befe"; };
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <_ZN11sensor_msgs13FluidPressure6getMD5Ev+0x14>)
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	0800c6e4 	.word	0x0800c6e4

08005064 <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef float _temperature_type;
      _temperature_type temperature;
      typedef float _variance_type;
      _variance_type variance;

    Temperature():
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe f9f4 	bl	800345c <_ZN3ros3MsgC1Ev>
 8005074:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <_ZN11sensor_msgs11TemperatureC1Ev+0x3c>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff f87e 	bl	8004180 <_ZN8std_msgs6HeaderC1Ev>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	619a      	str	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	61da      	str	r2, [r3, #28]
    {
    }
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	0800d4a0 	.word	0x0800d4a0

080050a4 <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1d18      	adds	r0, r3, #4
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	4413      	add	r3, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	f7ff f87f 	bl	80041c0 <_ZNK8std_msgs6Header9serializeEPh>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f7fe f8e6 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f7fe f8d9 	bl	80032a8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80050f6:	4602      	mov	r2, r0
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80050fe:	68fb      	ldr	r3, [r7, #12]
    }
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1d18      	adds	r0, r3, #4
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4413      	add	r3, r2
 8005120:	4619      	mov	r1, r3
 8005122:	f7ff f8e5 	bl	80042f0 <_ZN8std_msgs6Header11deserializeEPh>
 8005126:	4602      	mov	r2, r0
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	441a      	add	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3318      	adds	r3, #24
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fe f91f 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	331c      	adds	r3, #28
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fe f912 	bl	800337e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800515a:	4602      	mov	r2, r0
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
     return offset;
 8005162:	68fb      	ldr	r3, [r7, #12]
    }
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <_ZN11sensor_msgs11Temperature7getTypeEv+0x14>)
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	0800c708 	.word	0x0800c708

08005184 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <_ZN11sensor_msgs11Temperature6getMD5Ev+0x14>)
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	0800c720 	.word	0x0800c720

0800519c <ros_init>:
ros::Publisher gps_pub("/fix",&fix_msg);
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
ros::Publisher temp_pub("/temperature",&temp_msg);


extern "C" void ros_init(){
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
	nh.initNode();
 80051a0:	480d      	ldr	r0, [pc, #52]	; (80051d8 <ros_init+0x3c>)
 80051a2:	f000 fa5d 	bl	8005660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>
	nh.advertise(imu_pub);
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <ros_init+0x40>)
 80051a8:	480b      	ldr	r0, [pc, #44]	; (80051d8 <ros_init+0x3c>)
 80051aa:	f000 fa7d 	bl	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(mag_pub);
 80051ae:	490c      	ldr	r1, [pc, #48]	; (80051e0 <ros_init+0x44>)
 80051b0:	4809      	ldr	r0, [pc, #36]	; (80051d8 <ros_init+0x3c>)
 80051b2:	f000 fa79 	bl	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(gps_pub);
 80051b6:	490b      	ldr	r1, [pc, #44]	; (80051e4 <ros_init+0x48>)
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <ros_init+0x3c>)
 80051ba:	f000 fa75 	bl	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(pressure_pub);
 80051be:	490a      	ldr	r1, [pc, #40]	; (80051e8 <ros_init+0x4c>)
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <ros_init+0x3c>)
 80051c2:	f000 fa71 	bl	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(temp_pub);
 80051c6:	4909      	ldr	r1, [pc, #36]	; (80051ec <ros_init+0x50>)
 80051c8:	4803      	ldr	r0, [pc, #12]	; (80051d8 <ros_init+0x3c>)
 80051ca:	f000 fa6d 	bl	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.spinOnce();
 80051ce:	4802      	ldr	r0, [pc, #8]	; (80051d8 <ros_init+0x3c>)
 80051d0:	f000 fa97 	bl	8005702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000060c 	.word	0x2000060c
 80051dc:	2000173c 	.word	0x2000173c
 80051e0:	20001750 	.word	0x20001750
 80051e4:	20001764 	.word	0x20001764
 80051e8:	20001778 	.word	0x20001778
 80051ec:	2000178c 	.word	0x2000178c

080051f0 <IMU_pub>:

extern "C" void IMU_pub(double a[3], double w[3], double q[4]){
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6178      	str	r0, [r7, #20]
 80051f8:	6139      	str	r1, [r7, #16]
 80051fa:	60fa      	str	r2, [r7, #12]

	imu_msg.header.stamp = nh.now();
 80051fc:	4c3d      	ldr	r4, [pc, #244]	; (80052f4 <IMU_pub+0x104>)
 80051fe:	463b      	mov	r3, r7
 8005200:	493d      	ldr	r1, [pc, #244]	; (80052f8 <IMU_pub+0x108>)
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fcbe 	bl	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005208:	f104 030c 	add.w	r3, r4, #12
 800520c:	463a      	mov	r2, r7
 800520e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005212:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id = "XIMU";
 8005216:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <IMU_pub+0x104>)
 8005218:	4a38      	ldr	r2, [pc, #224]	; (80052fc <IMU_pub+0x10c>)
 800521a:	615a      	str	r2, [r3, #20]

	imu_msg.linear_acceleration.x = a[0];
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	cb18      	ldmia	r3, {r3, r4}
 8005220:	4618      	mov	r0, r3
 8005222:	4621      	mov	r1, r4
 8005224:	f7fb fc50 	bl	8000ac8 <__aeabi_d2f>
 8005228:	4602      	mov	r2, r0
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <IMU_pub+0x104>)
 800522c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu_msg.linear_acceleration.y = a[1];
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3308      	adds	r3, #8
 8005234:	cb18      	ldmia	r3, {r3, r4}
 8005236:	4618      	mov	r0, r3
 8005238:	4621      	mov	r1, r4
 800523a:	f7fb fc45 	bl	8000ac8 <__aeabi_d2f>
 800523e:	4602      	mov	r2, r0
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <IMU_pub+0x104>)
 8005242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu_msg.linear_acceleration.z = a[2];
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3310      	adds	r3, #16
 800524a:	cb18      	ldmia	r3, {r3, r4}
 800524c:	4618      	mov	r0, r3
 800524e:	4621      	mov	r1, r4
 8005250:	f7fb fc3a 	bl	8000ac8 <__aeabi_d2f>
 8005254:	4602      	mov	r2, r0
 8005256:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <IMU_pub+0x104>)
 8005258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	imu_msg.angular_velocity.x = w[0];
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	cb18      	ldmia	r3, {r3, r4}
 8005260:	4618      	mov	r0, r3
 8005262:	4621      	mov	r1, r4
 8005264:	f7fb fc30 	bl	8000ac8 <__aeabi_d2f>
 8005268:	4602      	mov	r2, r0
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <IMU_pub+0x104>)
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
	imu_msg.angular_velocity.y = w[1];
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3308      	adds	r3, #8
 8005272:	cb18      	ldmia	r3, {r3, r4}
 8005274:	4618      	mov	r0, r3
 8005276:	4621      	mov	r1, r4
 8005278:	f7fb fc26 	bl	8000ac8 <__aeabi_d2f>
 800527c:	4602      	mov	r2, r0
 800527e:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <IMU_pub+0x104>)
 8005280:	659a      	str	r2, [r3, #88]	; 0x58
	imu_msg.angular_velocity.z = w[2];
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3310      	adds	r3, #16
 8005286:	cb18      	ldmia	r3, {r3, r4}
 8005288:	4618      	mov	r0, r3
 800528a:	4621      	mov	r1, r4
 800528c:	f7fb fc1c 	bl	8000ac8 <__aeabi_d2f>
 8005290:	4602      	mov	r2, r0
 8005292:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <IMU_pub+0x104>)
 8005294:	65da      	str	r2, [r3, #92]	; 0x5c

	imu_msg.orientation.w = q[0];
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	cb18      	ldmia	r3, {r3, r4}
 800529a:	4618      	mov	r0, r3
 800529c:	4621      	mov	r1, r4
 800529e:	f7fb fc13 	bl	8000ac8 <__aeabi_d2f>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <IMU_pub+0x104>)
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28
	imu_msg.orientation.x = q[1];
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3308      	adds	r3, #8
 80052ac:	cb18      	ldmia	r3, {r3, r4}
 80052ae:	4618      	mov	r0, r3
 80052b0:	4621      	mov	r1, r4
 80052b2:	f7fb fc09 	bl	8000ac8 <__aeabi_d2f>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <IMU_pub+0x104>)
 80052ba:	61da      	str	r2, [r3, #28]
	imu_msg.orientation.y = q[2];
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3310      	adds	r3, #16
 80052c0:	cb18      	ldmia	r3, {r3, r4}
 80052c2:	4618      	mov	r0, r3
 80052c4:	4621      	mov	r1, r4
 80052c6:	f7fb fbff 	bl	8000ac8 <__aeabi_d2f>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <IMU_pub+0x104>)
 80052ce:	621a      	str	r2, [r3, #32]
	imu_msg.orientation.z = q[3];
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3318      	adds	r3, #24
 80052d4:	cb18      	ldmia	r3, {r3, r4}
 80052d6:	4618      	mov	r0, r3
 80052d8:	4621      	mov	r1, r4
 80052da:	f7fb fbf5 	bl	8000ac8 <__aeabi_d2f>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <IMU_pub+0x104>)
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

	imu_pub.publish(&imu_msg);
 80052e4:	4903      	ldr	r1, [pc, #12]	; (80052f4 <IMU_pub+0x104>)
 80052e6:	4806      	ldr	r0, [pc, #24]	; (8005300 <IMU_pub+0x110>)
 80052e8:	f7fe fef2 	bl	80040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd90      	pop	{r4, r7, pc}
 80052f4:	20000474 	.word	0x20000474
 80052f8:	2000060c 	.word	0x2000060c
 80052fc:	0800c744 	.word	0x0800c744
 8005300:	2000173c 	.word	0x2000173c

08005304 <MAG_pub>:

extern "C" void MAG_pub(double m[3]){
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]

	mag_msg.header.stamp = nh.now();
 800530c:	4c1a      	ldr	r4, [pc, #104]	; (8005378 <MAG_pub+0x74>)
 800530e:	463b      	mov	r3, r7
 8005310:	491a      	ldr	r1, [pc, #104]	; (800537c <MAG_pub+0x78>)
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fc36 	bl	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005318:	f104 030c 	add.w	r3, r4, #12
 800531c:	463a      	mov	r2, r7
 800531e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005322:	e883 0003 	stmia.w	r3, {r0, r1}
	mag_msg.header.frame_id = "XIMU";
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <MAG_pub+0x74>)
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <MAG_pub+0x7c>)
 800532a:	615a      	str	r2, [r3, #20]

	mag_msg.magnetic_field.x = m[0];
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	cb18      	ldmia	r3, {r3, r4}
 8005330:	4618      	mov	r0, r3
 8005332:	4621      	mov	r1, r4
 8005334:	f7fb fbc8 	bl	8000ac8 <__aeabi_d2f>
 8005338:	4602      	mov	r2, r0
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <MAG_pub+0x74>)
 800533c:	61da      	str	r2, [r3, #28]
	mag_msg.magnetic_field.y = m[1];
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3308      	adds	r3, #8
 8005342:	cb18      	ldmia	r3, {r3, r4}
 8005344:	4618      	mov	r0, r3
 8005346:	4621      	mov	r1, r4
 8005348:	f7fb fbbe 	bl	8000ac8 <__aeabi_d2f>
 800534c:	4602      	mov	r2, r0
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <MAG_pub+0x74>)
 8005350:	621a      	str	r2, [r3, #32]
	mag_msg.magnetic_field.z = m[2];
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3310      	adds	r3, #16
 8005356:	cb18      	ldmia	r3, {r3, r4}
 8005358:	4618      	mov	r0, r3
 800535a:	4621      	mov	r1, r4
 800535c:	f7fb fbb4 	bl	8000ac8 <__aeabi_d2f>
 8005360:	4602      	mov	r2, r0
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <MAG_pub+0x74>)
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

	mag_pub.publish(&mag_msg);
 8005366:	4904      	ldr	r1, [pc, #16]	; (8005378 <MAG_pub+0x74>)
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <MAG_pub+0x80>)
 800536a:	f7fe feb1 	bl	80040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	bd90      	pop	{r4, r7, pc}
 8005376:	bf00      	nop
 8005378:	2000052c 	.word	0x2000052c
 800537c:	2000060c 	.word	0x2000060c
 8005380:	0800c744 	.word	0x0800c744
 8005384:	20001750 	.word	0x20001750

08005388 <GPS_pub>:

extern "C" void GPS_pub(double lla[3]){
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
	fix_msg.header.stamp = nh.now();
 8005390:	4c18      	ldr	r4, [pc, #96]	; (80053f4 <GPS_pub+0x6c>)
 8005392:	463b      	mov	r3, r7
 8005394:	4918      	ldr	r1, [pc, #96]	; (80053f8 <GPS_pub+0x70>)
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fbf4 	bl	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 800539c:	f104 030c 	add.w	r3, r4, #12
 80053a0:	463a      	mov	r2, r7
 80053a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053a6:	e883 0003 	stmia.w	r3, {r0, r1}

	fix_msg.latitude = lla[0];
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	cb18      	ldmia	r3, {r3, r4}
 80053ae:	4618      	mov	r0, r3
 80053b0:	4621      	mov	r1, r4
 80053b2:	f7fb fb89 	bl	8000ac8 <__aeabi_d2f>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <GPS_pub+0x6c>)
 80053ba:	621a      	str	r2, [r3, #32]
	fix_msg.longitude = lla[1];
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3308      	adds	r3, #8
 80053c0:	cb18      	ldmia	r3, {r3, r4}
 80053c2:	4618      	mov	r0, r3
 80053c4:	4621      	mov	r1, r4
 80053c6:	f7fb fb7f 	bl	8000ac8 <__aeabi_d2f>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <GPS_pub+0x6c>)
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
	fix_msg.altitude = lla[2];
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3310      	adds	r3, #16
 80053d4:	cb18      	ldmia	r3, {r3, r4}
 80053d6:	4618      	mov	r0, r3
 80053d8:	4621      	mov	r1, r4
 80053da:	f7fb fb75 	bl	8000ac8 <__aeabi_d2f>
 80053de:	4602      	mov	r2, r0
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <GPS_pub+0x6c>)
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28

	gps_pub.publish(&fix_msg);
 80053e4:	4903      	ldr	r1, [pc, #12]	; (80053f4 <GPS_pub+0x6c>)
 80053e6:	4805      	ldr	r0, [pc, #20]	; (80053fc <GPS_pub+0x74>)
 80053e8:	f7fe fe72 	bl	80040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	20000578 	.word	0x20000578
 80053f8:	2000060c 	.word	0x2000060c
 80053fc:	20001764 	.word	0x20001764

08005400 <PT_pub>:

extern "C" void PT_pub(double pt[2]){
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
	air_ps_msg.header.stamp = nh.now();
 8005408:	4c1c      	ldr	r4, [pc, #112]	; (800547c <PT_pub+0x7c>)
 800540a:	463b      	mov	r3, r7
 800540c:	491c      	ldr	r1, [pc, #112]	; (8005480 <PT_pub+0x80>)
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fbb8 	bl	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005414:	f104 030c 	add.w	r3, r4, #12
 8005418:	463a      	mov	r2, r7
 800541a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800541e:	e883 0003 	stmia.w	r3, {r0, r1}
	air_ps_msg.fluid_pressure = pt[0];
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	cb18      	ldmia	r3, {r3, r4}
 8005426:	4618      	mov	r0, r3
 8005428:	4621      	mov	r1, r4
 800542a:	f7fb fb4d 	bl	8000ac8 <__aeabi_d2f>
 800542e:	4602      	mov	r2, r0
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <PT_pub+0x7c>)
 8005432:	619a      	str	r2, [r3, #24]

	pressure_pub.publish(&air_ps_msg);
 8005434:	4911      	ldr	r1, [pc, #68]	; (800547c <PT_pub+0x7c>)
 8005436:	4813      	ldr	r0, [pc, #76]	; (8005484 <PT_pub+0x84>)
 8005438:	f7fe fe4a 	bl	80040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	temp_msg.header.stamp = nh.now();
 800543c:	4c12      	ldr	r4, [pc, #72]	; (8005488 <PT_pub+0x88>)
 800543e:	463b      	mov	r3, r7
 8005440:	490f      	ldr	r1, [pc, #60]	; (8005480 <PT_pub+0x80>)
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb9e 	bl	8005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005448:	f104 030c 	add.w	r3, r4, #12
 800544c:	463a      	mov	r2, r7
 800544e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005452:	e883 0003 	stmia.w	r3, {r0, r1}
	temp_msg.temperature = pt[1];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3308      	adds	r3, #8
 800545a:	cb18      	ldmia	r3, {r3, r4}
 800545c:	4618      	mov	r0, r3
 800545e:	4621      	mov	r1, r4
 8005460:	f7fb fb32 	bl	8000ac8 <__aeabi_d2f>
 8005464:	4602      	mov	r2, r0
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <PT_pub+0x88>)
 8005468:	619a      	str	r2, [r3, #24]

	temp_pub.publish(&temp_msg);
 800546a:	4907      	ldr	r1, [pc, #28]	; (8005488 <PT_pub+0x88>)
 800546c:	4807      	ldr	r0, [pc, #28]	; (800548c <PT_pub+0x8c>)
 800546e:	f7fe fe2f 	bl	80040d0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	bf00      	nop
 800547c:	200005cc 	.word	0x200005cc
 8005480:	2000060c 	.word	0x2000060c
 8005484:	20001778 	.word	0x20001778
 8005488:	200005ec 	.word	0x200005ec
 800548c:	2000178c 	.word	0x2000178c

08005490 <spinOnce>:

extern "C" void spinOnce(){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <spinOnce+0x10>)
 8005496:	f000 f934 	bl	8005702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000060c 	.word	0x2000060c

080054a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d80d      	bhi.n	80054d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	fa22 f103 	lsr.w	r1, r2, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	b2ca      	uxtb	r2, r1
 80054ca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e7ee      	b.n	80054b2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d811      	bhi.n	800551c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	4611      	mov	r1, r2
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	00d2      	lsls	r2, r2, #3
 800550a:	fa01 f202 	lsl.w	r2, r1, r2
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e7ea      	b.n	80054f2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
	...

08005528 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "stm32f1xx_hal.h"

namespace ros
{

class NodeHandleBase_
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	0800d578 	.word	0x0800d578

08005548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ffe8 	bl	8005528 <_ZN3ros15NodeHandleBase_C1Ev>
 8005558:	4a40      	ldr	r2, [pc, #256]	; (800565c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x114>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3304      	adds	r3, #4
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fdd3 	bl	800410e <_ZN13STM32HardwareC1Ev>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800556e:	3314      	adds	r3, #20
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800557a:	3308      	adds	r3, #8
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fad3 	bl	8003b28 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b18      	cmp	r3, #24
 800558a:	d80a      	bhi.n	80055a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5a>
      publishers[i] = 0;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005594:	2100      	movs	r1, #0
 8005596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	3301      	adds	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e7f1      	b.n	8005586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b18      	cmp	r3, #24
 80055aa:	d80b      	bhi.n	80055c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x7c>
      subscribers[i] = 0;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3301      	adds	r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e7f0      	b.n	80055a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ce:	d209      	bcs.n	80055e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x9c>
      message_in[i] = 0;
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	3318      	adds	r3, #24
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e7f1      	b.n	80055c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d20a      	bcs.n	8005606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xbe>
      message_out[i] = 0;
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4413      	add	r3, r2
 80055f6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3301      	adds	r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	e7f0      	b.n	80055e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800560c:	330c      	adds	r3, #12
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005618:	3314      	adds	r3, #20
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005624:	3318      	adds	r3, #24
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800563a:	330c      	adds	r3, #12
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005646:	3314      	adds	r3, #20
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	615a      	str	r2, [r3, #20]
  }
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	0800d48c 	.word	0x0800d48c

08005660 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fd58 	bl	8004122 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005682:	3304      	adds	r3, #4
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800568e:	330c      	adds	r3, #12
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800569a:	3308      	adds	r3, #8
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
  };
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b18      	cmp	r3, #24
 80056ba:	dc1c      	bgt.n	80056f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80056c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d110      	bne.n	80056ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	60da      	str	r2, [r3, #12]
        return true;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e004      	b.n	80056f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e7df      	b.n	80056b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80056f6:	2300      	movs	r3, #0
  }
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fd2b 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005714:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800571c:	331c      	adds	r3, #28
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005728:	4293      	cmp	r3, r2
 800572a:	d905      	bls.n	8005738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005732:	3314      	adds	r3, #20
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      if (c_time > last_msg_timeout_time)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	429a      	cmp	r2, r3
 8005750:	d904      	bls.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d013      	beq.n	800578c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fcfe 	bl	800416a <_ZN13STM32Hardware4timeEv>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf8c      	ite	hi
 800577c:	2301      	movhi	r3, #1
 800577e:	2300      	movls	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
          return SPIN_TIMEOUT;
 8005786:	f06f 0301 	mvn.w	r3, #1
 800578a:	e1f7      	b.n	8005b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      int data = hardware_.read();
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fccf 	bl	8004134 <_ZN13STM32Hardware4readEv>
 8005796:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f2c0 81d1 	blt.w	8005b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x440>
      checksum_ += data;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057a6:	3310      	adds	r3, #16
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057b4:	3310      	adds	r3, #16
 80057b6:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b07      	cmp	r3, #7
 80057c2:	d128      	bne.n	8005816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x114>
        message_in[index_++] = data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057ca:	330c      	adds	r3, #12
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	1c51      	adds	r1, r2, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057d6:	330c      	adds	r3, #12
 80057d8:	6019      	str	r1, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	b2d9      	uxtb	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	460a      	mov	r2, r1
 80057e4:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057ec:	3304      	adds	r3, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057f8:	3304      	adds	r3, #4
 80057fa:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005802:	3304      	adds	r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1a8      	bne.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005810:	2208      	movs	r2, #8
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e7a2      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d12e      	bne.n	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x17e>
        if (data == 0xff)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2bff      	cmp	r3, #255	; 0xff
 8005826:	d110      	bne.n	800584a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x148>
          mode_++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005838:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f103 0214 	add.w	r2, r3, #20
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e788      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe fc8b 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	bf8c      	ite	hi
 8005862:	2301      	movhi	r3, #1
 8005864:	2300      	movls	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	f43f af77 	beq.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          configured_ = false;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005874:	3314      	adds	r3, #20
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 800587a:	f06f 0301 	mvn.w	r3, #1
 800587e:	e17d      	b.n	8005b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d120      	bne.n	80058ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
        if (data == PROTOCOL_VER)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2bfe      	cmp	r3, #254	; 0xfe
 8005890:	d109      	bne.n	80058a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a4>
          mode_++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e75a      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058b6:	3314      	adds	r3, #20
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f43f af4b 	beq.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f996 	bl	8005bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 80058cc:	e746      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d11b      	bne.n	8005912 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x210>
        bytes_ = data;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058e0:	3304      	adds	r3, #4
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	601a      	str	r2, [r3, #0]
        index_ = 0;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ec:	330c      	adds	r3, #12
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
        mode_++;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005902:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800590a:	3310      	adds	r3, #16
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e724      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d116      	bne.n	800594c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x24a>
        bytes_ += data << 8;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005924:	3304      	adds	r3, #4
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005934:	3304      	adds	r3, #4
 8005936:	601a      	str	r2, [r3, #0]
        mode_++;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e707      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d11b      	bne.n	8005990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x28e>
        if ((checksum_ % 256) == 255)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800595e:	3310      	adds	r3, #16
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	425a      	negs	r2, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	bf58      	it	pl
 800596a:	4253      	negpl	r3, r2
 800596c:	2bff      	cmp	r3, #255	; 0xff
 800596e:	d109      	bne.n	8005984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
          mode_++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e6eb      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e6e5      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b05      	cmp	r3, #5
 800599a:	d115      	bne.n	80059c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c6>
        topic_ = data;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059a2:	3308      	adds	r3, #8
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	601a      	str	r2, [r3, #0]
        mode_++;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059b8:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059c0:	3310      	adds	r3, #16
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e6c9      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b06      	cmp	r3, #6
 80059d2:	d11f      	bne.n	8005a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ += data << 8;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059da:	3308      	adds	r3, #8
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	441a      	add	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059ea:	3308      	adds	r3, #8
 80059ec:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059f4:	2207      	movs	r2, #7
 80059f6:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059fe:	3304      	adds	r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f47f aeaa 	bne.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a0e:	2208      	movs	r2, #8
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e6a3      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	f47f ae9d 	bne.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a32:	3310      	adds	r3, #16
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	425a      	negs	r2, r3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	bf58      	it	pl
 8005a3e:	4253      	negpl	r3, r2
 8005a40:	2bff      	cmp	r3, #255	; 0xff
 8005a42:	f47f ae8b 	bne.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d114      	bne.n	8005a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x37c>
            requestSyncTime();
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8cf 	bl	8005bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8e9 	bl	8005c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a66:	3318      	adds	r3, #24
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a72:	331c      	adds	r3, #28
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	e07e      	b.n	8005b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
          else if (topic_ == TopicInfo::ID_TIME)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a84:	3308      	adds	r3, #8
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	d106      	bne.n	8005a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x398>
            syncTime(message_in);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3318      	adds	r3, #24
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9b6 	bl	8005e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8005a98:	e660      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b06      	cmp	r3, #6
 8005aa6:	d110      	bne.n	8005aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3c8>
            req_param_resp.deserialize(message_in);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005aae:	3308      	adds	r3, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	3218      	adds	r2, #24
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f96b 	bl	8003d92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e648      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b0b      	cmp	r3, #11
 8005ad6:	d106      	bne.n	8005ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3e4>
            configured_ = false;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ade:	3314      	adds	r3, #20
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e63a      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            if (subscribers[topic_ - 100])
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005aec:	3308      	adds	r3, #8
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3b64      	subs	r3, #100	; 0x64
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f43f ae2c 	beq.w	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
              subscribers[topic_ - 100]->callback(message_in);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3b64      	subs	r3, #100	; 0x64
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	6858      	ldr	r0, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b22:	3308      	adds	r3, #8
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b64      	subs	r3, #100	; 0x64
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	3218      	adds	r2, #24
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4798      	blx	r3
    while (true)
 8005b40:	e60c      	b.n	800575c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        break;
 8005b42:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b4a:	3314      	adds	r3, #20
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d013      	beq.n	8005b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b58:	3318      	adds	r3, #24
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d908      	bls.n	8005b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
      requestSyncTime();
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f845 	bl	8005bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b74:	3318      	adds	r3, #24
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8005b7a:	2300      	movs	r3, #0
  }
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fae9 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005b98:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fd fc4e 	bl	800343c <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	099a      	lsrs	r2, r3, #6
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	441a      	add	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x70>)
 8005bca:	fb02 f203 	mul.w	r2, r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fad0 	bl	8006184 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005be4:	bf00      	nop
  }
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	10624dd3 	.word	0x10624dd3
 8005bf4:	000f4240 	.word	0x000f4240

08005bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fc39 	bl	800347c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f107 020c 	add.w	r2, r7, #12
 8005c14:	210a      	movs	r1, #10
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4798      	blx	r3
    rt_time = hardware_.time();
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe faa3 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005c24:	4602      	mov	r2, r0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]
  }
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005c32:	b590      	push	{r4, r7, lr}
 8005c34:	b08b      	sub	sp, #44	; 0x2c
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fd fd06 	bl	8003650 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	2b18      	cmp	r3, #24
 8005c4c:	dc5e      	bgt.n	8005d0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d052      	beq.n	8005d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c74:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	4798      	blx	r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4798      	blx	r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cd8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681c      	ldr	r4, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fa03 	bl	80040f8 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	47a0      	blx	r4
        HAL_Delay(50);
 8005cfe:	2032      	movs	r0, #50	; 0x32
 8005d00:	f000 fa90 	bl	8006224 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	3301      	adds	r3, #1
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0a:	e79d      	b.n	8005c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	2b18      	cmp	r3, #24
 8005d14:	dc6b      	bgt.n	8005dee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05e      	beq.n	8005de6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4798      	blx	r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005da6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	6859      	ldr	r1, [r3, #4]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4798      	blx	r3
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	47a0      	blx	r4
        HAL_Delay(50);
 8005de0:	2032      	movs	r0, #50	; 0x32
 8005de2:	f000 fa1f 	bl	8006224 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
 8005dec:	e790      	b.n	8005d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005df4:	3314      	adds	r3, #20
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
  }
 8005dfa:	bf00      	nop
 8005dfc:	372c      	adds	r7, #44	; 0x2c
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}
	...

08005e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005e0e:	f107 0308 	add.w	r3, r7, #8
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fd fb32 	bl	800347c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe f9a4 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005e2c:	f107 0308 	add.w	r3, r7, #8
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fd fb91 	bl	800355a <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4915      	ldr	r1, [pc, #84]	; (8005e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005e3e:	fba1 1303 	umull	r1, r3, r1, r3
 8005e42:	099b      	lsrs	r3, r3, #6
 8005e44:	4413      	add	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005e48:	6939      	ldr	r1, [r7, #16]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e58:	fb00 f303 	mul.w	r3, r0, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	440b      	add	r3, r1
 8005e66:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005e68:	f107 0308 	add.w	r3, r7, #8
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f8a7 	bl	8005fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe f975 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005e88:	331c      	adds	r3, #28
 8005e8a:	601a      	str	r2, [r3, #0]
  }
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	10624dd3 	.word	0x10624dd3
 8005e98:	000f4240 	.word	0x000f4240

08005e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b63      	cmp	r3, #99	; 0x63
 8005eac:	dd0b      	ble.n	8005ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f083 0301 	eor.w	r3, r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e077      	b.n	8005fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8005ed2:	3207      	adds	r2, #7
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
 8005eda:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	22ff      	movs	r2, #255	; 0xff
 8005ee0:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	22fe      	movs	r2, #254	; 0xfe
 8005ee8:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	121b      	asrs	r3, r3, #8
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 281a 	ldrb.w	r2, [r3, #2074]	; 0x81a
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 381b 	ldrb.w	r3, [r3, #2075]	; 0x81b
 8005f10:	4413      	add	r3, r2
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	43db      	mvns	r3, r3
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	b21b      	sxth	r3, r3
 8005f2c:	121b      	asrs	r3, r3, #8
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f3a:	2305      	movs	r3, #5
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	3307      	adds	r3, #7
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	da0d      	bge.n	8005f64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e7ec      	b.n	8005f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3307      	adds	r3, #7
 8005f68:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	425a      	negs	r2, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	bf58      	it	pl
 8005f74:	4253      	negpl	r3, r2
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	1c59      	adds	r1, r3, #1
 8005f7c:	6179      	str	r1, [r7, #20]
 8005f7e:	43d2      	mvns	r2, r2
 8005f80:	b2d1      	uxtb	r1, r2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	460a      	mov	r2, r1
 8005f88:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f92:	dc0a      	bgt.n	8005faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f7fe f8d2 	bl	800414a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	e005      	b.n	8005fb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005faa:	4905      	ldr	r1, [pc, #20]	; (8005fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x124>)
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f847 	bl	8006040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	0800c74c 	.word	0x0800c74c

08005fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe f8c9 	bl	800416a <_ZN13STM32Hardware4timeEv>
 8005fd8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4914      	ldr	r1, [pc, #80]	; (8006034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 8005fe2:	fba1 1303 	umull	r1, r3, r1, r3
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 8005ff8:	fba3 0302 	umull	r0, r3, r3, r2
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006002:	fb00 f303 	mul.w	r3, r0, r3
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x74>)
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	1aca      	subs	r2, r1, r3
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x78>)
 8006012:	4413      	add	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f103 020c 	add.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3310      	adds	r3, #16
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 f8ad 	bl	8006184 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	10624dd3 	.word	0x10624dd3
 8006038:	000f4240 	.word	0x000f4240
 800603c:	3b9aca00 	.word	0x3b9aca00

08006040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	2103      	movs	r1, #3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f804 	bl	800605c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	460b      	mov	r3, r1
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800606a:	f107 0314 	add.w	r3, r7, #20
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd fcae 	bl	80039d0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f107 0214 	add.w	r2, r7, #20
 8006086:	2107      	movs	r1, #7
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	4798      	blx	r3
  }
 800608c:	bf00      	nop
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_Z41__static_initialization_and_destruction_0ii>:
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d134      	bne.n	800610e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d12f      	bne.n	800610e <_Z41__static_initialization_and_destruction_0ii+0x7a>
sensor_msgs::Imu imu_msg;
 80060ae:	481a      	ldr	r0, [pc, #104]	; (8006118 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060b0:	f7fe fb4c 	bl	800474c <_ZN11sensor_msgs3ImuC1Ev>
sensor_msgs::MagneticField mag_msg;
 80060b4:	4819      	ldr	r0, [pc, #100]	; (800611c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80060b6:	f7fe fcbd 	bl	8004a34 <_ZN11sensor_msgs13MagneticFieldC1Ev>
sensor_msgs::NavSatFix fix_msg;
 80060ba:	4819      	ldr	r0, [pc, #100]	; (8006120 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80060bc:	f7fe fe08 	bl	8004cd0 <_ZN11sensor_msgs9NavSatFixC1Ev>
sensor_msgs::FluidPressure air_ps_msg;
 80060c0:	4818      	ldr	r0, [pc, #96]	; (8006124 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80060c2:	f7fe ff33 	bl	8004f2c <_ZN11sensor_msgs13FluidPressureC1Ev>
sensor_msgs::Temperature temp_msg;
 80060c6:	4818      	ldr	r0, [pc, #96]	; (8006128 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80060c8:	f7fe ffcc 	bl	8005064 <_ZN11sensor_msgs11TemperatureC1Ev>
ros::NodeHandle nh;
 80060cc:	4817      	ldr	r0, [pc, #92]	; (800612c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80060ce:	f7ff fa3b 	bl	8005548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
ros::Publisher imu_pub("/imu",&imu_msg);
 80060d2:	2300      	movs	r3, #0
 80060d4:	4a10      	ldr	r2, [pc, #64]	; (8006118 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060d6:	4916      	ldr	r1, [pc, #88]	; (8006130 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80060d8:	4816      	ldr	r0, [pc, #88]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80060da:	f7fd ffe3 	bl	80040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher mag_pub("/mag",&mag_msg);
 80060de:	2300      	movs	r3, #0
 80060e0:	4a0e      	ldr	r2, [pc, #56]	; (800611c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80060e2:	4915      	ldr	r1, [pc, #84]	; (8006138 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80060e4:	4815      	ldr	r0, [pc, #84]	; (800613c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80060e6:	f7fd ffdd 	bl	80040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gps_pub("/fix",&fix_msg);
 80060ea:	2300      	movs	r3, #0
 80060ec:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80060ee:	4914      	ldr	r1, [pc, #80]	; (8006140 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80060f0:	4814      	ldr	r0, [pc, #80]	; (8006144 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80060f2:	f7fd ffd7 	bl	80040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
 80060f6:	2300      	movs	r3, #0
 80060f8:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80060fa:	4913      	ldr	r1, [pc, #76]	; (8006148 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80060fc:	4813      	ldr	r0, [pc, #76]	; (800614c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80060fe:	f7fd ffd1 	bl	80040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher temp_pub("/temperature",&temp_msg);
 8006102:	2300      	movs	r3, #0
 8006104:	4a08      	ldr	r2, [pc, #32]	; (8006128 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006106:	4912      	ldr	r1, [pc, #72]	; (8006150 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8006108:	4812      	ldr	r0, [pc, #72]	; (8006154 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800610a:	f7fd ffcb 	bl	80040a4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000474 	.word	0x20000474
 800611c:	2000052c 	.word	0x2000052c
 8006120:	20000578 	.word	0x20000578
 8006124:	200005cc 	.word	0x200005cc
 8006128:	200005ec 	.word	0x200005ec
 800612c:	2000060c 	.word	0x2000060c
 8006130:	0800c788 	.word	0x0800c788
 8006134:	2000173c 	.word	0x2000173c
 8006138:	0800c790 	.word	0x0800c790
 800613c:	20001750 	.word	0x20001750
 8006140:	0800c798 	.word	0x0800c798
 8006144:	20001764 	.word	0x20001764
 8006148:	0800c7a0 	.word	0x0800c7a0
 800614c:	20001778 	.word	0x20001778
 8006150:	0800c7b0 	.word	0x0800c7b0
 8006154:	2000178c 	.word	0x2000178c

08006158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected()
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    return configured_;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8006166:	3314      	adds	r3, #20
 8006168:	781b      	ldrb	r3, [r3, #0]
  };
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <_GLOBAL__sub_I_imu_msg>:
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
 8006178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800617c:	2001      	movs	r0, #1
 800617e:	f7ff ff89 	bl	8006094 <_Z41__static_initialization_and_destruction_0ii>
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	0a5a      	lsrs	r2, r3, #9
 8006194:	490f      	ldr	r1, [pc, #60]	; (80061d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006196:	fba1 1202 	umull	r1, r2, r1, r2
 800619a:	09d2      	lsrs	r2, r2, #7
 800619c:	490e      	ldr	r1, [pc, #56]	; (80061d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800619e:	fb01 f202 	mul.w	r2, r1, r2
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	0a5b      	lsrs	r3, r3, #9
 80061ac:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	441a      	add	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	00044b83 	.word	0x00044b83
 80061d8:	3b9aca00 	.word	0x3b9aca00

080061dc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061dc:	4a07      	ldr	r2, [pc, #28]	; (80061fc <HAL_Init+0x20>)
{
 80061de:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061e0:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061e2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061e4:	f043 0310 	orr.w	r3, r3, #16
 80061e8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061ea:	f000 f82d 	bl	8006248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061ee:	2000      	movs	r0, #0
 80061f0:	f7fc f926 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061f4:	f7fc f844 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80061f8:	2000      	movs	r0, #0
 80061fa:	bd08      	pop	{r3, pc}
 80061fc:	40022000 	.word	0x40022000

08006200 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006200:	4a03      	ldr	r2, [pc, #12]	; (8006210 <HAL_IncTick+0x10>)
 8006202:	4b04      	ldr	r3, [pc, #16]	; (8006214 <HAL_IncTick+0x14>)
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	440b      	add	r3, r1
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20002058 	.word	0x20002058
 8006214:	2000003d 	.word	0x2000003d

08006218 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <HAL_GetTick+0x8>)
 800621a:	6818      	ldr	r0, [r3, #0]
}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20002058 	.word	0x20002058

08006224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006228:	f7ff fff6 	bl	8006218 <HAL_GetTick>
 800622c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800622e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006230:	bf1e      	ittt	ne
 8006232:	4b04      	ldrne	r3, [pc, #16]	; (8006244 <HAL_Delay+0x20>)
 8006234:	781b      	ldrbne	r3, [r3, #0]
 8006236:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006238:	f7ff ffee 	bl	8006218 <HAL_GetTick>
 800623c:	1b40      	subs	r0, r0, r5
 800623e:	42a0      	cmp	r0, r4
 8006240:	d3fa      	bcc.n	8006238 <HAL_Delay+0x14>
  {
  }
}
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	2000003d 	.word	0x2000003d

08006248 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006248:	4a07      	ldr	r2, [pc, #28]	; (8006268 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800624a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800624c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800624e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006252:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800625e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8006262:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006264:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006266:	4770      	bx	lr
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800626c:	4b17      	ldr	r3, [pc, #92]	; (80062cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800626e:	b570      	push	{r4, r5, r6, lr}
 8006270:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006272:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006276:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800627a:	f1c4 0507 	rsb	r5, r4, #7
 800627e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006280:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006284:	bf28      	it	cs
 8006286:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006288:	2b06      	cmp	r3, #6
 800628a:	bf98      	it	ls
 800628c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800628e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006292:	bf88      	it	hi
 8006294:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006296:	ea21 0303 	bic.w	r3, r1, r3
 800629a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800629c:	fa06 f404 	lsl.w	r4, r6, r4
 80062a0:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80062a4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a6:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062aa:	bfa8      	it	ge
 80062ac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80062b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b4:	bfb8      	it	lt
 80062b6:	4a06      	ldrlt	r2, [pc, #24]	; (80062d0 <HAL_NVIC_SetPriority+0x64>)
 80062b8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ba:	bfab      	itete	ge
 80062bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	e000ed00 	.word	0xe000ed00
 80062d0:	e000ed14 	.word	0xe000ed14

080062d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80062d4:	2800      	cmp	r0, #0
 80062d6:	db08      	blt.n	80062ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062d8:	2301      	movs	r3, #1
 80062da:	0942      	lsrs	r2, r0, #5
 80062dc:	f000 001f 	and.w	r0, r0, #31
 80062e0:	fa03 f000 	lsl.w	r0, r3, r0
 80062e4:	4b01      	ldr	r3, [pc, #4]	; (80062ec <HAL_NVIC_EnableIRQ+0x18>)
 80062e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80062ea:	4770      	bx	lr
 80062ec:	e000e100 	.word	0xe000e100

080062f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062f0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80062f2:	b330      	cbz	r0, 8006342 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062f4:	2214      	movs	r2, #20
 80062f6:	6801      	ldr	r1, [r0, #0]
 80062f8:	4b13      	ldr	r3, [pc, #76]	; (8006348 <HAL_DMA_Init+0x58>)
 80062fa:	440b      	add	r3, r1
 80062fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006306:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8006308:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800630a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800630e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006310:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006312:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006316:	4323      	orrs	r3, r4
 8006318:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800631a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800631e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006320:	6944      	ldr	r4, [r0, #20]
 8006322:	4323      	orrs	r3, r4
 8006324:	6984      	ldr	r4, [r0, #24]
 8006326:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006328:	69c4      	ldr	r4, [r0, #28]
 800632a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800632c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006330:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006334:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006338:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800633a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800633e:	4618      	mov	r0, r3
}
 8006340:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006342:	2001      	movs	r0, #1
 8006344:	e7fc      	b.n	8006340 <HAL_DMA_Init+0x50>
 8006346:	bf00      	nop
 8006348:	bffdfff8 	.word	0xbffdfff8
 800634c:	40020000 	.word	0x40020000

08006350 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006350:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006352:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006356:	2c01      	cmp	r4, #1
 8006358:	d035      	beq.n	80063c6 <HAL_DMA_Start_IT+0x76>
 800635a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800635c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006360:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006364:	42a5      	cmp	r5, r4
 8006366:	f04f 0600 	mov.w	r6, #0
 800636a:	f04f 0402 	mov.w	r4, #2
 800636e:	d128      	bne.n	80063c2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006370:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006374:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006376:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8006378:	6826      	ldr	r6, [r4, #0]
 800637a:	f026 0601 	bic.w	r6, r6, #1
 800637e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006380:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8006384:	40bd      	lsls	r5, r7
 8006386:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006388:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800638a:	6843      	ldr	r3, [r0, #4]
 800638c:	6805      	ldr	r5, [r0, #0]
 800638e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8006390:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006392:	bf0b      	itete	eq
 8006394:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006396:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006398:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800639a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800639c:	b14b      	cbz	r3, 80063b2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80063a4:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063a6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	602b      	str	r3, [r5, #0]
}
 80063b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	f023 0304 	bic.w	r3, r3, #4
 80063b8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f043 030a 	orr.w	r3, r3, #10
 80063c0:	e7f0      	b.n	80063a4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80063c2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80063c6:	2002      	movs	r0, #2
 80063c8:	e7f2      	b.n	80063b0 <HAL_DMA_Start_IT+0x60>
	...

080063cc <HAL_DMA_IRQHandler>:
{
 80063cc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063ce:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063d0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063d4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80063d6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063d8:	4095      	lsls	r5, r2
 80063da:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80063dc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063de:	d032      	beq.n	8006446 <HAL_DMA_IRQHandler+0x7a>
 80063e0:	074d      	lsls	r5, r1, #29
 80063e2:	d530      	bpl.n	8006446 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063e8:	bf5e      	ittt	pl
 80063ea:	681a      	ldrpl	r2, [r3, #0]
 80063ec:	f022 0204 	bicpl.w	r2, r2, #4
 80063f0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80063f2:	4a3e      	ldr	r2, [pc, #248]	; (80064ec <HAL_DMA_IRQHandler+0x120>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d019      	beq.n	800642c <HAL_DMA_IRQHandler+0x60>
 80063f8:	3214      	adds	r2, #20
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d018      	beq.n	8006430 <HAL_DMA_IRQHandler+0x64>
 80063fe:	3214      	adds	r2, #20
 8006400:	4293      	cmp	r3, r2
 8006402:	d017      	beq.n	8006434 <HAL_DMA_IRQHandler+0x68>
 8006404:	3214      	adds	r2, #20
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <HAL_DMA_IRQHandler+0x6e>
 800640a:	3214      	adds	r2, #20
 800640c:	4293      	cmp	r3, r2
 800640e:	d017      	beq.n	8006440 <HAL_DMA_IRQHandler+0x74>
 8006410:	3214      	adds	r2, #20
 8006412:	4293      	cmp	r3, r2
 8006414:	bf0c      	ite	eq
 8006416:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800641a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800641e:	4a34      	ldr	r2, [pc, #208]	; (80064f0 <HAL_DMA_IRQHandler+0x124>)
 8006420:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006422:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05e      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x11a>
}
 8006428:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800642a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800642c:	2304      	movs	r3, #4
 800642e:	e7f6      	b.n	800641e <HAL_DMA_IRQHandler+0x52>
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	e7f4      	b.n	800641e <HAL_DMA_IRQHandler+0x52>
 8006434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006438:	e7f1      	b.n	800641e <HAL_DMA_IRQHandler+0x52>
 800643a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800643e:	e7ee      	b.n	800641e <HAL_DMA_IRQHandler+0x52>
 8006440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006444:	e7eb      	b.n	800641e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006446:	2502      	movs	r5, #2
 8006448:	4095      	lsls	r5, r2
 800644a:	4225      	tst	r5, r4
 800644c:	d035      	beq.n	80064ba <HAL_DMA_IRQHandler+0xee>
 800644e:	078d      	lsls	r5, r1, #30
 8006450:	d533      	bpl.n	80064ba <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	0694      	lsls	r4, r2, #26
 8006456:	d406      	bmi.n	8006466 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	f022 020a 	bic.w	r2, r2, #10
 800645e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006460:	2201      	movs	r2, #1
 8006462:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006466:	4a21      	ldr	r2, [pc, #132]	; (80064ec <HAL_DMA_IRQHandler+0x120>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d019      	beq.n	80064a0 <HAL_DMA_IRQHandler+0xd4>
 800646c:	3214      	adds	r2, #20
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_DMA_IRQHandler+0xd8>
 8006472:	3214      	adds	r2, #20
 8006474:	4293      	cmp	r3, r2
 8006476:	d017      	beq.n	80064a8 <HAL_DMA_IRQHandler+0xdc>
 8006478:	3214      	adds	r2, #20
 800647a:	4293      	cmp	r3, r2
 800647c:	d017      	beq.n	80064ae <HAL_DMA_IRQHandler+0xe2>
 800647e:	3214      	adds	r2, #20
 8006480:	4293      	cmp	r3, r2
 8006482:	d017      	beq.n	80064b4 <HAL_DMA_IRQHandler+0xe8>
 8006484:	3214      	adds	r2, #20
 8006486:	4293      	cmp	r3, r2
 8006488:	bf0c      	ite	eq
 800648a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800648e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8006492:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <HAL_DMA_IRQHandler+0x124>)
 8006494:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8006496:	2300      	movs	r3, #0
 8006498:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800649c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800649e:	e7c1      	b.n	8006424 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064a0:	2302      	movs	r3, #2
 80064a2:	e7f6      	b.n	8006492 <HAL_DMA_IRQHandler+0xc6>
 80064a4:	2320      	movs	r3, #32
 80064a6:	e7f4      	b.n	8006492 <HAL_DMA_IRQHandler+0xc6>
 80064a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ac:	e7f1      	b.n	8006492 <HAL_DMA_IRQHandler+0xc6>
 80064ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064b2:	e7ee      	b.n	8006492 <HAL_DMA_IRQHandler+0xc6>
 80064b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064b8:	e7eb      	b.n	8006492 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80064ba:	2508      	movs	r5, #8
 80064bc:	4095      	lsls	r5, r2
 80064be:	4225      	tst	r5, r4
 80064c0:	d011      	beq.n	80064e6 <HAL_DMA_IRQHandler+0x11a>
 80064c2:	0709      	lsls	r1, r1, #28
 80064c4:	d50f      	bpl.n	80064e6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064c6:	6819      	ldr	r1, [r3, #0]
 80064c8:	f021 010e 	bic.w	r1, r1, #14
 80064cc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064ce:	2301      	movs	r3, #1
 80064d0:	fa03 f202 	lsl.w	r2, r3, r2
 80064d4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064d6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80064d8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80064dc:	2300      	movs	r3, #0
 80064de:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80064e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80064e4:	e79e      	b.n	8006424 <HAL_DMA_IRQHandler+0x58>
}
 80064e6:	bc70      	pop	{r4, r5, r6}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40020008 	.word	0x40020008
 80064f0:	40020000 	.word	0x40020000

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064f8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80064fa:	4626      	mov	r6, r4
 80064fc:	4b65      	ldr	r3, [pc, #404]	; (8006694 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064fe:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80066a4 <HAL_GPIO_Init+0x1b0>
 8006502:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80066a8 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006506:	680a      	ldr	r2, [r1, #0]
 8006508:	fa32 f506 	lsrs.w	r5, r2, r6
 800650c:	d102      	bne.n	8006514 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800650e:	b003      	add	sp, #12
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8006514:	f04f 0801 	mov.w	r8, #1
 8006518:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800651c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8006520:	4590      	cmp	r8, r2
 8006522:	d17e      	bne.n	8006622 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8006524:	684d      	ldr	r5, [r1, #4]
 8006526:	2d12      	cmp	r5, #18
 8006528:	f000 80a9 	beq.w	800667e <HAL_GPIO_Init+0x18a>
 800652c:	f200 8082 	bhi.w	8006634 <HAL_GPIO_Init+0x140>
 8006530:	2d02      	cmp	r5, #2
 8006532:	f000 80a1 	beq.w	8006678 <HAL_GPIO_Init+0x184>
 8006536:	d876      	bhi.n	8006626 <HAL_GPIO_Init+0x132>
 8006538:	2d00      	cmp	r5, #0
 800653a:	f000 8088 	beq.w	800664e <HAL_GPIO_Init+0x15a>
 800653e:	2d01      	cmp	r5, #1
 8006540:	f000 8098 	beq.w	8006674 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006544:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006548:	2aff      	cmp	r2, #255	; 0xff
 800654a:	bf93      	iteet	ls
 800654c:	4682      	movls	sl, r0
 800654e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8006552:	3d08      	subhi	r5, #8
 8006554:	f8d0 b000 	ldrls.w	fp, [r0]
 8006558:	bf92      	itee	ls
 800655a:	00b5      	lslls	r5, r6, #2
 800655c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006560:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006562:	fa09 f805 	lsl.w	r8, r9, r5
 8006566:	ea2b 0808 	bic.w	r8, fp, r8
 800656a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800656e:	bf88      	it	hi
 8006570:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006574:	ea48 0505 	orr.w	r5, r8, r5
 8006578:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800657c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006580:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8006584:	d04d      	beq.n	8006622 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006586:	4f44      	ldr	r7, [pc, #272]	; (8006698 <HAL_GPIO_Init+0x1a4>)
 8006588:	f026 0803 	bic.w	r8, r6, #3
 800658c:	69bd      	ldr	r5, [r7, #24]
 800658e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006592:	f045 0501 	orr.w	r5, r5, #1
 8006596:	61bd      	str	r5, [r7, #24]
 8006598:	69bd      	ldr	r5, [r7, #24]
 800659a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800659e:	f005 0501 	and.w	r5, r5, #1
 80065a2:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065a4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80065a8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80065ae:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065b2:	fa09 f90b 	lsl.w	r9, r9, fp
 80065b6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80065ba:	4d38      	ldr	r5, [pc, #224]	; (800669c <HAL_GPIO_Init+0x1a8>)
 80065bc:	42a8      	cmp	r0, r5
 80065be:	d063      	beq.n	8006688 <HAL_GPIO_Init+0x194>
 80065c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065c4:	42a8      	cmp	r0, r5
 80065c6:	d061      	beq.n	800668c <HAL_GPIO_Init+0x198>
 80065c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065cc:	42a8      	cmp	r0, r5
 80065ce:	d05f      	beq.n	8006690 <HAL_GPIO_Init+0x19c>
 80065d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80065d4:	42a8      	cmp	r0, r5
 80065d6:	bf0c      	ite	eq
 80065d8:	2503      	moveq	r5, #3
 80065da:	2504      	movne	r5, #4
 80065dc:	fa05 f50b 	lsl.w	r5, r5, fp
 80065e0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80065e4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80065e8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065ea:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80065ee:	bf14      	ite	ne
 80065f0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80065f2:	4395      	biceq	r5, r2
 80065f4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80065f6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065f8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80065fc:	bf14      	ite	ne
 80065fe:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006600:	4395      	biceq	r5, r2
 8006602:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006604:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006606:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800660a:	bf14      	ite	ne
 800660c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800660e:	4395      	biceq	r5, r2
 8006610:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8006612:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006614:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006618:	bf14      	ite	ne
 800661a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800661c:	ea25 0202 	biceq.w	r2, r5, r2
 8006620:	60da      	str	r2, [r3, #12]
	position++;
 8006622:	3601      	adds	r6, #1
 8006624:	e76f      	b.n	8006506 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8006626:	2d03      	cmp	r5, #3
 8006628:	d022      	beq.n	8006670 <HAL_GPIO_Init+0x17c>
 800662a:	2d11      	cmp	r5, #17
 800662c:	d18a      	bne.n	8006544 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800662e:	68cc      	ldr	r4, [r1, #12]
 8006630:	3404      	adds	r4, #4
          break;
 8006632:	e787      	b.n	8006544 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8006634:	4f1a      	ldr	r7, [pc, #104]	; (80066a0 <HAL_GPIO_Init+0x1ac>)
 8006636:	42bd      	cmp	r5, r7
 8006638:	d009      	beq.n	800664e <HAL_GPIO_Init+0x15a>
 800663a:	d812      	bhi.n	8006662 <HAL_GPIO_Init+0x16e>
 800663c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80066ac <HAL_GPIO_Init+0x1b8>
 8006640:	454d      	cmp	r5, r9
 8006642:	d004      	beq.n	800664e <HAL_GPIO_Init+0x15a>
 8006644:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8006648:	454d      	cmp	r5, r9
 800664a:	f47f af7b 	bne.w	8006544 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800664e:	688c      	ldr	r4, [r1, #8]
 8006650:	b1c4      	cbz	r4, 8006684 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006652:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8006654:	bf0c      	ite	eq
 8006656:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800665a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800665e:	2408      	movs	r4, #8
 8006660:	e770      	b.n	8006544 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8006662:	4565      	cmp	r5, ip
 8006664:	d0f3      	beq.n	800664e <HAL_GPIO_Init+0x15a>
 8006666:	4575      	cmp	r5, lr
 8006668:	d0f1      	beq.n	800664e <HAL_GPIO_Init+0x15a>
 800666a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80066b0 <HAL_GPIO_Init+0x1bc>
 800666e:	e7eb      	b.n	8006648 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006670:	2400      	movs	r4, #0
 8006672:	e767      	b.n	8006544 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006674:	68cc      	ldr	r4, [r1, #12]
          break;
 8006676:	e765      	b.n	8006544 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006678:	68cc      	ldr	r4, [r1, #12]
 800667a:	3408      	adds	r4, #8
          break;
 800667c:	e762      	b.n	8006544 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800667e:	68cc      	ldr	r4, [r1, #12]
 8006680:	340c      	adds	r4, #12
          break;
 8006682:	e75f      	b.n	8006544 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006684:	2404      	movs	r4, #4
 8006686:	e75d      	b.n	8006544 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006688:	2500      	movs	r5, #0
 800668a:	e7a7      	b.n	80065dc <HAL_GPIO_Init+0xe8>
 800668c:	2501      	movs	r5, #1
 800668e:	e7a5      	b.n	80065dc <HAL_GPIO_Init+0xe8>
 8006690:	2502      	movs	r5, #2
 8006692:	e7a3      	b.n	80065dc <HAL_GPIO_Init+0xe8>
 8006694:	40010400 	.word	0x40010400
 8006698:	40021000 	.word	0x40021000
 800669c:	40010800 	.word	0x40010800
 80066a0:	10210000 	.word	0x10210000
 80066a4:	10310000 	.word	0x10310000
 80066a8:	10320000 	.word	0x10320000
 80066ac:	10110000 	.word	0x10110000
 80066b0:	10220000 	.word	0x10220000

080066b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066b4:	b10a      	cbz	r2, 80066ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80066b6:	6101      	str	r1, [r0, #16]
  }
}
 80066b8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80066ba:	0409      	lsls	r1, r1, #16
 80066bc:	e7fb      	b.n	80066b6 <HAL_GPIO_WritePin+0x2>

080066be <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066be:	6801      	ldr	r1, [r0, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	694b      	ldr	r3, [r1, #20]
 80066c4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80066c8:	d010      	beq.n	80066ec <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ca:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80066ce:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80066d0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066dc:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066e2:	f043 0304 	orr.w	r3, r3, #4
 80066e6:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
 80066ea:	4770      	bx	lr
  }
  return HAL_OK;
 80066ec:	4618      	mov	r0, r3
}
 80066ee:	4770      	bx	lr

080066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80066f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	4616      	mov	r6, r2
 80066f8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066fa:	b28f      	uxth	r7, r1
 80066fc:	6825      	ldr	r5, [r4, #0]
 80066fe:	6968      	ldr	r0, [r5, #20]
 8006700:	ea37 0000 	bics.w	r0, r7, r0
 8006704:	d017      	beq.n	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006706:	696b      	ldr	r3, [r5, #20]
 8006708:	055a      	lsls	r2, r3, #21
 800670a:	d516      	bpl.n	800673a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800670e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006714:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006716:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800671a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800671c:	2300      	movs	r3, #0
 800671e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006720:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006728:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800672a:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800672e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006732:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800673a:	1c73      	adds	r3, r6, #1
 800673c:	d0df      	beq.n	80066fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7ff fd6b 	bl	8006218 <HAL_GetTick>
 8006742:	eba0 0008 	sub.w	r0, r0, r8
 8006746:	42b0      	cmp	r0, r6
 8006748:	d801      	bhi.n	800674e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800674a:	2e00      	cmp	r6, #0
 800674c:	d1d6      	bne.n	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006750:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006752:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800675e:	f042 0220 	orr.w	r2, r2, #32
 8006762:	e7e4      	b.n	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08006764 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	075b      	lsls	r3, r3, #29
 8006772:	d501      	bpl.n	8006778 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8006774:	2000      	movs	r0, #0
}
 8006776:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006778:	4620      	mov	r0, r4
 800677a:	f7ff ffa0 	bl	80066be <I2C_IsAcknowledgeFailed>
 800677e:	b9a8      	cbnz	r0, 80067ac <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8006780:	1c6a      	adds	r2, r5, #1
 8006782:	d0f3      	beq.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006784:	f7ff fd48 	bl	8006218 <HAL_GetTick>
 8006788:	1b80      	subs	r0, r0, r6
 800678a:	42a8      	cmp	r0, r5
 800678c:	d801      	bhi.n	8006792 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800678e:	2d00      	cmp	r5, #0
 8006790:	d1ec      	bne.n	800676c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006792:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006794:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006796:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006798:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800679c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067a6:	f042 0220 	orr.w	r2, r2, #32
 80067aa:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80067ac:	2001      	movs	r0, #1
 80067ae:	e7e2      	b.n	8006776 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080067b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	6943      	ldr	r3, [r0, #20]
 80067bc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80067c0:	d001      	beq.n	80067c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80067c2:	2000      	movs	r0, #0
 80067c4:	e010      	b.n	80067e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067c6:	6942      	ldr	r2, [r0, #20]
 80067c8:	06d2      	lsls	r2, r2, #27
 80067ca:	d50e      	bpl.n	80067ea <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067cc:	f06f 0210 	mvn.w	r2, #16
 80067d0:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067de:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067e0:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ea:	f7ff fd15 	bl	8006218 <HAL_GetTick>
 80067ee:	1b80      	subs	r0, r0, r6
 80067f0:	42a8      	cmp	r0, r5
 80067f2:	d801      	bhi.n	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d1df      	bne.n	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067f8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fa:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006802:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006808:	f042 0220 	orr.w	r2, r2, #32
 800680c:	e7e8      	b.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800680e <I2C_WaitOnFlagUntilTimeout>:
{
 800680e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006812:	4604      	mov	r4, r0
 8006814:	4690      	mov	r8, r2
 8006816:	461f      	mov	r7, r3
 8006818:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800681e:	b28d      	uxth	r5, r1
 8006820:	6821      	ldr	r1, [r4, #0]
 8006822:	f1b9 0f01 	cmp.w	r9, #1
 8006826:	bf0c      	ite	eq
 8006828:	694b      	ldreq	r3, [r1, #20]
 800682a:	698b      	ldrne	r3, [r1, #24]
 800682c:	ea35 0303 	bics.w	r3, r5, r3
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	4598      	cmp	r8, r3
 8006838:	d001      	beq.n	800683e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800683a:	2000      	movs	r0, #0
 800683c:	e016      	b.n	800686c <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800683e:	1c7b      	adds	r3, r7, #1
 8006840:	d0ef      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006842:	f7ff fce9 	bl	8006218 <HAL_GetTick>
 8006846:	1b80      	subs	r0, r0, r6
 8006848:	42b8      	cmp	r0, r7
 800684a:	d801      	bhi.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x42>
 800684c:	2f00      	cmp	r7, #0
 800684e:	d1e7      	bne.n	8006820 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006850:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006852:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8006854:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006856:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006858:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800685c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006862:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006866:	f042 0220 	orr.w	r2, r2, #32
 800686a:	6422      	str	r2, [r4, #64]	; 0x40
}
 800686c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006870 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4604      	mov	r4, r0
 8006874:	460d      	mov	r5, r1
 8006876:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	d501      	bpl.n	8006884 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8006880:	2000      	movs	r0, #0
}
 8006882:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006884:	4620      	mov	r0, r4
 8006886:	f7ff ff1a 	bl	80066be <I2C_IsAcknowledgeFailed>
 800688a:	b9a8      	cbnz	r0, 80068b8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800688c:	1c6a      	adds	r2, r5, #1
 800688e:	d0f3      	beq.n	8006878 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006890:	f7ff fcc2 	bl	8006218 <HAL_GetTick>
 8006894:	1b80      	subs	r0, r0, r6
 8006896:	42a8      	cmp	r0, r5
 8006898:	d801      	bhi.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800689a:	2d00      	cmp	r5, #0
 800689c:	d1ec      	bne.n	8006878 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800689e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80068a0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068a2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80068ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068b2:	f042 0220 	orr.w	r2, r2, #32
 80068b6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80068b8:	2001      	movs	r0, #1
 80068ba:	e7e2      	b.n	8006882 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080068bc <I2C_RequestMemoryWrite>:
{
 80068bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80068c0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068c2:	6802      	ldr	r2, [r0, #0]
{
 80068c4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068c6:	6813      	ldr	r3, [r2, #0]
{
 80068c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ce:	6013      	str	r3, [r2, #0]
{
 80068d0:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068d2:	9600      	str	r6, [sp, #0]
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	2200      	movs	r2, #0
 80068d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80068dc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068de:	f7ff ff96 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 80068e2:	b118      	cbz	r0, 80068ec <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
}
 80068e6:	b004      	add	sp, #16
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80068f2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f6:	4633      	mov	r3, r6
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <I2C_RequestMemoryWrite+0x98>)
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fef8 	bl	80066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006900:	2800      	cmp	r0, #0
 8006902:	d1ef      	bne.n	80068e4 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	9003      	str	r0, [sp, #12]
 8006908:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800690a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690c:	9203      	str	r2, [sp, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006910:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006912:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006914:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006916:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006918:	f7ff ffaa 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 800691c:	b140      	cbz	r0, 8006930 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800691e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006920:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006922:	bf01      	itttt	eq
 8006924:	6822      	ldreq	r2, [r4, #0]
 8006926:	6813      	ldreq	r3, [r2, #0]
 8006928:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800692c:	6013      	streq	r3, [r2, #0]
 800692e:	e7d9      	b.n	80068e4 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006930:	f1b8 0f01 	cmp.w	r8, #1
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	d102      	bne.n	800693e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006938:	b2ed      	uxtb	r5, r5
 800693a:	611d      	str	r5, [r3, #16]
 800693c:	e7d3      	b.n	80068e6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800693e:	0a2a      	lsrs	r2, r5, #8
 8006940:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006942:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006944:	4632      	mov	r2, r6
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff ff92 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 800694c:	2800      	cmp	r0, #0
 800694e:	d1e6      	bne.n	800691e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	e7f1      	b.n	8006938 <I2C_RequestMemoryWrite+0x7c>
 8006954:	00010002 	.word	0x00010002

08006958 <I2C_RequestMemoryRead>:
{
 8006958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800695c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695e:	6803      	ldr	r3, [r0, #0]
{
 8006960:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006962:	681a      	ldr	r2, [r3, #0]
{
 8006964:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800696a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696c:	681a      	ldr	r2, [r3, #0]
{
 800696e:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800697a:	9500      	str	r5, [sp, #0]
 800697c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697e:	2200      	movs	r2, #0
{
 8006980:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006982:	f7ff ff44 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006986:	b118      	cbz	r0, 8006990 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8006988:	2001      	movs	r0, #1
}
 800698a:	b004      	add	sp, #16
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	b2ff      	uxtb	r7, r7
 8006994:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8006998:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800699a:	4929      	ldr	r1, [pc, #164]	; (8006a40 <I2C_RequestMemoryRead+0xe8>)
 800699c:	462b      	mov	r3, r5
 800699e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7ff fea5 	bl	80066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d1ee      	bne.n	8006988 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	9003      	str	r0, [sp, #12]
 80069ae:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b0:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b2:	9203      	str	r2, [sp, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ba:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069bc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	f7ff ff57 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c2:	b140      	cbz	r0, 80069d6 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c8:	bf01      	itttt	eq
 80069ca:	6822      	ldreq	r2, [r4, #0]
 80069cc:	6813      	ldreq	r3, [r2, #0]
 80069ce:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80069d2:	6013      	streq	r3, [r2, #0]
 80069d4:	e7d8      	b.n	8006988 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069d6:	f1b8 0f01 	cmp.w	r8, #1
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	d125      	bne.n	8006a2a <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069de:	b2f6      	uxtb	r6, r6
 80069e0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e2:	462a      	mov	r2, r5
 80069e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ff42 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 80069ec:	4602      	mov	r2, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1e8      	bne.n	80069c4 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f2:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f6:	680b      	ldr	r3, [r1, #0]
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069fe:	9500      	str	r5, [sp, #0]
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a06:	f7ff ff02 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d1bc      	bne.n	8006988 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	f047 0701 	orr.w	r7, r7, #1
 8006a14:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4909      	ldr	r1, [pc, #36]	; (8006a40 <I2C_RequestMemoryRead+0xe8>)
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f7ff fe67 	bl	80066f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8006a22:	3000      	adds	r0, #0
 8006a24:	bf18      	it	ne
 8006a26:	2001      	movne	r0, #1
 8006a28:	e7af      	b.n	800698a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a2a:	0a32      	lsrs	r2, r6, #8
 8006a2c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a30:	462a      	mov	r2, r5
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff ff1c 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1c3      	bne.n	80069c4 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	e7ce      	b.n	80069de <I2C_RequestMemoryRead+0x86>
 8006a40:	00010002 	.word	0x00010002

08006a44 <HAL_I2C_Init>:
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8006a46:	4604      	mov	r4, r0
 8006a48:	b908      	cbnz	r0, 8006a4e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8006a4a:	2001      	movs	r0, #1
}
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a56:	b91b      	cbnz	r3, 8006a60 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8006a58:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006a5c:	f7fb fc32 	bl	80022c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a60:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8006a62:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a70:	f001 f872 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	4a41      	ldr	r2, [pc, #260]	; (8006b7c <HAL_I2C_Init+0x138>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d84d      	bhi.n	8006b18 <HAL_I2C_Init+0xd4>
 8006a7c:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <HAL_I2C_Init+0x13c>)
 8006a7e:	4290      	cmp	r0, r2
 8006a80:	d9e3      	bls.n	8006a4a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8006a82:	4940      	ldr	r1, [pc, #256]	; (8006b84 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a84:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8006a86:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a8a:	6855      	ldr	r5, [r2, #4]
 8006a8c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006a90:	430d      	orrs	r5, r1
 8006a92:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a94:	6a15      	ldr	r5, [r2, #32]
 8006a96:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006a9a:	3101      	adds	r1, #1
 8006a9c:	4329      	orrs	r1, r5
 8006a9e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006aa0:	69d1      	ldr	r1, [r2, #28]
 8006aa2:	4d36      	ldr	r5, [pc, #216]	; (8006b7c <HAL_I2C_Init+0x138>)
 8006aa4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006aae:	f100 30ff 	add.w	r0, r0, #4294967295
 8006ab2:	d848      	bhi.n	8006b46 <HAL_I2C_Init+0x102>
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	fbb0 f0f3 	udiv	r0, r0, r3
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	bf38      	it	cc
 8006ac4:	2304      	movcc	r3, #4
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aca:	6811      	ldr	r1, [r2, #0]
 8006acc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006ad0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006ad4:	4303      	orrs	r3, r0
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ada:	6891      	ldr	r1, [r2, #8]
 8006adc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006ae0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006ae4:	4303      	orrs	r3, r0
 8006ae6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006aee:	68d1      	ldr	r1, [r2, #12]
 8006af0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8006af4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006af8:	4303      	orrs	r3, r0
 8006afa:	430b      	orrs	r3, r1
 8006afc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006afe:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b00:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b10:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8006b16:	e799      	b.n	8006a4c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <HAL_I2C_Init+0x144>)
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	d995      	bls.n	8006a4a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8006b1e:	4e19      	ldr	r6, [pc, #100]	; (8006b84 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b20:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8006b24:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b2a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b2c:	6855      	ldr	r5, [r2, #4]
 8006b2e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006b32:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b34:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b38:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b3a:	6a15      	ldr	r5, [r2, #32]
 8006b3c:	fbb1 f1f6 	udiv	r1, r1, r6
 8006b40:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006b44:	e7a9      	b.n	8006a9a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b46:	68a5      	ldr	r5, [r4, #8]
 8006b48:	b955      	cbnz	r5, 8006b60 <HAL_I2C_Init+0x11c>
 8006b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b58:	b16b      	cbz	r3, 8006b76 <HAL_I2C_Init+0x132>
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	e7b2      	b.n	8006ac6 <HAL_I2C_Init+0x82>
 8006b60:	2519      	movs	r5, #25
 8006b62:	436b      	muls	r3, r5
 8006b64:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b6e:	b113      	cbz	r3, 8006b76 <HAL_I2C_Init+0x132>
 8006b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b74:	e7a7      	b.n	8006ac6 <HAL_I2C_Init+0x82>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7a5      	b.n	8006ac6 <HAL_I2C_Init+0x82>
 8006b7a:	bf00      	nop
 8006b7c:	000186a0 	.word	0x000186a0
 8006b80:	001e847f 	.word	0x001e847f
 8006b84:	000f4240 	.word	0x000f4240
 8006b88:	003d08ff 	.word	0x003d08ff

08006b8c <HAL_I2C_Mem_Write>:
{
 8006b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	4699      	mov	r9, r3
 8006b94:	460f      	mov	r7, r1
 8006b96:	4690      	mov	r8, r2
 8006b98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006b9a:	f7ff fb3d 	bl	8006218 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006ba2:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d003      	beq.n	8006bb0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8006ba8:	2002      	movs	r0, #2
}
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb0:	9000      	str	r0, [sp, #0]
 8006bb2:	2319      	movs	r3, #25
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	493b      	ldr	r1, [pc, #236]	; (8006ca4 <HAL_I2C_Mem_Write+0x118>)
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7ff fe28 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1f2      	bne.n	8006ba8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8006bc2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d0ee      	beq.n	8006ba8 <HAL_I2C_Mem_Write+0x1c>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd0:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bd2:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006bd8:	bf58      	it	pl
 8006bda:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bdc:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8006bde:	bf5c      	itt	pl
 8006be0:	f042 0201 	orrpl.w	r2, r2, #1
 8006be4:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bec:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bee:	2321      	movs	r3, #33	; 0x21
 8006bf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf4:	2340      	movs	r3, #64	; 0x40
 8006bf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c00:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8006c04:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c06:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c0a:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006c0c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c10:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c12:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <HAL_I2C_Mem_Write+0x11c>)
 8006c14:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c16:	464b      	mov	r3, r9
 8006c18:	f7ff fe50 	bl	80068bc <I2C_RequestMemoryWrite>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d02a      	beq.n	8006c76 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8006c20:	2001      	movs	r0, #1
 8006c22:	e7c2      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c24:	f7ff fe24 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c28:	b140      	cbz	r0, 8006c3c <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c2c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2e:	bf01      	itttt	eq
 8006c30:	6822      	ldreq	r2, [r4, #0]
 8006c32:	6813      	ldreq	r3, [r2, #0]
 8006c34:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006c38:	6013      	streq	r3, [r2, #0]
 8006c3a:	e7f1      	b.n	8006c20 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c3e:	6827      	ldr	r7, [r4, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c46:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006c48:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006c4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006c4c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	b292      	uxth	r2, r2
 8006c52:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c54:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006c56:	1e48      	subs	r0, r1, #1
 8006c58:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c5a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006c5c:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c5e:	d50a      	bpl.n	8006c76 <HAL_I2C_Mem_Write+0xea>
 8006c60:	b148      	cbz	r0, 8006c76 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c62:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006c64:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c66:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006c68:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006c6c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006c72:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006c74:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1d0      	bne.n	8006c24 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c82:	f7ff fd6f 	bl	8006764 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d1cf      	bne.n	8006c2a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c92:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c94:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8006c96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006c9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8006ca2:	e782      	b.n	8006baa <HAL_I2C_Mem_Write+0x1e>
 8006ca4:	00100002 	.word	0x00100002
 8006ca8:	ffff0000 	.word	0xffff0000

08006cac <HAL_I2C_Mem_Read>:
{
 8006cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	460d      	mov	r5, r1
 8006cb8:	4690      	mov	r8, r2
 8006cba:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006cbc:	f7ff faac 	bl	8006218 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006cc4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d004      	beq.n	8006cd4 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8006cca:	2502      	movs	r5, #2
}
 8006ccc:	4628      	mov	r0, r5
 8006cce:	b007      	add	sp, #28
 8006cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cd4:	9000      	str	r0, [sp, #0]
 8006cd6:	2319      	movs	r3, #25
 8006cd8:	2201      	movs	r2, #1
 8006cda:	497e      	ldr	r1, [pc, #504]	; (8006ed4 <HAL_I2C_Mem_Read+0x228>)
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fd96 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d1f1      	bne.n	8006cca <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8006ce6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d0ed      	beq.n	8006cca <HAL_I2C_Mem_Read+0x1e>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf4:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cf6:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006cfc:	bf58      	it	pl
 8006cfe:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d00:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8006d02:	bf5c      	itt	pl
 8006d04:	f042 0201 	orrpl.w	r2, r2, #1
 8006d08:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d10:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d12:	2322      	movs	r3, #34	; 0x22
 8006d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d24:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 8006d28:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d2a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d2e:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006d30:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d34:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d36:	4b68      	ldr	r3, [pc, #416]	; (8006ed8 <HAL_I2C_Mem_Read+0x22c>)
 8006d38:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f7ff fe0c 	bl	8006958 <I2C_RequestMemoryRead>
 8006d40:	4605      	mov	r5, r0
 8006d42:	b108      	cbz	r0, 8006d48 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8006d44:	2501      	movs	r5, #1
 8006d46:	e7c1      	b.n	8006ccc <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8006d48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	b992      	cbnz	r2, 8006d74 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4e:	9002      	str	r0, [sp, #8]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	9202      	str	r2, [sp, #8]
 8006d58:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	2320      	movs	r3, #32
 8006d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006d6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006d72:	e7ab      	b.n	8006ccc <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8006d74:	2a01      	cmp	r2, #1
 8006d76:	d12f      	bne.n	8006dd8 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d80:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	9003      	str	r0, [sp, #12]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	9203      	str	r2, [sp, #12]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	9203      	str	r2, [sp, #12]
 8006d8e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006d98:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d9a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006edc <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8006d9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0de      	beq.n	8006d62 <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d877      	bhi.n	8006e98 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d131      	bne.n	8006e10 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dac:	4632      	mov	r2, r6
 8006dae:	4639      	mov	r1, r7
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7ff fcfd 	bl	80067b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d1c4      	bne.n	8006d44 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006dc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006dce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006dd6:	e7e2      	b.n	8006d9e <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8006dd8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dda:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8006ddc:	d10e      	bne.n	8006dfc <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006de4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	9004      	str	r0, [sp, #16]
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	9204      	str	r2, [sp, #16]
 8006dee:	699a      	ldr	r2, [r3, #24]
 8006df0:	9204      	str	r2, [sp, #16]
 8006df2:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfa:	e7cc      	b.n	8006d96 <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e02:	9005      	str	r0, [sp, #20]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	9205      	str	r2, [sp, #20]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	9305      	str	r3, [sp, #20]
 8006e0c:	9b05      	ldr	r3, [sp, #20]
 8006e0e:	e7c4      	b.n	8006d9a <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8006e10:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e12:	9600      	str	r6, [sp, #0]
 8006e14:	463b      	mov	r3, r7
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8006e1e:	d118      	bne.n	8006e52 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e20:	f7ff fcf5 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d18d      	bne.n	8006d44 <HAL_I2C_Mem_Read+0x98>
 8006e28:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e32:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e38:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e42:	3b01      	subs	r3, #1
 8006e44:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006e4e:	b662      	cpsie	i
 8006e50:	e7b3      	b.n	8006dba <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e52:	f7ff fcdc 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006e56:	4602      	mov	r2, r0
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f47f af73 	bne.w	8006d44 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e5e:	6821      	ldr	r1, [r4, #0]
 8006e60:	680b      	ldr	r3, [r1, #0]
 8006e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e66:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e68:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6a:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e6c:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6e:	6919      	ldr	r1, [r3, #16]
 8006e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e72:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8006e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e76:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8006e78:	3301      	adds	r3, #1
 8006e7a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e7e:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8006e80:	3b01      	subs	r3, #1
 8006e82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	f7ff fcbe 	bl	800680e <I2C_WaitOnFlagUntilTimeout>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0c9      	beq.n	8006e2a <HAL_I2C_Mem_Read+0x17e>
 8006e96:	e755      	b.n	8006d44 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e98:	4632      	mov	r2, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff fc87 	bl	80067b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f47f af4e 	bne.w	8006d44 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006eb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006eb2:	1c53      	adds	r3, r2, #1
 8006eb4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006eb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	6959      	ldr	r1, [r3, #20]
 8006ec8:	0749      	lsls	r1, r1, #29
 8006eca:	f57f af68 	bpl.w	8006d9e <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	7053      	strb	r3, [r2, #1]
 8006ed2:	e776      	b.n	8006dc2 <HAL_I2C_Mem_Read+0x116>
 8006ed4:	00100002 	.word	0x00100002
 8006ed8:	ffff0000 	.word	0xffff0000
 8006edc:	00010004 	.word	0x00010004

08006ee0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ee2:	4604      	mov	r4, r0
{
 8006ee4:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8006ee6:	b310      	cbz	r0, 8006f2e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ee8:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006eec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ef0:	b91b      	cbnz	r3, 8006efa <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ef2:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ef6:	f002 fba1 	bl	800963c <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006efa:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006efc:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006efe:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8006f00:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f04:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006f08:	f001 f9ba 	bl	8008280 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	4625      	mov	r5, r4
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	1d27      	adds	r7, r4, #4
 8006f18:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006f1c:	f855 0b10 	ldr.w	r0, [r5], #16
 8006f20:	f001 f99f 	bl	8008262 <USB_CoreInit>
 8006f24:	4606      	mov	r6, r0
 8006f26:	b120      	cbz	r0, 8006f32 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8006f2e:	2501      	movs	r5, #1
 8006f30:	e048      	b.n	8006fc4 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f32:	4601      	mov	r1, r0
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	f001 f9ad 	bl	8008294 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f3a:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f3c:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f40:	6861      	ldr	r1, [r4, #4]
 8006f42:	b2c3      	uxtb	r3, r0
 8006f44:	4299      	cmp	r1, r3
 8006f46:	f100 0001 	add.w	r0, r0, #1
 8006f4a:	d817      	bhi.n	8006f7c <HAL_PCD_Init+0x9c>
 8006f4c:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f4e:	4610      	mov	r0, r2
 8006f50:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f52:	4299      	cmp	r1, r3
 8006f54:	f102 0201 	add.w	r2, r2, #1
 8006f58:	d81d      	bhi.n	8006f96 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f5c:	466e      	mov	r6, sp
 8006f5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	f001 f995 	bl	8008298 <USB_DevInit>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4605      	mov	r5, r0
 8006f72:	b300      	cbz	r0, 8006fb6 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f74:	2202      	movs	r2, #2
 8006f76:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8006f7a:	e7d8      	b.n	8006f2e <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8006f7c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8006f80:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8006f84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f88:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f8a:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f8e:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f92:	6416      	str	r6, [r2, #64]	; 0x40
 8006f94:	e7d5      	b.n	8006f42 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8006f96:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8006f9a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f9e:	330a      	adds	r3, #10
 8006fa0:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8006fa2:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fa6:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006faa:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006fae:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fb2:	50e0      	str	r0, [r4, r3]
 8006fb4:	e7cc      	b.n	8006f50 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8006fb6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006fba:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	f001 fc0b 	bl	80087da <USB_DevDisconnect>

  return HAL_OK;
}
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	b007      	add	sp, #28
 8006fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fca <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8006fca:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8006fce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006fd0:	2b01      	cmp	r3, #1
{
 8006fd2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_PCD_Start+0x2a>
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006fdc:	f002 fc5b 	bl	8009896 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	f001 fbf8 	bl	80087d6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006fe6:	6820      	ldr	r0, [r4, #0]
 8006fe8:	f001 f942 	bl	8008270 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006fec:	2000      	movs	r0, #0
 8006fee:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006ff2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	e7fc      	b.n	8006ff2 <HAL_PCD_Start+0x28>

08006ff8 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8006ff8:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8006ffc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006ffe:	2a01      	cmp	r2, #1
{
 8007000:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007002:	d00b      	beq.n	800701c <HAL_PCD_SetAddress+0x24>
 8007004:	2201      	movs	r2, #1
 8007006:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800700a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800700e:	6800      	ldr	r0, [r0, #0]
 8007010:	f001 fbdb 	bl	80087ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007014:	2000      	movs	r0, #0
 8007016:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800701a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800701c:	2002      	movs	r0, #2
 800701e:	e7fc      	b.n	800701a <HAL_PCD_SetAddress+0x22>

08007020 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4604      	mov	r4, r0
 8007024:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007028:	f011 0f80 	tst.w	r1, #128	; 0x80
 800702c:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007030:	bf14      	ite	ne
 8007032:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007036:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 800703a:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 800703e:	bf17      	itett	ne
 8007040:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8007042:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007044:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8007046:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800704a:	bf04      	itt	eq
 800704c:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 800704e:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8007052:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8007054:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007056:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8007058:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800705a:	b102      	cbz	r2, 800705e <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800705c:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800705e:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8007060:	bf04      	itt	eq
 8007062:	2300      	moveq	r3, #0
 8007064:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8007066:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800706a:	2b01      	cmp	r3, #1
 800706c:	d009      	beq.n	8007082 <HAL_PCD_EP_Open+0x62>
 800706e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007070:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007072:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007076:	f001 f929 	bl	80082cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800707a:	2000      	movs	r0, #0
 800707c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8007080:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8007082:	2002      	movs	r0, #2
 8007084:	e7fc      	b.n	8007080 <HAL_PCD_EP_Open+0x60>

08007086 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007086:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800708a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800708e:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8007092:	b510      	push	{r4, lr}
 8007094:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007096:	bf18      	it	ne
 8007098:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 800709c:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800709e:	bf0b      	itete	eq
 80070a0:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 80070a4:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80070a6:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070a8:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070aa:	bf0a      	itet	eq
 80070ac:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80070ae:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 80070b2:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80070b6:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 80070b8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d009      	beq.n	80070d4 <HAL_PCD_EP_Close+0x4e>
 80070c0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070c2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80070c4:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070c8:	f001 fa5a 	bl	8008580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070cc:	2000      	movs	r0, #0
 80070ce:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80070d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80070d4:	2002      	movs	r0, #2
 80070d6:	e7fc      	b.n	80070d2 <HAL_PCD_EP_Close+0x4c>

080070d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070d8:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80070da:	2600      	movs	r6, #0
 80070dc:	f001 0107 	and.w	r1, r1, #7
 80070e0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80070e2:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80070e4:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070e8:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80070ec:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80070ee:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80070f2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80070f6:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80070fa:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	f001 fb82 	bl	8008808 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8007104:	4630      	mov	r0, r6
 8007106:	bd70      	pop	{r4, r5, r6, pc}

08007108 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007108:	f001 0107 	and.w	r1, r1, #7
 800710c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8007110:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8007114:	4770      	bx	lr

08007116 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007116:	f001 0107 	and.w	r1, r1, #7
 800711a:	b570      	push	{r4, r5, r6, lr}
 800711c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800711e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8007120:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007124:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8007126:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007128:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800712c:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007130:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8007132:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8007134:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007138:	6800      	ldr	r0, [r0, #0]
 800713a:	f001 fb65 	bl	8008808 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800713e:	4630      	mov	r0, r6
 8007140:	bd70      	pop	{r4, r5, r6, pc}
	...

08007144 <HAL_PCD_IRQHandler>:
{
 8007144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	f001 fb47 	bl	80087de <USB_ReadInterrupts>
 8007150:	0402      	lsls	r2, r0, #16
 8007152:	d50b      	bpl.n	800716c <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007154:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8007564 <HAL_PCD_IRQHandler+0x420>
 8007158:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8007568 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800715c:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 800756c <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	f100 809e 	bmi.w	80072a8 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	f001 fb36 	bl	80087de <USB_ReadInterrupts>
 8007172:	0543      	lsls	r3, r0, #21
 8007174:	d50f      	bpl.n	8007196 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007176:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8007178:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800717a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800717e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800718a:	f002 fa90 	bl	80096ae <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800718e:	2100      	movs	r1, #0
 8007190:	4620      	mov	r0, r4
 8007192:	f7ff ff31 	bl	8006ff8 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	f001 fb21 	bl	80087de <USB_ReadInterrupts>
 800719c:	0447      	lsls	r7, r0, #17
 800719e:	d508      	bpl.n	80071b2 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80071a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	0c1b      	lsrs	r3, r3, #16
 80071ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80071b2:	6820      	ldr	r0, [r4, #0]
 80071b4:	f001 fb13 	bl	80087de <USB_ReadInterrupts>
 80071b8:	0486      	lsls	r6, r0, #18
 80071ba:	d508      	bpl.n	80071ce <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80071c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	f001 fb05 	bl	80087de <USB_ReadInterrupts>
 80071d4:	04c5      	lsls	r5, r0, #19
 80071d6:	d51c      	bpl.n	8007212 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80071d8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80071da:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80071dc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80071e0:	f023 0304 	bic.w	r3, r3, #4
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	0c1b      	lsrs	r3, r3, #16
 80071e8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80071ec:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80071f0:	f023 0308 	bic.w	r3, r3, #8
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80071fc:	f002 fa7a 	bl	80096f4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	f001 fae3 	bl	80087de <USB_ReadInterrupts>
 8007218:	0500      	lsls	r0, r0, #20
 800721a:	d524      	bpl.n	8007266 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8007222:	f043 0308 	orr.w	r3, r3, #8
 8007226:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800722a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800722e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800723a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800723e:	f043 0304 	orr.w	r3, r3, #4
 8007242:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007246:	f001 faca 	bl	80087de <USB_ReadInterrupts>
 800724a:	04c1      	lsls	r1, r0, #19
 800724c:	d508      	bpl.n	8007260 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	0c1b      	lsrs	r3, r3, #16
 800725c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8007260:	4620      	mov	r0, r4
 8007262:	f002 fa37 	bl	80096d4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	f001 fab9 	bl	80087de <USB_ReadInterrupts>
 800726c:	0582      	lsls	r2, r0, #22
 800726e:	d50b      	bpl.n	8007288 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007270:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8007272:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007274:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800727c:	041b      	lsls	r3, r3, #16
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007284:	f002 fa0f 	bl	80096a6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	f001 faa8 	bl	80087de <USB_ReadInterrupts>
 800728e:	05c3      	lsls	r3, r0, #23
 8007290:	d508      	bpl.n	80072a4 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80072a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80072a8:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80072ac:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80072ae:	f011 060f 	ands.w	r6, r1, #15
 80072b2:	f040 80b1 	bne.w	8007418 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80072b6:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80072ba:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80072bc:	d12a      	bne.n	8007314 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80072be:	ea09 0303 	and.w	r3, r9, r3
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80072c8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80072cc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80072d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80072d8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80072dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80072de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80072e4:	4413      	add	r3, r2
 80072e6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80072e8:	4620      	mov	r0, r4
 80072ea:	f002 f9d5 	bl	8009698 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80072ee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f43f af34 	beq.w	8007160 <HAL_PCD_IRQHandler+0x1c>
 80072f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	f47f af30 	bne.w	8007160 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007300:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007304:	6821      	ldr	r1, [r4, #0]
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800730e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8007312:	e725      	b.n	8007160 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007314:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007316:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800731a:	d020      	beq.n	800735e <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800731c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007320:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007324:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800732c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007330:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007334:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8007338:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800733c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007340:	f001 fb36 	bl	80089b0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007344:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007346:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007348:	8813      	ldrh	r3, [r2, #0]
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	051b      	lsls	r3, r3, #20
 8007350:	0d1b      	lsrs	r3, r3, #20
 8007352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007356:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007358:	f002 f990 	bl	800967c <HAL_PCD_SetupStageCallback>
 800735c:	e700      	b.n	8007160 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800735e:	041f      	lsls	r7, r3, #16
 8007360:	f57f aefe 	bpl.w	8007160 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007364:	8803      	ldrh	r3, [r0, #0]
 8007366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736a:	051b      	lsls	r3, r3, #20
 800736c:	0d1b      	lsrs	r3, r3, #20
 800736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007372:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007374:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007378:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800737c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007380:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007384:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8007388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007390:	b18b      	cbz	r3, 80073b6 <HAL_PCD_IRQHandler+0x272>
 8007392:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8007396:	b171      	cbz	r1, 80073b6 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007398:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800739c:	f001 fb08 	bl	80089b0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80073a0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80073a4:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073a8:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80073aa:	4413      	add	r3, r2
 80073ac:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073b0:	4620      	mov	r0, r4
 80073b2:	f002 f969 	bl	8009688 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80073b6:	6821      	ldr	r1, [r4, #0]
 80073b8:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80073bc:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80073c0:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	b9bd      	cbnz	r5, 80073f8 <HAL_PCD_IRQHandler+0x2b4>
 80073c8:	5ac2      	ldrh	r2, [r0, r3]
 80073ca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073ce:	0412      	lsls	r2, r2, #16
 80073d0:	0c12      	lsrs	r2, r2, #16
 80073d2:	52c2      	strh	r2, [r0, r3]
 80073d4:	5ac2      	ldrh	r2, [r0, r3]
 80073d6:	ea4a 0202 	orr.w	r2, sl, r2
 80073da:	b292      	uxth	r2, r2
 80073dc:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80073de:	880b      	ldrh	r3, [r1, #0]
 80073e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80073ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f4:	800b      	strh	r3, [r1, #0]
 80073f6:	e6b3      	b.n	8007160 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80073f8:	2d3e      	cmp	r5, #62	; 0x3e
 80073fa:	d805      	bhi.n	8007408 <HAL_PCD_IRQHandler+0x2c4>
 80073fc:	086a      	lsrs	r2, r5, #1
 80073fe:	07ee      	lsls	r6, r5, #31
 8007400:	bf48      	it	mi
 8007402:	3201      	addmi	r2, #1
 8007404:	0292      	lsls	r2, r2, #10
 8007406:	e7e8      	b.n	80073da <HAL_PCD_IRQHandler+0x296>
 8007408:	096a      	lsrs	r2, r5, #5
 800740a:	06ed      	lsls	r5, r5, #27
 800740c:	bf08      	it	eq
 800740e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8007412:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8007416:	e7e0      	b.n	80073da <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007418:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 800741c:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007420:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8007424:	d03c      	beq.n	80074a0 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007426:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800742a:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	051b      	lsls	r3, r3, #20
 8007432:	0d1b      	lsrs	r3, r3, #20
 8007434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007438:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800743c:	19e1      	adds	r1, r4, r7
 800743e:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8007442:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8007446:	2b00      	cmp	r3, #0
 8007448:	d150      	bne.n	80074ec <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800744a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800744e:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8007452:	3306      	adds	r3, #6
 8007454:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007458:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800745c:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8007460:	b135      	cbz	r5, 8007470 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007462:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8007466:	462b      	mov	r3, r5
 8007468:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800746c:	f001 faa0 	bl	80089b0 <USB_ReadPMA>
 8007470:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8007472:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8007476:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800747a:	442b      	add	r3, r5
 800747c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007480:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8007484:	442a      	add	r2, r5
 8007486:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800748a:	b11b      	cbz	r3, 8007494 <HAL_PCD_IRQHandler+0x350>
 800748c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8007490:	4285      	cmp	r5, r0
 8007492:	d25d      	bcs.n	8007550 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007494:	4427      	add	r7, r4
 8007496:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800749a:	4620      	mov	r0, r4
 800749c:	f002 f8f4 	bl	8009688 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80074a0:	f018 0f80 	tst.w	r8, #128	; 0x80
 80074a4:	f43f ae5c 	beq.w	8007160 <HAL_PCD_IRQHandler+0x1c>
 80074a8:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074aa:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074ac:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80074b0:	ea09 0202 	and.w	r2, r9, r2
 80074b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b8:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074bc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80074c0:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80074c4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80074c8:	3202      	adds	r2, #2
 80074ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80074ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80074d2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80074d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80074dc:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80074de:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 80074e0:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80074e2:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 80074e4:	bbd3      	cbnz	r3, 800755c <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074e6:	f002 f8d7 	bl	8009698 <HAL_PCD_DataInStageCallback>
 80074ea:	e639      	b.n	8007160 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80074ec:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80074f0:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80074fa:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80074fe:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007500:	d01b      	beq.n	800753a <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007502:	3302      	adds	r3, #2
 8007504:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007508:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800750c:	b135      	cbz	r5, 800751c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800750e:	462b      	mov	r3, r5
 8007510:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007514:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8007518:	f001 fa4a 	bl	80089b0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800751c:	19e3      	adds	r3, r4, r7
 800751e:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007528:	ea0b 0303 	and.w	r3, fp, r3
 800752c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007534:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007538:	e79a      	b.n	8007470 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800753a:	3306      	adds	r3, #6
 800753c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007540:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8007544:	2d00      	cmp	r5, #0
 8007546:	d0e9      	beq.n	800751c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007548:	462b      	mov	r3, r5
 800754a:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800754e:	e7e1      	b.n	8007514 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007550:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8007554:	4620      	mov	r0, r4
 8007556:	f7ff fdbf 	bl	80070d8 <HAL_PCD_EP_Receive>
 800755a:	e7a1      	b.n	80074a0 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800755c:	f7ff fddb 	bl	8007116 <HAL_PCD_EP_Transmit>
 8007560:	e5fe      	b.n	8007160 <HAL_PCD_IRQHandler+0x1c>
 8007562:	bf00      	nop
 8007564:	ffff8f0f 	.word	0xffff8f0f
 8007568:	ffff8000 	.word	0xffff8000
 800756c:	ffff8f8f 	.word	0xffff8f8f

08007570 <HAL_PCD_EP_SetStall>:
{
 8007570:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007572:	6843      	ldr	r3, [r0, #4]
 8007574:	f001 0507 	and.w	r5, r1, #7
 8007578:	429d      	cmp	r5, r3
{
 800757a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800757c:	d828      	bhi.n	80075d0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800757e:	060b      	lsls	r3, r1, #24
 8007580:	d51d      	bpl.n	80075be <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8007582:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007584:	016b      	lsls	r3, r5, #5
 8007586:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 800758a:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800758c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800758e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8007592:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007594:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007596:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007598:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800759c:	429a      	cmp	r2, r3
 800759e:	d019      	beq.n	80075d4 <HAL_PCD_EP_SetStall+0x64>
 80075a0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	f001 f8b1 	bl	800870c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075aa:	b925      	cbnz	r5, 80075b6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80075ac:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	f001 f917 	bl	80087e4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80075b6:	2000      	movs	r0, #0
 80075b8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80075be:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80075c0:	014b      	lsls	r3, r1, #5
 80075c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80075c6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80075c8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80075ca:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80075ce:	e7e0      	b.n	8007592 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80075d0:	2001      	movs	r0, #1
 80075d2:	e7f3      	b.n	80075bc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80075d4:	2002      	movs	r0, #2
 80075d6:	e7f1      	b.n	80075bc <HAL_PCD_EP_SetStall+0x4c>

080075d8 <HAL_PCD_EP_ClrStall>:
{
 80075d8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075da:	6843      	ldr	r3, [r0, #4]
 80075dc:	f001 020f 	and.w	r2, r1, #15
 80075e0:	429a      	cmp	r2, r3
{
 80075e2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075e4:	d827      	bhi.n	8007636 <HAL_PCD_EP_ClrStall+0x5e>
 80075e6:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80075ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80075ee:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f2:	bf14      	ite	ne
 80075f4:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075f8:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 80075fc:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80075fe:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8007602:	bf15      	itete	ne
 8007604:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8007606:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007608:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800760a:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800760c:	bf14      	ite	ne
 800760e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8007612:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8007616:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007618:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800761a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800761e:	2b01      	cmp	r3, #1
 8007620:	d00b      	beq.n	800763a <HAL_PCD_EP_ClrStall+0x62>
 8007622:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007624:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007626:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800762a:	f001 f88b 	bl	8008744 <USB_EPClearStall>
  return HAL_OK;
 800762e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007630:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8007634:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007636:	2001      	movs	r0, #1
 8007638:	e7fc      	b.n	8007634 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 800763a:	2002      	movs	r0, #2
 800763c:	e7fa      	b.n	8007634 <HAL_PCD_EP_ClrStall+0x5c>

0800763e <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800763e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007642:	bf1b      	ittet	ne
 8007644:	f001 0107 	andne.w	r1, r1, #7
 8007648:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800764c:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007650:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8007652:	bf08      	it	eq
 8007654:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8007658:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800765a:	b91a      	cbnz	r2, 8007664 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800765c:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800765e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8007660:	2000      	movs	r0, #0
 8007662:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8007664:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007666:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8007668:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800766a:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800766c:	8143      	strh	r3, [r0, #10]
 800766e:	e7f7      	b.n	8007660 <HAL_PCDEx_PMAConfig+0x22>

08007670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007674:	4605      	mov	r5, r0
 8007676:	b908      	cbnz	r0, 800767c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8007678:	2001      	movs	r0, #1
 800767a:	e03c      	b.n	80076f6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800767c:	6803      	ldr	r3, [r0, #0]
 800767e:	07db      	lsls	r3, r3, #31
 8007680:	d410      	bmi.n	80076a4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	079f      	lsls	r7, r3, #30
 8007686:	d45d      	bmi.n	8007744 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	0719      	lsls	r1, r3, #28
 800768c:	f100 8094 	bmi.w	80077b8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	075a      	lsls	r2, r3, #29
 8007694:	f100 80be 	bmi.w	8007814 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007698:	69e8      	ldr	r0, [r5, #28]
 800769a:	2800      	cmp	r0, #0
 800769c:	f040 812c 	bne.w	80078f8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80076a0:	2000      	movs	r0, #0
 80076a2:	e028      	b.n	80076f6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076a4:	4c8f      	ldr	r4, [pc, #572]	; (80078e4 <HAL_RCC_OscConfig+0x274>)
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d007      	beq.n	80076c0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80076b0:	6863      	ldr	r3, [r4, #4]
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d109      	bne.n	80076ce <HAL_RCC_OscConfig+0x5e>
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	03de      	lsls	r6, r3, #15
 80076be:	d506      	bpl.n	80076ce <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	039c      	lsls	r4, r3, #14
 80076c4:	d5dd      	bpl.n	8007682 <HAL_RCC_OscConfig+0x12>
 80076c6:	686b      	ldr	r3, [r5, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1da      	bne.n	8007682 <HAL_RCC_OscConfig+0x12>
 80076cc:	e7d4      	b.n	8007678 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076ce:	686b      	ldr	r3, [r5, #4]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d112      	bne.n	80076fc <HAL_RCC_OscConfig+0x8c>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076dc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80076de:	f7fe fd9b 	bl	8006218 <HAL_GetTick>
 80076e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	0398      	lsls	r0, r3, #14
 80076e8:	d4cb      	bmi.n	8007682 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076ea:	f7fe fd95 	bl	8006218 <HAL_GetTick>
 80076ee:	1b80      	subs	r0, r0, r6
 80076f0:	2864      	cmp	r0, #100	; 0x64
 80076f2:	d9f7      	bls.n	80076e4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80076f4:	2003      	movs	r0, #3
}
 80076f6:	b002      	add	sp, #8
 80076f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076fc:	b99b      	cbnz	r3, 8007726 <HAL_RCC_OscConfig+0xb6>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800770c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800770e:	f7fe fd83 	bl	8006218 <HAL_GetTick>
 8007712:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	0399      	lsls	r1, r3, #14
 8007718:	d5b3      	bpl.n	8007682 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800771a:	f7fe fd7d 	bl	8006218 <HAL_GetTick>
 800771e:	1b80      	subs	r0, r0, r6
 8007720:	2864      	cmp	r0, #100	; 0x64
 8007722:	d9f7      	bls.n	8007714 <HAL_RCC_OscConfig+0xa4>
 8007724:	e7e6      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	d103      	bne.n	8007736 <HAL_RCC_OscConfig+0xc6>
 800772e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	e7cf      	b.n	80076d6 <HAL_RCC_OscConfig+0x66>
 8007736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007742:	e7cb      	b.n	80076dc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007744:	4c67      	ldr	r4, [pc, #412]	; (80078e4 <HAL_RCC_OscConfig+0x274>)
 8007746:	6863      	ldr	r3, [r4, #4]
 8007748:	f013 0f0c 	tst.w	r3, #12
 800774c:	d007      	beq.n	800775e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	f003 030c 	and.w	r3, r3, #12
 8007754:	2b08      	cmp	r3, #8
 8007756:	d110      	bne.n	800777a <HAL_RCC_OscConfig+0x10a>
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	03da      	lsls	r2, r3, #15
 800775c:	d40d      	bmi.n	800777a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	079b      	lsls	r3, r3, #30
 8007762:	d502      	bpl.n	800776a <HAL_RCC_OscConfig+0xfa>
 8007764:	692b      	ldr	r3, [r5, #16]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d186      	bne.n	8007678 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	696a      	ldr	r2, [r5, #20]
 800776e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007772:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	e786      	b.n	8007688 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800777a:	692a      	ldr	r2, [r5, #16]
 800777c:	4b5a      	ldr	r3, [pc, #360]	; (80078e8 <HAL_RCC_OscConfig+0x278>)
 800777e:	b16a      	cbz	r2, 800779c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007784:	f7fe fd48 	bl	8006218 <HAL_GetTick>
 8007788:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	079f      	lsls	r7, r3, #30
 800778e:	d4ec      	bmi.n	800776a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007790:	f7fe fd42 	bl	8006218 <HAL_GetTick>
 8007794:	1b80      	subs	r0, r0, r6
 8007796:	2802      	cmp	r0, #2
 8007798:	d9f7      	bls.n	800778a <HAL_RCC_OscConfig+0x11a>
 800779a:	e7ab      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800779c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800779e:	f7fe fd3b 	bl	8006218 <HAL_GetTick>
 80077a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	0798      	lsls	r0, r3, #30
 80077a8:	f57f af6e 	bpl.w	8007688 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ac:	f7fe fd34 	bl	8006218 <HAL_GetTick>
 80077b0:	1b80      	subs	r0, r0, r6
 80077b2:	2802      	cmp	r0, #2
 80077b4:	d9f6      	bls.n	80077a4 <HAL_RCC_OscConfig+0x134>
 80077b6:	e79d      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077b8:	69aa      	ldr	r2, [r5, #24]
 80077ba:	4c4a      	ldr	r4, [pc, #296]	; (80078e4 <HAL_RCC_OscConfig+0x274>)
 80077bc:	4b4b      	ldr	r3, [pc, #300]	; (80078ec <HAL_RCC_OscConfig+0x27c>)
 80077be:	b1da      	cbz	r2, 80077f8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80077c4:	f7fe fd28 	bl	8006218 <HAL_GetTick>
 80077c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077cc:	079b      	lsls	r3, r3, #30
 80077ce:	d50d      	bpl.n	80077ec <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80077d4:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <HAL_RCC_OscConfig+0x280>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077dc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80077de:	bf00      	nop
  }
  while (Delay --);
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	1e5a      	subs	r2, r3, #1
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f9      	bne.n	80077de <HAL_RCC_OscConfig+0x16e>
 80077ea:	e751      	b.n	8007690 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ec:	f7fe fd14 	bl	8006218 <HAL_GetTick>
 80077f0:	1b80      	subs	r0, r0, r6
 80077f2:	2802      	cmp	r0, #2
 80077f4:	d9e9      	bls.n	80077ca <HAL_RCC_OscConfig+0x15a>
 80077f6:	e77d      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80077f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80077fa:	f7fe fd0d 	bl	8006218 <HAL_GetTick>
 80077fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007802:	079f      	lsls	r7, r3, #30
 8007804:	f57f af44 	bpl.w	8007690 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007808:	f7fe fd06 	bl	8006218 <HAL_GetTick>
 800780c:	1b80      	subs	r0, r0, r6
 800780e:	2802      	cmp	r0, #2
 8007810:	d9f6      	bls.n	8007800 <HAL_RCC_OscConfig+0x190>
 8007812:	e76f      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007814:	4c33      	ldr	r4, [pc, #204]	; (80078e4 <HAL_RCC_OscConfig+0x274>)
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	00d8      	lsls	r0, r3, #3
 800781a:	d424      	bmi.n	8007866 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800781c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800781e:	69e3      	ldr	r3, [r4, #28]
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007824:	61e3      	str	r3, [r4, #28]
 8007826:	69e3      	ldr	r3, [r4, #28]
 8007828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007830:	4e30      	ldr	r6, [pc, #192]	; (80078f4 <HAL_RCC_OscConfig+0x284>)
 8007832:	6833      	ldr	r3, [r6, #0]
 8007834:	05d9      	lsls	r1, r3, #23
 8007836:	d518      	bpl.n	800786a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007838:	68eb      	ldr	r3, [r5, #12]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d126      	bne.n	800788c <HAL_RCC_OscConfig+0x21c>
 800783e:	6a23      	ldr	r3, [r4, #32]
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007846:	f7fe fce7 	bl	8006218 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800784a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800784e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007850:	6a23      	ldr	r3, [r4, #32]
 8007852:	079b      	lsls	r3, r3, #30
 8007854:	d53f      	bpl.n	80078d6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8007856:	2f00      	cmp	r7, #0
 8007858:	f43f af1e 	beq.w	8007698 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800785c:	69e3      	ldr	r3, [r4, #28]
 800785e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007862:	61e3      	str	r3, [r4, #28]
 8007864:	e718      	b.n	8007698 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8007866:	2700      	movs	r7, #0
 8007868:	e7e2      	b.n	8007830 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800786a:	6833      	ldr	r3, [r6, #0]
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007872:	f7fe fcd1 	bl	8006218 <HAL_GetTick>
 8007876:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007878:	6833      	ldr	r3, [r6, #0]
 800787a:	05da      	lsls	r2, r3, #23
 800787c:	d4dc      	bmi.n	8007838 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800787e:	f7fe fccb 	bl	8006218 <HAL_GetTick>
 8007882:	eba0 0008 	sub.w	r0, r0, r8
 8007886:	2864      	cmp	r0, #100	; 0x64
 8007888:	d9f6      	bls.n	8007878 <HAL_RCC_OscConfig+0x208>
 800788a:	e733      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800788c:	b9ab      	cbnz	r3, 80078ba <HAL_RCC_OscConfig+0x24a>
 800788e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007890:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	6223      	str	r3, [r4, #32]
 800789a:	6a23      	ldr	r3, [r4, #32]
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80078a2:	f7fe fcb9 	bl	8006218 <HAL_GetTick>
 80078a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a8:	6a23      	ldr	r3, [r4, #32]
 80078aa:	0798      	lsls	r0, r3, #30
 80078ac:	d5d3      	bpl.n	8007856 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ae:	f7fe fcb3 	bl	8006218 <HAL_GetTick>
 80078b2:	1b80      	subs	r0, r0, r6
 80078b4:	4540      	cmp	r0, r8
 80078b6:	d9f7      	bls.n	80078a8 <HAL_RCC_OscConfig+0x238>
 80078b8:	e71c      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	6a23      	ldr	r3, [r4, #32]
 80078be:	d103      	bne.n	80078c8 <HAL_RCC_OscConfig+0x258>
 80078c0:	f043 0304 	orr.w	r3, r3, #4
 80078c4:	6223      	str	r3, [r4, #32]
 80078c6:	e7ba      	b.n	800783e <HAL_RCC_OscConfig+0x1ce>
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	6223      	str	r3, [r4, #32]
 80078ce:	6a23      	ldr	r3, [r4, #32]
 80078d0:	f023 0304 	bic.w	r3, r3, #4
 80078d4:	e7b6      	b.n	8007844 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d6:	f7fe fc9f 	bl	8006218 <HAL_GetTick>
 80078da:	eba0 0008 	sub.w	r0, r0, r8
 80078de:	42b0      	cmp	r0, r6
 80078e0:	d9b6      	bls.n	8007850 <HAL_RCC_OscConfig+0x1e0>
 80078e2:	e707      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
 80078e4:	40021000 	.word	0x40021000
 80078e8:	42420000 	.word	0x42420000
 80078ec:	42420480 	.word	0x42420480
 80078f0:	20000038 	.word	0x20000038
 80078f4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <HAL_RCC_OscConfig+0x334>)
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	461c      	mov	r4, r3
 80078fe:	f002 020c 	and.w	r2, r2, #12
 8007902:	2a08      	cmp	r2, #8
 8007904:	d03d      	beq.n	8007982 <HAL_RCC_OscConfig+0x312>
 8007906:	2300      	movs	r3, #0
 8007908:	4e27      	ldr	r6, [pc, #156]	; (80079a8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800790a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800790c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800790e:	d12b      	bne.n	8007968 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8007910:	f7fe fc82 	bl	8006218 <HAL_GetTick>
 8007914:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	0199      	lsls	r1, r3, #6
 800791a:	d41f      	bmi.n	800795c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800791c:	6a2b      	ldr	r3, [r5, #32]
 800791e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007922:	d105      	bne.n	8007930 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	68a9      	ldr	r1, [r5, #8]
 8007928:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800792c:	430a      	orrs	r2, r1
 800792e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007930:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	430b      	orrs	r3, r1
 8007936:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800793a:	4313      	orrs	r3, r2
 800793c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800793e:	2301      	movs	r3, #1
 8007940:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8007942:	f7fe fc69 	bl	8006218 <HAL_GetTick>
 8007946:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	019a      	lsls	r2, r3, #6
 800794c:	f53f aea8 	bmi.w	80076a0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007950:	f7fe fc62 	bl	8006218 <HAL_GetTick>
 8007954:	1b40      	subs	r0, r0, r5
 8007956:	2802      	cmp	r0, #2
 8007958:	d9f6      	bls.n	8007948 <HAL_RCC_OscConfig+0x2d8>
 800795a:	e6cb      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795c:	f7fe fc5c 	bl	8006218 <HAL_GetTick>
 8007960:	1bc0      	subs	r0, r0, r7
 8007962:	2802      	cmp	r0, #2
 8007964:	d9d7      	bls.n	8007916 <HAL_RCC_OscConfig+0x2a6>
 8007966:	e6c5      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8007968:	f7fe fc56 	bl	8006218 <HAL_GetTick>
 800796c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	f57f ae95 	bpl.w	80076a0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007976:	f7fe fc4f 	bl	8006218 <HAL_GetTick>
 800797a:	1b40      	subs	r0, r0, r5
 800797c:	2802      	cmp	r0, #2
 800797e:	d9f6      	bls.n	800796e <HAL_RCC_OscConfig+0x2fe>
 8007980:	e6b8      	b.n	80076f4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007982:	2801      	cmp	r0, #1
 8007984:	f43f aeb7 	beq.w	80076f6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8007988:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798a:	6a2b      	ldr	r3, [r5, #32]
 800798c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8007990:	429a      	cmp	r2, r3
 8007992:	f47f ae71 	bne.w	8007678 <HAL_RCC_OscConfig+0x8>
 8007996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007998:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800799c:	1ac0      	subs	r0, r0, r3
 800799e:	bf18      	it	ne
 80079a0:	2001      	movne	r0, #1
 80079a2:	e6a8      	b.n	80076f6 <HAL_RCC_OscConfig+0x86>
 80079a4:	40021000 	.word	0x40021000
 80079a8:	42420060 	.word	0x42420060

080079ac <HAL_RCC_GetSysClockFreq>:
{
 80079ac:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079ae:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80079b0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079b2:	ac02      	add	r4, sp, #8
 80079b4:	f103 0510 	add.w	r5, r3, #16
 80079b8:	4622      	mov	r2, r4
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	6859      	ldr	r1, [r3, #4]
 80079be:	3308      	adds	r3, #8
 80079c0:	c203      	stmia	r2!, {r0, r1}
 80079c2:	42ab      	cmp	r3, r5
 80079c4:	4614      	mov	r4, r2
 80079c6:	d1f7      	bne.n	80079b8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079c8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80079cc:	4911      	ldr	r1, [pc, #68]	; (8007a14 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80079d2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80079d4:	f003 020c 	and.w	r2, r3, #12
 80079d8:	2a08      	cmp	r2, #8
 80079da:	d117      	bne.n	8007a0c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079dc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80079e0:	a806      	add	r0, sp, #24
 80079e2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079e4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079e6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079ea:	d50c      	bpl.n	8007a06 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079ec:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079ee:	480a      	ldr	r0, [pc, #40]	; (8007a18 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079f0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079f4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079f6:	aa06      	add	r2, sp, #24
 80079f8:	4413      	add	r3, r2
 80079fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079fe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007a02:	b007      	add	sp, #28
 8007a04:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x70>)
 8007a08:	4350      	muls	r0, r2
 8007a0a:	e7fa      	b.n	8007a02 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007a0c:	4802      	ldr	r0, [pc, #8]	; (8007a18 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007a0e:	e7f8      	b.n	8007a02 <HAL_RCC_GetSysClockFreq+0x56>
 8007a10:	0800c7bd 	.word	0x0800c7bd
 8007a14:	40021000 	.word	0x40021000
 8007a18:	007a1200 	.word	0x007a1200
 8007a1c:	003d0900 	.word	0x003d0900

08007a20 <HAL_RCC_ClockConfig>:
{
 8007a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a24:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007a26:	4604      	mov	r4, r0
 8007a28:	b910      	cbnz	r0, 8007a30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007a2a:	2001      	movs	r0, #1
}
 8007a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a30:	4a44      	ldr	r2, [pc, #272]	; (8007b44 <HAL_RCC_ClockConfig+0x124>)
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	d328      	bcc.n	8007a8e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a3c:	6821      	ldr	r1, [r4, #0]
 8007a3e:	078e      	lsls	r6, r1, #30
 8007a40:	d430      	bmi.n	8007aa4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a42:	07ca      	lsls	r2, r1, #31
 8007a44:	d443      	bmi.n	8007ace <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a46:	4a3f      	ldr	r2, [pc, #252]	; (8007b44 <HAL_RCC_ClockConfig+0x124>)
 8007a48:	6813      	ldr	r3, [r2, #0]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	42ab      	cmp	r3, r5
 8007a50:	d865      	bhi.n	8007b1e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	4d3c      	ldr	r5, [pc, #240]	; (8007b48 <HAL_RCC_ClockConfig+0x128>)
 8007a56:	f012 0f04 	tst.w	r2, #4
 8007a5a:	d16c      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a5c:	0713      	lsls	r3, r2, #28
 8007a5e:	d506      	bpl.n	8007a6e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007a60:	686b      	ldr	r3, [r5, #4]
 8007a62:	6922      	ldr	r2, [r4, #16]
 8007a64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007a68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007a6c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a6e:	f7ff ff9d 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 8007a72:	686b      	ldr	r3, [r5, #4]
 8007a74:	4a35      	ldr	r2, [pc, #212]	; (8007b4c <HAL_RCC_ClockConfig+0x12c>)
 8007a76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a7a:	5cd3      	ldrb	r3, [r2, r3]
 8007a7c:	40d8      	lsrs	r0, r3
 8007a7e:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <HAL_RCC_ClockConfig+0x130>)
 8007a80:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8007a82:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <HAL_RCC_ClockConfig+0x134>)
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f7fa fcdb 	bl	8002440 <HAL_InitTick>
  return HAL_OK;
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e7ce      	b.n	8007a2c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	428b      	cmp	r3, r1
 8007aa0:	d1c3      	bne.n	8007a2a <HAL_RCC_ClockConfig+0xa>
 8007aa2:	e7cb      	b.n	8007a3c <HAL_RCC_ClockConfig+0x1c>
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aaa:	bf1e      	ittt	ne
 8007aac:	685a      	ldrne	r2, [r3, #4]
 8007aae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8007ab2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ab6:	bf42      	ittt	mi
 8007ab8:	685a      	ldrmi	r2, [r3, #4]
 8007aba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8007abe:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	68a0      	ldr	r0, [r4, #8]
 8007ac4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007ac8:	4302      	orrs	r2, r0
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	e7b9      	b.n	8007a42 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	4e1d      	ldr	r6, [pc, #116]	; (8007b48 <HAL_RCC_ClockConfig+0x128>)
 8007ad2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ad6:	d11a      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007adc:	d0a5      	beq.n	8007a2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ade:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007aec:	f7fe fb94 	bl	8006218 <HAL_GetTick>
 8007af0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007af2:	6873      	ldr	r3, [r6, #4]
 8007af4:	6862      	ldr	r2, [r4, #4]
 8007af6:	f003 030c 	and.w	r3, r3, #12
 8007afa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007afe:	d0a2      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b00:	f7fe fb8a 	bl	8006218 <HAL_GetTick>
 8007b04:	1bc0      	subs	r0, r0, r7
 8007b06:	4540      	cmp	r0, r8
 8007b08:	d9f3      	bls.n	8007af2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007b0a:	2003      	movs	r0, #3
 8007b0c:	e78e      	b.n	8007a2c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b0e:	2a02      	cmp	r2, #2
 8007b10:	d102      	bne.n	8007b18 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007b16:	e7e1      	b.n	8007adc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b18:	f013 0f02 	tst.w	r3, #2
 8007b1c:	e7de      	b.n	8007adc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1e:	6813      	ldr	r3, [r2, #0]
 8007b20:	f023 0307 	bic.w	r3, r3, #7
 8007b24:	432b      	orrs	r3, r5
 8007b26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	42ab      	cmp	r3, r5
 8007b30:	f47f af7b 	bne.w	8007a2a <HAL_RCC_ClockConfig+0xa>
 8007b34:	e78d      	b.n	8007a52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b36:	686b      	ldr	r3, [r5, #4]
 8007b38:	68e1      	ldr	r1, [r4, #12]
 8007b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	606b      	str	r3, [r5, #4]
 8007b42:	e78b      	b.n	8007a5c <HAL_RCC_ClockConfig+0x3c>
 8007b44:	40022000 	.word	0x40022000
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	0800d43a 	.word	0x0800d43a
 8007b50:	20000038 	.word	0x20000038
 8007b54:	20000040 	.word	0x20000040

08007b58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8007b5a:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	4a03      	ldr	r2, [pc, #12]	; (8007b74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007b66:	6810      	ldr	r0, [r2, #0]
}
 8007b68:	40d8      	lsrs	r0, r3
 8007b6a:	4770      	bx	lr
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	0800d44a 	.word	0x0800d44a
 8007b74:	20000038 	.word	0x20000038

08007b78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <HAL_RCC_GetPCLK2Freq+0x14>)
 8007b7a:	4a05      	ldr	r2, [pc, #20]	; (8007b90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007b82:	5cd3      	ldrb	r3, [r2, r3]
 8007b84:	4a03      	ldr	r2, [pc, #12]	; (8007b94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007b86:	6810      	ldr	r0, [r2, #0]
}
 8007b88:	40d8      	lsrs	r0, r3
 8007b8a:	4770      	bx	lr
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	0800d44a 	.word	0x0800d44a
 8007b94:	20000038 	.word	0x20000038

08007b98 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b98:	230f      	movs	r3, #15
 8007b9a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b9c:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <HAL_RCC_GetClockConfig+0x34>)
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	f002 0203 	and.w	r2, r2, #3
 8007ba4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007bac:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007bb4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bbe:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bc0:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <HAL_RCC_GetClockConfig+0x38>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	600b      	str	r3, [r1, #0]
}
 8007bca:	4770      	bx	lr
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	40022000 	.word	0x40022000

08007bd4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007bd4:	6803      	ldr	r3, [r0, #0]
{
 8007bd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007bda:	07d9      	lsls	r1, r3, #31
{
 8007bdc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007bde:	d520      	bpl.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007be0:	4c35      	ldr	r4, [pc, #212]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007be2:	69e3      	ldr	r3, [r4, #28]
 8007be4:	00da      	lsls	r2, r3, #3
 8007be6:	d432      	bmi.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8007be8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bea:	69e3      	ldr	r3, [r4, #28]
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	61e3      	str	r3, [r4, #28]
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bfc:	4e2f      	ldr	r6, [pc, #188]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007bfe:	6833      	ldr	r3, [r6, #0]
 8007c00:	05db      	lsls	r3, r3, #23
 8007c02:	d526      	bpl.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c04:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c0a:	d136      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c0c:	6a23      	ldr	r3, [r4, #32]
 8007c0e:	686a      	ldr	r2, [r5, #4]
 8007c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c14:	4313      	orrs	r3, r2
 8007c16:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c18:	b11f      	cbz	r7, 8007c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c1a:	69e3      	ldr	r3, [r4, #28]
 8007c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c20:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c22:	6828      	ldr	r0, [r5, #0]
 8007c24:	0783      	lsls	r3, r0, #30
 8007c26:	d506      	bpl.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c28:	4a23      	ldr	r2, [pc, #140]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c2a:	68a9      	ldr	r1, [r5, #8]
 8007c2c:	6853      	ldr	r3, [r2, #4]
 8007c2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c32:	430b      	orrs	r3, r1
 8007c34:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c36:	f010 0010 	ands.w	r0, r0, #16
 8007c3a:	d01b      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c3c:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c3e:	68e9      	ldr	r1, [r5, #12]
 8007c40:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c42:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	6053      	str	r3, [r2, #4]
 8007c4c:	e012      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8007c4e:	2700      	movs	r7, #0
 8007c50:	e7d4      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007c5a:	f7fe fadd 	bl	8006218 <HAL_GetTick>
 8007c5e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c60:	6833      	ldr	r3, [r6, #0]
 8007c62:	05d8      	lsls	r0, r3, #23
 8007c64:	d4ce      	bmi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c66:	f7fe fad7 	bl	8006218 <HAL_GetTick>
 8007c6a:	eba0 0008 	sub.w	r0, r0, r8
 8007c6e:	2864      	cmp	r0, #100	; 0x64
 8007c70:	d9f6      	bls.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8007c72:	2003      	movs	r0, #3
}
 8007c74:	b002      	add	sp, #8
 8007c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c7a:	686a      	ldr	r2, [r5, #4]
 8007c7c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d0c3      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c84:	2001      	movs	r0, #1
 8007c86:	4a0e      	ldr	r2, [pc, #56]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c88:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c8a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c8c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c92:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8007c94:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c96:	07d9      	lsls	r1, r3, #31
 8007c98:	d5b8      	bpl.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8007c9a:	f7fe fabd 	bl	8006218 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007ca2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ca4:	6a23      	ldr	r3, [r4, #32]
 8007ca6:	079a      	lsls	r2, r3, #30
 8007ca8:	d4b0      	bmi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007caa:	f7fe fab5 	bl	8006218 <HAL_GetTick>
 8007cae:	1b80      	subs	r0, r0, r6
 8007cb0:	4540      	cmp	r0, r8
 8007cb2:	d9f7      	bls.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8007cb4:	e7dd      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007cb6:	bf00      	nop
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	40007000 	.word	0x40007000
 8007cc0:	42420440 	.word	0x42420440

08007cc4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cc4:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8007cc6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007cd8:	bf1e      	ittt	ne
 8007cda:	681a      	ldrne	r2, [r3, #0]
 8007cdc:	f042 0201 	orrne.w	r2, r2, #1
 8007ce0:	601a      	strne	r2, [r3, #0]
}
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIM_OC_DelayElapsedCallback>:
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_IC_CaptureCallback>:
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007ce8:	4770      	bx	lr

08007cea <HAL_TIM_TriggerCallback>:
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cec:	6803      	ldr	r3, [r0, #0]
{
 8007cee:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cf0:	691a      	ldr	r2, [r3, #16]
{
 8007cf2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cf4:	0791      	lsls	r1, r2, #30
 8007cf6:	d50e      	bpl.n	8007d16 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	0792      	lsls	r2, r2, #30
 8007cfc:	d50b      	bpl.n	8007d16 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cfe:	f06f 0202 	mvn.w	r2, #2
 8007d02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d04:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d06:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d0a:	079b      	lsls	r3, r3, #30
 8007d0c:	d077      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	f7ff ffea 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d12:	2300      	movs	r3, #0
 8007d14:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	0750      	lsls	r0, r2, #29
 8007d1c:	d510      	bpl.n	8007d40 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	0751      	lsls	r1, r2, #29
 8007d22:	d50d      	bpl.n	8007d40 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d24:	f06f 0204 	mvn.w	r2, #4
 8007d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2a:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d2c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d30:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d36:	d068      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d38:	f7ff ffd5 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	0712      	lsls	r2, r2, #28
 8007d46:	d50f      	bpl.n	8007d68 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	0710      	lsls	r0, r2, #28
 8007d4c:	d50c      	bpl.n	8007d68 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4e:	f06f 0208 	mvn.w	r2, #8
 8007d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d54:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d56:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5e:	d05a      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d60:	f7ff ffc1 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d64:	2300      	movs	r3, #0
 8007d66:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	06d2      	lsls	r2, r2, #27
 8007d6e:	d510      	bpl.n	8007d92 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	06d0      	lsls	r0, r2, #27
 8007d74:	d50d      	bpl.n	8007d92 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d76:	f06f 0210 	mvn.w	r2, #16
 8007d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7c:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d7e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d82:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d88:	d04b      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	f7ff ffac 	bl	8007ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	07d1      	lsls	r1, r2, #31
 8007d98:	d508      	bpl.n	8007dac <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	07d2      	lsls	r2, r2, #31
 8007d9e:	d505      	bpl.n	8007dac <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007da0:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007da6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da8:	f7fa fa5e 	bl	8002268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	0610      	lsls	r0, r2, #24
 8007db2:	d508      	bpl.n	8007dc6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	0611      	lsls	r1, r2, #24
 8007db8:	d505      	bpl.n	8007dc6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007dc2:	f000 f944 	bl	800804e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	0652      	lsls	r2, r2, #25
 8007dcc:	d508      	bpl.n	8007de0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	0650      	lsls	r0, r2, #25
 8007dd2:	d505      	bpl.n	8007de0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ddc:	f7ff ff85 	bl	8007cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	0691      	lsls	r1, r2, #26
 8007de6:	d522      	bpl.n	8007e2e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	0692      	lsls	r2, r2, #26
 8007dec:	d51f      	bpl.n	8007e2e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dee:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df2:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007df8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007dfa:	f000 b927 	b.w	800804c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfe:	f7ff ff71 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e02:	4620      	mov	r0, r4
 8007e04:	f7ff ff70 	bl	8007ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e08:	e783      	b.n	8007d12 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	f7ff ff6b 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7ff ff6a 	bl	8007ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e14:	e792      	b.n	8007d3c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	f7ff ff65 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ff64 	bl	8007ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e20:	e7a0      	b.n	8007d64 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	f7ff ff5f 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff ff5e 	bl	8007ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e2c:	e7af      	b.n	8007d8e <HAL_TIM_IRQHandler+0xa2>
}
 8007e2e:	bd10      	pop	{r4, pc}

08007e30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e30:	4a1a      	ldr	r2, [pc, #104]	; (8007e9c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007e32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e34:	4290      	cmp	r0, r2
 8007e36:	d00a      	beq.n	8007e4e <TIM_Base_SetConfig+0x1e>
 8007e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e3c:	d007      	beq.n	8007e4e <TIM_Base_SetConfig+0x1e>
 8007e3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007e42:	4290      	cmp	r0, r2
 8007e44:	d003      	beq.n	8007e4e <TIM_Base_SetConfig+0x1e>
 8007e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e4a:	4290      	cmp	r0, r2
 8007e4c:	d115      	bne.n	8007e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007e4e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e54:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e56:	4a11      	ldr	r2, [pc, #68]	; (8007e9c <TIM_Base_SetConfig+0x6c>)
 8007e58:	4290      	cmp	r0, r2
 8007e5a:	d00a      	beq.n	8007e72 <TIM_Base_SetConfig+0x42>
 8007e5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e60:	d007      	beq.n	8007e72 <TIM_Base_SetConfig+0x42>
 8007e62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007e66:	4290      	cmp	r0, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_Base_SetConfig+0x42>
 8007e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e6e:	4290      	cmp	r0, r2
 8007e70:	d103      	bne.n	8007e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e72:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e78:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e7a:	694a      	ldr	r2, [r1, #20]
 8007e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e80:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007e82:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e84:	688b      	ldr	r3, [r1, #8]
 8007e86:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e88:	680b      	ldr	r3, [r1, #0]
 8007e8a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <TIM_Base_SetConfig+0x6c>)
 8007e8e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e90:	bf04      	itt	eq
 8007e92:	690b      	ldreq	r3, [r1, #16]
 8007e94:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e96:	2301      	movs	r3, #1
 8007e98:	6143      	str	r3, [r0, #20]
}
 8007e9a:	4770      	bx	lr
 8007e9c:	40012c00 	.word	0x40012c00

08007ea0 <HAL_TIM_Base_Init>:
{
 8007ea0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	b1a0      	cbz	r0, 8007ed0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007eaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007eae:	b91b      	cbnz	r3, 8007eb8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007eb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007eb4:	f7fa fa38 	bl	8002328 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec0:	1d21      	adds	r1, r4, #4
 8007ec2:	f7ff ffb5 	bl	8007e30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007ec6:	2301      	movs	r3, #1
  return HAL_OK;
 8007ec8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007eca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007ece:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	e7fc      	b.n	8007ece <HAL_TIM_Base_Init+0x2e>

08007ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ed4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eda:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ede:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007ee2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee4:	6083      	str	r3, [r0, #8]
}
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007ee8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007eec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007eee:	2b01      	cmp	r3, #1
{
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007ef6:	d019      	beq.n	8007f2c <HAL_TIM_ConfigClockSource+0x44>
 8007ef8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007efa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007efe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007f00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007f04:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007f0e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007f10:	680b      	ldr	r3, [r1, #0]
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d065      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f16:	d815      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x5c>
 8007f18:	2b10      	cmp	r3, #16
 8007f1a:	d00c      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x4e>
 8007f1c:	d807      	bhi.n	8007f2e <HAL_TIM_ConfigClockSource+0x46>
 8007f1e:	b153      	cbz	r3, 8007f36 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007f22:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d001      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x4e>
 8007f32:	2b30      	cmp	r3, #48	; 0x30
 8007f34:	d1f4      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8007f36:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f38:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f40:	4313      	orrs	r3, r2
 8007f42:	e01a      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8007f44:	2b60      	cmp	r3, #96	; 0x60
 8007f46:	d034      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0xca>
 8007f48:	d819      	bhi.n	8007f7e <HAL_TIM_ConfigClockSource+0x96>
 8007f4a:	2b50      	cmp	r3, #80	; 0x50
 8007f4c:	d1e8      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4e:	684a      	ldr	r2, [r1, #4]
 8007f50:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f52:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f54:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5a:	f025 0501 	bic.w	r5, r5, #1
 8007f5e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f60:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007f62:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f68:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007f6c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f6e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007f70:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f76:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	e7d0      	b.n	8007f20 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8007f7e:	2b70      	cmp	r3, #112	; 0x70
 8007f80:	d00c      	beq.n	8007f9c <HAL_TIM_ConfigClockSource+0xb4>
 8007f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f86:	d1cb      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8007f88:	68cb      	ldr	r3, [r1, #12]
 8007f8a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007f8e:	f7ff ffa1 	bl	8007ed4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	6893      	ldr	r3, [r2, #8]
 8007f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f9a:	e008      	b.n	8007fae <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8007f9c:	68cb      	ldr	r3, [r1, #12]
 8007f9e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007fa2:	f7ff ff97 	bl	8007ed4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007faa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fae:	6093      	str	r3, [r2, #8]
      break;
 8007fb0:	e7b6      	b.n	8007f20 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb2:	684d      	ldr	r5, [r1, #4]
 8007fb4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb6:	6a01      	ldr	r1, [r0, #32]
 8007fb8:	f021 0110 	bic.w	r1, r1, #16
 8007fbc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fbe:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007fc0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fc2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fce:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007fd4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007fd6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fdc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8007fe0:	e7cb      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	684a      	ldr	r2, [r1, #4]
 8007fe4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007fe6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fea:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fee:	f025 0501 	bic.w	r5, r5, #1
 8007ff2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007ff6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ffc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008000:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008002:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008004:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800800a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800800e:	e7b4      	b.n	8007f7a <HAL_TIM_ConfigClockSource+0x92>

08008010 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008010:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008014:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008016:	2b01      	cmp	r3, #1
 8008018:	f04f 0302 	mov.w	r3, #2
 800801c:	d014      	beq.n	8008048 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800801e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8008024:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008026:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008028:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800802c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008034:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008036:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008038:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800803a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800803c:	2301      	movs	r3, #1
 800803e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008042:	2300      	movs	r3, #0
 8008044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008048:	4618      	mov	r0, r3

  return HAL_OK;
}
 800804a:	bd30      	pop	{r4, r5, pc}

0800804c <HAL_TIMEx_CommutCallback>:
 800804c:	4770      	bx	lr

0800804e <HAL_TIMEx_BreakCallback>:
 800804e:	4770      	bx	lr

08008050 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008050:	6803      	ldr	r3, [r0, #0]
 8008052:	68da      	ldr	r2, [r3, #12]
 8008054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008058:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805a:	695a      	ldr	r2, [r3, #20]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008062:	2320      	movs	r3, #32
 8008064:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8008068:	4770      	bx	lr
	...

0800806c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008070:	6803      	ldr	r3, [r0, #0]
 8008072:	68c1      	ldr	r1, [r0, #12]
 8008074:	691a      	ldr	r2, [r3, #16]
 8008076:	2419      	movs	r4, #25
 8008078:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800807c:	430a      	orrs	r2, r1
 800807e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008080:	6882      	ldr	r2, [r0, #8]
 8008082:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8008084:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008086:	4302      	orrs	r2, r0
 8008088:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800808a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800808e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008092:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008094:	430a      	orrs	r2, r1
 8008096:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008098:	695a      	ldr	r2, [r3, #20]
 800809a:	69a9      	ldr	r1, [r5, #24]
 800809c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080a0:	430a      	orrs	r2, r1
 80080a2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80080a4:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <UART_SetConfig+0x70>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d114      	bne.n	80080d4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080aa:	f7ff fd65 	bl	8007b78 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080ae:	4360      	muls	r0, r4
 80080b0:	686c      	ldr	r4, [r5, #4]
 80080b2:	2264      	movs	r2, #100	; 0x64
 80080b4:	00a4      	lsls	r4, r4, #2
 80080b6:	fbb0 f0f4 	udiv	r0, r0, r4
 80080ba:	fbb0 f1f2 	udiv	r1, r0, r2
 80080be:	fb02 0311 	mls	r3, r2, r1, r0
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	3332      	adds	r3, #50	; 0x32
 80080c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ca:	682c      	ldr	r4, [r5, #0]
 80080cc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80080d0:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80080d4:	f7ff fd40 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
 80080d8:	e7e9      	b.n	80080ae <UART_SetConfig+0x42>
 80080da:	bf00      	nop
 80080dc:	40013800 	.word	0x40013800

080080e0 <HAL_UART_Init>:
{
 80080e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80080e2:	4604      	mov	r4, r0
 80080e4:	b340      	cbz	r0, 8008138 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80080ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80080ee:	b91b      	cbnz	r3, 80080f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80080f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80080f4:	f7fa f94e 	bl	8002394 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80080f8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80080fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80080fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8008100:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8008102:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008108:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800810a:	f7ff ffaf 	bl	800806c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800810e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008120:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008128:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800812a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800812e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008132:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008136:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008138:	2001      	movs	r0, #1
 800813a:	e7fc      	b.n	8008136 <HAL_UART_Init+0x56>

0800813c <HAL_UART_Receive_DMA>:
{
 800813c:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800813e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8008142:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008144:	2a20      	cmp	r2, #32
{
 8008146:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8008148:	d138      	bne.n	80081bc <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 800814a:	2900      	cmp	r1, #0
 800814c:	d034      	beq.n	80081b8 <HAL_UART_Receive_DMA+0x7c>
 800814e:	2b00      	cmp	r3, #0
 8008150:	d032      	beq.n	80081b8 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8008152:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8008156:	2a01      	cmp	r2, #1
 8008158:	d030      	beq.n	80081bc <HAL_UART_Receive_DMA+0x80>
 800815a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 800815e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008162:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8008164:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008166:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008168:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800816a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800816e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008170:	4a13      	ldr	r2, [pc, #76]	; (80081c0 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008172:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008174:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008176:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <HAL_UART_Receive_DMA+0x88>)
 8008178:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800817a:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800817c:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008180:	460a      	mov	r2, r1
 8008182:	1d31      	adds	r1, r6, #4
 8008184:	f7fe f8e4 	bl	8006350 <HAL_DMA_Start_IT>
    return HAL_OK;
 8008188:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	9401      	str	r4, [sp, #4]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	9201      	str	r2, [sp, #4]
 8008192:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8008194:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008198:	9201      	str	r2, [sp, #4]
 800819a:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b2:	615a      	str	r2, [r3, #20]
}
 80081b4:	b002      	add	sp, #8
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80081b8:	2001      	movs	r0, #1
 80081ba:	e7fb      	b.n	80081b4 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 80081bc:	2002      	movs	r0, #2
 80081be:	e7f9      	b.n	80081b4 <HAL_UART_Receive_DMA+0x78>
 80081c0:	080081cf 	.word	0x080081cf
 80081c4:	08008209 	.word	0x08008209
 80081c8:	08008215 	.word	0x08008215

080081cc <HAL_UART_RxCpltCallback>:
 80081cc:	4770      	bx	lr

080081ce <UART_DMAReceiveCplt>:
{
 80081ce:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081d0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f013 0320 	ands.w	r3, r3, #32
 80081da:	d110      	bne.n	80081fe <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80081dc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	68d9      	ldr	r1, [r3, #12]
 80081e2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80081e6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	6959      	ldr	r1, [r3, #20]
 80081ea:	f021 0101 	bic.w	r1, r1, #1
 80081ee:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f0:	6959      	ldr	r1, [r3, #20]
 80081f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80081f6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80081f8:	2320      	movs	r3, #32
 80081fa:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80081fe:	4610      	mov	r0, r2
 8008200:	f7ff ffe4 	bl	80081cc <HAL_UART_RxCpltCallback>
}
 8008204:	bd08      	pop	{r3, pc}

08008206 <HAL_UART_RxHalfCpltCallback>:
 8008206:	4770      	bx	lr

08008208 <UART_DMARxHalfCplt>:
{
 8008208:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800820a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800820c:	f7ff fffb 	bl	8008206 <HAL_UART_RxHalfCpltCallback>
}
 8008210:	bd08      	pop	{r3, pc}

08008212 <HAL_UART_ErrorCallback>:
 8008212:	4770      	bx	lr

08008214 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008214:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8008216:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008218:	680b      	ldr	r3, [r1, #0]
 800821a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800821c:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8008220:	2821      	cmp	r0, #33	; 0x21
 8008222:	d10a      	bne.n	800823a <UART_DMAError+0x26>
 8008224:	0612      	lsls	r2, r2, #24
 8008226:	d508      	bpl.n	800823a <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8008228:	2200      	movs	r2, #0
 800822a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008232:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008234:	2220      	movs	r2, #32
 8008236:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800823a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800823c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8008240:	2a22      	cmp	r2, #34	; 0x22
 8008242:	d106      	bne.n	8008252 <UART_DMAError+0x3e>
 8008244:	065b      	lsls	r3, r3, #25
 8008246:	d504      	bpl.n	8008252 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8008248:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800824a:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 800824c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800824e:	f7ff feff 	bl	8008050 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008252:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008254:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008256:	f043 0310 	orr.w	r3, r3, #16
 800825a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800825c:	f7ff ffd9 	bl	8008212 <HAL_UART_ErrorCallback>
}
 8008260:	bd08      	pop	{r3, pc}

08008262 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008262:	b084      	sub	sp, #16
 8008264:	a801      	add	r0, sp, #4
 8008266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800826a:	b004      	add	sp, #16
 800826c:	2000      	movs	r0, #0
 800826e:	4770      	bx	lr

08008270 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008270:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8008274:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8008278:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 800827c:	2000      	movs	r0, #0
 800827e:	4770      	bx	lr

08008280 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008280:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8008284:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008288:	045b      	lsls	r3, r3, #17
 800828a:	0c5b      	lsrs	r3, r3, #17
 800828c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8008290:	2000      	movs	r0, #0
 8008292:	4770      	bx	lr

08008294 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8008294:	2000      	movs	r0, #0
 8008296:	4770      	bx	lr

08008298 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008298:	b084      	sub	sp, #16
 800829a:	b510      	push	{r4, lr}
 800829c:	ac03      	add	r4, sp, #12
 800829e:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80082a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80082b2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80082b6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80082ba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80082be:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80082c0:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 80082c4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	4770      	bx	lr

080082cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80082ce:	780c      	ldrb	r4, [r1, #0]
{
 80082d0:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80082d2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80082d6:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80082d8:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80082dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 80082e0:	2803      	cmp	r0, #3
 80082e2:	d803      	bhi.n	80082ec <USB_ActivateEndpoint+0x20>
 80082e4:	e8df f000 	tbb	[pc, r0]
 80082e8:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80082ec:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80082ee:	f248 0580 	movw	r5, #32896	; 0x8080
 80082f2:	432a      	orrs	r2, r5
 80082f4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082f8:	780e      	ldrb	r6, [r1, #0]
 80082fa:	4a9e      	ldr	r2, [pc, #632]	; (8008574 <USB_ActivateEndpoint+0x2a8>)
 80082fc:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8008300:	4335      	orrs	r5, r6
 8008302:	4014      	ands	r4, r2
 8008304:	432c      	orrs	r4, r5
 8008306:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800830a:	7b0d      	ldrb	r5, [r1, #12]
 800830c:	780c      	ldrb	r4, [r1, #0]
 800830e:	2d00      	cmp	r5, #0
 8008310:	f040 8082 	bne.w	8008418 <USB_ActivateEndpoint+0x14c>
 8008314:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8008316:	784e      	ldrb	r6, [r1, #1]
 8008318:	086d      	lsrs	r5, r5, #1
 800831a:	006d      	lsls	r5, r5, #1
 800831c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8008320:	b376      	cbz	r6, 8008380 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008322:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8008326:	4434      	add	r4, r6
 8008328:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800832c:	780d      	ldrb	r5, [r1, #0]
 800832e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008332:	0667      	lsls	r7, r4, #25
 8008334:	d508      	bpl.n	8008348 <USB_ActivateEndpoint+0x7c>
 8008336:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800833a:	4022      	ands	r2, r4
 800833c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008340:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008344:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008348:	78ca      	ldrb	r2, [r1, #3]
 800834a:	780c      	ldrb	r4, [r1, #0]
 800834c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800834e:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8008352:	4a89      	ldr	r2, [pc, #548]	; (8008578 <USB_ActivateEndpoint+0x2ac>)
 8008354:	ea02 0201 	and.w	r2, r2, r1
 8008358:	bf18      	it	ne
 800835a:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800835e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008366:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800836c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8008370:	2000      	movs	r0, #0
 8008372:	e7bc      	b.n	80082ee <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8008374:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8008378:	e7fa      	b.n	8008370 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800837a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800837e:	e7f7      	b.n	8008370 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008380:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008384:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008386:	4414      	add	r4, r2
 8008388:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800838c:	780a      	ldrb	r2, [r1, #0]
 800838e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8008392:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008396:	b2a4      	uxth	r4, r4
 8008398:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800839c:	bb56      	cbnz	r6, 80083f4 <USB_ActivateEndpoint+0x128>
 800839e:	5b15      	ldrh	r5, [r2, r4]
 80083a0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80083a4:	042d      	lsls	r5, r5, #16
 80083a6:	0c2d      	lsrs	r5, r5, #16
 80083a8:	5315      	strh	r5, [r2, r4]
 80083aa:	5b15      	ldrh	r5, [r2, r4]
 80083ac:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80083b0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083b2:	780c      	ldrb	r4, [r1, #0]
 80083b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80083b8:	0457      	lsls	r7, r2, #17
 80083ba:	d50b      	bpl.n	80083d4 <USB_ActivateEndpoint+0x108>
 80083bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80083c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083c4:	0512      	lsls	r2, r2, #20
 80083c6:	0d12      	lsrs	r2, r2, #20
 80083c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80083cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083d0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083d4:	7809      	ldrb	r1, [r1, #0]
 80083d6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80083da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80083e2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083ee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80083f2:	e7ba      	b.n	800836a <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083f4:	2e3e      	cmp	r6, #62	; 0x3e
 80083f6:	d806      	bhi.n	8008406 <USB_ActivateEndpoint+0x13a>
 80083f8:	0875      	lsrs	r5, r6, #1
 80083fa:	07f6      	lsls	r6, r6, #31
 80083fc:	bf48      	it	mi
 80083fe:	3501      	addmi	r5, #1
 8008400:	02ad      	lsls	r5, r5, #10
 8008402:	b2ad      	uxth	r5, r5
 8008404:	e7d4      	b.n	80083b0 <USB_ActivateEndpoint+0xe4>
 8008406:	0977      	lsrs	r7, r6, #5
 8008408:	06f5      	lsls	r5, r6, #27
 800840a:	4d5c      	ldr	r5, [pc, #368]	; (800857c <USB_ActivateEndpoint+0x2b0>)
 800840c:	bf08      	it	eq
 800840e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8008412:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8008416:	e7f4      	b.n	8008402 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008418:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800841c:	4015      	ands	r5, r2
 800841e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8008422:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008426:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800842a:	780c      	ldrb	r4, [r1, #0]
 800842c:	890d      	ldrh	r5, [r1, #8]
 800842e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8008432:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8008436:	086d      	lsrs	r5, r5, #1
 8008438:	b2b6      	uxth	r6, r6
 800843a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800843e:	006d      	lsls	r5, r5, #1
 8008440:	53a5      	strh	r5, [r4, r6]
 8008442:	780c      	ldrb	r4, [r1, #0]
 8008444:	894d      	ldrh	r5, [r1, #10]
 8008446:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800844a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800844e:	086d      	lsrs	r5, r5, #1
 8008450:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8008454:	006d      	lsls	r5, r5, #1
 8008456:	b2b6      	uxth	r6, r6
 8008458:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800845a:	784c      	ldrb	r4, [r1, #1]
 800845c:	780d      	ldrb	r5, [r1, #0]
 800845e:	2c00      	cmp	r4, #0
 8008460:	d143      	bne.n	80084ea <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008462:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008466:	0466      	lsls	r6, r4, #17
 8008468:	d508      	bpl.n	800847c <USB_ActivateEndpoint+0x1b0>
 800846a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800846e:	4022      	ands	r2, r4
 8008470:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008478:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800847c:	780c      	ldrb	r4, [r1, #0]
 800847e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008482:	0655      	lsls	r5, r2, #25
 8008484:	d50b      	bpl.n	800849e <USB_ActivateEndpoint+0x1d2>
 8008486:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800848a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800848e:	0512      	lsls	r2, r2, #20
 8008490:	0d12      	lsrs	r2, r2, #20
 8008492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008496:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800849a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800849e:	780c      	ldrb	r4, [r1, #0]
 80084a0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80084a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80084a8:	0512      	lsls	r2, r2, #20
 80084aa:	0d12      	lsrs	r2, r2, #20
 80084ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80084b4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084b8:	f248 0480 	movw	r4, #32896	; 0x8080
 80084bc:	780d      	ldrb	r5, [r1, #0]
 80084be:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80084c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084ca:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80084ce:	4322      	orrs	r2, r4
 80084d0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084d4:	7809      	ldrb	r1, [r1, #0]
 80084d6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80084da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80084de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e2:	4314      	orrs	r4, r2
 80084e4:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 80084e8:	e73f      	b.n	800836a <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ea:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80084ee:	0464      	lsls	r4, r4, #17
 80084f0:	d508      	bpl.n	8008504 <USB_ActivateEndpoint+0x238>
 80084f2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80084f6:	4022      	ands	r2, r4
 80084f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80084fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008500:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008504:	780c      	ldrb	r4, [r1, #0]
 8008506:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800850a:	0652      	lsls	r2, r2, #25
 800850c:	d50b      	bpl.n	8008526 <USB_ActivateEndpoint+0x25a>
 800850e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008512:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008516:	0512      	lsls	r2, r2, #20
 8008518:	0d12      	lsrs	r2, r2, #20
 800851a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800851e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008522:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008526:	780c      	ldrb	r4, [r1, #0]
 8008528:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800852c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008530:	0512      	lsls	r2, r2, #20
 8008532:	0d12      	lsrs	r2, r2, #20
 8008534:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800853c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008540:	78ca      	ldrb	r2, [r1, #3]
 8008542:	780c      	ldrb	r4, [r1, #0]
 8008544:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008546:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800854a:	4a0b      	ldr	r2, [pc, #44]	; (8008578 <USB_ActivateEndpoint+0x2ac>)
 800854c:	ea02 0205 	and.w	r2, r2, r5
 8008550:	bf18      	it	ne
 8008552:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800855a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800855e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008562:	7809      	ldrb	r1, [r1, #0]
 8008564:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008568:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800856c:	0492      	lsls	r2, r2, #18
 800856e:	0c92      	lsrs	r2, r2, #18
 8008570:	e739      	b.n	80083e6 <USB_ActivateEndpoint+0x11a>
 8008572:	bf00      	nop
 8008574:	ffff8f8f 	.word	0xffff8f8f
 8008578:	ffff8fbf 	.word	0xffff8fbf
 800857c:	ffff8000 	.word	0xffff8000

08008580 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008580:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8008582:	7b0c      	ldrb	r4, [r1, #12]
 8008584:	784a      	ldrb	r2, [r1, #1]
 8008586:	780b      	ldrb	r3, [r1, #0]
 8008588:	bbbc      	cbnz	r4, 80085fa <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 800858a:	b1f2      	cbz	r2, 80085ca <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800858c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008590:	0652      	lsls	r2, r2, #25
 8008592:	d50b      	bpl.n	80085ac <USB_DeactivateEndpoint+0x2c>
 8008594:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008598:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800859c:	0512      	lsls	r2, r2, #20
 800859e:	0d12      	lsrs	r2, r2, #20
 80085a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80085a8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085ac:	780a      	ldrb	r2, [r1, #0]
 80085ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085b6:	051b      	lsls	r3, r3, #20
 80085b8:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80085c6:	2000      	movs	r0, #0
 80085c8:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80085ce:	0454      	lsls	r4, r2, #17
 80085d0:	d50b      	bpl.n	80085ea <USB_DeactivateEndpoint+0x6a>
 80085d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80085d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085da:	0512      	lsls	r2, r2, #20
 80085dc:	0d12      	lsrs	r2, r2, #20
 80085de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80085e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085ea:	780a      	ldrb	r2, [r1, #0]
 80085ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f4:	049b      	lsls	r3, r3, #18
 80085f6:	0c9b      	lsrs	r3, r3, #18
 80085f8:	e7df      	b.n	80085ba <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	d144      	bne.n	8008688 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008602:	0452      	lsls	r2, r2, #17
 8008604:	d50b      	bpl.n	800861e <USB_DeactivateEndpoint+0x9e>
 8008606:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800860a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800860e:	0512      	lsls	r2, r2, #20
 8008610:	0d12      	lsrs	r2, r2, #20
 8008612:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800861a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800861e:	780a      	ldrb	r2, [r1, #0]
 8008620:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008624:	065c      	lsls	r4, r3, #25
 8008626:	d50b      	bpl.n	8008640 <USB_DeactivateEndpoint+0xc0>
 8008628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800862c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008630:	051b      	lsls	r3, r3, #20
 8008632:	0d1b      	lsrs	r3, r3, #20
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800863c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8008640:	780a      	ldrb	r2, [r1, #0]
 8008642:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800864a:	051b      	lsls	r3, r3, #20
 800864c:	0d1b      	lsrs	r3, r3, #20
 800864e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008656:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800865a:	f248 0280 	movw	r2, #32896	; 0x8080
 800865e:	780c      	ldrb	r4, [r1, #0]
 8008660:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866c:	4313      	orrs	r3, r2
 800866e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008672:	7809      	ldrb	r1, [r1, #0]
 8008674:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008680:	431a      	orrs	r2, r3
 8008682:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8008686:	e79e      	b.n	80085c6 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008688:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800868c:	0452      	lsls	r2, r2, #17
 800868e:	d50b      	bpl.n	80086a8 <USB_DeactivateEndpoint+0x128>
 8008690:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008694:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008698:	0512      	lsls	r2, r2, #20
 800869a:	0d12      	lsrs	r2, r2, #20
 800869c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80086a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086a8:	780a      	ldrb	r2, [r1, #0]
 80086aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80086ae:	065b      	lsls	r3, r3, #25
 80086b0:	d50b      	bpl.n	80086ca <USB_DeactivateEndpoint+0x14a>
 80086b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80086b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ba:	051b      	lsls	r3, r3, #20
 80086bc:	0d1b      	lsrs	r3, r3, #20
 80086be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80086ca:	780a      	ldrb	r2, [r1, #0]
 80086cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80086d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086d4:	051b      	lsls	r3, r3, #20
 80086d6:	0d1b      	lsrs	r3, r3, #20
 80086d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086e4:	f248 0280 	movw	r2, #32896	; 0x8080
 80086e8:	780c      	ldrb	r4, [r1, #0]
 80086ea:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086fc:	7809      	ldrb	r1, [r1, #0]
 80086fe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8008702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	e7b9      	b.n	8008680 <USB_DeactivateEndpoint+0x100>

0800870c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800870c:	784b      	ldrb	r3, [r1, #1]
 800870e:	780a      	ldrb	r2, [r1, #0]
 8008710:	b17b      	cbz	r3, 8008732 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008712:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800871e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800872e:	2000      	movs	r0, #0
 8008730:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008732:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008742:	e7ee      	b.n	8008722 <USB_EPSetStall+0x16>

08008744 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008744:	7b0b      	ldrb	r3, [r1, #12]
 8008746:	bb23      	cbnz	r3, 8008792 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8008748:	784b      	ldrb	r3, [r1, #1]
 800874a:	780a      	ldrb	r2, [r1, #0]
 800874c:	b31b      	cbz	r3, 8008796 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800874e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008752:	065b      	lsls	r3, r3, #25
 8008754:	d50b      	bpl.n	800876e <USB_EPClearStall+0x2a>
 8008756:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800875a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800875e:	051b      	lsls	r3, r3, #20
 8008760:	0d1b      	lsrs	r3, r3, #20
 8008762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800876a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800876e:	78cb      	ldrb	r3, [r1, #3]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d00e      	beq.n	8008792 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008774:	780a      	ldrb	r2, [r1, #0]
 8008776:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800877a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008782:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8008792:	2000      	movs	r0, #0
 8008794:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008796:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800879a:	045b      	lsls	r3, r3, #17
 800879c:	d50b      	bpl.n	80087b6 <USB_EPClearStall+0x72>
 800879e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087a6:	051b      	lsls	r3, r3, #20
 80087a8:	0d1b      	lsrs	r3, r3, #20
 80087aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087b6:	780a      	ldrb	r2, [r1, #0]
 80087b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80087c8:	e7dd      	b.n	8008786 <USB_EPClearStall+0x42>

080087ca <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80087ca:	b911      	cbnz	r1, 80087d2 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80087d2:	2000      	movs	r0, #0
 80087d4:	4770      	bx	lr

080087d6 <USB_DevConnect>:
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr

080087da <USB_DevDisconnect>:
 80087da:	2000      	movs	r0, #0
 80087dc:	4770      	bx	lr

080087de <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80087de:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80087e2:	4770      	bx	lr

080087e4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80087e4:	2000      	movs	r0, #0
 80087e6:	4770      	bx	lr

080087e8 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087ec:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d100      	bne.n	80087fe <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80087fc:	4770      	bx	lr
 80087fe:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8008802:	f822 0b04 	strh.w	r0, [r2], #4
 8008806:	e7f7      	b.n	80087f8 <USB_WritePMA+0x10>

08008808 <USB_EPStartXfer>:
{
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 800880c:	7849      	ldrb	r1, [r1, #1]
{
 800880e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8008810:	2901      	cmp	r1, #1
 8008812:	69aa      	ldr	r2, [r5, #24]
 8008814:	692b      	ldr	r3, [r5, #16]
 8008816:	7b28      	ldrb	r0, [r5, #12]
 8008818:	d15d      	bne.n	80088d6 <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 800881a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800881c:	bf9d      	ittte	ls
 800881e:	2300      	movls	r3, #0
 8008820:	61ab      	strls	r3, [r5, #24]
 8008822:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8008824:	1ad2      	subhi	r2, r2, r3
 8008826:	bf88      	it	hi
 8008828:	61aa      	strhi	r2, [r5, #24]
 800882a:	6969      	ldr	r1, [r5, #20]
 800882c:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 800882e:	b9e8      	cbnz	r0, 800886c <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008830:	4633      	mov	r3, r6
 8008832:	88ea      	ldrh	r2, [r5, #6]
 8008834:	4620      	mov	r0, r4
 8008836:	f7ff ffd7 	bl	80087e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800883a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800883e:	782a      	ldrb	r2, [r5, #0]
 8008840:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8008844:	0112      	lsls	r2, r2, #4
 8008846:	440b      	add	r3, r1
 8008848:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800884a:	782a      	ldrb	r2, [r5, #0]
 800884c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8008850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008858:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800885c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008864:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8008868:	2000      	movs	r0, #0
 800886a:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800886c:	782b      	ldrb	r3, [r5, #0]
 800886e:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008872:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008876:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008878:	bf4b      	itete	mi
 800887a:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800887e:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008882:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008884:	1812      	addpl	r2, r2, r0
 8008886:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800888a:	bf4b      	itete	mi
 800888c:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800888e:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8008890:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8008892:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008894:	4633      	mov	r3, r6
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff ffa6 	bl	80087e8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800889c:	786b      	ldrb	r3, [r5, #1]
 800889e:	782a      	ldrb	r2, [r5, #0]
 80088a0:	b963      	cbnz	r3, 80088bc <USB_EPStartXfer+0xb4>
 80088a2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80088a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088aa:	051b      	lsls	r3, r3, #20
 80088ac:	0d1b      	lsrs	r3, r3, #20
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088b6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80088ba:	e7c6      	b.n	800884a <USB_EPStartXfer+0x42>
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d1c4      	bne.n	800884a <USB_EPStartXfer+0x42>
 80088c0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80088c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088c8:	051b      	lsls	r3, r3, #20
 80088ca:	0d1b      	lsrs	r3, r3, #20
 80088cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d4:	e7ef      	b.n	80088b6 <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 80088d6:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80088d8:	bf93      	iteet	ls
 80088da:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 80088dc:	1ad2      	subhi	r2, r2, r3
 80088de:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 80088e0:	61ab      	strls	r3, [r5, #24]
 80088e2:	bf98      	it	ls
 80088e4:	4613      	movls	r3, r2
 80088e6:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 80088e8:	b990      	cbnz	r0, 8008910 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088ea:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80088ee:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 80088f2:	4401      	add	r1, r0
 80088f4:	0112      	lsls	r2, r2, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d13b      	bne.n	8008972 <USB_EPStartXfer+0x16a>
 80088fa:	5a8b      	ldrh	r3, [r1, r2]
 80088fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	528b      	strh	r3, [r1, r2]
 8008906:	5a8b      	ldrh	r3, [r1, r2]
 8008908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800890c:	528b      	strh	r3, [r1, r2]
 800890e:	e039      	b.n	8008984 <USB_EPStartXfer+0x17c>
 8008910:	b981      	cbnz	r1, 8008934 <USB_EPStartXfer+0x12c>
 8008912:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008916:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800891a:	4401      	add	r1, r0
 800891c:	0112      	lsls	r2, r2, #4
 800891e:	b9b3      	cbnz	r3, 800894e <USB_EPStartXfer+0x146>
 8008920:	5a88      	ldrh	r0, [r1, r2]
 8008922:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8008926:	0400      	lsls	r0, r0, #16
 8008928:	0c00      	lsrs	r0, r0, #16
 800892a:	5288      	strh	r0, [r1, r2]
 800892c:	5a88      	ldrh	r0, [r1, r2]
 800892e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8008932:	5288      	strh	r0, [r1, r2]
 8008934:	7869      	ldrb	r1, [r5, #1]
 8008936:	782a      	ldrb	r2, [r5, #0]
 8008938:	2900      	cmp	r1, #0
 800893a:	d0d6      	beq.n	80088ea <USB_EPStartXfer+0xe2>
 800893c:	2901      	cmp	r1, #1
 800893e:	d121      	bne.n	8008984 <USB_EPStartXfer+0x17c>
 8008940:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8008944:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8008948:	4401      	add	r1, r0
 800894a:	0112      	lsls	r2, r2, #4
 800894c:	e02c      	b.n	80089a8 <USB_EPStartXfer+0x1a0>
 800894e:	2b3e      	cmp	r3, #62	; 0x3e
 8008950:	d806      	bhi.n	8008960 <USB_EPStartXfer+0x158>
 8008952:	0858      	lsrs	r0, r3, #1
 8008954:	07de      	lsls	r6, r3, #31
 8008956:	bf48      	it	mi
 8008958:	3001      	addmi	r0, #1
 800895a:	0280      	lsls	r0, r0, #10
 800895c:	b280      	uxth	r0, r0
 800895e:	e7e8      	b.n	8008932 <USB_EPStartXfer+0x12a>
 8008960:	095e      	lsrs	r6, r3, #5
 8008962:	06d8      	lsls	r0, r3, #27
 8008964:	4811      	ldr	r0, [pc, #68]	; (80089ac <USB_EPStartXfer+0x1a4>)
 8008966:	bf08      	it	eq
 8008968:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800896c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008970:	e7f4      	b.n	800895c <USB_EPStartXfer+0x154>
 8008972:	2b3e      	cmp	r3, #62	; 0x3e
 8008974:	d810      	bhi.n	8008998 <USB_EPStartXfer+0x190>
 8008976:	0858      	lsrs	r0, r3, #1
 8008978:	07de      	lsls	r6, r3, #31
 800897a:	bf48      	it	mi
 800897c:	3001      	addmi	r0, #1
 800897e:	0280      	lsls	r0, r0, #10
 8008980:	b280      	uxth	r0, r0
 8008982:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008984:	782a      	ldrb	r2, [r5, #0]
 8008986:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800898a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008996:	e761      	b.n	800885c <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008998:	0958      	lsrs	r0, r3, #5
 800899a:	06db      	lsls	r3, r3, #27
 800899c:	4b03      	ldr	r3, [pc, #12]	; (80089ac <USB_EPStartXfer+0x1a4>)
 800899e:	bf08      	it	eq
 80089a0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80089a4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	e7af      	b.n	800890c <USB_EPStartXfer+0x104>
 80089ac:	ffff8000 	.word	0xffff8000

080089b0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089b0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80089b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089ba:	085d      	lsrs	r5, r3, #1
 80089bc:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089be:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80089c0:	462e      	mov	r6, r5
 80089c2:	3002      	adds	r0, #2
 80089c4:	b936      	cbnz	r6, 80089d4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089c6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80089c8:	bf44      	itt	mi
 80089ca:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089ce:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80089d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80089d4:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 80089d8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80089da:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089dc:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80089e0:	0a24      	lsrs	r4, r4, #8
 80089e2:	f800 4c01 	strb.w	r4, [r0, #-1]
 80089e6:	e7ec      	b.n	80089c2 <USB_ReadPMA+0x12>

080089e8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089e8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80089ec:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089ee:	b16b      	cbz	r3, 8008a0c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80089f4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80089f8:	28ff      	cmp	r0, #255	; 0xff
 80089fa:	d007      	beq.n	8008a0c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008a02:	4621      	mov	r1, r4
 8008a04:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008a06:	23ff      	movs	r3, #255	; 0xff
 8008a08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a10:	2343      	movs	r3, #67	; 0x43
 8008a12:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008a14:	4800      	ldr	r0, [pc, #0]	; (8008a18 <USBD_CDC_GetFSCfgDesc+0x8>)
 8008a16:	4770      	bx	lr
 8008a18:	2000007c 	.word	0x2000007c

08008a1c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a1c:	2343      	movs	r3, #67	; 0x43
 8008a1e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008a20:	4800      	ldr	r0, [pc, #0]	; (8008a24 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008a22:	4770      	bx	lr
 8008a24:	200000c0 	.word	0x200000c0

08008a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a28:	2343      	movs	r3, #67	; 0x43
 8008a2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008a2c:	4800      	ldr	r0, [pc, #0]	; (8008a30 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008a2e:	4770      	bx	lr
 8008a30:	20000110 	.word	0x20000110

08008a34 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a34:	230a      	movs	r3, #10
 8008a36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008a38:	4800      	ldr	r0, [pc, #0]	; (8008a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008a3a:	4770      	bx	lr
 8008a3c:	20000104 	.word	0x20000104

08008a40 <USBD_CDC_DataOut>:
{
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a44:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a48:	f000 ff1c 	bl	8009884 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8008a4c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a50:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8008a54:	b14b      	cbz	r3, 8008a6a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a56:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8008a5a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8008a64:	4798      	blx	r3
    return USBD_OK;
 8008a66:	2000      	movs	r0, #0
}
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008a6a:	2002      	movs	r0, #2
 8008a6c:	e7fc      	b.n	8008a68 <USBD_CDC_DataOut+0x28>

08008a6e <USBD_CDC_DataIn>:
{
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a70:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8008a74:	b1ce      	cbz	r6, 8008aaa <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a76:	2314      	movs	r3, #20
 8008a78:	fb03 0301 	mla	r3, r3, r1, r0
 8008a7c:	69da      	ldr	r2, [r3, #28]
 8008a7e:	b182      	cbz	r2, 8008aa2 <USBD_CDC_DataIn+0x34>
 8008a80:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8008a84:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8008a88:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008a8a:	fbb2 f4f5 	udiv	r4, r2, r5
 8008a8e:	fb05 2414 	mls	r4, r5, r4, r2
 8008a92:	b934      	cbnz	r4, 8008aa2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8008a94:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a96:	4622      	mov	r2, r4
 8008a98:	4623      	mov	r3, r4
 8008a9a:	f000 fed7 	bl	800984c <USBD_LL_Transmit>
    return USBD_OK;
 8008a9e:	4620      	mov	r0, r4
}
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8008aa8:	e7fa      	b.n	8008aa0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8008aaa:	2002      	movs	r0, #2
 8008aac:	e7f8      	b.n	8008aa0 <USBD_CDC_DataIn+0x32>

08008aae <USBD_CDC_Setup>:
{
 8008aae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8008ab2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab6:	780a      	ldrb	r2, [r1, #0]
{
 8008ab8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aba:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8008abe:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ac0:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8008ac4:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8008ac8:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008acc:	d028      	beq.n	8008b20 <USBD_CDC_Setup+0x72>
 8008ace:	2c20      	cmp	r4, #32
 8008ad0:	d145      	bne.n	8008b5e <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8008ad2:	88cc      	ldrh	r4, [r1, #6]
 8008ad4:	784b      	ldrb	r3, [r1, #1]
 8008ad6:	b1e4      	cbz	r4, 8008b12 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8008ad8:	0612      	lsls	r2, r2, #24
 8008ada:	d511      	bpl.n	8008b00 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008adc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	4622      	mov	r2, r4
 8008aea:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008aec:	88f2      	ldrh	r2, [r6, #6]
 8008aee:	4639      	mov	r1, r7
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fc46 	bl	8009382 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008af6:	4644      	mov	r4, r8
}
 8008af8:	4620      	mov	r0, r4
 8008afa:	b003      	add	sp, #12
 8008afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8008b00:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b04:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b08:	4622      	mov	r2, r4
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f000 fc4e 	bl	80093ac <USBD_CtlPrepareRx>
 8008b10:	e7f1      	b.n	8008af6 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b12:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008b16:	4618      	mov	r0, r3
 8008b18:	6895      	ldr	r5, [r2, #8]
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	47a8      	blx	r5
 8008b1e:	e7eb      	b.n	8008af8 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8008b20:	784f      	ldrb	r7, [r1, #1]
 8008b22:	2f0a      	cmp	r7, #10
 8008b24:	d00d      	beq.n	8008b42 <USBD_CDC_Setup+0x94>
 8008b26:	2f0b      	cmp	r7, #11
 8008b28:	d015      	beq.n	8008b56 <USBD_CDC_Setup+0xa8>
 8008b2a:	b9c7      	cbnz	r7, 8008b5e <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d114      	bne.n	8008b5e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b34:	2202      	movs	r2, #2
 8008b36:	f10d 0106 	add.w	r1, sp, #6
 8008b3a:	f000 fc22 	bl	8009382 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008b3e:	463c      	mov	r4, r7
 8008b40:	e7da      	b.n	8008af8 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d109      	bne.n	8008b5e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f10d 0105 	add.w	r1, sp, #5
 8008b50:	f000 fc17 	bl	8009382 <USBD_CtlSendData>
 8008b54:	e7d0      	b.n	8008af8 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b56:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d0cc      	beq.n	8008af8 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 fbe7 	bl	8009334 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b66:	2402      	movs	r4, #2
          break;
 8008b68:	e7c6      	b.n	8008af8 <USBD_CDC_Setup+0x4a>

08008b6a <USBD_CDC_DeInit>:
{
 8008b6a:	b538      	push	{r3, r4, r5, lr}
 8008b6c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b6e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b70:	2181      	movs	r1, #129	; 0x81
 8008b72:	f000 fe23 	bl	80097bc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b76:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b78:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fe1e 	bl	80097bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b80:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b84:	2182      	movs	r1, #130	; 0x82
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fe18 	bl	80097bc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008b8c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b90:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008b92:	b14b      	cbz	r3, 8008ba8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b94:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b9c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008ba0:	f000 fe78 	bl	8009894 <USBD_static_free>
    pdev->pClassData = NULL;
 8008ba4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8008ba8:	2000      	movs	r0, #0
 8008baa:	bd38      	pop	{r3, r4, r5, pc}

08008bac <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bac:	7c03      	ldrb	r3, [r0, #16]
{
 8008bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb4:	bbcb      	cbnz	r3, 8008c2a <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bba:	2202      	movs	r2, #2
 8008bbc:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bbe:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bc0:	f000 fdec 	bl	800979c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bc8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bca:	4629      	mov	r1, r5
 8008bcc:	2202      	movs	r2, #2
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fde4 	bl	800979c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bd4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008bd8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bda:	2308      	movs	r3, #8
 8008bdc:	2203      	movs	r2, #3
 8008bde:	2182      	movs	r1, #130	; 0x82
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fddb 	bl	800979c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008be6:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008be8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bec:	f000 fe4e 	bl	800988c <USBD_static_malloc>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008bf6:	b350      	cbz	r0, 8008c4e <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8008bf8:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bfa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c02:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8008c06:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c0a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	d113      	bne.n	8008c3c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c18:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fe22 	bl	8009868 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008c24:	4640      	mov	r0, r8
}
 8008c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c2a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c2c:	2340      	movs	r3, #64	; 0x40
 8008c2e:	2202      	movs	r2, #2
 8008c30:	2181      	movs	r1, #129	; 0x81
 8008c32:	f000 fdb3 	bl	800979c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c36:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c38:	2340      	movs	r3, #64	; 0x40
 8008c3a:	e7c6      	b.n	8008bca <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008c42:	4629      	mov	r1, r5
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fe0f 	bl	8009868 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	e7eb      	b.n	8008c26 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e7e9      	b.n	8008c26 <USBD_CDC_Init+0x7a>

08008c52 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008c52:	b119      	cbz	r1, 8008c5c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008c54:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008c58:	2000      	movs	r0, #0
 8008c5a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008c5c:	2002      	movs	r0, #2
  }

  return ret;
}
 8008c5e:	4770      	bx	lr

08008c60 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c60:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008c64:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008c66:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008c6e:	4770      	bx	lr

08008c70 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008c70:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008c74:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008c76:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008c7a:	4770      	bx	lr

08008c7c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c7c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008c80:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8008c82:	b182      	cbz	r2, 8008ca6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8008c84:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008c88:	2301      	movs	r3, #1
 8008c8a:	b974      	cbnz	r4, 8008caa <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008c8c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c90:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c94:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c96:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c98:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f000 fdd5 	bl	800984c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8008ca2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008ca4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008ca6:	2002      	movs	r0, #2
 8008ca8:	e7fc      	b.n	8008ca4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8008caa:	4618      	mov	r0, r3
 8008cac:	e7fa      	b.n	8008ca4 <USBD_CDC_TransmitPacket+0x28>

08008cae <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008cb2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008cb4:	b162      	cbz	r2, 8008cd0 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb6:	7c04      	ldrb	r4, [r0, #16]
 8008cb8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008cbc:	b934      	cbnz	r4, 8008ccc <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	f000 fdd0 	bl	8009868 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008cc8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008cca:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	e7f8      	b.n	8008cc2 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8008cd0:	2002      	movs	r0, #2
 8008cd2:	e7fa      	b.n	8008cca <USBD_CDC_ReceivePacket+0x1c>

08008cd4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cd4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cd6:	b180      	cbz	r0, 8008cfa <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008cd8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008cdc:	b113      	cbz	r3, 8008ce4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ce4:	b109      	cbz	r1, 8008cea <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008ce6:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cea:	2301      	movs	r3, #1
  pdev->id = id;
 8008cec:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cf2:	f000 fd03 	bl	80096fc <USBD_LL_Init>

  return USBD_OK;
 8008cf6:	2000      	movs	r0, #0
}
 8008cf8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	e7fc      	b.n	8008cf8 <USBD_Init+0x24>

08008cfe <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008cfe:	b119      	cbz	r1, 8008d08 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d00:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008d04:	2000      	movs	r0, #0
 8008d06:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d08:	2002      	movs	r0, #2
  }

  return status;
}
 8008d0a:	4770      	bx	lr

08008d0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d0c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d0e:	f000 fd37 	bl	8009780 <USBD_LL_Start>

  return USBD_OK;
}
 8008d12:	2000      	movs	r0, #0
 8008d14:	bd08      	pop	{r3, pc}

08008d16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d16:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008d18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d1c:	b90b      	cbnz	r3, 8008d22 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d1e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008d20:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4798      	blx	r3
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0fa      	beq.n	8008d20 <USBD_SetClassConfig+0xa>
 8008d2a:	e7f8      	b.n	8008d1e <USBD_SetClassConfig+0x8>

08008d2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d2c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4798      	blx	r3

  return USBD_OK;
}
 8008d36:	2000      	movs	r0, #0
 8008d38:	bd08      	pop	{r3, pc}

08008d3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d3a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d3c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8008d40:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fae2 	bl	800930c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d48:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008d4a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8008d4e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8008d52:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8008d56:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008d5a:	f001 031f 	and.w	r3, r1, #31
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d00e      	beq.n	8008d80 <USBD_LL_SetupStage+0x46>
 8008d62:	d307      	bcc.n	8008d74 <USBD_LL_SetupStage+0x3a>
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d010      	beq.n	8008d8a <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d68:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fd33 	bl	80097d8 <USBD_LL_StallEP>
      break;
 8008d72:	e003      	b.n	8008d7c <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8008d74:	4629      	mov	r1, r5
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f8f6 	bl	8008f68 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8008d80:	4629      	mov	r1, r5
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fa14 	bl	80091b0 <USBD_StdItfReq>
      break;
 8008d88:	e7f8      	b.n	8008d7c <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fa34 	bl	80091fa <USBD_StdEPReq>
      break;
 8008d92:	e7f3      	b.n	8008d7c <USBD_LL_SetupStage+0x42>

08008d94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4605      	mov	r5, r0
 8008d98:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d9a:	bb49      	cbnz	r1, 8008df0 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d9c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d11e      	bne.n	8008de2 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008da4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8008da8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d90b      	bls.n	8008dc8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8008db0:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008db2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8008db4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008db8:	bf8c      	ite	hi
 8008dba:	b29a      	uxthhi	r2, r3
 8008dbc:	b292      	uxthls	r2, r2
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	f000 fb03 	bl	80093ca <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008dc4:	2000      	movs	r0, #0
}
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	b123      	cbz	r3, 8008dda <USBD_LL_DataOutStage+0x46>
 8008dd0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008dd4:	2a03      	cmp	r2, #3
 8008dd6:	d100      	bne.n	8008dda <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8008dd8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 fafd 	bl	80093da <USBD_CtlSendStatus>
 8008de0:	e7f0      	b.n	8008dc4 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d1ee      	bne.n	8008dc4 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8008de6:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008dea:	f000 fcf5 	bl	80097d8 <USBD_LL_StallEP>
 8008dee:	e7e9      	b.n	8008dc4 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008df0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	b12b      	cbz	r3, 8008e04 <USBD_LL_DataOutStage+0x70>
 8008df8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008dfc:	2a03      	cmp	r2, #3
 8008dfe:	d101      	bne.n	8008e04 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8008e00:	4798      	blx	r3
 8008e02:	e7df      	b.n	8008dc4 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008e04:	2002      	movs	r0, #2
 8008e06:	e7de      	b.n	8008dc6 <USBD_LL_DataOutStage+0x32>

08008e08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e0e:	460e      	mov	r6, r1
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d147      	bne.n	8008ea4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e14:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008e18:	2a02      	cmp	r2, #2
 8008e1a:	d13c      	bne.n	8008e96 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1c:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8008e20:	4295      	cmp	r5, r2
 8008e22:	d913      	bls.n	8008e4c <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8008e24:	1aaa      	subs	r2, r5, r2
 8008e26:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008e28:	4619      	mov	r1, r3
 8008e2a:	b292      	uxth	r2, r2
 8008e2c:	f000 fab6 	bl	800939c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e30:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e32:	461a      	mov	r2, r3
 8008e34:	4619      	mov	r1, r3
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 fd16 	bl	8009868 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e3c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008e40:	2000      	movs	r0, #0
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008e46:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e4c:	69c3      	ldr	r3, [r0, #28]
 8008e4e:	fbb3 f5f2 	udiv	r5, r3, r2
 8008e52:	fb02 3515 	mls	r5, r2, r5, r3
 8008e56:	b965      	cbnz	r5, 8008e72 <USBD_LL_DataInStage+0x6a>
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d80a      	bhi.n	8008e72 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8008e5c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d206      	bcs.n	8008e72 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e64:	462a      	mov	r2, r5
 8008e66:	f000 fa99 	bl	800939c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e6a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e6e:	462b      	mov	r3, r5
 8008e70:	e7df      	b.n	8008e32 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e72:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	b12b      	cbz	r3, 8008e86 <USBD_LL_DataInStage+0x7e>
 8008e7a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008e7e:	2a03      	cmp	r2, #3
 8008e80:	d101      	bne.n	8008e86 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8008e82:	4620      	mov	r0, r4
 8008e84:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fca5 	bl	80097d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 faae 	bl	80093f0 <USBD_CtlReceiveStatus>
 8008e94:	e7d2      	b.n	8008e3c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e96:	f032 0304 	bics.w	r3, r2, #4
 8008e9a:	d1cf      	bne.n	8008e3c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008e9c:	2180      	movs	r1, #128	; 0x80
 8008e9e:	f000 fc9b 	bl	80097d8 <USBD_LL_StallEP>
 8008ea2:	e7cb      	b.n	8008e3c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ea4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	b133      	cbz	r3, 8008eba <USBD_LL_DataInStage+0xb2>
 8008eac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008eb0:	2a03      	cmp	r2, #3
 8008eb2:	d102      	bne.n	8008eba <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8008eb4:	4798      	blx	r3
  return USBD_OK;
 8008eb6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8008eb8:	e7c7      	b.n	8008e4a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8008eba:	2002      	movs	r0, #2
 8008ebc:	e7c5      	b.n	8008e4a <USBD_LL_DataInStage+0x42>

08008ebe <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ebe:	2200      	movs	r2, #0
{
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ec4:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ec6:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	f000 fc66 	bl	800979c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ed4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ed8:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008edc:	2200      	movs	r2, #0
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fc5c 	bl	800979c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ee4:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008ee6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eea:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eec:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eee:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ef2:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ef6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ef8:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008efc:	b123      	cbz	r3, 8008f08 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008efe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008f02:	4620      	mov	r0, r4
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008f08:	2000      	movs	r0, #0
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}

08008f0c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008f0c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008f0e:	2000      	movs	r0, #0
 8008f10:	4770      	bx	lr

08008f12 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008f12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f16:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008f20:	2000      	movs	r0, #0
 8008f22:	4770      	bx	lr

08008f24 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f28:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f2a:	bf04      	itt	eq
 8008f2c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8008f30:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr

08008f38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f38:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008f3e:	2a03      	cmp	r2, #3
 8008f40:	d104      	bne.n	8008f4c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008f42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	b103      	cbz	r3, 8008f4c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd08      	pop	{r3, pc}

08008f50 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8008f50:	b510      	push	{r4, lr}
 8008f52:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8008f54:	2180      	movs	r1, #128	; 0x80
 8008f56:	f000 fc3f 	bl	80097d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f5a:	4620      	mov	r0, r4
}
 8008f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008f60:	2100      	movs	r1, #0
 8008f62:	f000 bc39 	b.w	80097d8 <USBD_LL_StallEP>
	...

08008f68 <USBD_StdDevReq>:
{
 8008f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6a:	780b      	ldrb	r3, [r1, #0]
{
 8008f6c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f72:	2b20      	cmp	r3, #32
{
 8008f74:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f76:	d012      	beq.n	8008f9e <USBD_StdDevReq+0x36>
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d010      	beq.n	8008f9e <USBD_StdDevReq+0x36>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d15b      	bne.n	8009038 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8008f80:	784b      	ldrb	r3, [r1, #1]
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	d858      	bhi.n	8009038 <USBD_StdDevReq+0xd0>
 8008f86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f8a:	00e9      	.short	0x00e9
 8008f8c:	00570105 	.word	0x00570105
 8008f90:	005700fe 	.word	0x005700fe
 8008f94:	00130084 	.word	0x00130084
 8008f98:	00d20057 	.word	0x00d20057
 8008f9c:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8008f9e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4798      	blx	r3
}
 8008faa:	2000      	movs	r0, #0
 8008fac:	b003      	add	sp, #12
 8008fae:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008fb6:	884b      	ldrh	r3, [r1, #2]
 8008fb8:	0a1a      	lsrs	r2, r3, #8
 8008fba:	3a01      	subs	r2, #1
 8008fbc:	2a06      	cmp	r2, #6
 8008fbe:	d83b      	bhi.n	8009038 <USBD_StdDevReq+0xd0>
 8008fc0:	e8df f002 	tbb	[pc, r2]
 8008fc4:	3a2d2004 	.word	0x3a2d2004
 8008fc8:	523a      	.short	0x523a
 8008fca:	5c          	.byte	0x5c
 8008fcb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fcc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008fd0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fd2:	f10d 0106 	add.w	r1, sp, #6
 8008fd6:	7c20      	ldrb	r0, [r4, #16]
 8008fd8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8008fda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008fde:	b152      	cbz	r2, 8008ff6 <USBD_StdDevReq+0x8e>
 8008fe0:	88eb      	ldrh	r3, [r5, #6]
 8008fe2:	b143      	cbz	r3, 8008ff6 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	bf28      	it	cs
 8008fe8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fea:	4601      	mov	r1, r0
 8008fec:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008fee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ff2:	f000 f9c6 	bl	8009382 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008ff6:	88eb      	ldrh	r3, [r5, #6]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1d6      	bne.n	8008faa <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 f9ec 	bl	80093da <USBD_CtlSendStatus>
 8009002:	e7d2      	b.n	8008faa <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009004:	7c02      	ldrb	r2, [r0, #16]
 8009006:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800900a:	b932      	cbnz	r2, 800901a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800900e:	f10d 0006 	add.w	r0, sp, #6
 8009012:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009014:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009016:	7043      	strb	r3, [r0, #1]
 8009018:	e7df      	b.n	8008fda <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	e7f7      	b.n	800900e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b05      	cmp	r3, #5
 8009022:	d809      	bhi.n	8009038 <USBD_StdDevReq+0xd0>
 8009024:	e8df f003 	tbb	[pc, r3]
 8009028:	14100c03 	.word	0x14100c03
 800902c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800902e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009032:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1cc      	bne.n	8008fd2 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8009038:	4620      	mov	r0, r4
 800903a:	f7ff ff89 	bl	8008f50 <USBD_CtlError.constprop.1>
 800903e:	e7b4      	b.n	8008faa <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009040:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	e7f5      	b.n	8009034 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009048:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	e7f1      	b.n	8009034 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009050:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	e7ed      	b.n	8009034 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009058:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	e7e9      	b.n	8009034 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009060:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	e7e5      	b.n	8009034 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009068:	7c03      	ldrb	r3, [r0, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e4      	bne.n	8009038 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800906e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009072:	f10d 0006 	add.w	r0, sp, #6
 8009076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009078:	4798      	blx	r3
 800907a:	e7ae      	b.n	8008fda <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907c:	7c03      	ldrb	r3, [r0, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1da      	bne.n	8009038 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009082:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009086:	f10d 0006 	add.w	r0, sp, #6
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800908e:	2307      	movs	r3, #7
 8009090:	e7c1      	b.n	8009016 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009092:	888b      	ldrh	r3, [r1, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1cf      	bne.n	8009038 <USBD_StdDevReq+0xd0>
 8009098:	88cb      	ldrh	r3, [r1, #6]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1cc      	bne.n	8009038 <USBD_StdDevReq+0xd0>
 800909e:	884d      	ldrh	r5, [r1, #2]
 80090a0:	2d7f      	cmp	r5, #127	; 0x7f
 80090a2:	d8c9      	bhi.n	8009038 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d0c5      	beq.n	8009038 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ac:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80090ae:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090b2:	f000 fbbd 	bl	8009830 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 f98f 	bl	80093da <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80090bc:	b11d      	cbz	r5, 80090c6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090be:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090c0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80090c4:	e771      	b.n	8008faa <USBD_StdDevReq+0x42>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e7fa      	b.n	80090c0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80090ca:	7889      	ldrb	r1, [r1, #2]
 80090cc:	4d37      	ldr	r5, [pc, #220]	; (80091ac <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090ce:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80090d0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090d2:	d8b1      	bhi.n	8009038 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80090d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d008      	beq.n	80090ee <USBD_StdDevReq+0x186>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d014      	beq.n	800910a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80090e0:	f7ff ff36 	bl	8008f50 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090e4:	7829      	ldrb	r1, [r5, #0]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7ff fe20 	bl	8008d2c <USBD_ClrClassConfig>
 80090ec:	e75d      	b.n	8008faa <USBD_StdDevReq+0x42>
        if (cfgidx)
 80090ee:	2900      	cmp	r1, #0
 80090f0:	d084      	beq.n	8008ffc <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 80090f2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090f4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80090f6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090fc:	4620      	mov	r0, r4
 80090fe:	f7ff fe0a 	bl	8008d16 <USBD_SetClassConfig>
 8009102:	2802      	cmp	r0, #2
 8009104:	f47f af7a 	bne.w	8008ffc <USBD_StdDevReq+0x94>
 8009108:	e796      	b.n	8009038 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800910a:	b931      	cbnz	r1, 800911a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800910c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800910e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009110:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8009114:	f7ff fe0a 	bl	8008d2c <USBD_ClrClassConfig>
 8009118:	e770      	b.n	8008ffc <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800911a:	6841      	ldr	r1, [r0, #4]
 800911c:	2901      	cmp	r1, #1
 800911e:	f43f af6d 	beq.w	8008ffc <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009122:	b2c9      	uxtb	r1, r1
 8009124:	f7ff fe02 	bl	8008d2c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009128:	7829      	ldrb	r1, [r5, #0]
 800912a:	6061      	str	r1, [r4, #4]
 800912c:	e7e6      	b.n	80090fc <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800912e:	88ca      	ldrh	r2, [r1, #6]
 8009130:	2a01      	cmp	r2, #1
 8009132:	d181      	bne.n	8009038 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8009134:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009138:	2b00      	cmp	r3, #0
 800913a:	f43f af7d 	beq.w	8009038 <USBD_StdDevReq+0xd0>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d904      	bls.n	800914c <USBD_StdDevReq+0x1e4>
 8009142:	2b03      	cmp	r3, #3
 8009144:	f47f af78 	bne.w	8009038 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009148:	1d01      	adds	r1, r0, #4
 800914a:	e003      	b.n	8009154 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800914c:	4601      	mov	r1, r0
 800914e:	2300      	movs	r3, #0
 8009150:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009154:	4620      	mov	r0, r4
 8009156:	f000 f914 	bl	8009382 <USBD_CtlSendData>
 800915a:	e726      	b.n	8008faa <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800915c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009160:	3b01      	subs	r3, #1
 8009162:	2b02      	cmp	r3, #2
 8009164:	f63f af68 	bhi.w	8009038 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8009168:	88cb      	ldrh	r3, [r1, #6]
 800916a:	2b02      	cmp	r3, #2
 800916c:	f47f af64 	bne.w	8009038 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009170:	2301      	movs	r3, #1
 8009172:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8009174:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8009178:	b10b      	cbz	r3, 800917e <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800917a:	2303      	movs	r3, #3
 800917c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800917e:	2202      	movs	r2, #2
 8009180:	f104 010c 	add.w	r1, r4, #12
 8009184:	e7e6      	b.n	8009154 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009186:	884b      	ldrh	r3, [r1, #2]
 8009188:	2b01      	cmp	r3, #1
 800918a:	f47f af0e 	bne.w	8008faa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800918e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8009192:	e733      	b.n	8008ffc <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8009194:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009198:	3b01      	subs	r3, #1
 800919a:	2b02      	cmp	r3, #2
 800919c:	f63f af4c 	bhi.w	8009038 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091a0:	884b      	ldrh	r3, [r1, #2]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	f47f af01 	bne.w	8008faa <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e7f0      	b.n	800918e <USBD_StdDevReq+0x226>
 80091ac:	200017a0 	.word	0x200017a0

080091b0 <USBD_StdItfReq>:
{
 80091b0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b2:	780b      	ldrb	r3, [r1, #0]
{
 80091b4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091ba:	2b20      	cmp	r3, #32
{
 80091bc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	d002      	beq.n	80091c6 <USBD_StdItfReq+0x16>
 80091c0:	2b40      	cmp	r3, #64	; 0x40
 80091c2:	d000      	beq.n	80091c6 <USBD_StdItfReq+0x16>
 80091c4:	b9ab      	cbnz	r3, 80091f2 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80091c6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80091ca:	3b01      	subs	r3, #1
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d810      	bhi.n	80091f2 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091d0:	792b      	ldrb	r3, [r5, #4]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d80d      	bhi.n	80091f2 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80091da:	4629      	mov	r1, r5
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	4620      	mov	r0, r4
 80091e0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091e2:	88eb      	ldrh	r3, [r5, #6]
 80091e4:	b91b      	cbnz	r3, 80091ee <USBD_StdItfReq+0x3e>
 80091e6:	b910      	cbnz	r0, 80091ee <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 f8f6 	bl	80093da <USBD_CtlSendStatus>
}
 80091ee:	2000      	movs	r0, #0
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff feac 	bl	8008f50 <USBD_CtlError.constprop.1>
          break;
 80091f8:	e7f9      	b.n	80091ee <USBD_StdItfReq+0x3e>

080091fa <USBD_StdEPReq>:
{
 80091fa:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fc:	780a      	ldrb	r2, [r1, #0]
{
 80091fe:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009200:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8009204:	2a20      	cmp	r2, #32
{
 8009206:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009208:	d014      	beq.n	8009234 <USBD_StdEPReq+0x3a>
 800920a:	2a40      	cmp	r2, #64	; 0x40
 800920c:	d012      	beq.n	8009234 <USBD_StdEPReq+0x3a>
 800920e:	b96a      	cbnz	r2, 800922c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8009210:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8009212:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8009214:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8009216:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8009218:	d020      	beq.n	800925c <USBD_StdEPReq+0x62>
 800921a:	d336      	bcc.n	800928a <USBD_StdEPReq+0x90>
 800921c:	2a03      	cmp	r2, #3
 800921e:	d105      	bne.n	800922c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8009220:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009224:	2a02      	cmp	r2, #2
 8009226:	d027      	beq.n	8009278 <USBD_StdEPReq+0x7e>
 8009228:	2a03      	cmp	r2, #3
 800922a:	d00b      	beq.n	8009244 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fe8f 	bl	8008f50 <USBD_CtlError.constprop.1>
              break;
 8009232:	e005      	b.n	8009240 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8009234:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8009238:	4619      	mov	r1, r3
 800923a:	6892      	ldr	r2, [r2, #8]
 800923c:	4620      	mov	r0, r4
 800923e:	4790      	blx	r2
}
 8009240:	2000      	movs	r0, #0
 8009242:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009244:	885a      	ldrh	r2, [r3, #2]
 8009246:	b92a      	cbnz	r2, 8009254 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8009248:	064a      	lsls	r2, r1, #25
 800924a:	d003      	beq.n	8009254 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800924c:	88db      	ldrh	r3, [r3, #6]
 800924e:	b90b      	cbnz	r3, 8009254 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8009250:	f000 fac2 	bl	80097d8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f8c0 	bl	80093da <USBD_CtlSendStatus>
              break;
 800925a:	e7f1      	b.n	8009240 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800925c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009260:	2a02      	cmp	r2, #2
 8009262:	d009      	beq.n	8009278 <USBD_StdEPReq+0x7e>
 8009264:	2a03      	cmp	r2, #3
 8009266:	d1e1      	bne.n	800922c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009268:	885b      	ldrh	r3, [r3, #2]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e8      	bne.n	8009240 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 800926e:	064d      	lsls	r5, r1, #25
 8009270:	d0f0      	beq.n	8009254 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009272:	f000 fabf 	bl	80097f4 <USBD_LL_ClearStallEP>
 8009276:	e7ed      	b.n	8009254 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009278:	064b      	lsls	r3, r1, #25
 800927a:	d0d7      	beq.n	800922c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 800927c:	f000 faac 	bl	80097d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009280:	2180      	movs	r1, #128	; 0x80
 8009282:	4620      	mov	r0, r4
 8009284:	f000 faa8 	bl	80097d8 <USBD_LL_StallEP>
 8009288:	e7da      	b.n	8009240 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800928a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800928e:	2b02      	cmp	r3, #2
 8009290:	d018      	beq.n	80092c4 <USBD_StdEPReq+0xca>
 8009292:	2b03      	cmp	r3, #3
 8009294:	d1ca      	bne.n	800922c <USBD_StdEPReq+0x32>
 8009296:	2314      	movs	r3, #20
 8009298:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800929c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092a0:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80092a4:	d01f      	beq.n	80092e6 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092a6:	6992      	ldr	r2, [r2, #24]
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d0bf      	beq.n	800922c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092ac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80092b0:	fb05 3503 	mla	r5, r5, r3, r3
 80092b4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092b6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80092ba:	d11f      	bne.n	80092fc <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80092bc:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092be:	2202      	movs	r2, #2
 80092c0:	4629      	mov	r1, r5
 80092c2:	e00c      	b.n	80092de <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c4:	064a      	lsls	r2, r1, #25
 80092c6:	d1b1      	bne.n	800922c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092c8:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80092ca:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092ce:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092d2:	bf4c      	ite	mi
 80092d4:	f100 0114 	addmi.w	r1, r0, #20
 80092d8:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80092dc:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f84f 	bl	8009382 <USBD_CtlSendData>
              break;
 80092e4:	e7ac      	b.n	8009240 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092e6:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	d09e      	beq.n	800922c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092ee:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f2:	fb03 0505 	mla	r5, r3, r5, r0
 80092f6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 80092fa:	e7dc      	b.n	80092b6 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fa87 	bl	8009810 <USBD_LL_IsStallEP>
 8009302:	b108      	cbz	r0, 8009308 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8009304:	2301      	movs	r3, #1
 8009306:	e7d9      	b.n	80092bc <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8009308:	6028      	str	r0, [r5, #0]
 800930a:	e7d8      	b.n	80092be <USBD_StdEPReq+0xc4>

0800930c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800930c:	780b      	ldrb	r3, [r1, #0]
 800930e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009310:	784b      	ldrb	r3, [r1, #1]
 8009312:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009314:	78ca      	ldrb	r2, [r1, #3]
 8009316:	788b      	ldrb	r3, [r1, #2]
 8009318:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800931c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800931e:	794a      	ldrb	r2, [r1, #5]
 8009320:	790b      	ldrb	r3, [r1, #4]
 8009322:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009326:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009328:	79ca      	ldrb	r2, [r1, #7]
 800932a:	798b      	ldrb	r3, [r1, #6]
 800932c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009330:	80c3      	strh	r3, [r0, #6]
}
 8009332:	4770      	bx	lr

08009334 <USBD_CtlError>:
{
 8009334:	b510      	push	{r4, lr}
 8009336:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8009338:	2180      	movs	r1, #128	; 0x80
 800933a:	f000 fa4d 	bl	80097d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800933e:	4620      	mov	r0, r4
}
 8009340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8009344:	2100      	movs	r1, #0
 8009346:	f000 ba47 	b.w	80097d8 <USBD_LL_StallEP>

0800934a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800934a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800934c:	b188      	cbz	r0, 8009372 <USBD_GetString+0x28>
 800934e:	4605      	mov	r5, r0
 8009350:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8009352:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2c00      	cmp	r4, #0
 800935a:	d1f9      	bne.n	8009350 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800935c:	3301      	adds	r3, #1
 800935e:	005b      	lsls	r3, r3, #1
 8009360:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009362:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009364:	2303      	movs	r3, #3
 8009366:	704b      	strb	r3, [r1, #1]
 8009368:	2302      	movs	r3, #2
 800936a:	3801      	subs	r0, #1
    while (*desc != '\0')
 800936c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009370:	b905      	cbnz	r5, 8009374 <USBD_GetString+0x2a>
}
 8009372:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	54cd      	strb	r5, [r1, r3]
 8009378:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800937a:	3302      	adds	r3, #2
 800937c:	b2db      	uxtb	r3, r3
 800937e:	548c      	strb	r4, [r1, r2]
 8009380:	e7f4      	b.n	800936c <USBD_GetString+0x22>

08009382 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009382:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009384:	2202      	movs	r2, #2
{
 8009386:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009388:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800938c:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009390:	460a      	mov	r2, r1
 8009392:	2100      	movs	r1, #0
 8009394:	f000 fa5a 	bl	800984c <USBD_LL_Transmit>

  return USBD_OK;
}
 8009398:	2000      	movs	r0, #0
 800939a:	bd10      	pop	{r4, pc}

0800939c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800939c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800939e:	4613      	mov	r3, r2
 80093a0:	460a      	mov	r2, r1
 80093a2:	2100      	movs	r1, #0
 80093a4:	f000 fa52 	bl	800984c <USBD_LL_Transmit>

  return USBD_OK;
}
 80093a8:	2000      	movs	r0, #0
 80093aa:	bd08      	pop	{r3, pc}

080093ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ae:	2203      	movs	r2, #3
{
 80093b0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093b6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ba:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80093bc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c0:	2100      	movs	r1, #0
 80093c2:	f000 fa51 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80093c6:	2000      	movs	r0, #0
 80093c8:	bd10      	pop	{r4, pc}

080093ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093ca:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093cc:	4613      	mov	r3, r2
 80093ce:	460a      	mov	r2, r1
 80093d0:	2100      	movs	r1, #0
 80093d2:	f000 fa49 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80093d6:	2000      	movs	r0, #0
 80093d8:	bd08      	pop	{r3, pc}

080093da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093da:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093dc:	2304      	movs	r3, #4
 80093de:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093e2:	2300      	movs	r3, #0
 80093e4:	461a      	mov	r2, r3
 80093e6:	4619      	mov	r1, r3
 80093e8:	f000 fa30 	bl	800984c <USBD_LL_Transmit>

  return USBD_OK;
}
 80093ec:	2000      	movs	r0, #0
 80093ee:	bd08      	pop	{r3, pc}

080093f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093f2:	2305      	movs	r3, #5
 80093f4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093f8:	2300      	movs	r3, #0
 80093fa:	461a      	mov	r2, r3
 80093fc:	4619      	mov	r1, r3
 80093fe:	f000 fa33 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009402:	2000      	movs	r0, #0
 8009404:	bd08      	pop	{r3, pc}
	...

08009408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009408:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800940a:	2200      	movs	r2, #0
 800940c:	490e      	ldr	r1, [pc, #56]	; (8009448 <MX_USB_DEVICE_Init+0x40>)
 800940e:	480f      	ldr	r0, [pc, #60]	; (800944c <MX_USB_DEVICE_Init+0x44>)
 8009410:	f7ff fc60 	bl	8008cd4 <USBD_Init>
 8009414:	b108      	cbz	r0, 800941a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8009416:	f7f8 ff31 	bl	800227c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800941a:	490d      	ldr	r1, [pc, #52]	; (8009450 <MX_USB_DEVICE_Init+0x48>)
 800941c:	480b      	ldr	r0, [pc, #44]	; (800944c <MX_USB_DEVICE_Init+0x44>)
 800941e:	f7ff fc6e 	bl	8008cfe <USBD_RegisterClass>
 8009422:	b108      	cbz	r0, 8009428 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8009424:	f7f8 ff2a 	bl	800227c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009428:	490a      	ldr	r1, [pc, #40]	; (8009454 <MX_USB_DEVICE_Init+0x4c>)
 800942a:	4808      	ldr	r0, [pc, #32]	; (800944c <MX_USB_DEVICE_Init+0x44>)
 800942c:	f7ff fc11 	bl	8008c52 <USBD_CDC_RegisterInterface>
 8009430:	b108      	cbz	r0, 8009436 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009432:	f7f8 ff23 	bl	800227c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009436:	4805      	ldr	r0, [pc, #20]	; (800944c <MX_USB_DEVICE_Init+0x44>)
 8009438:	f7ff fc68 	bl	8008d0c <USBD_Start>
 800943c:	b118      	cbz	r0, 8009446 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800943e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009442:	f7f8 bf1b 	b.w	800227c <Error_Handler>
}
 8009446:	bd08      	pop	{r3, pc}
 8009448:	20000164 	.word	0x20000164
 800944c:	2000205c 	.word	0x2000205c
 8009450:	20000044 	.word	0x20000044
 8009454:	20000154 	.word	0x20000154

08009458 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009458:	2000      	movs	r0, #0
 800945a:	4770      	bx	lr

0800945c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800945c:	2000      	movs	r0, #0
 800945e:	4770      	bx	lr

08009460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  uint16_t in;

	  for(i = 0; i < *Len; ++i)
	  {
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <CDC_Receive_FS+0x40>)
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 8009464:	4c0f      	ldr	r4, [pc, #60]	; (80094a4 <CDC_Receive_FS+0x44>)
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 8009466:	681e      	ldr	r6, [r3, #0]
	  for(i = 0; i < *Len; ++i)
 8009468:	2300      	movs	r3, #0
	    {
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 800946a:	4f0f      	ldr	r7, [pc, #60]	; (80094a8 <CDC_Receive_FS+0x48>)
	  for(i = 0; i < *Len; ++i)
 800946c:	680a      	ldr	r2, [r1, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d808      	bhi.n	8009484 <CDC_Receive_FS+0x24>
	      usb_rxBufPtrIn = in;
	    }
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009472:	4601      	mov	r1, r0
 8009474:	480d      	ldr	r0, [pc, #52]	; (80094ac <CDC_Receive_FS+0x4c>)
 8009476:	f7ff fbfb 	bl	8008c70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800947a:	480c      	ldr	r0, [pc, #48]	; (80094ac <CDC_Receive_FS+0x4c>)
 800947c:	f7ff fc17 	bl	8008cae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009480:	2000      	movs	r0, #0
 8009482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 8009484:	6825      	ldr	r5, [r4, #0]
 8009486:	1c6a      	adds	r2, r5, #1
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 8009488:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800948c:	42b2      	cmp	r2, r6
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 800948e:	bf1e      	ittt	ne
 8009490:	f810 c003 	ldrbne.w	ip, [r0, r3]
	      usb_rxBufPtrIn = in;
 8009494:	6022      	strne	r2, [r4, #0]
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 8009496:	f807 c005 	strbne.w	ip, [r7, r5]
	  for(i = 0; i < *Len; ++i)
 800949a:	3301      	adds	r3, #1
 800949c:	e7e6      	b.n	800946c <CDC_Receive_FS+0xc>
 800949e:	bf00      	nop
 80094a0:	200017a8 	.word	0x200017a8
 80094a4:	200017a4 	.word	0x200017a4
 80094a8:	20003320 	.word	0x20003320
 80094ac:	2000205c 	.word	0x2000205c

080094b0 <CDC_Init_FS>:
{
 80094b0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094b2:	4c07      	ldr	r4, [pc, #28]	; (80094d0 <CDC_Init_FS+0x20>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	4907      	ldr	r1, [pc, #28]	; (80094d4 <CDC_Init_FS+0x24>)
 80094b8:	4620      	mov	r0, r4
 80094ba:	f7ff fbd1 	bl	8008c60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094be:	4906      	ldr	r1, [pc, #24]	; (80094d8 <CDC_Init_FS+0x28>)
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7ff fbd5 	bl	8008c70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff fbf1 	bl	8008cae <USBD_CDC_ReceivePacket>
}
 80094cc:	2000      	movs	r0, #0
 80094ce:	bd10      	pop	{r4, pc}
 80094d0:	2000205c 	.word	0x2000205c
 80094d4:	20002b20 	.word	0x20002b20
 80094d8:	20002320 	.word	0x20002320

080094dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094dc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094de:	4c09      	ldr	r4, [pc, #36]	; (8009504 <CDC_Transmit_FS+0x28>)
{
 80094e0:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094e2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80094e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094ea:	b943      	cbnz	r3, 80094fe <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094ec:	4601      	mov	r1, r0
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff fbb6 	bl	8008c60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094f4:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80094f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094fa:	f7ff bbbf 	b.w	8008c7c <USBD_CDC_TransmitPacket>
}
 80094fe:	2001      	movs	r0, #1
 8009500:	bd10      	pop	{r4, pc}
 8009502:	bf00      	nop
 8009504:	2000205c 	.word	0x2000205c

08009508 <vcp_read>:
}

int vcp_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if(usb_rxBufPtrIn == usb_rxBufPtrOut)
 8009508:	4a07      	ldr	r2, [pc, #28]	; (8009528 <vcp_read+0x20>)
 800950a:	4908      	ldr	r1, [pc, #32]	; (800952c <vcp_read+0x24>)
 800950c:	6813      	ldr	r3, [r2, #0]
 800950e:	6809      	ldr	r1, [r1, #0]
 8009510:	4299      	cmp	r1, r3
  {
    return -1;
  }
  else
  {
    unsigned char ch = usb_rxBuffer[usb_rxBufPtrOut];
 8009512:	bf1f      	itttt	ne
 8009514:	4906      	ldrne	r1, [pc, #24]	; (8009530 <vcp_read+0x28>)
 8009516:	5cc8      	ldrbne	r0, [r1, r3]
    usb_rxBufPtrOut = (uint16_t)(usb_rxBufPtrOut + 1) % USB_RX_DATA_SIZE;
 8009518:	3301      	addne	r3, #1
 800951a:	f3c3 030a 	ubfxne	r3, r3, #0, #11
 800951e:	bf14      	ite	ne
 8009520:	6013      	strne	r3, [r2, #0]
    return -1;
 8009522:	f04f 30ff 	moveq.w	r0, #4294967295
    return ch;
  }
}
 8009526:	4770      	bx	lr
 8009528:	200017a8 	.word	0x200017a8
 800952c:	200017a4 	.word	0x200017a4
 8009530:	20003320 	.word	0x20003320

08009534 <vcp_write>:

void vcp_write(uint8_t* Buf, uint16_t Len)
{
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
  while(CDC_Transmit_FS(Buf, Len) != HAL_OK);
 800953a:	4629      	mov	r1, r5
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff ffcd 	bl	80094dc <CDC_Transmit_FS>
 8009542:	2800      	cmp	r0, #0
 8009544:	d1f9      	bne.n	800953a <vcp_write+0x6>
}
 8009546:	bd38      	pop	{r3, r4, r5, pc}

08009548 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009548:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800954a:	4801      	ldr	r0, [pc, #4]	; (8009550 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800954c:	800b      	strh	r3, [r1, #0]
}
 800954e:	4770      	bx	lr
 8009550:	20000180 	.word	0x20000180

08009554 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009554:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009556:	4801      	ldr	r0, [pc, #4]	; (800955c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009558:	800b      	strh	r3, [r1, #0]
}
 800955a:	4770      	bx	lr
 800955c:	20000194 	.word	0x20000194

08009560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009560:	2300      	movs	r3, #0
 8009562:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009564:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8009566:	0f05      	lsrs	r5, r0, #28
 8009568:	b2ec      	uxtb	r4, r5
 800956a:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800956c:	bf94      	ite	ls
 800956e:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009570:	3437      	addhi	r4, #55	; 0x37
 8009572:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8009576:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800957a:	3301      	adds	r3, #1
 800957c:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 800957e:	b2dc      	uxtb	r4, r3
 8009580:	42a2      	cmp	r2, r4
    value = value << 4;
 8009582:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8009586:	d8ee      	bhi.n	8009566 <IntToUnicode+0x6>
  }
}
 8009588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800958c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800958c:	231a      	movs	r3, #26
{
 800958e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8009590:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <USBD_FS_SerialStrDescriptor+0x2c>)
 8009594:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009596:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8009598:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800959a:	18c0      	adds	r0, r0, r3
 800959c:	d00a      	beq.n	80095b4 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800959e:	4b07      	ldr	r3, [pc, #28]	; (80095bc <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095a0:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095a2:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095a4:	4906      	ldr	r1, [pc, #24]	; (80095c0 <USBD_FS_SerialStrDescriptor+0x34>)
 80095a6:	f7ff ffdb 	bl	8009560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095aa:	2204      	movs	r2, #4
 80095ac:	4905      	ldr	r1, [pc, #20]	; (80095c4 <USBD_FS_SerialStrDescriptor+0x38>)
 80095ae:	4620      	mov	r0, r4
 80095b0:	f7ff ffd6 	bl	8009560 <IntToUnicode>
}
 80095b4:	4804      	ldr	r0, [pc, #16]	; (80095c8 <USBD_FS_SerialStrDescriptor+0x3c>)
 80095b6:	bd10      	pop	{r4, pc}
 80095b8:	1ffff7e8 	.word	0x1ffff7e8
 80095bc:	1ffff7ec 	.word	0x1ffff7ec
 80095c0:	2000019a 	.word	0x2000019a
 80095c4:	200001aa 	.word	0x200001aa
 80095c8:	20000198 	.word	0x20000198

080095cc <USBD_FS_ManufacturerStrDescriptor>:
{
 80095cc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095ce:	4c04      	ldr	r4, [pc, #16]	; (80095e0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80095d0:	460a      	mov	r2, r1
 80095d2:	4804      	ldr	r0, [pc, #16]	; (80095e4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80095d4:	4621      	mov	r1, r4
 80095d6:	f7ff feb8 	bl	800934a <USBD_GetString>
}
 80095da:	4620      	mov	r0, r4
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	20003b20 	.word	0x20003b20
 80095e4:	0800d615 	.word	0x0800d615

080095e8 <USBD_FS_ProductStrDescriptor>:
{
 80095e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ea:	4c04      	ldr	r4, [pc, #16]	; (80095fc <USBD_FS_ProductStrDescriptor+0x14>)
 80095ec:	460a      	mov	r2, r1
 80095ee:	4804      	ldr	r0, [pc, #16]	; (8009600 <USBD_FS_ProductStrDescriptor+0x18>)
 80095f0:	4621      	mov	r1, r4
 80095f2:	f7ff feaa 	bl	800934a <USBD_GetString>
}
 80095f6:	4620      	mov	r0, r4
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	bf00      	nop
 80095fc:	20003b20 	.word	0x20003b20
 8009600:	0800d628 	.word	0x0800d628

08009604 <USBD_FS_ConfigStrDescriptor>:
{
 8009604:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009606:	4c04      	ldr	r4, [pc, #16]	; (8009618 <USBD_FS_ConfigStrDescriptor+0x14>)
 8009608:	460a      	mov	r2, r1
 800960a:	4804      	ldr	r0, [pc, #16]	; (800961c <USBD_FS_ConfigStrDescriptor+0x18>)
 800960c:	4621      	mov	r1, r4
 800960e:	f7ff fe9c 	bl	800934a <USBD_GetString>
}
 8009612:	4620      	mov	r0, r4
 8009614:	bd10      	pop	{r4, pc}
 8009616:	bf00      	nop
 8009618:	20003b20 	.word	0x20003b20
 800961c:	0800d5fc 	.word	0x0800d5fc

08009620 <USBD_FS_InterfaceStrDescriptor>:
{
 8009620:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009622:	4c04      	ldr	r4, [pc, #16]	; (8009634 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8009624:	460a      	mov	r2, r1
 8009626:	4804      	ldr	r0, [pc, #16]	; (8009638 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009628:	4621      	mov	r1, r4
 800962a:	f7ff fe8e 	bl	800934a <USBD_GetString>
}
 800962e:	4620      	mov	r0, r4
 8009630:	bd10      	pop	{r4, pc}
 8009632:	bf00      	nop
 8009634:	20003b20 	.word	0x20003b20
 8009638:	0800d607 	.word	0x0800d607

0800963c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800963c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800963e:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <HAL_PCD_MspInit+0x3c>)
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d115      	bne.n	8009672 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009646:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800964a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800964c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800964e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009652:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009654:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009656:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009658:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800965a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009662:	f7fc fe03 	bl	800626c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009666:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009668:	b003      	add	sp, #12
 800966a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800966e:	f7fc be31 	b.w	80062d4 <HAL_NVIC_EnableIRQ>
}
 8009672:	b003      	add	sp, #12
 8009674:	f85d fb04 	ldr.w	pc, [sp], #4
 8009678:	40005c00 	.word	0x40005c00

0800967c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800967c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8009680:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009684:	f7ff bb59 	b.w	8008d3a <USBD_LL_SetupStage>

08009688 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009688:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800968c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009690:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009694:	f7ff bb7e 	b.w	8008d94 <USBD_LL_DataOutStage>

08009698 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009698:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800969c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800969e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096a2:	f7ff bbb1 	b.w	8008e08 <USBD_LL_DataInStage>

080096a6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096a6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096aa:	f7ff bc45 	b.w	8008f38 <USBD_LL_SOF>

080096ae <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096ae:	6883      	ldr	r3, [r0, #8]
{ 
 80096b0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096b2:	2b02      	cmp	r3, #2
{ 
 80096b4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096b6:	d001      	beq.n	80096bc <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80096b8:	f7f8 fde0 	bl	800227c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096bc:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80096c0:	2101      	movs	r1, #1
 80096c2:	f7ff fc23 	bl	8008f0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096c6:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80096ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096ce:	f7ff bbf6 	b.w	8008ebe <USBD_LL_Reset>
	...

080096d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d4:	b510      	push	{r4, lr}
 80096d6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096d8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096dc:	f7ff fc19 	bl	8008f12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096e0:	69a3      	ldr	r3, [r4, #24]
 80096e2:	b123      	cbz	r3, 80096ee <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096e4:	4a02      	ldr	r2, [pc, #8]	; (80096f0 <HAL_PCD_SuspendCallback+0x1c>)
 80096e6:	6913      	ldr	r3, [r2, #16]
 80096e8:	f043 0306 	orr.w	r3, r3, #6
 80096ec:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	e000ed00 	.word	0xe000ed00

080096f4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096f4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096f8:	f7ff bc14 	b.w	8008f24 <USBD_LL_Resume>

080096fc <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096fc:	2308      	movs	r3, #8
{
 80096fe:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009700:	4a1d      	ldr	r2, [pc, #116]	; (8009778 <USBD_LL_Init+0x7c>)
{
 8009702:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8009704:	481d      	ldr	r0, [pc, #116]	; (800977c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009706:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800970a:	2302      	movs	r3, #2
 800970c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800970e:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8009710:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8009714:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009718:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800971c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800971e:	f7fd fbdf 	bl	8006ee0 <HAL_PCD_Init>
 8009722:	b108      	cbz	r0, 8009728 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8009724:	f7f8 fdaa 	bl	800227c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009728:	2200      	movs	r2, #0
 800972a:	2318      	movs	r3, #24
 800972c:	4611      	mov	r1, r2
 800972e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009732:	f7fd ff84 	bl	800763e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009736:	2358      	movs	r3, #88	; 0x58
 8009738:	2200      	movs	r2, #0
 800973a:	2180      	movs	r1, #128	; 0x80
 800973c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009740:	f7fd ff7d 	bl	800763e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009744:	23c0      	movs	r3, #192	; 0xc0
 8009746:	2200      	movs	r2, #0
 8009748:	2181      	movs	r1, #129	; 0x81
 800974a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800974e:	f7fd ff76 	bl	800763e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009752:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009756:	2200      	movs	r2, #0
 8009758:	2101      	movs	r1, #1
 800975a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800975e:	f7fd ff6e 	bl	800763e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009766:	2200      	movs	r2, #0
 8009768:	2182      	movs	r1, #130	; 0x82
 800976a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800976e:	f7fd ff66 	bl	800763e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009772:	2000      	movs	r0, #0
 8009774:	bd10      	pop	{r4, pc}
 8009776:	bf00      	nop
 8009778:	40005c00 	.word	0x40005c00
 800977c:	20003d20 	.word	0x20003d20

08009780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009780:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009782:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009786:	f7fd fc20 	bl	8006fca <HAL_PCD_Start>
 800978a:	2803      	cmp	r0, #3
 800978c:	bf96      	itet	ls
 800978e:	4b02      	ldrls	r3, [pc, #8]	; (8009798 <USBD_LL_Start+0x18>)
 8009790:	2002      	movhi	r0, #2
 8009792:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009794:	bd08      	pop	{r3, pc}
 8009796:	bf00      	nop
 8009798:	0800d634 	.word	0x0800d634

0800979c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800979c:	b510      	push	{r4, lr}
 800979e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097a0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097a4:	4613      	mov	r3, r2
 80097a6:	4622      	mov	r2, r4
 80097a8:	f7fd fc3a 	bl	8007020 <HAL_PCD_EP_Open>
 80097ac:	2803      	cmp	r0, #3
 80097ae:	bf96      	itet	ls
 80097b0:	4b01      	ldrls	r3, [pc, #4]	; (80097b8 <USBD_LL_OpenEP+0x1c>)
 80097b2:	2002      	movhi	r0, #2
 80097b4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80097b6:	bd10      	pop	{r4, pc}
 80097b8:	0800d634 	.word	0x0800d634

080097bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097c2:	f7fd fc60 	bl	8007086 <HAL_PCD_EP_Close>
 80097c6:	2803      	cmp	r0, #3
 80097c8:	bf96      	itet	ls
 80097ca:	4b02      	ldrls	r3, [pc, #8]	; (80097d4 <USBD_LL_CloseEP+0x18>)
 80097cc:	2002      	movhi	r0, #2
 80097ce:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80097d0:	bd08      	pop	{r3, pc}
 80097d2:	bf00      	nop
 80097d4:	0800d634 	.word	0x0800d634

080097d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097de:	f7fd fec7 	bl	8007570 <HAL_PCD_EP_SetStall>
 80097e2:	2803      	cmp	r0, #3
 80097e4:	bf96      	itet	ls
 80097e6:	4b02      	ldrls	r3, [pc, #8]	; (80097f0 <USBD_LL_StallEP+0x18>)
 80097e8:	2002      	movhi	r0, #2
 80097ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80097ec:	bd08      	pop	{r3, pc}
 80097ee:	bf00      	nop
 80097f0:	0800d634 	.word	0x0800d634

080097f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80097f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097fa:	f7fd feed 	bl	80075d8 <HAL_PCD_EP_ClrStall>
 80097fe:	2803      	cmp	r0, #3
 8009800:	bf96      	itet	ls
 8009802:	4b02      	ldrls	r3, [pc, #8]	; (800980c <USBD_LL_ClearStallEP+0x18>)
 8009804:	2002      	movhi	r0, #2
 8009806:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8009808:	bd08      	pop	{r3, pc}
 800980a:	bf00      	nop
 800980c:	0800d634 	.word	0x0800d634

08009810 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8009810:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009812:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009816:	bf45      	ittet	mi
 8009818:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800981c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009820:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009824:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009828:	bf58      	it	pl
 800982a:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 800982e:	4770      	bx	lr

08009830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009830:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009832:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009836:	f7fd fbdf 	bl	8006ff8 <HAL_PCD_SetAddress>
 800983a:	2803      	cmp	r0, #3
 800983c:	bf96      	itet	ls
 800983e:	4b02      	ldrls	r3, [pc, #8]	; (8009848 <USBD_LL_SetUSBAddress+0x18>)
 8009840:	2002      	movhi	r0, #2
 8009842:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009844:	bd08      	pop	{r3, pc}
 8009846:	bf00      	nop
 8009848:	0800d634 	.word	0x0800d634

0800984c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800984c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800984e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009852:	f7fd fc60 	bl	8007116 <HAL_PCD_EP_Transmit>
 8009856:	2803      	cmp	r0, #3
 8009858:	bf96      	itet	ls
 800985a:	4b02      	ldrls	r3, [pc, #8]	; (8009864 <USBD_LL_Transmit+0x18>)
 800985c:	2002      	movhi	r0, #2
 800985e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8009860:	bd08      	pop	{r3, pc}
 8009862:	bf00      	nop
 8009864:	0800d634 	.word	0x0800d634

08009868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009868:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800986a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800986e:	f7fd fc33 	bl	80070d8 <HAL_PCD_EP_Receive>
 8009872:	2803      	cmp	r0, #3
 8009874:	bf96      	itet	ls
 8009876:	4b02      	ldrls	r3, [pc, #8]	; (8009880 <USBD_LL_PrepareReceive+0x18>)
 8009878:	2002      	movhi	r0, #2
 800987a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 800987c:	bd08      	pop	{r3, pc}
 800987e:	bf00      	nop
 8009880:	0800d634 	.word	0x0800d634

08009884 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009884:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009888:	f7fd bc3e 	b.w	8007108 <HAL_PCD_EP_GetRxCount>

0800988c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800988c:	4800      	ldr	r0, [pc, #0]	; (8009890 <USBD_static_malloc+0x4>)
 800988e:	4770      	bx	lr
 8009890:	200017ac 	.word	0x200017ac

08009894 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009894:	4770      	bx	lr

08009896 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009896:	4770      	bx	lr

08009898 <__cxa_pure_virtual>:
 8009898:	b508      	push	{r3, lr}
 800989a:	f000 f80d 	bl	80098b8 <_ZSt9terminatev>

0800989e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800989e:	b508      	push	{r3, lr}
 80098a0:	4780      	blx	r0
 80098a2:	f000 f977 	bl	8009b94 <abort>
	...

080098a8 <_ZSt13get_terminatev>:
 80098a8:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <_ZSt13get_terminatev+0xc>)
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	f3bf 8f5b 	dmb	ish
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200001b4 	.word	0x200001b4

080098b8 <_ZSt9terminatev>:
 80098b8:	b508      	push	{r3, lr}
 80098ba:	f7ff fff5 	bl	80098a8 <_ZSt13get_terminatev>
 80098be:	f7ff ffee 	bl	800989e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080098c4 <fmod>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	b08b      	sub	sp, #44	; 0x2c
 80098ca:	461f      	mov	r7, r3
 80098cc:	4604      	mov	r4, r0
 80098ce:	460d      	mov	r5, r1
 80098d0:	4616      	mov	r6, r2
 80098d2:	f000 f853 	bl	800997c <__ieee754_fmod>
 80098d6:	4b27      	ldr	r3, [pc, #156]	; (8009974 <fmod+0xb0>)
 80098d8:	4680      	mov	r8, r0
 80098da:	f993 a000 	ldrsb.w	sl, [r3]
 80098de:	4689      	mov	r9, r1
 80098e0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80098e4:	d030      	beq.n	8009948 <fmod+0x84>
 80098e6:	4632      	mov	r2, r6
 80098e8:	463b      	mov	r3, r7
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f7 f88d 	bl	8000a0c <__aeabi_dcmpun>
 80098f2:	bb48      	cbnz	r0, 8009948 <fmod+0x84>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	4620      	mov	r0, r4
 80098fa:	4629      	mov	r1, r5
 80098fc:	f7f7 f886 	bl	8000a0c <__aeabi_dcmpun>
 8009900:	4683      	mov	fp, r0
 8009902:	bb08      	cbnz	r0, 8009948 <fmod+0x84>
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f7 f84c 	bl	80009a8 <__aeabi_dcmpeq>
 8009910:	b1d0      	cbz	r0, 8009948 <fmod+0x84>
 8009912:	2301      	movs	r3, #1
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4b18      	ldr	r3, [pc, #96]	; (8009978 <fmod+0xb4>)
 8009918:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009922:	f8cd b020 	str.w	fp, [sp, #32]
 8009926:	f1ba 0f00 	cmp.w	sl, #0
 800992a:	d112      	bne.n	8009952 <fmod+0x8e>
 800992c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009930:	4668      	mov	r0, sp
 8009932:	f000 f92d 	bl	8009b90 <matherr>
 8009936:	b1b8      	cbz	r0, 8009968 <fmod+0xa4>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	b11b      	cbz	r3, 8009944 <fmod+0x80>
 800993c:	f000 f938 	bl	8009bb0 <__errno>
 8009940:	9b08      	ldr	r3, [sp, #32]
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	b00b      	add	sp, #44	; 0x2c
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f6 fee7 	bl	800072c <__aeabi_ddiv>
 800995e:	f1ba 0f02 	cmp.w	sl, #2
 8009962:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009966:	d1e3      	bne.n	8009930 <fmod+0x6c>
 8009968:	f000 f922 	bl	8009bb0 <__errno>
 800996c:	2321      	movs	r3, #33	; 0x21
 800996e:	6003      	str	r3, [r0, #0]
 8009970:	e7e2      	b.n	8009938 <fmod+0x74>
 8009972:	bf00      	nop
 8009974:	200001b8 	.word	0x200001b8
 8009978:	0800d638 	.word	0x0800d638

0800997c <__ieee754_fmod>:
 800997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009984:	4682      	mov	sl, r0
 8009986:	ea54 0002 	orrs.w	r0, r4, r2
 800998a:	461e      	mov	r6, r3
 800998c:	4694      	mov	ip, r2
 800998e:	4696      	mov	lr, r2
 8009990:	d00c      	beq.n	80099ac <__ieee754_fmod+0x30>
 8009992:	4d78      	ldr	r5, [pc, #480]	; (8009b74 <__ieee754_fmod+0x1f8>)
 8009994:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009998:	45a8      	cmp	r8, r5
 800999a:	4689      	mov	r9, r1
 800999c:	dc06      	bgt.n	80099ac <__ieee754_fmod+0x30>
 800999e:	4255      	negs	r5, r2
 80099a0:	4315      	orrs	r5, r2
 80099a2:	4f75      	ldr	r7, [pc, #468]	; (8009b78 <__ieee754_fmod+0x1fc>)
 80099a4:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 80099a8:	42bd      	cmp	r5, r7
 80099aa:	d908      	bls.n	80099be <__ieee754_fmod+0x42>
 80099ac:	4650      	mov	r0, sl
 80099ae:	f7f6 fd93 	bl	80004d8 <__aeabi_dmul>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	f7f6 feb9 	bl	800072c <__aeabi_ddiv>
 80099ba:	4682      	mov	sl, r0
 80099bc:	e00f      	b.n	80099de <__ieee754_fmod+0x62>
 80099be:	45a0      	cmp	r8, r4
 80099c0:	4652      	mov	r2, sl
 80099c2:	4657      	mov	r7, sl
 80099c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80099c8:	dc0c      	bgt.n	80099e4 <__ieee754_fmod+0x68>
 80099ca:	db08      	blt.n	80099de <__ieee754_fmod+0x62>
 80099cc:	45e2      	cmp	sl, ip
 80099ce:	d306      	bcc.n	80099de <__ieee754_fmod+0x62>
 80099d0:	d108      	bne.n	80099e4 <__ieee754_fmod+0x68>
 80099d2:	496a      	ldr	r1, [pc, #424]	; (8009b7c <__ieee754_fmod+0x200>)
 80099d4:	0fed      	lsrs	r5, r5, #31
 80099d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80099da:	e9d5 a100 	ldrd	sl, r1, [r5]
 80099de:	4650      	mov	r0, sl
 80099e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e4:	4b66      	ldr	r3, [pc, #408]	; (8009b80 <__ieee754_fmod+0x204>)
 80099e6:	4598      	cmp	r8, r3
 80099e8:	dc48      	bgt.n	8009a7c <__ieee754_fmod+0x100>
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	d13c      	bne.n	8009a6a <__ieee754_fmod+0xee>
 80099f0:	4611      	mov	r1, r2
 80099f2:	4864      	ldr	r0, [pc, #400]	; (8009b84 <__ieee754_fmod+0x208>)
 80099f4:	2900      	cmp	r1, #0
 80099f6:	dc35      	bgt.n	8009a64 <__ieee754_fmod+0xe8>
 80099f8:	429c      	cmp	r4, r3
 80099fa:	dc4f      	bgt.n	8009a9c <__ieee754_fmod+0x120>
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	d145      	bne.n	8009a8c <__ieee754_fmod+0x110>
 8009a00:	4661      	mov	r1, ip
 8009a02:	4b60      	ldr	r3, [pc, #384]	; (8009b84 <__ieee754_fmod+0x208>)
 8009a04:	2900      	cmp	r1, #0
 8009a06:	dc3e      	bgt.n	8009a86 <__ieee754_fmod+0x10a>
 8009a08:	495f      	ldr	r1, [pc, #380]	; (8009b88 <__ieee754_fmod+0x20c>)
 8009a0a:	4288      	cmp	r0, r1
 8009a0c:	db4a      	blt.n	8009aa4 <__ieee754_fmod+0x128>
 8009a0e:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009a12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009a16:	4a5c      	ldr	r2, [pc, #368]	; (8009b88 <__ieee754_fmod+0x20c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	db57      	blt.n	8009acc <__ieee754_fmod+0x150>
 8009a1c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009a20:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009a24:	1ac0      	subs	r0, r0, r3
 8009a26:	1b8a      	subs	r2, r1, r6
 8009a28:	eba7 040e 	sub.w	r4, r7, lr
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d163      	bne.n	8009af8 <__ieee754_fmod+0x17c>
 8009a30:	4577      	cmp	r7, lr
 8009a32:	bf38      	it	cc
 8009a34:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	bfbc      	itt	lt
 8009a3c:	463c      	movlt	r4, r7
 8009a3e:	460a      	movlt	r2, r1
 8009a40:	ea52 0104 	orrs.w	r1, r2, r4
 8009a44:	d0c5      	beq.n	80099d2 <__ieee754_fmod+0x56>
 8009a46:	494e      	ldr	r1, [pc, #312]	; (8009b80 <__ieee754_fmod+0x204>)
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	dd6a      	ble.n	8009b22 <__ieee754_fmod+0x1a6>
 8009a4c:	494e      	ldr	r1, [pc, #312]	; (8009b88 <__ieee754_fmod+0x20c>)
 8009a4e:	428b      	cmp	r3, r1
 8009a50:	db6d      	blt.n	8009b2e <__ieee754_fmod+0x1b2>
 8009a52:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009a56:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009a5a:	4315      	orrs	r5, r2
 8009a5c:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8009a60:	4620      	mov	r0, r4
 8009a62:	e7aa      	b.n	80099ba <__ieee754_fmod+0x3e>
 8009a64:	3801      	subs	r0, #1
 8009a66:	0049      	lsls	r1, r1, #1
 8009a68:	e7c4      	b.n	80099f4 <__ieee754_fmod+0x78>
 8009a6a:	4847      	ldr	r0, [pc, #284]	; (8009b88 <__ieee754_fmod+0x20c>)
 8009a6c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009a70:	0049      	lsls	r1, r1, #1
 8009a72:	2900      	cmp	r1, #0
 8009a74:	f100 30ff 	add.w	r0, r0, #4294967295
 8009a78:	dcfa      	bgt.n	8009a70 <__ieee754_fmod+0xf4>
 8009a7a:	e7bd      	b.n	80099f8 <__ieee754_fmod+0x7c>
 8009a7c:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009a80:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009a84:	e7b8      	b.n	80099f8 <__ieee754_fmod+0x7c>
 8009a86:	3b01      	subs	r3, #1
 8009a88:	0049      	lsls	r1, r1, #1
 8009a8a:	e7bb      	b.n	8009a04 <__ieee754_fmod+0x88>
 8009a8c:	4b3e      	ldr	r3, [pc, #248]	; (8009b88 <__ieee754_fmod+0x20c>)
 8009a8e:	02e1      	lsls	r1, r4, #11
 8009a90:	0049      	lsls	r1, r1, #1
 8009a92:	2900      	cmp	r1, #0
 8009a94:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a98:	dcfa      	bgt.n	8009a90 <__ieee754_fmod+0x114>
 8009a9a:	e7b5      	b.n	8009a08 <__ieee754_fmod+0x8c>
 8009a9c:	1523      	asrs	r3, r4, #20
 8009a9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aa2:	e7b1      	b.n	8009a08 <__ieee754_fmod+0x8c>
 8009aa4:	1a0f      	subs	r7, r1, r0
 8009aa6:	2f1f      	cmp	r7, #31
 8009aa8:	dc0a      	bgt.n	8009ac0 <__ieee754_fmod+0x144>
 8009aaa:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009aae:	fa08 f807 	lsl.w	r8, r8, r7
 8009ab2:	fa22 f101 	lsr.w	r1, r2, r1
 8009ab6:	ea41 0108 	orr.w	r1, r1, r8
 8009aba:	fa02 f707 	lsl.w	r7, r2, r7
 8009abe:	e7aa      	b.n	8009a16 <__ieee754_fmod+0x9a>
 8009ac0:	4932      	ldr	r1, [pc, #200]	; (8009b8c <__ieee754_fmod+0x210>)
 8009ac2:	2700      	movs	r7, #0
 8009ac4:	1a09      	subs	r1, r1, r0
 8009ac6:	fa02 f101 	lsl.w	r1, r2, r1
 8009aca:	e7a4      	b.n	8009a16 <__ieee754_fmod+0x9a>
 8009acc:	eba2 0e03 	sub.w	lr, r2, r3
 8009ad0:	f1be 0f1f 	cmp.w	lr, #31
 8009ad4:	dc09      	bgt.n	8009aea <__ieee754_fmod+0x16e>
 8009ad6:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009ada:	fa04 f40e 	lsl.w	r4, r4, lr
 8009ade:	fa2c f606 	lsr.w	r6, ip, r6
 8009ae2:	4326      	orrs	r6, r4
 8009ae4:	fa0c fe0e 	lsl.w	lr, ip, lr
 8009ae8:	e79c      	b.n	8009a24 <__ieee754_fmod+0xa8>
 8009aea:	4e28      	ldr	r6, [pc, #160]	; (8009b8c <__ieee754_fmod+0x210>)
 8009aec:	f04f 0e00 	mov.w	lr, #0
 8009af0:	1af6      	subs	r6, r6, r3
 8009af2:	fa0c f606 	lsl.w	r6, ip, r6
 8009af6:	e795      	b.n	8009a24 <__ieee754_fmod+0xa8>
 8009af8:	4577      	cmp	r7, lr
 8009afa:	bf38      	it	cc
 8009afc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	da05      	bge.n	8009b10 <__ieee754_fmod+0x194>
 8009b04:	0ffa      	lsrs	r2, r7, #31
 8009b06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009b0a:	007f      	lsls	r7, r7, #1
 8009b0c:	3801      	subs	r0, #1
 8009b0e:	e78a      	b.n	8009a26 <__ieee754_fmod+0xaa>
 8009b10:	ea52 0104 	orrs.w	r1, r2, r4
 8009b14:	f43f af5d 	beq.w	80099d2 <__ieee754_fmod+0x56>
 8009b18:	0fe1      	lsrs	r1, r4, #31
 8009b1a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009b1e:	0067      	lsls	r7, r4, #1
 8009b20:	e7f4      	b.n	8009b0c <__ieee754_fmod+0x190>
 8009b22:	0fe0      	lsrs	r0, r4, #31
 8009b24:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009b28:	0064      	lsls	r4, r4, #1
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	e78c      	b.n	8009a48 <__ieee754_fmod+0xcc>
 8009b2e:	1ac9      	subs	r1, r1, r3
 8009b30:	2914      	cmp	r1, #20
 8009b32:	dc0a      	bgt.n	8009b4a <__ieee754_fmod+0x1ce>
 8009b34:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009b38:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3c:	40cc      	lsrs	r4, r1
 8009b3e:	4323      	orrs	r3, r4
 8009b40:	410a      	asrs	r2, r1
 8009b42:	ea42 0105 	orr.w	r1, r2, r5
 8009b46:	4618      	mov	r0, r3
 8009b48:	e737      	b.n	80099ba <__ieee754_fmod+0x3e>
 8009b4a:	291f      	cmp	r1, #31
 8009b4c:	dc07      	bgt.n	8009b5e <__ieee754_fmod+0x1e2>
 8009b4e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009b52:	40cc      	lsrs	r4, r1
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	4323      	orrs	r3, r4
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	e7f1      	b.n	8009b42 <__ieee754_fmod+0x1c6>
 8009b5e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009b62:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009b66:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009b6a:	33e2      	adds	r3, #226	; 0xe2
 8009b6c:	fa42 f303 	asr.w	r3, r2, r3
 8009b70:	e7f3      	b.n	8009b5a <__ieee754_fmod+0x1de>
 8009b72:	bf00      	nop
 8009b74:	7fefffff 	.word	0x7fefffff
 8009b78:	7ff00000 	.word	0x7ff00000
 8009b7c:	0800d640 	.word	0x0800d640
 8009b80:	000fffff 	.word	0x000fffff
 8009b84:	fffffbed 	.word	0xfffffbed
 8009b88:	fffffc02 	.word	0xfffffc02
 8009b8c:	fffffbe2 	.word	0xfffffbe2

08009b90 <matherr>:
 8009b90:	2000      	movs	r0, #0
 8009b92:	4770      	bx	lr

08009b94 <abort>:
 8009b94:	b508      	push	{r3, lr}
 8009b96:	2006      	movs	r0, #6
 8009b98:	f000 f886 	bl	8009ca8 <raise>
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	f7f8 fe33 	bl	8002808 <_exit>

08009ba2 <atof>:
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	f000 bf04 	b.w	800a9b0 <strtod>

08009ba8 <atoi>:
 8009ba8:	220a      	movs	r2, #10
 8009baa:	2100      	movs	r1, #0
 8009bac:	f000 bfa0 	b.w	800aaf0 <strtol>

08009bb0 <__errno>:
 8009bb0:	4b01      	ldr	r3, [pc, #4]	; (8009bb8 <__errno+0x8>)
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	200001bc 	.word	0x200001bc

08009bbc <__libc_init_array>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	2500      	movs	r5, #0
 8009bc0:	4e0c      	ldr	r6, [pc, #48]	; (8009bf4 <__libc_init_array+0x38>)
 8009bc2:	4c0d      	ldr	r4, [pc, #52]	; (8009bf8 <__libc_init_array+0x3c>)
 8009bc4:	1ba4      	subs	r4, r4, r6
 8009bc6:	10a4      	asrs	r4, r4, #2
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	d109      	bne.n	8009be0 <__libc_init_array+0x24>
 8009bcc:	f002 fc0e 	bl	800c3ec <_init>
 8009bd0:	2500      	movs	r5, #0
 8009bd2:	4e0a      	ldr	r6, [pc, #40]	; (8009bfc <__libc_init_array+0x40>)
 8009bd4:	4c0a      	ldr	r4, [pc, #40]	; (8009c00 <__libc_init_array+0x44>)
 8009bd6:	1ba4      	subs	r4, r4, r6
 8009bd8:	10a4      	asrs	r4, r4, #2
 8009bda:	42a5      	cmp	r5, r4
 8009bdc:	d105      	bne.n	8009bea <__libc_init_array+0x2e>
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009be4:	4798      	blx	r3
 8009be6:	3501      	adds	r5, #1
 8009be8:	e7ee      	b.n	8009bc8 <__libc_init_array+0xc>
 8009bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bee:	4798      	blx	r3
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	e7f2      	b.n	8009bda <__libc_init_array+0x1e>
 8009bf4:	0800d93c 	.word	0x0800d93c
 8009bf8:	0800d93c 	.word	0x0800d93c
 8009bfc:	0800d93c 	.word	0x0800d93c
 8009c00:	0800d944 	.word	0x0800d944

08009c04 <memcmp>:
 8009c04:	b530      	push	{r4, r5, lr}
 8009c06:	2400      	movs	r4, #0
 8009c08:	42a2      	cmp	r2, r4
 8009c0a:	d101      	bne.n	8009c10 <memcmp+0xc>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e007      	b.n	8009c20 <memcmp+0x1c>
 8009c10:	5d03      	ldrb	r3, [r0, r4]
 8009c12:	3401      	adds	r4, #1
 8009c14:	190d      	adds	r5, r1, r4
 8009c16:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009c1a:	42ab      	cmp	r3, r5
 8009c1c:	d0f4      	beq.n	8009c08 <memcmp+0x4>
 8009c1e:	1b58      	subs	r0, r3, r5
 8009c20:	bd30      	pop	{r4, r5, pc}

08009c22 <memcpy>:
 8009c22:	b510      	push	{r4, lr}
 8009c24:	1e43      	subs	r3, r0, #1
 8009c26:	440a      	add	r2, r1
 8009c28:	4291      	cmp	r1, r2
 8009c2a:	d100      	bne.n	8009c2e <memcpy+0xc>
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c36:	e7f7      	b.n	8009c28 <memcpy+0x6>

08009c38 <memset>:
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4402      	add	r2, r0
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d100      	bne.n	8009c42 <memset+0xa>
 8009c40:	4770      	bx	lr
 8009c42:	f803 1b01 	strb.w	r1, [r3], #1
 8009c46:	e7f9      	b.n	8009c3c <memset+0x4>

08009c48 <realloc>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <realloc+0xc>)
 8009c4a:	460a      	mov	r2, r1
 8009c4c:	4601      	mov	r1, r0
 8009c4e:	6818      	ldr	r0, [r3, #0]
 8009c50:	f001 bf12 	b.w	800ba78 <_realloc_r>
 8009c54:	200001bc 	.word	0x200001bc

08009c58 <_raise_r>:
 8009c58:	291f      	cmp	r1, #31
 8009c5a:	b538      	push	{r3, r4, r5, lr}
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	d904      	bls.n	8009c6c <_raise_r+0x14>
 8009c62:	2316      	movs	r3, #22
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c6e:	b112      	cbz	r2, 8009c76 <_raise_r+0x1e>
 8009c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c74:	b94b      	cbnz	r3, 8009c8a <_raise_r+0x32>
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 f830 	bl	8009cdc <_getpid_r>
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4601      	mov	r1, r0
 8009c80:	4620      	mov	r0, r4
 8009c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c86:	f000 b817 	b.w	8009cb8 <_kill_r>
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d00a      	beq.n	8009ca4 <_raise_r+0x4c>
 8009c8e:	1c59      	adds	r1, r3, #1
 8009c90:	d103      	bne.n	8009c9a <_raise_r+0x42>
 8009c92:	2316      	movs	r3, #22
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	2001      	movs	r0, #1
 8009c98:	e7e7      	b.n	8009c6a <_raise_r+0x12>
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ca2:	4798      	blx	r3
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e7e0      	b.n	8009c6a <_raise_r+0x12>

08009ca8 <raise>:
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <raise+0xc>)
 8009caa:	4601      	mov	r1, r0
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	f7ff bfd3 	b.w	8009c58 <_raise_r>
 8009cb2:	bf00      	nop
 8009cb4:	200001bc 	.word	0x200001bc

08009cb8 <_kill_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4c06      	ldr	r4, [pc, #24]	; (8009cd8 <_kill_r+0x20>)
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	f7f8 fd97 	bl	80027f8 <_kill>
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	d102      	bne.n	8009cd4 <_kill_r+0x1c>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	b103      	cbz	r3, 8009cd4 <_kill_r+0x1c>
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20003f8c 	.word	0x20003f8c

08009cdc <_getpid_r>:
 8009cdc:	f7f8 bd8a 	b.w	80027f4 <_getpid>

08009ce0 <siscanf>:
 8009ce0:	b40e      	push	{r1, r2, r3}
 8009ce2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009ce6:	b530      	push	{r4, r5, lr}
 8009ce8:	b09c      	sub	sp, #112	; 0x70
 8009cea:	ac1f      	add	r4, sp, #124	; 0x7c
 8009cec:	f854 5b04 	ldr.w	r5, [r4], #4
 8009cf0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009cf4:	9002      	str	r0, [sp, #8]
 8009cf6:	9006      	str	r0, [sp, #24]
 8009cf8:	f7f6 fa2a 	bl	8000150 <strlen>
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <siscanf+0x4c>)
 8009cfe:	9003      	str	r0, [sp, #12]
 8009d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d02:	2300      	movs	r3, #0
 8009d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d06:	9314      	str	r3, [sp, #80]	; 0x50
 8009d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d0c:	9007      	str	r0, [sp, #28]
 8009d0e:	4808      	ldr	r0, [pc, #32]	; (8009d30 <siscanf+0x50>)
 8009d10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4623      	mov	r3, r4
 8009d18:	a902      	add	r1, sp, #8
 8009d1a:	6800      	ldr	r0, [r0, #0]
 8009d1c:	9401      	str	r4, [sp, #4]
 8009d1e:	f001 ff2b 	bl	800bb78 <__ssvfiscanf_r>
 8009d22:	b01c      	add	sp, #112	; 0x70
 8009d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d28:	b003      	add	sp, #12
 8009d2a:	4770      	bx	lr
 8009d2c:	08009d35 	.word	0x08009d35
 8009d30:	200001bc 	.word	0x200001bc

08009d34 <__seofread>:
 8009d34:	2000      	movs	r0, #0
 8009d36:	4770      	bx	lr

08009d38 <strstr>:
 8009d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3a:	7803      	ldrb	r3, [r0, #0]
 8009d3c:	b17b      	cbz	r3, 8009d5e <strstr+0x26>
 8009d3e:	4604      	mov	r4, r0
 8009d40:	7823      	ldrb	r3, [r4, #0]
 8009d42:	4620      	mov	r0, r4
 8009d44:	1c66      	adds	r6, r4, #1
 8009d46:	b17b      	cbz	r3, 8009d68 <strstr+0x30>
 8009d48:	1e4a      	subs	r2, r1, #1
 8009d4a:	1e63      	subs	r3, r4, #1
 8009d4c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009d50:	b14d      	cbz	r5, 8009d66 <strstr+0x2e>
 8009d52:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009d56:	4634      	mov	r4, r6
 8009d58:	42af      	cmp	r7, r5
 8009d5a:	d0f7      	beq.n	8009d4c <strstr+0x14>
 8009d5c:	e7f0      	b.n	8009d40 <strstr+0x8>
 8009d5e:	780b      	ldrb	r3, [r1, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf18      	it	ne
 8009d64:	2000      	movne	r0, #0
 8009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	e7fc      	b.n	8009d66 <strstr+0x2e>

08009d6c <sulp>:
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	460f      	mov	r7, r1
 8009d72:	4690      	mov	r8, r2
 8009d74:	f001 fcea 	bl	800b74c <__ulp>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	f1b8 0f00 	cmp.w	r8, #0
 8009d80:	d011      	beq.n	8009da6 <sulp+0x3a>
 8009d82:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009d86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd0b      	ble.n	8009da6 <sulp+0x3a>
 8009d8e:	2400      	movs	r4, #0
 8009d90:	051b      	lsls	r3, r3, #20
 8009d92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	462b      	mov	r3, r5
 8009d9e:	f7f6 fb9b 	bl	80004d8 <__aeabi_dmul>
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009db0 <_strtod_l>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	461f      	mov	r7, r3
 8009db6:	2300      	movs	r3, #0
 8009db8:	b0a1      	sub	sp, #132	; 0x84
 8009dba:	4683      	mov	fp, r0
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009dc2:	931c      	str	r3, [sp, #112]	; 0x70
 8009dc4:	f001 f9e4 	bl	800b190 <__localeconv_l>
 8009dc8:	4680      	mov	r8, r0
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	f7f6 f9c0 	bl	8000150 <strlen>
 8009dd0:	f04f 0900 	mov.w	r9, #0
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	f04f 0a00 	mov.w	sl, #0
 8009dda:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	2a0d      	cmp	r2, #13
 8009de2:	d832      	bhi.n	8009e4a <_strtod_l+0x9a>
 8009de4:	2a09      	cmp	r2, #9
 8009de6:	d236      	bcs.n	8009e56 <_strtod_l+0xa6>
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	d03e      	beq.n	8009e6a <_strtod_l+0xba>
 8009dec:	2300      	movs	r3, #0
 8009dee:	930d      	str	r3, [sp, #52]	; 0x34
 8009df0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009df2:	782b      	ldrb	r3, [r5, #0]
 8009df4:	2b30      	cmp	r3, #48	; 0x30
 8009df6:	f040 80ac 	bne.w	8009f52 <_strtod_l+0x1a2>
 8009dfa:	786b      	ldrb	r3, [r5, #1]
 8009dfc:	2b58      	cmp	r3, #88	; 0x58
 8009dfe:	d001      	beq.n	8009e04 <_strtod_l+0x54>
 8009e00:	2b78      	cmp	r3, #120	; 0x78
 8009e02:	d167      	bne.n	8009ed4 <_strtod_l+0x124>
 8009e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e06:	9702      	str	r7, [sp, #8]
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	ab1c      	add	r3, sp, #112	; 0x70
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4a89      	ldr	r2, [pc, #548]	; (800a034 <_strtod_l+0x284>)
 8009e10:	ab1d      	add	r3, sp, #116	; 0x74
 8009e12:	a91b      	add	r1, sp, #108	; 0x6c
 8009e14:	4658      	mov	r0, fp
 8009e16:	f000 fed1 	bl	800abbc <__gethex>
 8009e1a:	f010 0407 	ands.w	r4, r0, #7
 8009e1e:	4606      	mov	r6, r0
 8009e20:	d005      	beq.n	8009e2e <_strtod_l+0x7e>
 8009e22:	2c06      	cmp	r4, #6
 8009e24:	d12b      	bne.n	8009e7e <_strtod_l+0xce>
 8009e26:	2300      	movs	r3, #0
 8009e28:	3501      	adds	r5, #1
 8009e2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8009e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 85a6 	bne.w	800a982 <_strtod_l+0xbd2>
 8009e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e38:	b1e3      	cbz	r3, 8009e74 <_strtod_l+0xc4>
 8009e3a:	464a      	mov	r2, r9
 8009e3c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009e40:	4610      	mov	r0, r2
 8009e42:	4619      	mov	r1, r3
 8009e44:	b021      	add	sp, #132	; 0x84
 8009e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4a:	2a2b      	cmp	r2, #43	; 0x2b
 8009e4c:	d015      	beq.n	8009e7a <_strtod_l+0xca>
 8009e4e:	2a2d      	cmp	r2, #45	; 0x2d
 8009e50:	d004      	beq.n	8009e5c <_strtod_l+0xac>
 8009e52:	2a20      	cmp	r2, #32
 8009e54:	d1ca      	bne.n	8009dec <_strtod_l+0x3c>
 8009e56:	3301      	adds	r3, #1
 8009e58:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e5a:	e7bf      	b.n	8009ddc <_strtod_l+0x2c>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	920d      	str	r2, [sp, #52]	; 0x34
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1c2      	bne.n	8009df0 <_strtod_l+0x40>
 8009e6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f040 8585 	bne.w	800a97e <_strtod_l+0xbce>
 8009e74:	464a      	mov	r2, r9
 8009e76:	4653      	mov	r3, sl
 8009e78:	e7e2      	b.n	8009e40 <_strtod_l+0x90>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	e7ef      	b.n	8009e5e <_strtod_l+0xae>
 8009e7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e80:	b13a      	cbz	r2, 8009e92 <_strtod_l+0xe2>
 8009e82:	2135      	movs	r1, #53	; 0x35
 8009e84:	a81e      	add	r0, sp, #120	; 0x78
 8009e86:	f001 fd54 	bl	800b932 <__copybits>
 8009e8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	f001 f9c7 	bl	800b220 <_Bfree>
 8009e92:	3c01      	subs	r4, #1
 8009e94:	2c04      	cmp	r4, #4
 8009e96:	d806      	bhi.n	8009ea6 <_strtod_l+0xf6>
 8009e98:	e8df f004 	tbb	[pc, r4]
 8009e9c:	1714030a 	.word	0x1714030a
 8009ea0:	0a          	.byte	0x0a
 8009ea1:	00          	.byte	0x00
 8009ea2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009ea6:	0731      	lsls	r1, r6, #28
 8009ea8:	d5c1      	bpl.n	8009e2e <_strtod_l+0x7e>
 8009eaa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009eae:	e7be      	b.n	8009e2e <_strtod_l+0x7e>
 8009eb0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009eb2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009eba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ebe:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009ec2:	e7f0      	b.n	8009ea6 <_strtod_l+0xf6>
 8009ec4:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a038 <_strtod_l+0x288>
 8009ec8:	e7ed      	b.n	8009ea6 <_strtod_l+0xf6>
 8009eca:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009ece:	f04f 39ff 	mov.w	r9, #4294967295
 8009ed2:	e7e8      	b.n	8009ea6 <_strtod_l+0xf6>
 8009ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b30      	cmp	r3, #48	; 0x30
 8009ede:	d0f9      	beq.n	8009ed4 <_strtod_l+0x124>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0a4      	beq.n	8009e2e <_strtod_l+0x7e>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	2500      	movs	r5, #0
 8009ee8:	220a      	movs	r2, #10
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eee:	9506      	str	r5, [sp, #24]
 8009ef0:	9308      	str	r3, [sp, #32]
 8009ef2:	9504      	str	r5, [sp, #16]
 8009ef4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009ef6:	7807      	ldrb	r7, [r0, #0]
 8009ef8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009efc:	b2d9      	uxtb	r1, r3
 8009efe:	2909      	cmp	r1, #9
 8009f00:	d929      	bls.n	8009f56 <_strtod_l+0x1a6>
 8009f02:	4622      	mov	r2, r4
 8009f04:	f8d8 1000 	ldr.w	r1, [r8]
 8009f08:	f002 f91f 	bl	800c14a <strncmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d031      	beq.n	8009f74 <_strtod_l+0x1c4>
 8009f10:	2000      	movs	r0, #0
 8009f12:	463b      	mov	r3, r7
 8009f14:	4602      	mov	r2, r0
 8009f16:	9c04      	ldr	r4, [sp, #16]
 8009f18:	9005      	str	r0, [sp, #20]
 8009f1a:	2b65      	cmp	r3, #101	; 0x65
 8009f1c:	d001      	beq.n	8009f22 <_strtod_l+0x172>
 8009f1e:	2b45      	cmp	r3, #69	; 0x45
 8009f20:	d114      	bne.n	8009f4c <_strtod_l+0x19c>
 8009f22:	b924      	cbnz	r4, 8009f2e <_strtod_l+0x17e>
 8009f24:	b910      	cbnz	r0, 8009f2c <_strtod_l+0x17c>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d09e      	beq.n	8009e6a <_strtod_l+0xba>
 8009f2c:	2400      	movs	r4, #0
 8009f2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009f30:	1c73      	adds	r3, r6, #1
 8009f32:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f34:	7873      	ldrb	r3, [r6, #1]
 8009f36:	2b2b      	cmp	r3, #43	; 0x2b
 8009f38:	d078      	beq.n	800a02c <_strtod_l+0x27c>
 8009f3a:	2b2d      	cmp	r3, #45	; 0x2d
 8009f3c:	d070      	beq.n	800a020 <_strtod_l+0x270>
 8009f3e:	f04f 0c00 	mov.w	ip, #0
 8009f42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009f46:	2f09      	cmp	r7, #9
 8009f48:	d97c      	bls.n	800a044 <_strtod_l+0x294>
 8009f4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009f4c:	f04f 0e00 	mov.w	lr, #0
 8009f50:	e09a      	b.n	800a088 <_strtod_l+0x2d8>
 8009f52:	2300      	movs	r3, #0
 8009f54:	e7c7      	b.n	8009ee6 <_strtod_l+0x136>
 8009f56:	9904      	ldr	r1, [sp, #16]
 8009f58:	3001      	adds	r0, #1
 8009f5a:	2908      	cmp	r1, #8
 8009f5c:	bfd7      	itett	le
 8009f5e:	9906      	ldrle	r1, [sp, #24]
 8009f60:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009f64:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f68:	9306      	strle	r3, [sp, #24]
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	901b      	str	r0, [sp, #108]	; 0x6c
 8009f6e:	3301      	adds	r3, #1
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	e7bf      	b.n	8009ef4 <_strtod_l+0x144>
 8009f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f76:	191a      	adds	r2, r3, r4
 8009f78:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f7a:	9a04      	ldr	r2, [sp, #16]
 8009f7c:	5d1b      	ldrb	r3, [r3, r4]
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	d037      	beq.n	8009ff2 <_strtod_l+0x242>
 8009f82:	4602      	mov	r2, r0
 8009f84:	9c04      	ldr	r4, [sp, #16]
 8009f86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009f8a:	2909      	cmp	r1, #9
 8009f8c:	d913      	bls.n	8009fb6 <_strtod_l+0x206>
 8009f8e:	2101      	movs	r1, #1
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	e7c2      	b.n	8009f1a <_strtod_l+0x16a>
 8009f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f96:	3001      	adds	r0, #1
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	2b30      	cmp	r3, #48	; 0x30
 8009fa0:	d0f8      	beq.n	8009f94 <_strtod_l+0x1e4>
 8009fa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009fa6:	2a08      	cmp	r2, #8
 8009fa8:	f200 84f0 	bhi.w	800a98c <_strtod_l+0xbdc>
 8009fac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009fae:	9208      	str	r2, [sp, #32]
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009fba:	f100 0101 	add.w	r1, r0, #1
 8009fbe:	d012      	beq.n	8009fe6 <_strtod_l+0x236>
 8009fc0:	440a      	add	r2, r1
 8009fc2:	270a      	movs	r7, #10
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	eb00 0c04 	add.w	ip, r0, r4
 8009fca:	458c      	cmp	ip, r1
 8009fcc:	d113      	bne.n	8009ff6 <_strtod_l+0x246>
 8009fce:	1821      	adds	r1, r4, r0
 8009fd0:	2908      	cmp	r1, #8
 8009fd2:	f104 0401 	add.w	r4, r4, #1
 8009fd6:	4404      	add	r4, r0
 8009fd8:	dc19      	bgt.n	800a00e <_strtod_l+0x25e>
 8009fda:	210a      	movs	r1, #10
 8009fdc:	9b06      	ldr	r3, [sp, #24]
 8009fde:	fb01 e303 	mla	r3, r1, r3, lr
 8009fe2:	9306      	str	r3, [sp, #24]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fe8:	1c58      	adds	r0, r3, #1
 8009fea:	901b      	str	r0, [sp, #108]	; 0x6c
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	4608      	mov	r0, r1
 8009ff0:	e7c9      	b.n	8009f86 <_strtod_l+0x1d6>
 8009ff2:	9804      	ldr	r0, [sp, #16]
 8009ff4:	e7d3      	b.n	8009f9e <_strtod_l+0x1ee>
 8009ff6:	2908      	cmp	r1, #8
 8009ff8:	f101 0101 	add.w	r1, r1, #1
 8009ffc:	dc03      	bgt.n	800a006 <_strtod_l+0x256>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	437b      	muls	r3, r7
 800a002:	9306      	str	r3, [sp, #24]
 800a004:	e7e1      	b.n	8009fca <_strtod_l+0x21a>
 800a006:	2910      	cmp	r1, #16
 800a008:	bfd8      	it	le
 800a00a:	437d      	mulle	r5, r7
 800a00c:	e7dd      	b.n	8009fca <_strtod_l+0x21a>
 800a00e:	2c10      	cmp	r4, #16
 800a010:	bfdc      	itt	le
 800a012:	210a      	movle	r1, #10
 800a014:	fb01 e505 	mlale	r5, r1, r5, lr
 800a018:	e7e4      	b.n	8009fe4 <_strtod_l+0x234>
 800a01a:	2301      	movs	r3, #1
 800a01c:	9305      	str	r3, [sp, #20]
 800a01e:	e781      	b.n	8009f24 <_strtod_l+0x174>
 800a020:	f04f 0c01 	mov.w	ip, #1
 800a024:	1cb3      	adds	r3, r6, #2
 800a026:	931b      	str	r3, [sp, #108]	; 0x6c
 800a028:	78b3      	ldrb	r3, [r6, #2]
 800a02a:	e78a      	b.n	8009f42 <_strtod_l+0x192>
 800a02c:	f04f 0c00 	mov.w	ip, #0
 800a030:	e7f8      	b.n	800a024 <_strtod_l+0x274>
 800a032:	bf00      	nop
 800a034:	0800d65c 	.word	0x0800d65c
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a03e:	1c5f      	adds	r7, r3, #1
 800a040:	971b      	str	r7, [sp, #108]	; 0x6c
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	2b30      	cmp	r3, #48	; 0x30
 800a046:	d0f9      	beq.n	800a03c <_strtod_l+0x28c>
 800a048:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a04c:	2f08      	cmp	r7, #8
 800a04e:	f63f af7d 	bhi.w	8009f4c <_strtod_l+0x19c>
 800a052:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a058:	9309      	str	r3, [sp, #36]	; 0x24
 800a05a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a05c:	1c5f      	adds	r7, r3, #1
 800a05e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a060:	785b      	ldrb	r3, [r3, #1]
 800a062:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a066:	f1b8 0f09 	cmp.w	r8, #9
 800a06a:	d937      	bls.n	800a0dc <_strtod_l+0x32c>
 800a06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06e:	1a7f      	subs	r7, r7, r1
 800a070:	2f08      	cmp	r7, #8
 800a072:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a076:	dc37      	bgt.n	800a0e8 <_strtod_l+0x338>
 800a078:	45be      	cmp	lr, r7
 800a07a:	bfa8      	it	ge
 800a07c:	46be      	movge	lr, r7
 800a07e:	f1bc 0f00 	cmp.w	ip, #0
 800a082:	d001      	beq.n	800a088 <_strtod_l+0x2d8>
 800a084:	f1ce 0e00 	rsb	lr, lr, #0
 800a088:	2c00      	cmp	r4, #0
 800a08a:	d151      	bne.n	800a130 <_strtod_l+0x380>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f47f aece 	bne.w	8009e2e <_strtod_l+0x7e>
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	2a00      	cmp	r2, #0
 800a096:	f47f aeca 	bne.w	8009e2e <_strtod_l+0x7e>
 800a09a:	9a05      	ldr	r2, [sp, #20]
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	f47f aee4 	bne.w	8009e6a <_strtod_l+0xba>
 800a0a2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0a4:	d027      	beq.n	800a0f6 <_strtod_l+0x346>
 800a0a6:	dc21      	bgt.n	800a0ec <_strtod_l+0x33c>
 800a0a8:	2b49      	cmp	r3, #73	; 0x49
 800a0aa:	f47f aede 	bne.w	8009e6a <_strtod_l+0xba>
 800a0ae:	49a4      	ldr	r1, [pc, #656]	; (800a340 <_strtod_l+0x590>)
 800a0b0:	a81b      	add	r0, sp, #108	; 0x6c
 800a0b2:	f000 ffb7 	bl	800b024 <__match>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f43f aed7 	beq.w	8009e6a <_strtod_l+0xba>
 800a0bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0be:	49a1      	ldr	r1, [pc, #644]	; (800a344 <_strtod_l+0x594>)
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	a81b      	add	r0, sp, #108	; 0x6c
 800a0c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0c6:	f000 ffad 	bl	800b024 <__match>
 800a0ca:	b910      	cbnz	r0, 800a0d2 <_strtod_l+0x322>
 800a0cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a0d2:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a358 <_strtod_l+0x5a8>
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	e6a8      	b.n	8009e2e <_strtod_l+0x7e>
 800a0dc:	210a      	movs	r1, #10
 800a0de:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a0e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a0e6:	e7b8      	b.n	800a05a <_strtod_l+0x2aa>
 800a0e8:	46be      	mov	lr, r7
 800a0ea:	e7c8      	b.n	800a07e <_strtod_l+0x2ce>
 800a0ec:	2b69      	cmp	r3, #105	; 0x69
 800a0ee:	d0de      	beq.n	800a0ae <_strtod_l+0x2fe>
 800a0f0:	2b6e      	cmp	r3, #110	; 0x6e
 800a0f2:	f47f aeba 	bne.w	8009e6a <_strtod_l+0xba>
 800a0f6:	4994      	ldr	r1, [pc, #592]	; (800a348 <_strtod_l+0x598>)
 800a0f8:	a81b      	add	r0, sp, #108	; 0x6c
 800a0fa:	f000 ff93 	bl	800b024 <__match>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f aeb3 	beq.w	8009e6a <_strtod_l+0xba>
 800a104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b28      	cmp	r3, #40	; 0x28
 800a10a:	d10e      	bne.n	800a12a <_strtod_l+0x37a>
 800a10c:	aa1e      	add	r2, sp, #120	; 0x78
 800a10e:	498f      	ldr	r1, [pc, #572]	; (800a34c <_strtod_l+0x59c>)
 800a110:	a81b      	add	r0, sp, #108	; 0x6c
 800a112:	f000 ff9b 	bl	800b04c <__hexnan>
 800a116:	2805      	cmp	r0, #5
 800a118:	d107      	bne.n	800a12a <_strtod_l+0x37a>
 800a11a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a11c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a120:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a124:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a128:	e681      	b.n	8009e2e <_strtod_l+0x7e>
 800a12a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a360 <_strtod_l+0x5b0>
 800a12e:	e7d2      	b.n	800a0d6 <_strtod_l+0x326>
 800a130:	ebae 0302 	sub.w	r3, lr, r2
 800a134:	9307      	str	r3, [sp, #28]
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	9806      	ldr	r0, [sp, #24]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bf08      	it	eq
 800a13e:	4623      	moveq	r3, r4
 800a140:	2c10      	cmp	r4, #16
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	46a0      	mov	r8, r4
 800a146:	bfa8      	it	ge
 800a148:	f04f 0810 	movge.w	r8, #16
 800a14c:	f7f6 f94a 	bl	80003e4 <__aeabi_ui2d>
 800a150:	2c09      	cmp	r4, #9
 800a152:	4681      	mov	r9, r0
 800a154:	468a      	mov	sl, r1
 800a156:	dc13      	bgt.n	800a180 <_strtod_l+0x3d0>
 800a158:	9b07      	ldr	r3, [sp, #28]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f43f ae67 	beq.w	8009e2e <_strtod_l+0x7e>
 800a160:	9b07      	ldr	r3, [sp, #28]
 800a162:	dd7e      	ble.n	800a262 <_strtod_l+0x4b2>
 800a164:	2b16      	cmp	r3, #22
 800a166:	dc65      	bgt.n	800a234 <_strtod_l+0x484>
 800a168:	4a79      	ldr	r2, [pc, #484]	; (800a350 <_strtod_l+0x5a0>)
 800a16a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a16e:	464a      	mov	r2, r9
 800a170:	e9de 0100 	ldrd	r0, r1, [lr]
 800a174:	4653      	mov	r3, sl
 800a176:	f7f6 f9af 	bl	80004d8 <__aeabi_dmul>
 800a17a:	4681      	mov	r9, r0
 800a17c:	468a      	mov	sl, r1
 800a17e:	e656      	b.n	8009e2e <_strtod_l+0x7e>
 800a180:	4b73      	ldr	r3, [pc, #460]	; (800a350 <_strtod_l+0x5a0>)
 800a182:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a18a:	f7f6 f9a5 	bl	80004d8 <__aeabi_dmul>
 800a18e:	4606      	mov	r6, r0
 800a190:	4628      	mov	r0, r5
 800a192:	460f      	mov	r7, r1
 800a194:	f7f6 f926 	bl	80003e4 <__aeabi_ui2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f5 ffe4 	bl	800016c <__adddf3>
 800a1a4:	2c0f      	cmp	r4, #15
 800a1a6:	4681      	mov	r9, r0
 800a1a8:	468a      	mov	sl, r1
 800a1aa:	ddd5      	ble.n	800a158 <_strtod_l+0x3a8>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	eba4 0808 	sub.w	r8, r4, r8
 800a1b2:	4498      	add	r8, r3
 800a1b4:	f1b8 0f00 	cmp.w	r8, #0
 800a1b8:	f340 809a 	ble.w	800a2f0 <_strtod_l+0x540>
 800a1bc:	f018 030f 	ands.w	r3, r8, #15
 800a1c0:	d00a      	beq.n	800a1d8 <_strtod_l+0x428>
 800a1c2:	4963      	ldr	r1, [pc, #396]	; (800a350 <_strtod_l+0x5a0>)
 800a1c4:	464a      	mov	r2, r9
 800a1c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ce:	4653      	mov	r3, sl
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	4681      	mov	r9, r0
 800a1d6:	468a      	mov	sl, r1
 800a1d8:	f038 080f 	bics.w	r8, r8, #15
 800a1dc:	d077      	beq.n	800a2ce <_strtod_l+0x51e>
 800a1de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a1e2:	dd4b      	ble.n	800a27c <_strtod_l+0x4cc>
 800a1e4:	f04f 0800 	mov.w	r8, #0
 800a1e8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a1ec:	f8cd 8020 	str.w	r8, [sp, #32]
 800a1f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1f4:	2322      	movs	r3, #34	; 0x22
 800a1f6:	f04f 0900 	mov.w	r9, #0
 800a1fa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a358 <_strtod_l+0x5a8>
 800a1fe:	f8cb 3000 	str.w	r3, [fp]
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f43f ae12 	beq.w	8009e2e <_strtod_l+0x7e>
 800a20a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a20c:	4658      	mov	r0, fp
 800a20e:	f001 f807 	bl	800b220 <_Bfree>
 800a212:	9906      	ldr	r1, [sp, #24]
 800a214:	4658      	mov	r0, fp
 800a216:	f001 f803 	bl	800b220 <_Bfree>
 800a21a:	9904      	ldr	r1, [sp, #16]
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 ffff 	bl	800b220 <_Bfree>
 800a222:	9908      	ldr	r1, [sp, #32]
 800a224:	4658      	mov	r0, fp
 800a226:	f000 fffb 	bl	800b220 <_Bfree>
 800a22a:	4641      	mov	r1, r8
 800a22c:	4658      	mov	r0, fp
 800a22e:	f000 fff7 	bl	800b220 <_Bfree>
 800a232:	e5fc      	b.n	8009e2e <_strtod_l+0x7e>
 800a234:	9a07      	ldr	r2, [sp, #28]
 800a236:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a23a:	4293      	cmp	r3, r2
 800a23c:	dbb6      	blt.n	800a1ac <_strtod_l+0x3fc>
 800a23e:	4d44      	ldr	r5, [pc, #272]	; (800a350 <_strtod_l+0x5a0>)
 800a240:	f1c4 040f 	rsb	r4, r4, #15
 800a244:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a248:	464a      	mov	r2, r9
 800a24a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a24e:	4653      	mov	r3, sl
 800a250:	f7f6 f942 	bl	80004d8 <__aeabi_dmul>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	1b1c      	subs	r4, r3, r4
 800a258:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a25c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a260:	e789      	b.n	800a176 <_strtod_l+0x3c6>
 800a262:	f113 0f16 	cmn.w	r3, #22
 800a266:	dba1      	blt.n	800a1ac <_strtod_l+0x3fc>
 800a268:	4a39      	ldr	r2, [pc, #228]	; (800a350 <_strtod_l+0x5a0>)
 800a26a:	4648      	mov	r0, r9
 800a26c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a270:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a274:	4651      	mov	r1, sl
 800a276:	f7f6 fa59 	bl	800072c <__aeabi_ddiv>
 800a27a:	e77e      	b.n	800a17a <_strtod_l+0x3ca>
 800a27c:	2300      	movs	r3, #0
 800a27e:	4648      	mov	r0, r9
 800a280:	4651      	mov	r1, sl
 800a282:	461d      	mov	r5, r3
 800a284:	4e33      	ldr	r6, [pc, #204]	; (800a354 <_strtod_l+0x5a4>)
 800a286:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a28a:	f1b8 0f01 	cmp.w	r8, #1
 800a28e:	dc21      	bgt.n	800a2d4 <_strtod_l+0x524>
 800a290:	b10b      	cbz	r3, 800a296 <_strtod_l+0x4e6>
 800a292:	4681      	mov	r9, r0
 800a294:	468a      	mov	sl, r1
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <_strtod_l+0x5a4>)
 800a298:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a29c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a2a0:	464a      	mov	r2, r9
 800a2a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a2a6:	4653      	mov	r3, sl
 800a2a8:	f7f6 f916 	bl	80004d8 <__aeabi_dmul>
 800a2ac:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <_strtod_l+0x5a8>)
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	400b      	ands	r3, r1
 800a2b2:	492a      	ldr	r1, [pc, #168]	; (800a35c <_strtod_l+0x5ac>)
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	428b      	cmp	r3, r1
 800a2b8:	d894      	bhi.n	800a1e4 <_strtod_l+0x434>
 800a2ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	bf86      	itte	hi
 800a2c2:	f04f 39ff 	movhi.w	r9, #4294967295
 800a2c6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a364 <_strtod_l+0x5b4>
 800a2ca:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9305      	str	r3, [sp, #20]
 800a2d2:	e07b      	b.n	800a3cc <_strtod_l+0x61c>
 800a2d4:	f018 0f01 	tst.w	r8, #1
 800a2d8:	d006      	beq.n	800a2e8 <_strtod_l+0x538>
 800a2da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f6 f8f9 	bl	80004d8 <__aeabi_dmul>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2ee:	e7cc      	b.n	800a28a <_strtod_l+0x4da>
 800a2f0:	d0ed      	beq.n	800a2ce <_strtod_l+0x51e>
 800a2f2:	f1c8 0800 	rsb	r8, r8, #0
 800a2f6:	f018 020f 	ands.w	r2, r8, #15
 800a2fa:	d00a      	beq.n	800a312 <_strtod_l+0x562>
 800a2fc:	4b14      	ldr	r3, [pc, #80]	; (800a350 <_strtod_l+0x5a0>)
 800a2fe:	4648      	mov	r0, r9
 800a300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a304:	4651      	mov	r1, sl
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f6 fa0f 	bl	800072c <__aeabi_ddiv>
 800a30e:	4681      	mov	r9, r0
 800a310:	468a      	mov	sl, r1
 800a312:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a316:	d0da      	beq.n	800a2ce <_strtod_l+0x51e>
 800a318:	f1b8 0f1f 	cmp.w	r8, #31
 800a31c:	dd24      	ble.n	800a368 <_strtod_l+0x5b8>
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	f8cd 8010 	str.w	r8, [sp, #16]
 800a326:	f8cd 8020 	str.w	r8, [sp, #32]
 800a32a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a32e:	2322      	movs	r3, #34	; 0x22
 800a330:	f04f 0900 	mov.w	r9, #0
 800a334:	f04f 0a00 	mov.w	sl, #0
 800a338:	f8cb 3000 	str.w	r3, [fp]
 800a33c:	e761      	b.n	800a202 <_strtod_l+0x452>
 800a33e:	bf00      	nop
 800a340:	0800d650 	.word	0x0800d650
 800a344:	0800d653 	.word	0x0800d653
 800a348:	0800d659 	.word	0x0800d659
 800a34c:	0800d670 	.word	0x0800d670
 800a350:	0800d6e8 	.word	0x0800d6e8
 800a354:	0800d6c0 	.word	0x0800d6c0
 800a358:	7ff00000 	.word	0x7ff00000
 800a35c:	7ca00000 	.word	0x7ca00000
 800a360:	fff80000 	.word	0xfff80000
 800a364:	7fefffff 	.word	0x7fefffff
 800a368:	f018 0310 	ands.w	r3, r8, #16
 800a36c:	bf18      	it	ne
 800a36e:	236a      	movne	r3, #106	; 0x6a
 800a370:	4648      	mov	r0, r9
 800a372:	9305      	str	r3, [sp, #20]
 800a374:	4651      	mov	r1, sl
 800a376:	2300      	movs	r3, #0
 800a378:	4da1      	ldr	r5, [pc, #644]	; (800a600 <_strtod_l+0x850>)
 800a37a:	f1b8 0f00 	cmp.w	r8, #0
 800a37e:	f300 8113 	bgt.w	800a5a8 <_strtod_l+0x7f8>
 800a382:	b10b      	cbz	r3, 800a388 <_strtod_l+0x5d8>
 800a384:	4681      	mov	r9, r0
 800a386:	468a      	mov	sl, r1
 800a388:	9b05      	ldr	r3, [sp, #20]
 800a38a:	b1bb      	cbz	r3, 800a3bc <_strtod_l+0x60c>
 800a38c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a390:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a394:	2b00      	cmp	r3, #0
 800a396:	4651      	mov	r1, sl
 800a398:	dd10      	ble.n	800a3bc <_strtod_l+0x60c>
 800a39a:	2b1f      	cmp	r3, #31
 800a39c:	f340 8110 	ble.w	800a5c0 <_strtod_l+0x810>
 800a3a0:	2b34      	cmp	r3, #52	; 0x34
 800a3a2:	bfd8      	it	le
 800a3a4:	f04f 32ff 	movle.w	r2, #4294967295
 800a3a8:	f04f 0900 	mov.w	r9, #0
 800a3ac:	bfcf      	iteee	gt
 800a3ae:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a3b2:	3b20      	suble	r3, #32
 800a3b4:	fa02 f303 	lslle.w	r3, r2, r3
 800a3b8:	ea03 0a01 	andle.w	sl, r3, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	4648      	mov	r0, r9
 800a3c2:	4651      	mov	r1, sl
 800a3c4:	f7f6 faf0 	bl	80009a8 <__aeabi_dcmpeq>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1a8      	bne.n	800a31e <_strtod_l+0x56e>
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	9a04      	ldr	r2, [sp, #16]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	9908      	ldr	r1, [sp, #32]
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f000 ff74 	bl	800b2c4 <__s2b>
 800a3dc:	9008      	str	r0, [sp, #32]
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f af00 	beq.w	800a1e4 <_strtod_l+0x434>
 800a3e4:	9a07      	ldr	r2, [sp, #28]
 800a3e6:	9b07      	ldr	r3, [sp, #28]
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	f1c3 0300 	rsb	r3, r3, #0
 800a3ee:	bfa8      	it	ge
 800a3f0:	2300      	movge	r3, #0
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3f8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3fc:	9316      	str	r3, [sp, #88]	; 0x58
 800a3fe:	f8cd 8010 	str.w	r8, [sp, #16]
 800a402:	9b08      	ldr	r3, [sp, #32]
 800a404:	4658      	mov	r0, fp
 800a406:	6859      	ldr	r1, [r3, #4]
 800a408:	f000 fed6 	bl	800b1b8 <_Balloc>
 800a40c:	9006      	str	r0, [sp, #24]
 800a40e:	2800      	cmp	r0, #0
 800a410:	f43f aef0 	beq.w	800a1f4 <_strtod_l+0x444>
 800a414:	9b08      	ldr	r3, [sp, #32]
 800a416:	300c      	adds	r0, #12
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	f103 010c 	add.w	r1, r3, #12
 800a41e:	3202      	adds	r2, #2
 800a420:	0092      	lsls	r2, r2, #2
 800a422:	f7ff fbfe 	bl	8009c22 <memcpy>
 800a426:	ab1e      	add	r3, sp, #120	; 0x78
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	ab1d      	add	r3, sp, #116	; 0x74
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	464a      	mov	r2, r9
 800a430:	4653      	mov	r3, sl
 800a432:	4658      	mov	r0, fp
 800a434:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a438:	f001 f9fe 	bl	800b838 <__d2b>
 800a43c:	901c      	str	r0, [sp, #112]	; 0x70
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f aed8 	beq.w	800a1f4 <_strtod_l+0x444>
 800a444:	2101      	movs	r1, #1
 800a446:	4658      	mov	r0, fp
 800a448:	f000 ffc8 	bl	800b3dc <__i2b>
 800a44c:	9004      	str	r0, [sp, #16]
 800a44e:	4603      	mov	r3, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	f43f aecf 	beq.w	800a1f4 <_strtod_l+0x444>
 800a456:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a458:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a45a:	2d00      	cmp	r5, #0
 800a45c:	bfab      	itete	ge
 800a45e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a460:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a462:	18ee      	addge	r6, r5, r3
 800a464:	1b5c      	sublt	r4, r3, r5
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	bfa8      	it	ge
 800a46a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a46c:	eba5 0503 	sub.w	r5, r5, r3
 800a470:	4415      	add	r5, r2
 800a472:	4b64      	ldr	r3, [pc, #400]	; (800a604 <_strtod_l+0x854>)
 800a474:	f105 35ff 	add.w	r5, r5, #4294967295
 800a478:	bfb8      	it	lt
 800a47a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a47c:	429d      	cmp	r5, r3
 800a47e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a482:	f280 80af 	bge.w	800a5e4 <_strtod_l+0x834>
 800a486:	1b5b      	subs	r3, r3, r5
 800a488:	2b1f      	cmp	r3, #31
 800a48a:	eba2 0203 	sub.w	r2, r2, r3
 800a48e:	f04f 0701 	mov.w	r7, #1
 800a492:	f300 809c 	bgt.w	800a5ce <_strtod_l+0x81e>
 800a496:	2500      	movs	r5, #0
 800a498:	fa07 f303 	lsl.w	r3, r7, r3
 800a49c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a49e:	18b7      	adds	r7, r6, r2
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	42be      	cmp	r6, r7
 800a4a4:	4414      	add	r4, r2
 800a4a6:	441c      	add	r4, r3
 800a4a8:	4633      	mov	r3, r6
 800a4aa:	bfa8      	it	ge
 800a4ac:	463b      	movge	r3, r7
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	bfa8      	it	ge
 800a4b2:	4623      	movge	r3, r4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfc2      	ittt	gt
 800a4b8:	1aff      	subgt	r7, r7, r3
 800a4ba:	1ae4      	subgt	r4, r4, r3
 800a4bc:	1af6      	subgt	r6, r6, r3
 800a4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4c0:	b1bb      	cbz	r3, 800a4f2 <_strtod_l+0x742>
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	9904      	ldr	r1, [sp, #16]
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f001 f826 	bl	800b518 <__pow5mult>
 800a4cc:	9004      	str	r0, [sp, #16]
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f43f ae90 	beq.w	800a1f4 <_strtod_l+0x444>
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a4d8:	4658      	mov	r0, fp
 800a4da:	f000 ff88 	bl	800b3ee <__multiply>
 800a4de:	9009      	str	r0, [sp, #36]	; 0x24
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f43f ae87 	beq.w	800a1f4 <_strtod_l+0x444>
 800a4e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4e8:	4658      	mov	r0, fp
 800a4ea:	f000 fe99 	bl	800b220 <_Bfree>
 800a4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f0:	931c      	str	r3, [sp, #112]	; 0x70
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	dc7a      	bgt.n	800a5ec <_strtod_l+0x83c>
 800a4f6:	9b07      	ldr	r3, [sp, #28]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dd08      	ble.n	800a50e <_strtod_l+0x75e>
 800a4fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4fe:	9906      	ldr	r1, [sp, #24]
 800a500:	4658      	mov	r0, fp
 800a502:	f001 f809 	bl	800b518 <__pow5mult>
 800a506:	9006      	str	r0, [sp, #24]
 800a508:	2800      	cmp	r0, #0
 800a50a:	f43f ae73 	beq.w	800a1f4 <_strtod_l+0x444>
 800a50e:	2c00      	cmp	r4, #0
 800a510:	dd08      	ble.n	800a524 <_strtod_l+0x774>
 800a512:	4622      	mov	r2, r4
 800a514:	9906      	ldr	r1, [sp, #24]
 800a516:	4658      	mov	r0, fp
 800a518:	f001 f84c 	bl	800b5b4 <__lshift>
 800a51c:	9006      	str	r0, [sp, #24]
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f ae68 	beq.w	800a1f4 <_strtod_l+0x444>
 800a524:	2e00      	cmp	r6, #0
 800a526:	dd08      	ble.n	800a53a <_strtod_l+0x78a>
 800a528:	4632      	mov	r2, r6
 800a52a:	9904      	ldr	r1, [sp, #16]
 800a52c:	4658      	mov	r0, fp
 800a52e:	f001 f841 	bl	800b5b4 <__lshift>
 800a532:	9004      	str	r0, [sp, #16]
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae5d 	beq.w	800a1f4 <_strtod_l+0x444>
 800a53a:	9a06      	ldr	r2, [sp, #24]
 800a53c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a53e:	4658      	mov	r0, fp
 800a540:	f001 f8a6 	bl	800b690 <__mdiff>
 800a544:	4680      	mov	r8, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae54 	beq.w	800a1f4 <_strtod_l+0x444>
 800a54c:	2400      	movs	r4, #0
 800a54e:	68c3      	ldr	r3, [r0, #12]
 800a550:	9904      	ldr	r1, [sp, #16]
 800a552:	60c4      	str	r4, [r0, #12]
 800a554:	930c      	str	r3, [sp, #48]	; 0x30
 800a556:	f001 f881 	bl	800b65c <__mcmp>
 800a55a:	42a0      	cmp	r0, r4
 800a55c:	da54      	bge.n	800a608 <_strtod_l+0x858>
 800a55e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a560:	b9f3      	cbnz	r3, 800a5a0 <_strtod_l+0x7f0>
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	d11b      	bne.n	800a5a0 <_strtod_l+0x7f0>
 800a568:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a56c:	b9c3      	cbnz	r3, 800a5a0 <_strtod_l+0x7f0>
 800a56e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a572:	0d1b      	lsrs	r3, r3, #20
 800a574:	051b      	lsls	r3, r3, #20
 800a576:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a57a:	d911      	bls.n	800a5a0 <_strtod_l+0x7f0>
 800a57c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a580:	b91b      	cbnz	r3, 800a58a <_strtod_l+0x7da>
 800a582:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a586:	2b01      	cmp	r3, #1
 800a588:	dd0a      	ble.n	800a5a0 <_strtod_l+0x7f0>
 800a58a:	4641      	mov	r1, r8
 800a58c:	2201      	movs	r2, #1
 800a58e:	4658      	mov	r0, fp
 800a590:	f001 f810 	bl	800b5b4 <__lshift>
 800a594:	9904      	ldr	r1, [sp, #16]
 800a596:	4680      	mov	r8, r0
 800a598:	f001 f860 	bl	800b65c <__mcmp>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	dc68      	bgt.n	800a672 <_strtod_l+0x8c2>
 800a5a0:	9b05      	ldr	r3, [sp, #20]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d172      	bne.n	800a68c <_strtod_l+0x8dc>
 800a5a6:	e630      	b.n	800a20a <_strtod_l+0x45a>
 800a5a8:	f018 0f01 	tst.w	r8, #1
 800a5ac:	d004      	beq.n	800a5b8 <_strtod_l+0x808>
 800a5ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b2:	f7f5 ff91 	bl	80004d8 <__aeabi_dmul>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a5bc:	3508      	adds	r5, #8
 800a5be:	e6dc      	b.n	800a37a <_strtod_l+0x5ca>
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	ea03 0909 	and.w	r9, r3, r9
 800a5cc:	e6f6      	b.n	800a3bc <_strtod_l+0x60c>
 800a5ce:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a5d2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a5d6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a5da:	35e2      	adds	r5, #226	; 0xe2
 800a5dc:	fa07 f505 	lsl.w	r5, r7, r5
 800a5e0:	970f      	str	r7, [sp, #60]	; 0x3c
 800a5e2:	e75c      	b.n	800a49e <_strtod_l+0x6ee>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	2500      	movs	r5, #0
 800a5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ea:	e758      	b.n	800a49e <_strtod_l+0x6ee>
 800a5ec:	463a      	mov	r2, r7
 800a5ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5f0:	4658      	mov	r0, fp
 800a5f2:	f000 ffdf 	bl	800b5b4 <__lshift>
 800a5f6:	901c      	str	r0, [sp, #112]	; 0x70
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f47f af7c 	bne.w	800a4f6 <_strtod_l+0x746>
 800a5fe:	e5f9      	b.n	800a1f4 <_strtod_l+0x444>
 800a600:	0800d688 	.word	0x0800d688
 800a604:	fffffc02 	.word	0xfffffc02
 800a608:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a60c:	f040 8089 	bne.w	800a722 <_strtod_l+0x972>
 800a610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a612:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a616:	b342      	cbz	r2, 800a66a <_strtod_l+0x8ba>
 800a618:	4aaf      	ldr	r2, [pc, #700]	; (800a8d8 <_strtod_l+0xb28>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d156      	bne.n	800a6cc <_strtod_l+0x91c>
 800a61e:	9b05      	ldr	r3, [sp, #20]
 800a620:	4648      	mov	r0, r9
 800a622:	b1eb      	cbz	r3, 800a660 <_strtod_l+0x8b0>
 800a624:	4653      	mov	r3, sl
 800a626:	4aad      	ldr	r2, [pc, #692]	; (800a8dc <_strtod_l+0xb2c>)
 800a628:	f04f 31ff 	mov.w	r1, #4294967295
 800a62c:	401a      	ands	r2, r3
 800a62e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a632:	d818      	bhi.n	800a666 <_strtod_l+0x8b6>
 800a634:	0d12      	lsrs	r2, r2, #20
 800a636:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a63a:	fa01 f303 	lsl.w	r3, r1, r3
 800a63e:	4298      	cmp	r0, r3
 800a640:	d144      	bne.n	800a6cc <_strtod_l+0x91c>
 800a642:	4ba7      	ldr	r3, [pc, #668]	; (800a8e0 <_strtod_l+0xb30>)
 800a644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a646:	429a      	cmp	r2, r3
 800a648:	d102      	bne.n	800a650 <_strtod_l+0x8a0>
 800a64a:	3001      	adds	r0, #1
 800a64c:	f43f add2 	beq.w	800a1f4 <_strtod_l+0x444>
 800a650:	4ba2      	ldr	r3, [pc, #648]	; (800a8dc <_strtod_l+0xb2c>)
 800a652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a654:	f04f 0900 	mov.w	r9, #0
 800a658:	401a      	ands	r2, r3
 800a65a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a65e:	e79f      	b.n	800a5a0 <_strtod_l+0x7f0>
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	e7eb      	b.n	800a63e <_strtod_l+0x88e>
 800a666:	460b      	mov	r3, r1
 800a668:	e7e9      	b.n	800a63e <_strtod_l+0x88e>
 800a66a:	bb7b      	cbnz	r3, 800a6cc <_strtod_l+0x91c>
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	d12c      	bne.n	800a6cc <_strtod_l+0x91c>
 800a672:	9905      	ldr	r1, [sp, #20]
 800a674:	4653      	mov	r3, sl
 800a676:	4a99      	ldr	r2, [pc, #612]	; (800a8dc <_strtod_l+0xb2c>)
 800a678:	b1f1      	cbz	r1, 800a6b8 <_strtod_l+0x908>
 800a67a:	ea02 010a 	and.w	r1, r2, sl
 800a67e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a682:	dc19      	bgt.n	800a6b8 <_strtod_l+0x908>
 800a684:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a688:	f77f ae51 	ble.w	800a32e <_strtod_l+0x57e>
 800a68c:	2300      	movs	r3, #0
 800a68e:	4a95      	ldr	r2, [pc, #596]	; (800a8e4 <_strtod_l+0xb34>)
 800a690:	4648      	mov	r0, r9
 800a692:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a696:	4651      	mov	r1, sl
 800a698:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a69c:	f7f5 ff1c 	bl	80004d8 <__aeabi_dmul>
 800a6a0:	4681      	mov	r9, r0
 800a6a2:	468a      	mov	sl, r1
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	f47f adb0 	bne.w	800a20a <_strtod_l+0x45a>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f47f adad 	bne.w	800a20a <_strtod_l+0x45a>
 800a6b0:	2322      	movs	r3, #34	; 0x22
 800a6b2:	f8cb 3000 	str.w	r3, [fp]
 800a6b6:	e5a8      	b.n	800a20a <_strtod_l+0x45a>
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6be:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a6c2:	f04f 39ff 	mov.w	r9, #4294967295
 800a6c6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a6ca:	e769      	b.n	800a5a0 <_strtod_l+0x7f0>
 800a6cc:	b19d      	cbz	r5, 800a6f6 <_strtod_l+0x946>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	421d      	tst	r5, r3
 800a6d2:	f43f af65 	beq.w	800a5a0 <_strtod_l+0x7f0>
 800a6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d8:	9a05      	ldr	r2, [sp, #20]
 800a6da:	4648      	mov	r0, r9
 800a6dc:	4651      	mov	r1, sl
 800a6de:	b173      	cbz	r3, 800a6fe <_strtod_l+0x94e>
 800a6e0:	f7ff fb44 	bl	8009d6c <sulp>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6ec:	f7f5 fd3e 	bl	800016c <__adddf3>
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	468a      	mov	sl, r1
 800a6f4:	e754      	b.n	800a5a0 <_strtod_l+0x7f0>
 800a6f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6f8:	ea13 0f09 	tst.w	r3, r9
 800a6fc:	e7e9      	b.n	800a6d2 <_strtod_l+0x922>
 800a6fe:	f7ff fb35 	bl	8009d6c <sulp>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a70a:	f7f5 fd2d 	bl	8000168 <__aeabi_dsub>
 800a70e:	2200      	movs	r2, #0
 800a710:	2300      	movs	r3, #0
 800a712:	4681      	mov	r9, r0
 800a714:	468a      	mov	sl, r1
 800a716:	f7f6 f947 	bl	80009a8 <__aeabi_dcmpeq>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f47f ae07 	bne.w	800a32e <_strtod_l+0x57e>
 800a720:	e73e      	b.n	800a5a0 <_strtod_l+0x7f0>
 800a722:	9904      	ldr	r1, [sp, #16]
 800a724:	4640      	mov	r0, r8
 800a726:	f001 f8d6 	bl	800b8d6 <__ratio>
 800a72a:	2200      	movs	r2, #0
 800a72c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a730:	4606      	mov	r6, r0
 800a732:	460f      	mov	r7, r1
 800a734:	f7f6 f94c 	bl	80009d0 <__aeabi_dcmple>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d075      	beq.n	800a828 <_strtod_l+0xa78>
 800a73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d047      	beq.n	800a7d2 <_strtod_l+0xa22>
 800a742:	2600      	movs	r6, #0
 800a744:	4f68      	ldr	r7, [pc, #416]	; (800a8e8 <_strtod_l+0xb38>)
 800a746:	4d68      	ldr	r5, [pc, #416]	; (800a8e8 <_strtod_l+0xb38>)
 800a748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a74e:	0d1b      	lsrs	r3, r3, #20
 800a750:	051b      	lsls	r3, r3, #20
 800a752:	930f      	str	r3, [sp, #60]	; 0x3c
 800a754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a756:	4b65      	ldr	r3, [pc, #404]	; (800a8ec <_strtod_l+0xb3c>)
 800a758:	429a      	cmp	r2, r3
 800a75a:	f040 80cf 	bne.w	800a8fc <_strtod_l+0xb4c>
 800a75e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a762:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a768:	4648      	mov	r0, r9
 800a76a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a76e:	4651      	mov	r1, sl
 800a770:	f000 ffec 	bl	800b74c <__ulp>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f5 feac 	bl	80004d8 <__aeabi_dmul>
 800a780:	464a      	mov	r2, r9
 800a782:	4653      	mov	r3, sl
 800a784:	f7f5 fcf2 	bl	800016c <__adddf3>
 800a788:	460b      	mov	r3, r1
 800a78a:	4954      	ldr	r1, [pc, #336]	; (800a8dc <_strtod_l+0xb2c>)
 800a78c:	4a58      	ldr	r2, [pc, #352]	; (800a8f0 <_strtod_l+0xb40>)
 800a78e:	4019      	ands	r1, r3
 800a790:	4291      	cmp	r1, r2
 800a792:	4681      	mov	r9, r0
 800a794:	d95e      	bls.n	800a854 <_strtod_l+0xaa4>
 800a796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a798:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d103      	bne.n	800a7a8 <_strtod_l+0x9f8>
 800a7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f43f ad26 	beq.w	800a1f4 <_strtod_l+0x444>
 800a7a8:	f04f 39ff 	mov.w	r9, #4294967295
 800a7ac:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a8e0 <_strtod_l+0xb30>
 800a7b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f000 fd34 	bl	800b220 <_Bfree>
 800a7b8:	9906      	ldr	r1, [sp, #24]
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fd30 	bl	800b220 <_Bfree>
 800a7c0:	9904      	ldr	r1, [sp, #16]
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f000 fd2c 	bl	800b220 <_Bfree>
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	4658      	mov	r0, fp
 800a7cc:	f000 fd28 	bl	800b220 <_Bfree>
 800a7d0:	e617      	b.n	800a402 <_strtod_l+0x652>
 800a7d2:	f1b9 0f00 	cmp.w	r9, #0
 800a7d6:	d119      	bne.n	800a80c <_strtod_l+0xa5c>
 800a7d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7de:	b9e3      	cbnz	r3, 800a81a <_strtod_l+0xa6a>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4b41      	ldr	r3, [pc, #260]	; (800a8e8 <_strtod_l+0xb38>)
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	f7f6 f8e8 	bl	80009bc <__aeabi_dcmplt>
 800a7ec:	b9c8      	cbnz	r0, 800a822 <_strtod_l+0xa72>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b40      	ldr	r3, [pc, #256]	; (800a8f4 <_strtod_l+0xb44>)
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	f7f5 fe6f 	bl	80004d8 <__aeabi_dmul>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	460d      	mov	r5, r1
 800a7fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a802:	9418      	str	r4, [sp, #96]	; 0x60
 800a804:	9319      	str	r3, [sp, #100]	; 0x64
 800a806:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a80a:	e79d      	b.n	800a748 <_strtod_l+0x998>
 800a80c:	f1b9 0f01 	cmp.w	r9, #1
 800a810:	d103      	bne.n	800a81a <_strtod_l+0xa6a>
 800a812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	f43f ad8a 	beq.w	800a32e <_strtod_l+0x57e>
 800a81a:	2600      	movs	r6, #0
 800a81c:	4f36      	ldr	r7, [pc, #216]	; (800a8f8 <_strtod_l+0xb48>)
 800a81e:	2400      	movs	r4, #0
 800a820:	e791      	b.n	800a746 <_strtod_l+0x996>
 800a822:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a824:	4d33      	ldr	r5, [pc, #204]	; (800a8f4 <_strtod_l+0xb44>)
 800a826:	e7ea      	b.n	800a7fe <_strtod_l+0xa4e>
 800a828:	4b32      	ldr	r3, [pc, #200]	; (800a8f4 <_strtod_l+0xb44>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fe52 	bl	80004d8 <__aeabi_dmul>
 800a834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a836:	4604      	mov	r4, r0
 800a838:	460d      	mov	r5, r1
 800a83a:	b933      	cbnz	r3, 800a84a <_strtod_l+0xa9a>
 800a83c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a840:	9010      	str	r0, [sp, #64]	; 0x40
 800a842:	9311      	str	r3, [sp, #68]	; 0x44
 800a844:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a848:	e77e      	b.n	800a748 <_strtod_l+0x998>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a852:	e7f7      	b.n	800a844 <_strtod_l+0xa94>
 800a854:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a858:	9b05      	ldr	r3, [sp, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1a8      	bne.n	800a7b0 <_strtod_l+0xa00>
 800a85e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a862:	0d1b      	lsrs	r3, r3, #20
 800a864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a866:	051b      	lsls	r3, r3, #20
 800a868:	429a      	cmp	r2, r3
 800a86a:	4656      	mov	r6, sl
 800a86c:	d1a0      	bne.n	800a7b0 <_strtod_l+0xa00>
 800a86e:	4629      	mov	r1, r5
 800a870:	4620      	mov	r0, r4
 800a872:	f7f6 f8e1 	bl	8000a38 <__aeabi_d2iz>
 800a876:	f7f5 fdc5 	bl	8000404 <__aeabi_i2d>
 800a87a:	460b      	mov	r3, r1
 800a87c:	4602      	mov	r2, r0
 800a87e:	4629      	mov	r1, r5
 800a880:	4620      	mov	r0, r4
 800a882:	f7f5 fc71 	bl	8000168 <__aeabi_dsub>
 800a886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	b933      	cbnz	r3, 800a89c <_strtod_l+0xaec>
 800a88e:	f1b9 0f00 	cmp.w	r9, #0
 800a892:	d103      	bne.n	800a89c <_strtod_l+0xaec>
 800a894:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a898:	2e00      	cmp	r6, #0
 800a89a:	d06a      	beq.n	800a972 <_strtod_l+0xbc2>
 800a89c:	a30a      	add	r3, pc, #40	; (adr r3, 800a8c8 <_strtod_l+0xb18>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	f7f6 f889 	bl	80009bc <__aeabi_dcmplt>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	f47f acad 	bne.w	800a20a <_strtod_l+0x45a>
 800a8b0:	a307      	add	r3, pc, #28	; (adr r3, 800a8d0 <_strtod_l+0xb20>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f6 f89d 	bl	80009f8 <__aeabi_dcmpgt>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f43f af76 	beq.w	800a7b0 <_strtod_l+0xa00>
 800a8c4:	e4a1      	b.n	800a20a <_strtod_l+0x45a>
 800a8c6:	bf00      	nop
 800a8c8:	94a03595 	.word	0x94a03595
 800a8cc:	3fdfffff 	.word	0x3fdfffff
 800a8d0:	35afe535 	.word	0x35afe535
 800a8d4:	3fe00000 	.word	0x3fe00000
 800a8d8:	000fffff 	.word	0x000fffff
 800a8dc:	7ff00000 	.word	0x7ff00000
 800a8e0:	7fefffff 	.word	0x7fefffff
 800a8e4:	39500000 	.word	0x39500000
 800a8e8:	3ff00000 	.word	0x3ff00000
 800a8ec:	7fe00000 	.word	0x7fe00000
 800a8f0:	7c9fffff 	.word	0x7c9fffff
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	bff00000 	.word	0xbff00000
 800a8fc:	9b05      	ldr	r3, [sp, #20]
 800a8fe:	b313      	cbz	r3, 800a946 <_strtod_l+0xb96>
 800a900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a902:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a906:	d81e      	bhi.n	800a946 <_strtod_l+0xb96>
 800a908:	a325      	add	r3, pc, #148	; (adr r3, 800a9a0 <_strtod_l+0xbf0>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f6 f85d 	bl	80009d0 <__aeabi_dcmple>
 800a916:	b190      	cbz	r0, 800a93e <_strtod_l+0xb8e>
 800a918:	4629      	mov	r1, r5
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7f6 f8b4 	bl	8000a88 <__aeabi_d2uiz>
 800a920:	2800      	cmp	r0, #0
 800a922:	bf08      	it	eq
 800a924:	2001      	moveq	r0, #1
 800a926:	f7f5 fd5d 	bl	80003e4 <__aeabi_ui2d>
 800a92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a92c:	4604      	mov	r4, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	b9d3      	cbnz	r3, 800a968 <_strtod_l+0xbb8>
 800a932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a936:	9012      	str	r0, [sp, #72]	; 0x48
 800a938:	9313      	str	r3, [sp, #76]	; 0x4c
 800a93a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a93e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a940:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a944:	1a9f      	subs	r7, r3, r2
 800a946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a94a:	f000 feff 	bl	800b74c <__ulp>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 fdbf 	bl	80004d8 <__aeabi_dmul>
 800a95a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a95e:	f7f5 fc05 	bl	800016c <__adddf3>
 800a962:	4681      	mov	r9, r0
 800a964:	468a      	mov	sl, r1
 800a966:	e777      	b.n	800a858 <_strtod_l+0xaa8>
 800a968:	4602      	mov	r2, r0
 800a96a:	460b      	mov	r3, r1
 800a96c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a970:	e7e3      	b.n	800a93a <_strtod_l+0xb8a>
 800a972:	a30d      	add	r3, pc, #52	; (adr r3, 800a9a8 <_strtod_l+0xbf8>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f6 f820 	bl	80009bc <__aeabi_dcmplt>
 800a97c:	e79f      	b.n	800a8be <_strtod_l+0xb0e>
 800a97e:	2300      	movs	r3, #0
 800a980:	930d      	str	r3, [sp, #52]	; 0x34
 800a982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a984:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	f7ff ba55 	b.w	8009e36 <_strtod_l+0x86>
 800a98c:	2b65      	cmp	r3, #101	; 0x65
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	f43f ab42 	beq.w	800a01a <_strtod_l+0x26a>
 800a996:	2101      	movs	r1, #1
 800a998:	4614      	mov	r4, r2
 800a99a:	9105      	str	r1, [sp, #20]
 800a99c:	f7ff babf 	b.w	8009f1e <_strtod_l+0x16e>
 800a9a0:	ffc00000 	.word	0xffc00000
 800a9a4:	41dfffff 	.word	0x41dfffff
 800a9a8:	94a03595 	.word	0x94a03595
 800a9ac:	3fcfffff 	.word	0x3fcfffff

0800a9b0 <strtod>:
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <strtod+0x1c>)
 800a9b2:	b410      	push	{r4}
 800a9b4:	681c      	ldr	r4, [r3, #0]
 800a9b6:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <strtod+0x20>)
 800a9b8:	6a23      	ldr	r3, [r4, #32]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	bf08      	it	eq
 800a9be:	4613      	moveq	r3, r2
 800a9c0:	460a      	mov	r2, r1
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	bc10      	pop	{r4}
 800a9c8:	f7ff b9f2 	b.w	8009db0 <_strtod_l>
 800a9cc:	200001bc 	.word	0x200001bc
 800a9d0:	20000220 	.word	0x20000220

0800a9d4 <_strtol_l.isra.0>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4689      	mov	r9, r1
 800a9dc:	4692      	mov	sl, r2
 800a9de:	461e      	mov	r6, r3
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	463d      	mov	r5, r7
 800a9e4:	9808      	ldr	r0, [sp, #32]
 800a9e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9ea:	f000 fbbf 	bl	800b16c <__locale_ctype_ptr_l>
 800a9ee:	4420      	add	r0, r4
 800a9f0:	7843      	ldrb	r3, [r0, #1]
 800a9f2:	f013 0308 	ands.w	r3, r3, #8
 800a9f6:	d132      	bne.n	800aa5e <_strtol_l.isra.0+0x8a>
 800a9f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a9fa:	d132      	bne.n	800aa62 <_strtol_l.isra.0+0x8e>
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	787c      	ldrb	r4, [r7, #1]
 800aa00:	1cbd      	adds	r5, r7, #2
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d05d      	beq.n	800aac2 <_strtol_l.isra.0+0xee>
 800aa06:	2e10      	cmp	r6, #16
 800aa08:	d109      	bne.n	800aa1e <_strtol_l.isra.0+0x4a>
 800aa0a:	2c30      	cmp	r4, #48	; 0x30
 800aa0c:	d107      	bne.n	800aa1e <_strtol_l.isra.0+0x4a>
 800aa0e:	782b      	ldrb	r3, [r5, #0]
 800aa10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa14:	2b58      	cmp	r3, #88	; 0x58
 800aa16:	d14f      	bne.n	800aab8 <_strtol_l.isra.0+0xe4>
 800aa18:	2610      	movs	r6, #16
 800aa1a:	786c      	ldrb	r4, [r5, #1]
 800aa1c:	3502      	adds	r5, #2
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	bf14      	ite	ne
 800aa22:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa26:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa2a:	2700      	movs	r7, #0
 800aa2c:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa30:	4638      	mov	r0, r7
 800aa32:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa36:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d817      	bhi.n	800aa6e <_strtol_l.isra.0+0x9a>
 800aa3e:	461c      	mov	r4, r3
 800aa40:	42a6      	cmp	r6, r4
 800aa42:	dd23      	ble.n	800aa8c <_strtol_l.isra.0+0xb8>
 800aa44:	1c7b      	adds	r3, r7, #1
 800aa46:	d007      	beq.n	800aa58 <_strtol_l.isra.0+0x84>
 800aa48:	4584      	cmp	ip, r0
 800aa4a:	d31c      	bcc.n	800aa86 <_strtol_l.isra.0+0xb2>
 800aa4c:	d101      	bne.n	800aa52 <_strtol_l.isra.0+0x7e>
 800aa4e:	45a6      	cmp	lr, r4
 800aa50:	db19      	blt.n	800aa86 <_strtol_l.isra.0+0xb2>
 800aa52:	2701      	movs	r7, #1
 800aa54:	fb00 4006 	mla	r0, r0, r6, r4
 800aa58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa5c:	e7eb      	b.n	800aa36 <_strtol_l.isra.0+0x62>
 800aa5e:	462f      	mov	r7, r5
 800aa60:	e7bf      	b.n	800a9e2 <_strtol_l.isra.0+0xe>
 800aa62:	2c2b      	cmp	r4, #43	; 0x2b
 800aa64:	bf04      	itt	eq
 800aa66:	1cbd      	addeq	r5, r7, #2
 800aa68:	787c      	ldrbeq	r4, [r7, #1]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	e7c9      	b.n	800aa02 <_strtol_l.isra.0+0x2e>
 800aa6e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aa72:	2b19      	cmp	r3, #25
 800aa74:	d801      	bhi.n	800aa7a <_strtol_l.isra.0+0xa6>
 800aa76:	3c37      	subs	r4, #55	; 0x37
 800aa78:	e7e2      	b.n	800aa40 <_strtol_l.isra.0+0x6c>
 800aa7a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aa7e:	2b19      	cmp	r3, #25
 800aa80:	d804      	bhi.n	800aa8c <_strtol_l.isra.0+0xb8>
 800aa82:	3c57      	subs	r4, #87	; 0x57
 800aa84:	e7dc      	b.n	800aa40 <_strtol_l.isra.0+0x6c>
 800aa86:	f04f 37ff 	mov.w	r7, #4294967295
 800aa8a:	e7e5      	b.n	800aa58 <_strtol_l.isra.0+0x84>
 800aa8c:	1c7b      	adds	r3, r7, #1
 800aa8e:	d108      	bne.n	800aaa2 <_strtol_l.isra.0+0xce>
 800aa90:	2322      	movs	r3, #34	; 0x22
 800aa92:	4608      	mov	r0, r1
 800aa94:	f8c8 3000 	str.w	r3, [r8]
 800aa98:	f1ba 0f00 	cmp.w	sl, #0
 800aa9c:	d107      	bne.n	800aaae <_strtol_l.isra.0+0xda>
 800aa9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa2:	b102      	cbz	r2, 800aaa6 <_strtol_l.isra.0+0xd2>
 800aaa4:	4240      	negs	r0, r0
 800aaa6:	f1ba 0f00 	cmp.w	sl, #0
 800aaaa:	d0f8      	beq.n	800aa9e <_strtol_l.isra.0+0xca>
 800aaac:	b10f      	cbz	r7, 800aab2 <_strtol_l.isra.0+0xde>
 800aaae:	f105 39ff 	add.w	r9, r5, #4294967295
 800aab2:	f8ca 9000 	str.w	r9, [sl]
 800aab6:	e7f2      	b.n	800aa9e <_strtol_l.isra.0+0xca>
 800aab8:	2430      	movs	r4, #48	; 0x30
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	d1af      	bne.n	800aa1e <_strtol_l.isra.0+0x4a>
 800aabe:	2608      	movs	r6, #8
 800aac0:	e7ad      	b.n	800aa1e <_strtol_l.isra.0+0x4a>
 800aac2:	2c30      	cmp	r4, #48	; 0x30
 800aac4:	d0a3      	beq.n	800aa0e <_strtol_l.isra.0+0x3a>
 800aac6:	260a      	movs	r6, #10
 800aac8:	e7a9      	b.n	800aa1e <_strtol_l.isra.0+0x4a>
	...

0800aacc <_strtol_r>:
 800aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aace:	4c06      	ldr	r4, [pc, #24]	; (800aae8 <_strtol_r+0x1c>)
 800aad0:	4d06      	ldr	r5, [pc, #24]	; (800aaec <_strtol_r+0x20>)
 800aad2:	6824      	ldr	r4, [r4, #0]
 800aad4:	6a24      	ldr	r4, [r4, #32]
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	bf08      	it	eq
 800aada:	462c      	moveq	r4, r5
 800aadc:	9400      	str	r4, [sp, #0]
 800aade:	f7ff ff79 	bl	800a9d4 <_strtol_l.isra.0>
 800aae2:	b003      	add	sp, #12
 800aae4:	bd30      	pop	{r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	200001bc 	.word	0x200001bc
 800aaec:	20000220 	.word	0x20000220

0800aaf0 <strtol>:
 800aaf0:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <strtol+0x24>)
 800aaf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaf4:	681c      	ldr	r4, [r3, #0]
 800aaf6:	4d08      	ldr	r5, [pc, #32]	; (800ab18 <strtol+0x28>)
 800aaf8:	6a23      	ldr	r3, [r4, #32]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bf08      	it	eq
 800aafe:	462b      	moveq	r3, r5
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	460a      	mov	r2, r1
 800ab06:	4601      	mov	r1, r0
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7ff ff63 	bl	800a9d4 <_strtol_l.isra.0>
 800ab0e:	b003      	add	sp, #12
 800ab10:	bd30      	pop	{r4, r5, pc}
 800ab12:	bf00      	nop
 800ab14:	200001bc 	.word	0x200001bc
 800ab18:	20000220 	.word	0x20000220

0800ab1c <rshift>:
 800ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1e:	6906      	ldr	r6, [r0, #16]
 800ab20:	114b      	asrs	r3, r1, #5
 800ab22:	429e      	cmp	r6, r3
 800ab24:	f100 0414 	add.w	r4, r0, #20
 800ab28:	dd31      	ble.n	800ab8e <rshift+0x72>
 800ab2a:	f011 011f 	ands.w	r1, r1, #31
 800ab2e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ab32:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ab36:	d108      	bne.n	800ab4a <rshift+0x2e>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	42b2      	cmp	r2, r6
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	d211      	bcs.n	800ab64 <rshift+0x48>
 800ab40:	f852 3b04 	ldr.w	r3, [r2], #4
 800ab44:	f841 3b04 	str.w	r3, [r1], #4
 800ab48:	e7f7      	b.n	800ab3a <rshift+0x1e>
 800ab4a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ab4e:	4623      	mov	r3, r4
 800ab50:	f1c1 0c20 	rsb	ip, r1, #32
 800ab54:	40cd      	lsrs	r5, r1
 800ab56:	3204      	adds	r2, #4
 800ab58:	42b2      	cmp	r2, r6
 800ab5a:	4617      	mov	r7, r2
 800ab5c:	d30d      	bcc.n	800ab7a <rshift+0x5e>
 800ab5e:	601d      	str	r5, [r3, #0]
 800ab60:	b105      	cbz	r5, 800ab64 <rshift+0x48>
 800ab62:	3304      	adds	r3, #4
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	eba3 0204 	sub.w	r2, r3, r4
 800ab6a:	bf08      	it	eq
 800ab6c:	2300      	moveq	r3, #0
 800ab6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab72:	6102      	str	r2, [r0, #16]
 800ab74:	bf08      	it	eq
 800ab76:	6143      	streq	r3, [r0, #20]
 800ab78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab7a:	683f      	ldr	r7, [r7, #0]
 800ab7c:	fa07 f70c 	lsl.w	r7, r7, ip
 800ab80:	433d      	orrs	r5, r7
 800ab82:	f843 5b04 	str.w	r5, [r3], #4
 800ab86:	f852 5b04 	ldr.w	r5, [r2], #4
 800ab8a:	40cd      	lsrs	r5, r1
 800ab8c:	e7e4      	b.n	800ab58 <rshift+0x3c>
 800ab8e:	4623      	mov	r3, r4
 800ab90:	e7e8      	b.n	800ab64 <rshift+0x48>

0800ab92 <__hexdig_fun>:
 800ab92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab96:	2b09      	cmp	r3, #9
 800ab98:	d802      	bhi.n	800aba0 <__hexdig_fun+0xe>
 800ab9a:	3820      	subs	r0, #32
 800ab9c:	b2c0      	uxtb	r0, r0
 800ab9e:	4770      	bx	lr
 800aba0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d801      	bhi.n	800abac <__hexdig_fun+0x1a>
 800aba8:	3847      	subs	r0, #71	; 0x47
 800abaa:	e7f7      	b.n	800ab9c <__hexdig_fun+0xa>
 800abac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abb0:	2b05      	cmp	r3, #5
 800abb2:	d801      	bhi.n	800abb8 <__hexdig_fun+0x26>
 800abb4:	3827      	subs	r0, #39	; 0x27
 800abb6:	e7f1      	b.n	800ab9c <__hexdig_fun+0xa>
 800abb8:	2000      	movs	r0, #0
 800abba:	4770      	bx	lr

0800abbc <__gethex>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	b08b      	sub	sp, #44	; 0x2c
 800abc2:	9002      	str	r0, [sp, #8]
 800abc4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800abc6:	468a      	mov	sl, r1
 800abc8:	4690      	mov	r8, r2
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	f000 fae0 	bl	800b190 <__localeconv_l>
 800abd0:	6803      	ldr	r3, [r0, #0]
 800abd2:	f04f 0b00 	mov.w	fp, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	f7f5 fab9 	bl	8000150 <strlen>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	9001      	str	r0, [sp, #4]
 800abe2:	4403      	add	r3, r0
 800abe4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800abe8:	9307      	str	r3, [sp, #28]
 800abea:	f8da 3000 	ldr.w	r3, [sl]
 800abee:	3302      	adds	r3, #2
 800abf0:	461f      	mov	r7, r3
 800abf2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abf6:	2830      	cmp	r0, #48	; 0x30
 800abf8:	d06c      	beq.n	800acd4 <__gethex+0x118>
 800abfa:	f7ff ffca 	bl	800ab92 <__hexdig_fun>
 800abfe:	4604      	mov	r4, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d16a      	bne.n	800acda <__gethex+0x11e>
 800ac04:	9a01      	ldr	r2, [sp, #4]
 800ac06:	9903      	ldr	r1, [sp, #12]
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f001 fa9e 	bl	800c14a <strncmp>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d166      	bne.n	800ace0 <__gethex+0x124>
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	5cf8      	ldrb	r0, [r7, r3]
 800ac16:	18fe      	adds	r6, r7, r3
 800ac18:	f7ff ffbb 	bl	800ab92 <__hexdig_fun>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d062      	beq.n	800ace6 <__gethex+0x12a>
 800ac20:	4633      	mov	r3, r6
 800ac22:	7818      	ldrb	r0, [r3, #0]
 800ac24:	461f      	mov	r7, r3
 800ac26:	2830      	cmp	r0, #48	; 0x30
 800ac28:	f103 0301 	add.w	r3, r3, #1
 800ac2c:	d0f9      	beq.n	800ac22 <__gethex+0x66>
 800ac2e:	f7ff ffb0 	bl	800ab92 <__hexdig_fun>
 800ac32:	fab0 f580 	clz	r5, r0
 800ac36:	4634      	mov	r4, r6
 800ac38:	f04f 0b01 	mov.w	fp, #1
 800ac3c:	096d      	lsrs	r5, r5, #5
 800ac3e:	463a      	mov	r2, r7
 800ac40:	4616      	mov	r6, r2
 800ac42:	7830      	ldrb	r0, [r6, #0]
 800ac44:	3201      	adds	r2, #1
 800ac46:	f7ff ffa4 	bl	800ab92 <__hexdig_fun>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d1f8      	bne.n	800ac40 <__gethex+0x84>
 800ac4e:	9a01      	ldr	r2, [sp, #4]
 800ac50:	9903      	ldr	r1, [sp, #12]
 800ac52:	4630      	mov	r0, r6
 800ac54:	f001 fa79 	bl	800c14a <strncmp>
 800ac58:	b950      	cbnz	r0, 800ac70 <__gethex+0xb4>
 800ac5a:	b954      	cbnz	r4, 800ac72 <__gethex+0xb6>
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	18f4      	adds	r4, r6, r3
 800ac60:	4622      	mov	r2, r4
 800ac62:	4616      	mov	r6, r2
 800ac64:	7830      	ldrb	r0, [r6, #0]
 800ac66:	3201      	adds	r2, #1
 800ac68:	f7ff ff93 	bl	800ab92 <__hexdig_fun>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d1f8      	bne.n	800ac62 <__gethex+0xa6>
 800ac70:	b10c      	cbz	r4, 800ac76 <__gethex+0xba>
 800ac72:	1ba4      	subs	r4, r4, r6
 800ac74:	00a4      	lsls	r4, r4, #2
 800ac76:	7833      	ldrb	r3, [r6, #0]
 800ac78:	2b50      	cmp	r3, #80	; 0x50
 800ac7a:	d001      	beq.n	800ac80 <__gethex+0xc4>
 800ac7c:	2b70      	cmp	r3, #112	; 0x70
 800ac7e:	d140      	bne.n	800ad02 <__gethex+0x146>
 800ac80:	7873      	ldrb	r3, [r6, #1]
 800ac82:	2b2b      	cmp	r3, #43	; 0x2b
 800ac84:	d031      	beq.n	800acea <__gethex+0x12e>
 800ac86:	2b2d      	cmp	r3, #45	; 0x2d
 800ac88:	d033      	beq.n	800acf2 <__gethex+0x136>
 800ac8a:	f04f 0900 	mov.w	r9, #0
 800ac8e:	1c71      	adds	r1, r6, #1
 800ac90:	7808      	ldrb	r0, [r1, #0]
 800ac92:	f7ff ff7e 	bl	800ab92 <__hexdig_fun>
 800ac96:	1e43      	subs	r3, r0, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b18      	cmp	r3, #24
 800ac9c:	d831      	bhi.n	800ad02 <__gethex+0x146>
 800ac9e:	f1a0 0210 	sub.w	r2, r0, #16
 800aca2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aca6:	f7ff ff74 	bl	800ab92 <__hexdig_fun>
 800acaa:	1e43      	subs	r3, r0, #1
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b18      	cmp	r3, #24
 800acb0:	d922      	bls.n	800acf8 <__gethex+0x13c>
 800acb2:	f1b9 0f00 	cmp.w	r9, #0
 800acb6:	d000      	beq.n	800acba <__gethex+0xfe>
 800acb8:	4252      	negs	r2, r2
 800acba:	4414      	add	r4, r2
 800acbc:	f8ca 1000 	str.w	r1, [sl]
 800acc0:	b30d      	cbz	r5, 800ad06 <__gethex+0x14a>
 800acc2:	f1bb 0f00 	cmp.w	fp, #0
 800acc6:	bf0c      	ite	eq
 800acc8:	2706      	moveq	r7, #6
 800acca:	2700      	movne	r7, #0
 800accc:	4638      	mov	r0, r7
 800acce:	b00b      	add	sp, #44	; 0x2c
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	f10b 0b01 	add.w	fp, fp, #1
 800acd8:	e78a      	b.n	800abf0 <__gethex+0x34>
 800acda:	2500      	movs	r5, #0
 800acdc:	462c      	mov	r4, r5
 800acde:	e7ae      	b.n	800ac3e <__gethex+0x82>
 800ace0:	463e      	mov	r6, r7
 800ace2:	2501      	movs	r5, #1
 800ace4:	e7c7      	b.n	800ac76 <__gethex+0xba>
 800ace6:	4604      	mov	r4, r0
 800ace8:	e7fb      	b.n	800ace2 <__gethex+0x126>
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	1cb1      	adds	r1, r6, #2
 800acf0:	e7ce      	b.n	800ac90 <__gethex+0xd4>
 800acf2:	f04f 0901 	mov.w	r9, #1
 800acf6:	e7fa      	b.n	800acee <__gethex+0x132>
 800acf8:	230a      	movs	r3, #10
 800acfa:	fb03 0202 	mla	r2, r3, r2, r0
 800acfe:	3a10      	subs	r2, #16
 800ad00:	e7cf      	b.n	800aca2 <__gethex+0xe6>
 800ad02:	4631      	mov	r1, r6
 800ad04:	e7da      	b.n	800acbc <__gethex+0x100>
 800ad06:	4629      	mov	r1, r5
 800ad08:	1bf3      	subs	r3, r6, r7
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	dc49      	bgt.n	800ada4 <__gethex+0x1e8>
 800ad10:	9802      	ldr	r0, [sp, #8]
 800ad12:	f000 fa51 	bl	800b1b8 <_Balloc>
 800ad16:	f04f 0b00 	mov.w	fp, #0
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	46da      	mov	sl, fp
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	f100 0914 	add.w	r9, r0, #20
 800ad24:	f1c3 0301 	rsb	r3, r3, #1
 800ad28:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad2c:	9308      	str	r3, [sp, #32]
 800ad2e:	42b7      	cmp	r7, r6
 800ad30:	d33b      	bcc.n	800adaa <__gethex+0x1ee>
 800ad32:	9804      	ldr	r0, [sp, #16]
 800ad34:	f840 ab04 	str.w	sl, [r0], #4
 800ad38:	eba0 0009 	sub.w	r0, r0, r9
 800ad3c:	1080      	asrs	r0, r0, #2
 800ad3e:	6128      	str	r0, [r5, #16]
 800ad40:	0147      	lsls	r7, r0, #5
 800ad42:	4650      	mov	r0, sl
 800ad44:	f000 fafc 	bl	800b340 <__hi0bits>
 800ad48:	f8d8 6000 	ldr.w	r6, [r8]
 800ad4c:	1a3f      	subs	r7, r7, r0
 800ad4e:	42b7      	cmp	r7, r6
 800ad50:	dd64      	ble.n	800ae1c <__gethex+0x260>
 800ad52:	1bbf      	subs	r7, r7, r6
 800ad54:	4639      	mov	r1, r7
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 fe05 	bl	800b966 <__any_on>
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	b178      	cbz	r0, 800ad80 <__gethex+0x1c4>
 800ad60:	f04f 0a01 	mov.w	sl, #1
 800ad64:	1e7b      	subs	r3, r7, #1
 800ad66:	1159      	asrs	r1, r3, #5
 800ad68:	f003 021f 	and.w	r2, r3, #31
 800ad6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad70:	fa0a f202 	lsl.w	r2, sl, r2
 800ad74:	420a      	tst	r2, r1
 800ad76:	d003      	beq.n	800ad80 <__gethex+0x1c4>
 800ad78:	4553      	cmp	r3, sl
 800ad7a:	dc46      	bgt.n	800ae0a <__gethex+0x24e>
 800ad7c:	f04f 0a02 	mov.w	sl, #2
 800ad80:	4639      	mov	r1, r7
 800ad82:	4628      	mov	r0, r5
 800ad84:	f7ff feca 	bl	800ab1c <rshift>
 800ad88:	443c      	add	r4, r7
 800ad8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	da52      	bge.n	800ae38 <__gethex+0x27c>
 800ad92:	4629      	mov	r1, r5
 800ad94:	9802      	ldr	r0, [sp, #8]
 800ad96:	f000 fa43 	bl	800b220 <_Bfree>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad9e:	27a3      	movs	r7, #163	; 0xa3
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	e793      	b.n	800accc <__gethex+0x110>
 800ada4:	3101      	adds	r1, #1
 800ada6:	105b      	asrs	r3, r3, #1
 800ada8:	e7b0      	b.n	800ad0c <__gethex+0x150>
 800adaa:	1e73      	subs	r3, r6, #1
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d018      	beq.n	800adea <__gethex+0x22e>
 800adb8:	f1bb 0f20 	cmp.w	fp, #32
 800adbc:	d107      	bne.n	800adce <__gethex+0x212>
 800adbe:	9b04      	ldr	r3, [sp, #16]
 800adc0:	f8c3 a000 	str.w	sl, [r3]
 800adc4:	f04f 0a00 	mov.w	sl, #0
 800adc8:	46d3      	mov	fp, sl
 800adca:	3304      	adds	r3, #4
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800add2:	f7ff fede 	bl	800ab92 <__hexdig_fun>
 800add6:	f000 000f 	and.w	r0, r0, #15
 800adda:	fa00 f00b 	lsl.w	r0, r0, fp
 800adde:	ea4a 0a00 	orr.w	sl, sl, r0
 800ade2:	f10b 0b04 	add.w	fp, fp, #4
 800ade6:	9b05      	ldr	r3, [sp, #20]
 800ade8:	e00d      	b.n	800ae06 <__gethex+0x24a>
 800adea:	9b05      	ldr	r3, [sp, #20]
 800adec:	9a08      	ldr	r2, [sp, #32]
 800adee:	4413      	add	r3, r2
 800adf0:	42bb      	cmp	r3, r7
 800adf2:	d3e1      	bcc.n	800adb8 <__gethex+0x1fc>
 800adf4:	4618      	mov	r0, r3
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	9903      	ldr	r1, [sp, #12]
 800adfa:	9309      	str	r3, [sp, #36]	; 0x24
 800adfc:	f001 f9a5 	bl	800c14a <strncmp>
 800ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d1d8      	bne.n	800adb8 <__gethex+0x1fc>
 800ae06:	461e      	mov	r6, r3
 800ae08:	e791      	b.n	800ad2e <__gethex+0x172>
 800ae0a:	1eb9      	subs	r1, r7, #2
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 fdaa 	bl	800b966 <__any_on>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d0b2      	beq.n	800ad7c <__gethex+0x1c0>
 800ae16:	f04f 0a03 	mov.w	sl, #3
 800ae1a:	e7b1      	b.n	800ad80 <__gethex+0x1c4>
 800ae1c:	da09      	bge.n	800ae32 <__gethex+0x276>
 800ae1e:	1bf7      	subs	r7, r6, r7
 800ae20:	4629      	mov	r1, r5
 800ae22:	463a      	mov	r2, r7
 800ae24:	9802      	ldr	r0, [sp, #8]
 800ae26:	f000 fbc5 	bl	800b5b4 <__lshift>
 800ae2a:	4605      	mov	r5, r0
 800ae2c:	1be4      	subs	r4, r4, r7
 800ae2e:	f100 0914 	add.w	r9, r0, #20
 800ae32:	f04f 0a00 	mov.w	sl, #0
 800ae36:	e7a8      	b.n	800ad8a <__gethex+0x1ce>
 800ae38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	dd6b      	ble.n	800af18 <__gethex+0x35c>
 800ae40:	1b04      	subs	r4, r0, r4
 800ae42:	42a6      	cmp	r6, r4
 800ae44:	dc2e      	bgt.n	800aea4 <__gethex+0x2e8>
 800ae46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d022      	beq.n	800ae94 <__gethex+0x2d8>
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d024      	beq.n	800ae9c <__gethex+0x2e0>
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d115      	bne.n	800ae82 <__gethex+0x2c6>
 800ae56:	42a6      	cmp	r6, r4
 800ae58:	d113      	bne.n	800ae82 <__gethex+0x2c6>
 800ae5a:	2e01      	cmp	r6, #1
 800ae5c:	dc0b      	bgt.n	800ae76 <__gethex+0x2ba>
 800ae5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae62:	9a06      	ldr	r2, [sp, #24]
 800ae64:	2762      	movs	r7, #98	; 0x62
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	612b      	str	r3, [r5, #16]
 800ae6c:	f8c9 3000 	str.w	r3, [r9]
 800ae70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae72:	601d      	str	r5, [r3, #0]
 800ae74:	e72a      	b.n	800accc <__gethex+0x110>
 800ae76:	1e71      	subs	r1, r6, #1
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f000 fd74 	bl	800b966 <__any_on>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d1ed      	bne.n	800ae5e <__gethex+0x2a2>
 800ae82:	4629      	mov	r1, r5
 800ae84:	9802      	ldr	r0, [sp, #8]
 800ae86:	f000 f9cb 	bl	800b220 <_Bfree>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae8e:	2750      	movs	r7, #80	; 0x50
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	e71b      	b.n	800accc <__gethex+0x110>
 800ae94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0e1      	beq.n	800ae5e <__gethex+0x2a2>
 800ae9a:	e7f2      	b.n	800ae82 <__gethex+0x2c6>
 800ae9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1dd      	bne.n	800ae5e <__gethex+0x2a2>
 800aea2:	e7ee      	b.n	800ae82 <__gethex+0x2c6>
 800aea4:	1e67      	subs	r7, r4, #1
 800aea6:	f1ba 0f00 	cmp.w	sl, #0
 800aeaa:	d132      	bne.n	800af12 <__gethex+0x356>
 800aeac:	b127      	cbz	r7, 800aeb8 <__gethex+0x2fc>
 800aeae:	4639      	mov	r1, r7
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 fd58 	bl	800b966 <__any_on>
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	2301      	movs	r3, #1
 800aeba:	117a      	asrs	r2, r7, #5
 800aebc:	f007 071f 	and.w	r7, r7, #31
 800aec0:	fa03 f707 	lsl.w	r7, r3, r7
 800aec4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800aec8:	4621      	mov	r1, r4
 800aeca:	421f      	tst	r7, r3
 800aecc:	f04f 0702 	mov.w	r7, #2
 800aed0:	4628      	mov	r0, r5
 800aed2:	bf18      	it	ne
 800aed4:	f04a 0a02 	orrne.w	sl, sl, #2
 800aed8:	1b36      	subs	r6, r6, r4
 800aeda:	f7ff fe1f 	bl	800ab1c <rshift>
 800aede:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800aee2:	f1ba 0f00 	cmp.w	sl, #0
 800aee6:	d048      	beq.n	800af7a <__gethex+0x3be>
 800aee8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d015      	beq.n	800af1c <__gethex+0x360>
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d017      	beq.n	800af24 <__gethex+0x368>
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d109      	bne.n	800af0c <__gethex+0x350>
 800aef8:	f01a 0f02 	tst.w	sl, #2
 800aefc:	d006      	beq.n	800af0c <__gethex+0x350>
 800aefe:	f8d9 3000 	ldr.w	r3, [r9]
 800af02:	ea4a 0a03 	orr.w	sl, sl, r3
 800af06:	f01a 0f01 	tst.w	sl, #1
 800af0a:	d10e      	bne.n	800af2a <__gethex+0x36e>
 800af0c:	f047 0710 	orr.w	r7, r7, #16
 800af10:	e033      	b.n	800af7a <__gethex+0x3be>
 800af12:	f04f 0a01 	mov.w	sl, #1
 800af16:	e7cf      	b.n	800aeb8 <__gethex+0x2fc>
 800af18:	2701      	movs	r7, #1
 800af1a:	e7e2      	b.n	800aee2 <__gethex+0x326>
 800af1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af1e:	f1c3 0301 	rsb	r3, r3, #1
 800af22:	9315      	str	r3, [sp, #84]	; 0x54
 800af24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f0      	beq.n	800af0c <__gethex+0x350>
 800af2a:	f04f 0c00 	mov.w	ip, #0
 800af2e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800af32:	f105 0314 	add.w	r3, r5, #20
 800af36:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800af3a:	eb03 010a 	add.w	r1, r3, sl
 800af3e:	4618      	mov	r0, r3
 800af40:	f853 2b04 	ldr.w	r2, [r3], #4
 800af44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af48:	d01c      	beq.n	800af84 <__gethex+0x3c8>
 800af4a:	3201      	adds	r2, #1
 800af4c:	6002      	str	r2, [r0, #0]
 800af4e:	2f02      	cmp	r7, #2
 800af50:	f105 0314 	add.w	r3, r5, #20
 800af54:	d138      	bne.n	800afc8 <__gethex+0x40c>
 800af56:	f8d8 2000 	ldr.w	r2, [r8]
 800af5a:	3a01      	subs	r2, #1
 800af5c:	42b2      	cmp	r2, r6
 800af5e:	d10a      	bne.n	800af76 <__gethex+0x3ba>
 800af60:	2201      	movs	r2, #1
 800af62:	1171      	asrs	r1, r6, #5
 800af64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af68:	f006 061f 	and.w	r6, r6, #31
 800af6c:	fa02 f606 	lsl.w	r6, r2, r6
 800af70:	421e      	tst	r6, r3
 800af72:	bf18      	it	ne
 800af74:	4617      	movne	r7, r2
 800af76:	f047 0720 	orr.w	r7, r7, #32
 800af7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af7c:	601d      	str	r5, [r3, #0]
 800af7e:	9b06      	ldr	r3, [sp, #24]
 800af80:	601c      	str	r4, [r3, #0]
 800af82:	e6a3      	b.n	800accc <__gethex+0x110>
 800af84:	4299      	cmp	r1, r3
 800af86:	f843 cc04 	str.w	ip, [r3, #-4]
 800af8a:	d8d8      	bhi.n	800af3e <__gethex+0x382>
 800af8c:	68ab      	ldr	r3, [r5, #8]
 800af8e:	4599      	cmp	r9, r3
 800af90:	db12      	blt.n	800afb8 <__gethex+0x3fc>
 800af92:	6869      	ldr	r1, [r5, #4]
 800af94:	9802      	ldr	r0, [sp, #8]
 800af96:	3101      	adds	r1, #1
 800af98:	f000 f90e 	bl	800b1b8 <_Balloc>
 800af9c:	4683      	mov	fp, r0
 800af9e:	692a      	ldr	r2, [r5, #16]
 800afa0:	f105 010c 	add.w	r1, r5, #12
 800afa4:	3202      	adds	r2, #2
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	300c      	adds	r0, #12
 800afaa:	f7fe fe3a 	bl	8009c22 <memcpy>
 800afae:	4629      	mov	r1, r5
 800afb0:	9802      	ldr	r0, [sp, #8]
 800afb2:	f000 f935 	bl	800b220 <_Bfree>
 800afb6:	465d      	mov	r5, fp
 800afb8:	692b      	ldr	r3, [r5, #16]
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	612a      	str	r2, [r5, #16]
 800afbe:	2201      	movs	r2, #1
 800afc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800afc4:	615a      	str	r2, [r3, #20]
 800afc6:	e7c2      	b.n	800af4e <__gethex+0x392>
 800afc8:	692a      	ldr	r2, [r5, #16]
 800afca:	454a      	cmp	r2, r9
 800afcc:	dd0b      	ble.n	800afe6 <__gethex+0x42a>
 800afce:	2101      	movs	r1, #1
 800afd0:	4628      	mov	r0, r5
 800afd2:	f7ff fda3 	bl	800ab1c <rshift>
 800afd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afda:	3401      	adds	r4, #1
 800afdc:	42a3      	cmp	r3, r4
 800afde:	f6ff aed8 	blt.w	800ad92 <__gethex+0x1d6>
 800afe2:	2701      	movs	r7, #1
 800afe4:	e7c7      	b.n	800af76 <__gethex+0x3ba>
 800afe6:	f016 061f 	ands.w	r6, r6, #31
 800afea:	d0fa      	beq.n	800afe2 <__gethex+0x426>
 800afec:	449a      	add	sl, r3
 800afee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aff2:	f000 f9a5 	bl	800b340 <__hi0bits>
 800aff6:	f1c6 0620 	rsb	r6, r6, #32
 800affa:	42b0      	cmp	r0, r6
 800affc:	dbe7      	blt.n	800afce <__gethex+0x412>
 800affe:	e7f0      	b.n	800afe2 <__gethex+0x426>

0800b000 <L_shift>:
 800b000:	f1c2 0208 	rsb	r2, r2, #8
 800b004:	0092      	lsls	r2, r2, #2
 800b006:	b570      	push	{r4, r5, r6, lr}
 800b008:	f1c2 0620 	rsb	r6, r2, #32
 800b00c:	6843      	ldr	r3, [r0, #4]
 800b00e:	6804      	ldr	r4, [r0, #0]
 800b010:	fa03 f506 	lsl.w	r5, r3, r6
 800b014:	432c      	orrs	r4, r5
 800b016:	40d3      	lsrs	r3, r2
 800b018:	6004      	str	r4, [r0, #0]
 800b01a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b01e:	4288      	cmp	r0, r1
 800b020:	d3f4      	bcc.n	800b00c <L_shift+0xc>
 800b022:	bd70      	pop	{r4, r5, r6, pc}

0800b024 <__match>:
 800b024:	b530      	push	{r4, r5, lr}
 800b026:	6803      	ldr	r3, [r0, #0]
 800b028:	3301      	adds	r3, #1
 800b02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02e:	b914      	cbnz	r4, 800b036 <__match+0x12>
 800b030:	6003      	str	r3, [r0, #0]
 800b032:	2001      	movs	r0, #1
 800b034:	bd30      	pop	{r4, r5, pc}
 800b036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b03e:	2d19      	cmp	r5, #25
 800b040:	bf98      	it	ls
 800b042:	3220      	addls	r2, #32
 800b044:	42a2      	cmp	r2, r4
 800b046:	d0f0      	beq.n	800b02a <__match+0x6>
 800b048:	2000      	movs	r0, #0
 800b04a:	e7f3      	b.n	800b034 <__match+0x10>

0800b04c <__hexnan>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	2500      	movs	r5, #0
 800b052:	680b      	ldr	r3, [r1, #0]
 800b054:	4682      	mov	sl, r0
 800b056:	115f      	asrs	r7, r3, #5
 800b058:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b05c:	f013 031f 	ands.w	r3, r3, #31
 800b060:	bf18      	it	ne
 800b062:	3704      	addne	r7, #4
 800b064:	1f3e      	subs	r6, r7, #4
 800b066:	4690      	mov	r8, r2
 800b068:	46b1      	mov	r9, r6
 800b06a:	4634      	mov	r4, r6
 800b06c:	46ab      	mov	fp, r5
 800b06e:	b087      	sub	sp, #28
 800b070:	6801      	ldr	r1, [r0, #0]
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	f847 5c04 	str.w	r5, [r7, #-4]
 800b078:	9502      	str	r5, [sp, #8]
 800b07a:	784a      	ldrb	r2, [r1, #1]
 800b07c:	1c4b      	adds	r3, r1, #1
 800b07e:	9303      	str	r3, [sp, #12]
 800b080:	b342      	cbz	r2, 800b0d4 <__hexnan+0x88>
 800b082:	4610      	mov	r0, r2
 800b084:	9105      	str	r1, [sp, #20]
 800b086:	9204      	str	r2, [sp, #16]
 800b088:	f7ff fd83 	bl	800ab92 <__hexdig_fun>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d143      	bne.n	800b118 <__hexnan+0xcc>
 800b090:	9a04      	ldr	r2, [sp, #16]
 800b092:	9905      	ldr	r1, [sp, #20]
 800b094:	2a20      	cmp	r2, #32
 800b096:	d818      	bhi.n	800b0ca <__hexnan+0x7e>
 800b098:	9b02      	ldr	r3, [sp, #8]
 800b09a:	459b      	cmp	fp, r3
 800b09c:	dd13      	ble.n	800b0c6 <__hexnan+0x7a>
 800b09e:	454c      	cmp	r4, r9
 800b0a0:	d206      	bcs.n	800b0b0 <__hexnan+0x64>
 800b0a2:	2d07      	cmp	r5, #7
 800b0a4:	dc04      	bgt.n	800b0b0 <__hexnan+0x64>
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4649      	mov	r1, r9
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7ff ffa8 	bl	800b000 <L_shift>
 800b0b0:	4544      	cmp	r4, r8
 800b0b2:	d944      	bls.n	800b13e <__hexnan+0xf2>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f1a4 0904 	sub.w	r9, r4, #4
 800b0ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0be:	461d      	mov	r5, r3
 800b0c0:	464c      	mov	r4, r9
 800b0c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b0c6:	9903      	ldr	r1, [sp, #12]
 800b0c8:	e7d7      	b.n	800b07a <__hexnan+0x2e>
 800b0ca:	2a29      	cmp	r2, #41	; 0x29
 800b0cc:	d14a      	bne.n	800b164 <__hexnan+0x118>
 800b0ce:	3102      	adds	r1, #2
 800b0d0:	f8ca 1000 	str.w	r1, [sl]
 800b0d4:	f1bb 0f00 	cmp.w	fp, #0
 800b0d8:	d044      	beq.n	800b164 <__hexnan+0x118>
 800b0da:	454c      	cmp	r4, r9
 800b0dc:	d206      	bcs.n	800b0ec <__hexnan+0xa0>
 800b0de:	2d07      	cmp	r5, #7
 800b0e0:	dc04      	bgt.n	800b0ec <__hexnan+0xa0>
 800b0e2:	462a      	mov	r2, r5
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff ff8a 	bl	800b000 <L_shift>
 800b0ec:	4544      	cmp	r4, r8
 800b0ee:	d928      	bls.n	800b142 <__hexnan+0xf6>
 800b0f0:	4643      	mov	r3, r8
 800b0f2:	f854 2b04 	ldr.w	r2, [r4], #4
 800b0f6:	42a6      	cmp	r6, r4
 800b0f8:	f843 2b04 	str.w	r2, [r3], #4
 800b0fc:	d2f9      	bcs.n	800b0f2 <__hexnan+0xa6>
 800b0fe:	2200      	movs	r2, #0
 800b100:	f843 2b04 	str.w	r2, [r3], #4
 800b104:	429e      	cmp	r6, r3
 800b106:	d2fb      	bcs.n	800b100 <__hexnan+0xb4>
 800b108:	6833      	ldr	r3, [r6, #0]
 800b10a:	b91b      	cbnz	r3, 800b114 <__hexnan+0xc8>
 800b10c:	4546      	cmp	r6, r8
 800b10e:	d127      	bne.n	800b160 <__hexnan+0x114>
 800b110:	2301      	movs	r3, #1
 800b112:	6033      	str	r3, [r6, #0]
 800b114:	2005      	movs	r0, #5
 800b116:	e026      	b.n	800b166 <__hexnan+0x11a>
 800b118:	3501      	adds	r5, #1
 800b11a:	2d08      	cmp	r5, #8
 800b11c:	f10b 0b01 	add.w	fp, fp, #1
 800b120:	dd06      	ble.n	800b130 <__hexnan+0xe4>
 800b122:	4544      	cmp	r4, r8
 800b124:	d9cf      	bls.n	800b0c6 <__hexnan+0x7a>
 800b126:	2300      	movs	r3, #0
 800b128:	2501      	movs	r5, #1
 800b12a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b12e:	3c04      	subs	r4, #4
 800b130:	6822      	ldr	r2, [r4, #0]
 800b132:	f000 000f 	and.w	r0, r0, #15
 800b136:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	e7c3      	b.n	800b0c6 <__hexnan+0x7a>
 800b13e:	2508      	movs	r5, #8
 800b140:	e7c1      	b.n	800b0c6 <__hexnan+0x7a>
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d0df      	beq.n	800b108 <__hexnan+0xbc>
 800b148:	f04f 32ff 	mov.w	r2, #4294967295
 800b14c:	f1c3 0320 	rsb	r3, r3, #32
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
 800b154:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b158:	401a      	ands	r2, r3
 800b15a:	f847 2c04 	str.w	r2, [r7, #-4]
 800b15e:	e7d3      	b.n	800b108 <__hexnan+0xbc>
 800b160:	3e04      	subs	r6, #4
 800b162:	e7d1      	b.n	800b108 <__hexnan+0xbc>
 800b164:	2004      	movs	r0, #4
 800b166:	b007      	add	sp, #28
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b16c <__locale_ctype_ptr_l>:
 800b16c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b170:	4770      	bx	lr
	...

0800b174 <__locale_ctype_ptr>:
 800b174:	4b04      	ldr	r3, [pc, #16]	; (800b188 <__locale_ctype_ptr+0x14>)
 800b176:	4a05      	ldr	r2, [pc, #20]	; (800b18c <__locale_ctype_ptr+0x18>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bf08      	it	eq
 800b180:	4613      	moveq	r3, r2
 800b182:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b186:	4770      	bx	lr
 800b188:	200001bc 	.word	0x200001bc
 800b18c:	20000220 	.word	0x20000220

0800b190 <__localeconv_l>:
 800b190:	30f0      	adds	r0, #240	; 0xf0
 800b192:	4770      	bx	lr

0800b194 <__ascii_mbtowc>:
 800b194:	b082      	sub	sp, #8
 800b196:	b901      	cbnz	r1, 800b19a <__ascii_mbtowc+0x6>
 800b198:	a901      	add	r1, sp, #4
 800b19a:	b142      	cbz	r2, 800b1ae <__ascii_mbtowc+0x1a>
 800b19c:	b14b      	cbz	r3, 800b1b2 <__ascii_mbtowc+0x1e>
 800b19e:	7813      	ldrb	r3, [r2, #0]
 800b1a0:	600b      	str	r3, [r1, #0]
 800b1a2:	7812      	ldrb	r2, [r2, #0]
 800b1a4:	1c10      	adds	r0, r2, #0
 800b1a6:	bf18      	it	ne
 800b1a8:	2001      	movne	r0, #1
 800b1aa:	b002      	add	sp, #8
 800b1ac:	4770      	bx	lr
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	e7fb      	b.n	800b1aa <__ascii_mbtowc+0x16>
 800b1b2:	f06f 0001 	mvn.w	r0, #1
 800b1b6:	e7f8      	b.n	800b1aa <__ascii_mbtowc+0x16>

0800b1b8 <_Balloc>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460e      	mov	r6, r1
 800b1c0:	b93d      	cbnz	r5, 800b1d2 <_Balloc+0x1a>
 800b1c2:	2010      	movs	r0, #16
 800b1c4:	f001 f8a6 	bl	800c314 <malloc>
 800b1c8:	6260      	str	r0, [r4, #36]	; 0x24
 800b1ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1ce:	6005      	str	r5, [r0, #0]
 800b1d0:	60c5      	str	r5, [r0, #12]
 800b1d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b1d4:	68eb      	ldr	r3, [r5, #12]
 800b1d6:	b183      	cbz	r3, 800b1fa <_Balloc+0x42>
 800b1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b1e0:	b9b8      	cbnz	r0, 800b212 <_Balloc+0x5a>
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	fa01 f506 	lsl.w	r5, r1, r6
 800b1e8:	1d6a      	adds	r2, r5, #5
 800b1ea:	0092      	lsls	r2, r2, #2
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 fbdb 	bl	800b9a8 <_calloc_r>
 800b1f2:	b160      	cbz	r0, 800b20e <_Balloc+0x56>
 800b1f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b1f8:	e00e      	b.n	800b218 <_Balloc+0x60>
 800b1fa:	2221      	movs	r2, #33	; 0x21
 800b1fc:	2104      	movs	r1, #4
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fbd2 	bl	800b9a8 <_calloc_r>
 800b204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b206:	60e8      	str	r0, [r5, #12]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e4      	bne.n	800b1d8 <_Balloc+0x20>
 800b20e:	2000      	movs	r0, #0
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	6802      	ldr	r2, [r0, #0]
 800b214:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b218:	2300      	movs	r3, #0
 800b21a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b21e:	e7f7      	b.n	800b210 <_Balloc+0x58>

0800b220 <_Bfree>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b224:	4606      	mov	r6, r0
 800b226:	460d      	mov	r5, r1
 800b228:	b93c      	cbnz	r4, 800b23a <_Bfree+0x1a>
 800b22a:	2010      	movs	r0, #16
 800b22c:	f001 f872 	bl	800c314 <malloc>
 800b230:	6270      	str	r0, [r6, #36]	; 0x24
 800b232:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b236:	6004      	str	r4, [r0, #0]
 800b238:	60c4      	str	r4, [r0, #12]
 800b23a:	b13d      	cbz	r5, 800b24c <_Bfree+0x2c>
 800b23c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b23e:	686a      	ldr	r2, [r5, #4]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b246:	6029      	str	r1, [r5, #0]
 800b248:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b24c:	bd70      	pop	{r4, r5, r6, pc}

0800b24e <__multadd>:
 800b24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b252:	461f      	mov	r7, r3
 800b254:	4606      	mov	r6, r0
 800b256:	460c      	mov	r4, r1
 800b258:	2300      	movs	r3, #0
 800b25a:	690d      	ldr	r5, [r1, #16]
 800b25c:	f101 0c14 	add.w	ip, r1, #20
 800b260:	f8dc 0000 	ldr.w	r0, [ip]
 800b264:	3301      	adds	r3, #1
 800b266:	b281      	uxth	r1, r0
 800b268:	fb02 7101 	mla	r1, r2, r1, r7
 800b26c:	0c00      	lsrs	r0, r0, #16
 800b26e:	0c0f      	lsrs	r7, r1, #16
 800b270:	fb02 7000 	mla	r0, r2, r0, r7
 800b274:	b289      	uxth	r1, r1
 800b276:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b27a:	429d      	cmp	r5, r3
 800b27c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b280:	f84c 1b04 	str.w	r1, [ip], #4
 800b284:	dcec      	bgt.n	800b260 <__multadd+0x12>
 800b286:	b1d7      	cbz	r7, 800b2be <__multadd+0x70>
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	42ab      	cmp	r3, r5
 800b28c:	dc12      	bgt.n	800b2b4 <__multadd+0x66>
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	4630      	mov	r0, r6
 800b292:	3101      	adds	r1, #1
 800b294:	f7ff ff90 	bl	800b1b8 <_Balloc>
 800b298:	4680      	mov	r8, r0
 800b29a:	6922      	ldr	r2, [r4, #16]
 800b29c:	f104 010c 	add.w	r1, r4, #12
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	0092      	lsls	r2, r2, #2
 800b2a4:	300c      	adds	r0, #12
 800b2a6:	f7fe fcbc 	bl	8009c22 <memcpy>
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff ffb7 	bl	800b220 <_Bfree>
 800b2b2:	4644      	mov	r4, r8
 800b2b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b8:	3501      	adds	r5, #1
 800b2ba:	615f      	str	r7, [r3, #20]
 800b2bc:	6125      	str	r5, [r4, #16]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2c4 <__s2b>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	2209      	movs	r2, #9
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	2201      	movs	r2, #1
 800b2da:	2100      	movs	r1, #0
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	db20      	blt.n	800b322 <__s2b+0x5e>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ff69 	bl	800b1b8 <_Balloc>
 800b2e6:	9b08      	ldr	r3, [sp, #32]
 800b2e8:	2d09      	cmp	r5, #9
 800b2ea:	6143      	str	r3, [r0, #20]
 800b2ec:	f04f 0301 	mov.w	r3, #1
 800b2f0:	6103      	str	r3, [r0, #16]
 800b2f2:	dd19      	ble.n	800b328 <__s2b+0x64>
 800b2f4:	f104 0809 	add.w	r8, r4, #9
 800b2f8:	46c1      	mov	r9, r8
 800b2fa:	442c      	add	r4, r5
 800b2fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b300:	4601      	mov	r1, r0
 800b302:	3b30      	subs	r3, #48	; 0x30
 800b304:	220a      	movs	r2, #10
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ffa1 	bl	800b24e <__multadd>
 800b30c:	45a1      	cmp	r9, r4
 800b30e:	d1f5      	bne.n	800b2fc <__s2b+0x38>
 800b310:	eb08 0405 	add.w	r4, r8, r5
 800b314:	3c08      	subs	r4, #8
 800b316:	1b2d      	subs	r5, r5, r4
 800b318:	1963      	adds	r3, r4, r5
 800b31a:	42bb      	cmp	r3, r7
 800b31c:	db07      	blt.n	800b32e <__s2b+0x6a>
 800b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b322:	0052      	lsls	r2, r2, #1
 800b324:	3101      	adds	r1, #1
 800b326:	e7d9      	b.n	800b2dc <__s2b+0x18>
 800b328:	340a      	adds	r4, #10
 800b32a:	2509      	movs	r5, #9
 800b32c:	e7f3      	b.n	800b316 <__s2b+0x52>
 800b32e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b332:	4601      	mov	r1, r0
 800b334:	3b30      	subs	r3, #48	; 0x30
 800b336:	220a      	movs	r2, #10
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ff88 	bl	800b24e <__multadd>
 800b33e:	e7eb      	b.n	800b318 <__s2b+0x54>

0800b340 <__hi0bits>:
 800b340:	0c02      	lsrs	r2, r0, #16
 800b342:	0412      	lsls	r2, r2, #16
 800b344:	4603      	mov	r3, r0
 800b346:	b9b2      	cbnz	r2, 800b376 <__hi0bits+0x36>
 800b348:	0403      	lsls	r3, r0, #16
 800b34a:	2010      	movs	r0, #16
 800b34c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b350:	bf04      	itt	eq
 800b352:	021b      	lsleq	r3, r3, #8
 800b354:	3008      	addeq	r0, #8
 800b356:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b35a:	bf04      	itt	eq
 800b35c:	011b      	lsleq	r3, r3, #4
 800b35e:	3004      	addeq	r0, #4
 800b360:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b364:	bf04      	itt	eq
 800b366:	009b      	lsleq	r3, r3, #2
 800b368:	3002      	addeq	r0, #2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	db06      	blt.n	800b37c <__hi0bits+0x3c>
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	d503      	bpl.n	800b37a <__hi0bits+0x3a>
 800b372:	3001      	adds	r0, #1
 800b374:	4770      	bx	lr
 800b376:	2000      	movs	r0, #0
 800b378:	e7e8      	b.n	800b34c <__hi0bits+0xc>
 800b37a:	2020      	movs	r0, #32
 800b37c:	4770      	bx	lr

0800b37e <__lo0bits>:
 800b37e:	6803      	ldr	r3, [r0, #0]
 800b380:	4601      	mov	r1, r0
 800b382:	f013 0207 	ands.w	r2, r3, #7
 800b386:	d00b      	beq.n	800b3a0 <__lo0bits+0x22>
 800b388:	07da      	lsls	r2, r3, #31
 800b38a:	d423      	bmi.n	800b3d4 <__lo0bits+0x56>
 800b38c:	0798      	lsls	r0, r3, #30
 800b38e:	bf49      	itett	mi
 800b390:	085b      	lsrmi	r3, r3, #1
 800b392:	089b      	lsrpl	r3, r3, #2
 800b394:	2001      	movmi	r0, #1
 800b396:	600b      	strmi	r3, [r1, #0]
 800b398:	bf5c      	itt	pl
 800b39a:	600b      	strpl	r3, [r1, #0]
 800b39c:	2002      	movpl	r0, #2
 800b39e:	4770      	bx	lr
 800b3a0:	b298      	uxth	r0, r3
 800b3a2:	b9a8      	cbnz	r0, 800b3d0 <__lo0bits+0x52>
 800b3a4:	2010      	movs	r0, #16
 800b3a6:	0c1b      	lsrs	r3, r3, #16
 800b3a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3ac:	bf04      	itt	eq
 800b3ae:	0a1b      	lsreq	r3, r3, #8
 800b3b0:	3008      	addeq	r0, #8
 800b3b2:	071a      	lsls	r2, r3, #28
 800b3b4:	bf04      	itt	eq
 800b3b6:	091b      	lsreq	r3, r3, #4
 800b3b8:	3004      	addeq	r0, #4
 800b3ba:	079a      	lsls	r2, r3, #30
 800b3bc:	bf04      	itt	eq
 800b3be:	089b      	lsreq	r3, r3, #2
 800b3c0:	3002      	addeq	r0, #2
 800b3c2:	07da      	lsls	r2, r3, #31
 800b3c4:	d402      	bmi.n	800b3cc <__lo0bits+0x4e>
 800b3c6:	085b      	lsrs	r3, r3, #1
 800b3c8:	d006      	beq.n	800b3d8 <__lo0bits+0x5a>
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	600b      	str	r3, [r1, #0]
 800b3ce:	4770      	bx	lr
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	e7e9      	b.n	800b3a8 <__lo0bits+0x2a>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	4770      	bx	lr
 800b3d8:	2020      	movs	r0, #32
 800b3da:	4770      	bx	lr

0800b3dc <__i2b>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	460c      	mov	r4, r1
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	f7ff fee9 	bl	800b1b8 <_Balloc>
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	6144      	str	r4, [r0, #20]
 800b3ea:	6102      	str	r2, [r0, #16]
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <__multiply>:
 800b3ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f2:	4614      	mov	r4, r2
 800b3f4:	690a      	ldr	r2, [r1, #16]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	4688      	mov	r8, r1
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	bfbe      	ittt	lt
 800b3fe:	460b      	movlt	r3, r1
 800b400:	46a0      	movlt	r8, r4
 800b402:	461c      	movlt	r4, r3
 800b404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b408:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b40c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b414:	eb07 0609 	add.w	r6, r7, r9
 800b418:	42b3      	cmp	r3, r6
 800b41a:	bfb8      	it	lt
 800b41c:	3101      	addlt	r1, #1
 800b41e:	f7ff fecb 	bl	800b1b8 <_Balloc>
 800b422:	f100 0514 	add.w	r5, r0, #20
 800b426:	462b      	mov	r3, r5
 800b428:	2200      	movs	r2, #0
 800b42a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b42e:	4573      	cmp	r3, lr
 800b430:	d316      	bcc.n	800b460 <__multiply+0x72>
 800b432:	f104 0214 	add.w	r2, r4, #20
 800b436:	f108 0114 	add.w	r1, r8, #20
 800b43a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b43e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	9201      	str	r2, [sp, #4]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d80c      	bhi.n	800b466 <__multiply+0x78>
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	dd03      	ble.n	800b458 <__multiply+0x6a>
 800b450:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b454:	2b00      	cmp	r3, #0
 800b456:	d05d      	beq.n	800b514 <__multiply+0x126>
 800b458:	6106      	str	r6, [r0, #16]
 800b45a:	b003      	add	sp, #12
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	f843 2b04 	str.w	r2, [r3], #4
 800b464:	e7e3      	b.n	800b42e <__multiply+0x40>
 800b466:	f8b2 b000 	ldrh.w	fp, [r2]
 800b46a:	f1bb 0f00 	cmp.w	fp, #0
 800b46e:	d023      	beq.n	800b4b8 <__multiply+0xca>
 800b470:	4689      	mov	r9, r1
 800b472:	46ac      	mov	ip, r5
 800b474:	f04f 0800 	mov.w	r8, #0
 800b478:	f859 4b04 	ldr.w	r4, [r9], #4
 800b47c:	f8dc a000 	ldr.w	sl, [ip]
 800b480:	b2a3      	uxth	r3, r4
 800b482:	fa1f fa8a 	uxth.w	sl, sl
 800b486:	fb0b a303 	mla	r3, fp, r3, sl
 800b48a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b48e:	f8dc 4000 	ldr.w	r4, [ip]
 800b492:	4443      	add	r3, r8
 800b494:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b498:	fb0b 840a 	mla	r4, fp, sl, r8
 800b49c:	46e2      	mov	sl, ip
 800b49e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4a8:	454f      	cmp	r7, r9
 800b4aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b4ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b4b2:	d82b      	bhi.n	800b50c <__multiply+0x11e>
 800b4b4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	3204      	adds	r2, #4
 800b4bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	d020      	beq.n	800b508 <__multiply+0x11a>
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	46a8      	mov	r8, r5
 800b4ca:	f04f 0b00 	mov.w	fp, #0
 800b4ce:	682b      	ldr	r3, [r5, #0]
 800b4d0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b4d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	fb0a 440c 	mla	r4, sl, ip, r4
 800b4de:	46c4      	mov	ip, r8
 800b4e0:	445c      	add	r4, fp
 800b4e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4e6:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b4f2:	0c1b      	lsrs	r3, r3, #16
 800b4f4:	fb0a b303 	mla	r3, sl, r3, fp
 800b4f8:	454f      	cmp	r7, r9
 800b4fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b4fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b502:	d805      	bhi.n	800b510 <__multiply+0x122>
 800b504:	f8c8 3004 	str.w	r3, [r8, #4]
 800b508:	3504      	adds	r5, #4
 800b50a:	e79b      	b.n	800b444 <__multiply+0x56>
 800b50c:	46d4      	mov	ip, sl
 800b50e:	e7b3      	b.n	800b478 <__multiply+0x8a>
 800b510:	46e0      	mov	r8, ip
 800b512:	e7dd      	b.n	800b4d0 <__multiply+0xe2>
 800b514:	3e01      	subs	r6, #1
 800b516:	e799      	b.n	800b44c <__multiply+0x5e>

0800b518 <__pow5mult>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4615      	mov	r5, r2
 800b51e:	f012 0203 	ands.w	r2, r2, #3
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	d007      	beq.n	800b538 <__pow5mult+0x20>
 800b528:	4c21      	ldr	r4, [pc, #132]	; (800b5b0 <__pow5mult+0x98>)
 800b52a:	3a01      	subs	r2, #1
 800b52c:	2300      	movs	r3, #0
 800b52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b532:	f7ff fe8c 	bl	800b24e <__multadd>
 800b536:	4607      	mov	r7, r0
 800b538:	10ad      	asrs	r5, r5, #2
 800b53a:	d035      	beq.n	800b5a8 <__pow5mult+0x90>
 800b53c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b53e:	b93c      	cbnz	r4, 800b550 <__pow5mult+0x38>
 800b540:	2010      	movs	r0, #16
 800b542:	f000 fee7 	bl	800c314 <malloc>
 800b546:	6270      	str	r0, [r6, #36]	; 0x24
 800b548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b54c:	6004      	str	r4, [r0, #0]
 800b54e:	60c4      	str	r4, [r0, #12]
 800b550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b558:	b94c      	cbnz	r4, 800b56e <__pow5mult+0x56>
 800b55a:	f240 2171 	movw	r1, #625	; 0x271
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ff3c 	bl	800b3dc <__i2b>
 800b564:	2300      	movs	r3, #0
 800b566:	4604      	mov	r4, r0
 800b568:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56c:	6003      	str	r3, [r0, #0]
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	07eb      	lsls	r3, r5, #31
 800b574:	d50a      	bpl.n	800b58c <__pow5mult+0x74>
 800b576:	4639      	mov	r1, r7
 800b578:	4622      	mov	r2, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ff37 	bl	800b3ee <__multiply>
 800b580:	4681      	mov	r9, r0
 800b582:	4639      	mov	r1, r7
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff fe4b 	bl	800b220 <_Bfree>
 800b58a:	464f      	mov	r7, r9
 800b58c:	106d      	asrs	r5, r5, #1
 800b58e:	d00b      	beq.n	800b5a8 <__pow5mult+0x90>
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	b938      	cbnz	r0, 800b5a4 <__pow5mult+0x8c>
 800b594:	4622      	mov	r2, r4
 800b596:	4621      	mov	r1, r4
 800b598:	4630      	mov	r0, r6
 800b59a:	f7ff ff28 	bl	800b3ee <__multiply>
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	f8c0 8000 	str.w	r8, [r0]
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	e7e4      	b.n	800b572 <__pow5mult+0x5a>
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ae:	bf00      	nop
 800b5b0:	0800d7b0 	.word	0x0800d7b0

0800b5b4 <__lshift>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	4616      	mov	r6, r2
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5c4:	eb0a 0903 	add.w	r9, sl, r3
 800b5c8:	6849      	ldr	r1, [r1, #4]
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	f109 0501 	add.w	r5, r9, #1
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	db32      	blt.n	800b63a <__lshift+0x86>
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7ff fdef 	bl	800b1b8 <_Balloc>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4680      	mov	r8, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f100 0114 	add.w	r1, r0, #20
 800b5e4:	4553      	cmp	r3, sl
 800b5e6:	db2b      	blt.n	800b640 <__lshift+0x8c>
 800b5e8:	6920      	ldr	r0, [r4, #16]
 800b5ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5ee:	f104 0314 	add.w	r3, r4, #20
 800b5f2:	f016 021f 	ands.w	r2, r6, #31
 800b5f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5fe:	d025      	beq.n	800b64c <__lshift+0x98>
 800b600:	2000      	movs	r0, #0
 800b602:	f1c2 0e20 	rsb	lr, r2, #32
 800b606:	468a      	mov	sl, r1
 800b608:	681e      	ldr	r6, [r3, #0]
 800b60a:	4096      	lsls	r6, r2
 800b60c:	4330      	orrs	r0, r6
 800b60e:	f84a 0b04 	str.w	r0, [sl], #4
 800b612:	f853 0b04 	ldr.w	r0, [r3], #4
 800b616:	459c      	cmp	ip, r3
 800b618:	fa20 f00e 	lsr.w	r0, r0, lr
 800b61c:	d814      	bhi.n	800b648 <__lshift+0x94>
 800b61e:	6048      	str	r0, [r1, #4]
 800b620:	b108      	cbz	r0, 800b626 <__lshift+0x72>
 800b622:	f109 0502 	add.w	r5, r9, #2
 800b626:	3d01      	subs	r5, #1
 800b628:	4638      	mov	r0, r7
 800b62a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b62e:	4621      	mov	r1, r4
 800b630:	f7ff fdf6 	bl	800b220 <_Bfree>
 800b634:	4640      	mov	r0, r8
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	3101      	adds	r1, #1
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	e7c7      	b.n	800b5d0 <__lshift+0x1c>
 800b640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b644:	3301      	adds	r3, #1
 800b646:	e7cd      	b.n	800b5e4 <__lshift+0x30>
 800b648:	4651      	mov	r1, sl
 800b64a:	e7dc      	b.n	800b606 <__lshift+0x52>
 800b64c:	3904      	subs	r1, #4
 800b64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b652:	459c      	cmp	ip, r3
 800b654:	f841 2f04 	str.w	r2, [r1, #4]!
 800b658:	d8f9      	bhi.n	800b64e <__lshift+0x9a>
 800b65a:	e7e4      	b.n	800b626 <__lshift+0x72>

0800b65c <__mcmp>:
 800b65c:	6903      	ldr	r3, [r0, #16]
 800b65e:	690a      	ldr	r2, [r1, #16]
 800b660:	b530      	push	{r4, r5, lr}
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	d10c      	bne.n	800b680 <__mcmp+0x24>
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	3014      	adds	r0, #20
 800b66a:	3114      	adds	r1, #20
 800b66c:	1884      	adds	r4, r0, r2
 800b66e:	4411      	add	r1, r2
 800b670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b678:	4295      	cmp	r5, r2
 800b67a:	d003      	beq.n	800b684 <__mcmp+0x28>
 800b67c:	d305      	bcc.n	800b68a <__mcmp+0x2e>
 800b67e:	2301      	movs	r3, #1
 800b680:	4618      	mov	r0, r3
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	42a0      	cmp	r0, r4
 800b686:	d3f3      	bcc.n	800b670 <__mcmp+0x14>
 800b688:	e7fa      	b.n	800b680 <__mcmp+0x24>
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	e7f7      	b.n	800b680 <__mcmp+0x24>

0800b690 <__mdiff>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	460d      	mov	r5, r1
 800b696:	4607      	mov	r7, r0
 800b698:	4611      	mov	r1, r2
 800b69a:	4628      	mov	r0, r5
 800b69c:	4614      	mov	r4, r2
 800b69e:	f7ff ffdd 	bl	800b65c <__mcmp>
 800b6a2:	1e06      	subs	r6, r0, #0
 800b6a4:	d108      	bne.n	800b6b8 <__mdiff+0x28>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	f7ff fd85 	bl	800b1b8 <_Balloc>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b8:	bfa4      	itt	ge
 800b6ba:	4623      	movge	r3, r4
 800b6bc:	462c      	movge	r4, r5
 800b6be:	4638      	mov	r0, r7
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	bfa6      	itte	ge
 800b6c4:	461d      	movge	r5, r3
 800b6c6:	2600      	movge	r6, #0
 800b6c8:	2601      	movlt	r6, #1
 800b6ca:	f7ff fd75 	bl	800b1b8 <_Balloc>
 800b6ce:	f04f 0e00 	mov.w	lr, #0
 800b6d2:	60c6      	str	r6, [r0, #12]
 800b6d4:	692b      	ldr	r3, [r5, #16]
 800b6d6:	6926      	ldr	r6, [r4, #16]
 800b6d8:	f104 0214 	add.w	r2, r4, #20
 800b6dc:	f105 0914 	add.w	r9, r5, #20
 800b6e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b6e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b6e8:	f100 0114 	add.w	r1, r0, #20
 800b6ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800b6f0:	f859 5b04 	ldr.w	r5, [r9], #4
 800b6f4:	fa1f f38a 	uxth.w	r3, sl
 800b6f8:	4473      	add	r3, lr
 800b6fa:	b2ac      	uxth	r4, r5
 800b6fc:	1b1b      	subs	r3, r3, r4
 800b6fe:	0c2c      	lsrs	r4, r5, #16
 800b700:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b704:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b708:	b29b      	uxth	r3, r3
 800b70a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b70e:	45c8      	cmp	r8, r9
 800b710:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b714:	4694      	mov	ip, r2
 800b716:	f841 4b04 	str.w	r4, [r1], #4
 800b71a:	d8e7      	bhi.n	800b6ec <__mdiff+0x5c>
 800b71c:	45bc      	cmp	ip, r7
 800b71e:	d304      	bcc.n	800b72a <__mdiff+0x9a>
 800b720:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b724:	b183      	cbz	r3, 800b748 <__mdiff+0xb8>
 800b726:	6106      	str	r6, [r0, #16]
 800b728:	e7c4      	b.n	800b6b4 <__mdiff+0x24>
 800b72a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b72e:	b2a2      	uxth	r2, r4
 800b730:	4472      	add	r2, lr
 800b732:	1413      	asrs	r3, r2, #16
 800b734:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b738:	b292      	uxth	r2, r2
 800b73a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b73e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b742:	f841 2b04 	str.w	r2, [r1], #4
 800b746:	e7e9      	b.n	800b71c <__mdiff+0x8c>
 800b748:	3e01      	subs	r6, #1
 800b74a:	e7e9      	b.n	800b720 <__mdiff+0x90>

0800b74c <__ulp>:
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <__ulp+0x44>)
 800b74e:	400b      	ands	r3, r1
 800b750:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd02      	ble.n	800b75e <__ulp+0x12>
 800b758:	2000      	movs	r0, #0
 800b75a:	4619      	mov	r1, r3
 800b75c:	4770      	bx	lr
 800b75e:	425b      	negs	r3, r3
 800b760:	151b      	asrs	r3, r3, #20
 800b762:	2b13      	cmp	r3, #19
 800b764:	f04f 0000 	mov.w	r0, #0
 800b768:	f04f 0100 	mov.w	r1, #0
 800b76c:	dc04      	bgt.n	800b778 <__ulp+0x2c>
 800b76e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b772:	fa42 f103 	asr.w	r1, r2, r3
 800b776:	4770      	bx	lr
 800b778:	2201      	movs	r2, #1
 800b77a:	3b14      	subs	r3, #20
 800b77c:	2b1e      	cmp	r3, #30
 800b77e:	bfce      	itee	gt
 800b780:	4613      	movgt	r3, r2
 800b782:	f1c3 031f 	rsble	r3, r3, #31
 800b786:	fa02 f303 	lslle.w	r3, r2, r3
 800b78a:	4618      	mov	r0, r3
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	7ff00000 	.word	0x7ff00000

0800b794 <__b2d>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	6907      	ldr	r7, [r0, #16]
 800b79a:	f100 0914 	add.w	r9, r0, #20
 800b79e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b7a2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b7a6:	f1a7 0804 	sub.w	r8, r7, #4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff fdc8 	bl	800b340 <__hi0bits>
 800b7b0:	f1c0 0320 	rsb	r3, r0, #32
 800b7b4:	280a      	cmp	r0, #10
 800b7b6:	600b      	str	r3, [r1, #0]
 800b7b8:	491e      	ldr	r1, [pc, #120]	; (800b834 <__b2d+0xa0>)
 800b7ba:	dc17      	bgt.n	800b7ec <__b2d+0x58>
 800b7bc:	45c1      	cmp	r9, r8
 800b7be:	bf28      	it	cs
 800b7c0:	2200      	movcs	r2, #0
 800b7c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7c6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b7ca:	bf38      	it	cc
 800b7cc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b7d0:	ea43 0501 	orr.w	r5, r3, r1
 800b7d4:	f100 0315 	add.w	r3, r0, #21
 800b7d8:	fa06 f303 	lsl.w	r3, r6, r3
 800b7dc:	fa22 f20c 	lsr.w	r2, r2, ip
 800b7e0:	ea43 0402 	orr.w	r4, r3, r2
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ec:	45c1      	cmp	r9, r8
 800b7ee:	bf3a      	itte	cc
 800b7f0:	f1a7 0808 	subcc.w	r8, r7, #8
 800b7f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b7f8:	2200      	movcs	r2, #0
 800b7fa:	f1b0 030b 	subs.w	r3, r0, #11
 800b7fe:	d015      	beq.n	800b82c <__b2d+0x98>
 800b800:	409e      	lsls	r6, r3
 800b802:	f1c3 0720 	rsb	r7, r3, #32
 800b806:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b80a:	fa22 f107 	lsr.w	r1, r2, r7
 800b80e:	45c8      	cmp	r8, r9
 800b810:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b814:	ea46 0501 	orr.w	r5, r6, r1
 800b818:	bf94      	ite	ls
 800b81a:	2100      	movls	r1, #0
 800b81c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b820:	fa02 f003 	lsl.w	r0, r2, r3
 800b824:	40f9      	lsrs	r1, r7
 800b826:	ea40 0401 	orr.w	r4, r0, r1
 800b82a:	e7db      	b.n	800b7e4 <__b2d+0x50>
 800b82c:	ea46 0501 	orr.w	r5, r6, r1
 800b830:	4614      	mov	r4, r2
 800b832:	e7d7      	b.n	800b7e4 <__b2d+0x50>
 800b834:	3ff00000 	.word	0x3ff00000

0800b838 <__d2b>:
 800b838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b83c:	461c      	mov	r4, r3
 800b83e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b842:	2101      	movs	r1, #1
 800b844:	4690      	mov	r8, r2
 800b846:	f7ff fcb7 	bl	800b1b8 <_Balloc>
 800b84a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b84e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b852:	4607      	mov	r7, r0
 800b854:	bb34      	cbnz	r4, 800b8a4 <__d2b+0x6c>
 800b856:	9201      	str	r2, [sp, #4]
 800b858:	f1b8 0200 	subs.w	r2, r8, #0
 800b85c:	d027      	beq.n	800b8ae <__d2b+0x76>
 800b85e:	a802      	add	r0, sp, #8
 800b860:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b864:	f7ff fd8b 	bl	800b37e <__lo0bits>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	b1f0      	cbz	r0, 800b8aa <__d2b+0x72>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	f1c0 0320 	rsb	r3, r0, #32
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	430b      	orrs	r3, r1
 800b878:	40c2      	lsrs	r2, r0
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	bf14      	ite	ne
 800b884:	2102      	movne	r1, #2
 800b886:	2101      	moveq	r1, #1
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	6139      	str	r1, [r7, #16]
 800b88c:	b1c4      	cbz	r4, 800b8c0 <__d2b+0x88>
 800b88e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b892:	4404      	add	r4, r0
 800b894:	6034      	str	r4, [r6, #0]
 800b896:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b89a:	6028      	str	r0, [r5, #0]
 800b89c:	4638      	mov	r0, r7
 800b89e:	b002      	add	sp, #8
 800b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b8a8:	e7d5      	b.n	800b856 <__d2b+0x1e>
 800b8aa:	6179      	str	r1, [r7, #20]
 800b8ac:	e7e7      	b.n	800b87e <__d2b+0x46>
 800b8ae:	a801      	add	r0, sp, #4
 800b8b0:	f7ff fd65 	bl	800b37e <__lo0bits>
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	6139      	str	r1, [r7, #16]
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	3020      	adds	r0, #32
 800b8be:	e7e5      	b.n	800b88c <__d2b+0x54>
 800b8c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b8c8:	6030      	str	r0, [r6, #0]
 800b8ca:	6918      	ldr	r0, [r3, #16]
 800b8cc:	f7ff fd38 	bl	800b340 <__hi0bits>
 800b8d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b8d4:	e7e1      	b.n	800b89a <__d2b+0x62>

0800b8d6 <__ratio>:
 800b8d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	4688      	mov	r8, r1
 800b8dc:	4669      	mov	r1, sp
 800b8de:	4681      	mov	r9, r0
 800b8e0:	f7ff ff58 	bl	800b794 <__b2d>
 800b8e4:	468b      	mov	fp, r1
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	a901      	add	r1, sp, #4
 800b8ee:	f7ff ff51 	bl	800b794 <__b2d>
 800b8f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8fa:	460d      	mov	r5, r1
 800b8fc:	eba3 0c02 	sub.w	ip, r3, r2
 800b900:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfd5      	itete	le
 800b90e:	460a      	movle	r2, r1
 800b910:	463a      	movgt	r2, r7
 800b912:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b916:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b91a:	bfd8      	it	le
 800b91c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b920:	462b      	mov	r3, r5
 800b922:	4602      	mov	r2, r0
 800b924:	4659      	mov	r1, fp
 800b926:	4630      	mov	r0, r6
 800b928:	f7f4 ff00 	bl	800072c <__aeabi_ddiv>
 800b92c:	b003      	add	sp, #12
 800b92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b932 <__copybits>:
 800b932:	3901      	subs	r1, #1
 800b934:	b510      	push	{r4, lr}
 800b936:	1149      	asrs	r1, r1, #5
 800b938:	6914      	ldr	r4, [r2, #16]
 800b93a:	3101      	adds	r1, #1
 800b93c:	f102 0314 	add.w	r3, r2, #20
 800b940:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b944:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b948:	42a3      	cmp	r3, r4
 800b94a:	4602      	mov	r2, r0
 800b94c:	d303      	bcc.n	800b956 <__copybits+0x24>
 800b94e:	2300      	movs	r3, #0
 800b950:	428a      	cmp	r2, r1
 800b952:	d305      	bcc.n	800b960 <__copybits+0x2e>
 800b954:	bd10      	pop	{r4, pc}
 800b956:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95a:	f840 2b04 	str.w	r2, [r0], #4
 800b95e:	e7f3      	b.n	800b948 <__copybits+0x16>
 800b960:	f842 3b04 	str.w	r3, [r2], #4
 800b964:	e7f4      	b.n	800b950 <__copybits+0x1e>

0800b966 <__any_on>:
 800b966:	f100 0214 	add.w	r2, r0, #20
 800b96a:	6900      	ldr	r0, [r0, #16]
 800b96c:	114b      	asrs	r3, r1, #5
 800b96e:	4298      	cmp	r0, r3
 800b970:	b510      	push	{r4, lr}
 800b972:	db11      	blt.n	800b998 <__any_on+0x32>
 800b974:	dd0a      	ble.n	800b98c <__any_on+0x26>
 800b976:	f011 011f 	ands.w	r1, r1, #31
 800b97a:	d007      	beq.n	800b98c <__any_on+0x26>
 800b97c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b980:	fa24 f001 	lsr.w	r0, r4, r1
 800b984:	fa00 f101 	lsl.w	r1, r0, r1
 800b988:	428c      	cmp	r4, r1
 800b98a:	d10b      	bne.n	800b9a4 <__any_on+0x3e>
 800b98c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b990:	4293      	cmp	r3, r2
 800b992:	d803      	bhi.n	800b99c <__any_on+0x36>
 800b994:	2000      	movs	r0, #0
 800b996:	bd10      	pop	{r4, pc}
 800b998:	4603      	mov	r3, r0
 800b99a:	e7f7      	b.n	800b98c <__any_on+0x26>
 800b99c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	d0f5      	beq.n	800b990 <__any_on+0x2a>
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	e7f6      	b.n	800b996 <__any_on+0x30>

0800b9a8 <_calloc_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	fb02 f401 	mul.w	r4, r2, r1
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	f000 f808 	bl	800b9c4 <_malloc_r>
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	b118      	cbz	r0, 800b9c0 <_calloc_r+0x18>
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	f7fe f93c 	bl	8009c38 <memset>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}

0800b9c4 <_malloc_r>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	1ccd      	adds	r5, r1, #3
 800b9c8:	f025 0503 	bic.w	r5, r5, #3
 800b9cc:	3508      	adds	r5, #8
 800b9ce:	2d0c      	cmp	r5, #12
 800b9d0:	bf38      	it	cc
 800b9d2:	250c      	movcc	r5, #12
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	db01      	blt.n	800b9de <_malloc_r+0x1a>
 800b9da:	42a9      	cmp	r1, r5
 800b9dc:	d903      	bls.n	800b9e6 <_malloc_r+0x22>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	6033      	str	r3, [r6, #0]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
 800b9e6:	f000 fcab 	bl	800c340 <__malloc_lock>
 800b9ea:	4a21      	ldr	r2, [pc, #132]	; (800ba70 <_malloc_r+0xac>)
 800b9ec:	6814      	ldr	r4, [r2, #0]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	b991      	cbnz	r1, 800ba18 <_malloc_r+0x54>
 800b9f2:	4c20      	ldr	r4, [pc, #128]	; (800ba74 <_malloc_r+0xb0>)
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	b91b      	cbnz	r3, 800ba00 <_malloc_r+0x3c>
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f000 fb65 	bl	800c0c8 <_sbrk_r>
 800b9fe:	6020      	str	r0, [r4, #0]
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f000 fb60 	bl	800c0c8 <_sbrk_r>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d124      	bne.n	800ba56 <_malloc_r+0x92>
 800ba0c:	230c      	movs	r3, #12
 800ba0e:	4630      	mov	r0, r6
 800ba10:	6033      	str	r3, [r6, #0]
 800ba12:	f000 fc96 	bl	800c342 <__malloc_unlock>
 800ba16:	e7e4      	b.n	800b9e2 <_malloc_r+0x1e>
 800ba18:	680b      	ldr	r3, [r1, #0]
 800ba1a:	1b5b      	subs	r3, r3, r5
 800ba1c:	d418      	bmi.n	800ba50 <_malloc_r+0x8c>
 800ba1e:	2b0b      	cmp	r3, #11
 800ba20:	d90f      	bls.n	800ba42 <_malloc_r+0x7e>
 800ba22:	600b      	str	r3, [r1, #0]
 800ba24:	18cc      	adds	r4, r1, r3
 800ba26:	50cd      	str	r5, [r1, r3]
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 fc8a 	bl	800c342 <__malloc_unlock>
 800ba2e:	f104 000b 	add.w	r0, r4, #11
 800ba32:	1d23      	adds	r3, r4, #4
 800ba34:	f020 0007 	bic.w	r0, r0, #7
 800ba38:	1ac3      	subs	r3, r0, r3
 800ba3a:	d0d3      	beq.n	800b9e4 <_malloc_r+0x20>
 800ba3c:	425a      	negs	r2, r3
 800ba3e:	50e2      	str	r2, [r4, r3]
 800ba40:	e7d0      	b.n	800b9e4 <_malloc_r+0x20>
 800ba42:	684b      	ldr	r3, [r1, #4]
 800ba44:	428c      	cmp	r4, r1
 800ba46:	bf16      	itet	ne
 800ba48:	6063      	strne	r3, [r4, #4]
 800ba4a:	6013      	streq	r3, [r2, #0]
 800ba4c:	460c      	movne	r4, r1
 800ba4e:	e7eb      	b.n	800ba28 <_malloc_r+0x64>
 800ba50:	460c      	mov	r4, r1
 800ba52:	6849      	ldr	r1, [r1, #4]
 800ba54:	e7cc      	b.n	800b9f0 <_malloc_r+0x2c>
 800ba56:	1cc4      	adds	r4, r0, #3
 800ba58:	f024 0403 	bic.w	r4, r4, #3
 800ba5c:	42a0      	cmp	r0, r4
 800ba5e:	d005      	beq.n	800ba6c <_malloc_r+0xa8>
 800ba60:	1a21      	subs	r1, r4, r0
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 fb30 	bl	800c0c8 <_sbrk_r>
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d0cf      	beq.n	800ba0c <_malloc_r+0x48>
 800ba6c:	6025      	str	r5, [r4, #0]
 800ba6e:	e7db      	b.n	800ba28 <_malloc_r+0x64>
 800ba70:	200019cc 	.word	0x200019cc
 800ba74:	200019d0 	.word	0x200019d0

0800ba78 <_realloc_r>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	4607      	mov	r7, r0
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	460e      	mov	r6, r1
 800ba80:	b921      	cbnz	r1, 800ba8c <_realloc_r+0x14>
 800ba82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba86:	4611      	mov	r1, r2
 800ba88:	f7ff bf9c 	b.w	800b9c4 <_malloc_r>
 800ba8c:	b922      	cbnz	r2, 800ba98 <_realloc_r+0x20>
 800ba8e:	f000 fc59 	bl	800c344 <_free_r>
 800ba92:	4625      	mov	r5, r4
 800ba94:	4628      	mov	r0, r5
 800ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba98:	f000 fca0 	bl	800c3dc <_malloc_usable_size_r>
 800ba9c:	42a0      	cmp	r0, r4
 800ba9e:	d20f      	bcs.n	800bac0 <_realloc_r+0x48>
 800baa0:	4621      	mov	r1, r4
 800baa2:	4638      	mov	r0, r7
 800baa4:	f7ff ff8e 	bl	800b9c4 <_malloc_r>
 800baa8:	4605      	mov	r5, r0
 800baaa:	2800      	cmp	r0, #0
 800baac:	d0f2      	beq.n	800ba94 <_realloc_r+0x1c>
 800baae:	4631      	mov	r1, r6
 800bab0:	4622      	mov	r2, r4
 800bab2:	f7fe f8b6 	bl	8009c22 <memcpy>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4638      	mov	r0, r7
 800baba:	f000 fc43 	bl	800c344 <_free_r>
 800babe:	e7e9      	b.n	800ba94 <_realloc_r+0x1c>
 800bac0:	4635      	mov	r5, r6
 800bac2:	e7e7      	b.n	800ba94 <_realloc_r+0x1c>

0800bac4 <_sungetc_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	1c4b      	adds	r3, r1, #1
 800bac8:	4614      	mov	r4, r2
 800baca:	d103      	bne.n	800bad4 <_sungetc_r+0x10>
 800bacc:	f04f 35ff 	mov.w	r5, #4294967295
 800bad0:	4628      	mov	r0, r5
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	8993      	ldrh	r3, [r2, #12]
 800bad6:	b2cd      	uxtb	r5, r1
 800bad8:	f023 0320 	bic.w	r3, r3, #32
 800badc:	8193      	strh	r3, [r2, #12]
 800bade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bae0:	6852      	ldr	r2, [r2, #4]
 800bae2:	b18b      	cbz	r3, 800bb08 <_sungetc_r+0x44>
 800bae4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bae6:	4293      	cmp	r3, r2
 800bae8:	dd08      	ble.n	800bafc <_sungetc_r+0x38>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	1e5a      	subs	r2, r3, #1
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800baf4:	6863      	ldr	r3, [r4, #4]
 800baf6:	3301      	adds	r3, #1
 800baf8:	6063      	str	r3, [r4, #4]
 800bafa:	e7e9      	b.n	800bad0 <_sungetc_r+0xc>
 800bafc:	4621      	mov	r1, r4
 800bafe:	f000 fbc3 	bl	800c288 <__submore>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d0f1      	beq.n	800baea <_sungetc_r+0x26>
 800bb06:	e7e1      	b.n	800bacc <_sungetc_r+0x8>
 800bb08:	6921      	ldr	r1, [r4, #16]
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	b151      	cbz	r1, 800bb24 <_sungetc_r+0x60>
 800bb0e:	4299      	cmp	r1, r3
 800bb10:	d208      	bcs.n	800bb24 <_sungetc_r+0x60>
 800bb12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb16:	42a9      	cmp	r1, r5
 800bb18:	d104      	bne.n	800bb24 <_sungetc_r+0x60>
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	3201      	adds	r2, #1
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	6062      	str	r2, [r4, #4]
 800bb22:	e7d5      	b.n	800bad0 <_sungetc_r+0xc>
 800bb24:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bb28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb2e:	2303      	movs	r3, #3
 800bb30:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb32:	4623      	mov	r3, r4
 800bb34:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e7dc      	b.n	800baf8 <_sungetc_r+0x34>

0800bb3e <__ssrefill_r>:
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	460c      	mov	r4, r1
 800bb42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb44:	b169      	cbz	r1, 800bb62 <__ssrefill_r+0x24>
 800bb46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb4a:	4299      	cmp	r1, r3
 800bb4c:	d001      	beq.n	800bb52 <__ssrefill_r+0x14>
 800bb4e:	f000 fbf9 	bl	800c344 <_free_r>
 800bb52:	2000      	movs	r0, #0
 800bb54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb56:	6360      	str	r0, [r4, #52]	; 0x34
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	b113      	cbz	r3, 800bb62 <__ssrefill_r+0x24>
 800bb5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	6063      	str	r3, [r4, #4]
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	f043 0320 	orr.w	r3, r3, #32
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	e7f3      	b.n	800bb60 <__ssrefill_r+0x22>

0800bb78 <__ssvfiscanf_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	2100      	movs	r1, #0
 800bb80:	4606      	mov	r6, r0
 800bb82:	4692      	mov	sl, r2
 800bb84:	270a      	movs	r7, #10
 800bb86:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bb8a:	9144      	str	r1, [sp, #272]	; 0x110
 800bb8c:	9145      	str	r1, [sp, #276]	; 0x114
 800bb8e:	499e      	ldr	r1, [pc, #632]	; (800be08 <__ssvfiscanf_r+0x290>)
 800bb90:	f10d 0804 	add.w	r8, sp, #4
 800bb94:	91a0      	str	r1, [sp, #640]	; 0x280
 800bb96:	499d      	ldr	r1, [pc, #628]	; (800be0c <__ssvfiscanf_r+0x294>)
 800bb98:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800be10 <__ssvfiscanf_r+0x298>
 800bb9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bba0:	91a1      	str	r1, [sp, #644]	; 0x284
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	f89a 3000 	ldrb.w	r3, [sl]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 812a 	beq.w	800be02 <__ssvfiscanf_r+0x28a>
 800bbae:	4655      	mov	r5, sl
 800bbb0:	f7ff fae0 	bl	800b174 <__locale_ctype_ptr>
 800bbb4:	f815 bb01 	ldrb.w	fp, [r5], #1
 800bbb8:	4458      	add	r0, fp
 800bbba:	7843      	ldrb	r3, [r0, #1]
 800bbbc:	f013 0308 	ands.w	r3, r3, #8
 800bbc0:	d01c      	beq.n	800bbfc <__ssvfiscanf_r+0x84>
 800bbc2:	6863      	ldr	r3, [r4, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dd12      	ble.n	800bbee <__ssvfiscanf_r+0x76>
 800bbc8:	f7ff fad4 	bl	800b174 <__locale_ctype_ptr>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	781a      	ldrb	r2, [r3, #0]
 800bbd0:	4410      	add	r0, r2
 800bbd2:	7842      	ldrb	r2, [r0, #1]
 800bbd4:	0712      	lsls	r2, r2, #28
 800bbd6:	d401      	bmi.n	800bbdc <__ssvfiscanf_r+0x64>
 800bbd8:	46aa      	mov	sl, r5
 800bbda:	e7e3      	b.n	800bba4 <__ssvfiscanf_r+0x2c>
 800bbdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bbde:	3301      	adds	r3, #1
 800bbe0:	3201      	adds	r2, #1
 800bbe2:	9245      	str	r2, [sp, #276]	; 0x114
 800bbe4:	6862      	ldr	r2, [r4, #4]
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	3a01      	subs	r2, #1
 800bbea:	6062      	str	r2, [r4, #4]
 800bbec:	e7e9      	b.n	800bbc2 <__ssvfiscanf_r+0x4a>
 800bbee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4798      	blx	r3
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d0e6      	beq.n	800bbc8 <__ssvfiscanf_r+0x50>
 800bbfa:	e7ed      	b.n	800bbd8 <__ssvfiscanf_r+0x60>
 800bbfc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800bc00:	f040 8082 	bne.w	800bd08 <__ssvfiscanf_r+0x190>
 800bc04:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc06:	9341      	str	r3, [sp, #260]	; 0x104
 800bc08:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800bc0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc0e:	d103      	bne.n	800bc18 <__ssvfiscanf_r+0xa0>
 800bc10:	2310      	movs	r3, #16
 800bc12:	f10a 0502 	add.w	r5, sl, #2
 800bc16:	9341      	str	r3, [sp, #260]	; 0x104
 800bc18:	46aa      	mov	sl, r5
 800bc1a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800bc1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc22:	2a09      	cmp	r2, #9
 800bc24:	d922      	bls.n	800bc6c <__ssvfiscanf_r+0xf4>
 800bc26:	2203      	movs	r2, #3
 800bc28:	4879      	ldr	r0, [pc, #484]	; (800be10 <__ssvfiscanf_r+0x298>)
 800bc2a:	f000 fb7b 	bl	800c324 <memchr>
 800bc2e:	b138      	cbz	r0, 800bc40 <__ssvfiscanf_r+0xc8>
 800bc30:	eba0 0309 	sub.w	r3, r0, r9
 800bc34:	2001      	movs	r0, #1
 800bc36:	46aa      	mov	sl, r5
 800bc38:	4098      	lsls	r0, r3
 800bc3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc3c:	4318      	orrs	r0, r3
 800bc3e:	9041      	str	r0, [sp, #260]	; 0x104
 800bc40:	f89a 3000 	ldrb.w	r3, [sl]
 800bc44:	f10a 0501 	add.w	r5, sl, #1
 800bc48:	2b67      	cmp	r3, #103	; 0x67
 800bc4a:	d82b      	bhi.n	800bca4 <__ssvfiscanf_r+0x12c>
 800bc4c:	2b65      	cmp	r3, #101	; 0x65
 800bc4e:	f080 809f 	bcs.w	800bd90 <__ssvfiscanf_r+0x218>
 800bc52:	2b47      	cmp	r3, #71	; 0x47
 800bc54:	d810      	bhi.n	800bc78 <__ssvfiscanf_r+0x100>
 800bc56:	2b45      	cmp	r3, #69	; 0x45
 800bc58:	f080 809a 	bcs.w	800bd90 <__ssvfiscanf_r+0x218>
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d06c      	beq.n	800bd3a <__ssvfiscanf_r+0x1c2>
 800bc60:	2b25      	cmp	r3, #37	; 0x25
 800bc62:	d051      	beq.n	800bd08 <__ssvfiscanf_r+0x190>
 800bc64:	2303      	movs	r3, #3
 800bc66:	9742      	str	r7, [sp, #264]	; 0x108
 800bc68:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc6a:	e027      	b.n	800bcbc <__ssvfiscanf_r+0x144>
 800bc6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc6e:	fb07 1303 	mla	r3, r7, r3, r1
 800bc72:	3b30      	subs	r3, #48	; 0x30
 800bc74:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc76:	e7cf      	b.n	800bc18 <__ssvfiscanf_r+0xa0>
 800bc78:	2b5b      	cmp	r3, #91	; 0x5b
 800bc7a:	d06a      	beq.n	800bd52 <__ssvfiscanf_r+0x1da>
 800bc7c:	d80c      	bhi.n	800bc98 <__ssvfiscanf_r+0x120>
 800bc7e:	2b58      	cmp	r3, #88	; 0x58
 800bc80:	d1f0      	bne.n	800bc64 <__ssvfiscanf_r+0xec>
 800bc82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc88:	9241      	str	r2, [sp, #260]	; 0x104
 800bc8a:	2210      	movs	r2, #16
 800bc8c:	9242      	str	r2, [sp, #264]	; 0x108
 800bc8e:	2b6e      	cmp	r3, #110	; 0x6e
 800bc90:	bf8c      	ite	hi
 800bc92:	2304      	movhi	r3, #4
 800bc94:	2303      	movls	r3, #3
 800bc96:	e010      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bc98:	2b63      	cmp	r3, #99	; 0x63
 800bc9a:	d065      	beq.n	800bd68 <__ssvfiscanf_r+0x1f0>
 800bc9c:	2b64      	cmp	r3, #100	; 0x64
 800bc9e:	d1e1      	bne.n	800bc64 <__ssvfiscanf_r+0xec>
 800bca0:	9742      	str	r7, [sp, #264]	; 0x108
 800bca2:	e7f4      	b.n	800bc8e <__ssvfiscanf_r+0x116>
 800bca4:	2b70      	cmp	r3, #112	; 0x70
 800bca6:	d04b      	beq.n	800bd40 <__ssvfiscanf_r+0x1c8>
 800bca8:	d826      	bhi.n	800bcf8 <__ssvfiscanf_r+0x180>
 800bcaa:	2b6e      	cmp	r3, #110	; 0x6e
 800bcac:	d062      	beq.n	800bd74 <__ssvfiscanf_r+0x1fc>
 800bcae:	d84c      	bhi.n	800bd4a <__ssvfiscanf_r+0x1d2>
 800bcb0:	2b69      	cmp	r3, #105	; 0x69
 800bcb2:	d1d7      	bne.n	800bc64 <__ssvfiscanf_r+0xec>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9342      	str	r3, [sp, #264]	; 0x108
 800bcb8:	2303      	movs	r3, #3
 800bcba:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcbc:	6863      	ldr	r3, [r4, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	dd68      	ble.n	800bd94 <__ssvfiscanf_r+0x21c>
 800bcc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcc4:	0659      	lsls	r1, r3, #25
 800bcc6:	d407      	bmi.n	800bcd8 <__ssvfiscanf_r+0x160>
 800bcc8:	f7ff fa54 	bl	800b174 <__locale_ctype_ptr>
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	4410      	add	r0, r2
 800bcd2:	7842      	ldrb	r2, [r0, #1]
 800bcd4:	0712      	lsls	r2, r2, #28
 800bcd6:	d464      	bmi.n	800bda2 <__ssvfiscanf_r+0x22a>
 800bcd8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	dc73      	bgt.n	800bdc6 <__ssvfiscanf_r+0x24e>
 800bcde:	466b      	mov	r3, sp
 800bce0:	4622      	mov	r2, r4
 800bce2:	a941      	add	r1, sp, #260	; 0x104
 800bce4:	4630      	mov	r0, r6
 800bce6:	f000 f897 	bl	800be18 <_scanf_chars>
 800bcea:	2801      	cmp	r0, #1
 800bcec:	f000 8089 	beq.w	800be02 <__ssvfiscanf_r+0x28a>
 800bcf0:	2802      	cmp	r0, #2
 800bcf2:	f47f af71 	bne.w	800bbd8 <__ssvfiscanf_r+0x60>
 800bcf6:	e01d      	b.n	800bd34 <__ssvfiscanf_r+0x1bc>
 800bcf8:	2b75      	cmp	r3, #117	; 0x75
 800bcfa:	d0d1      	beq.n	800bca0 <__ssvfiscanf_r+0x128>
 800bcfc:	2b78      	cmp	r3, #120	; 0x78
 800bcfe:	d0c0      	beq.n	800bc82 <__ssvfiscanf_r+0x10a>
 800bd00:	2b73      	cmp	r3, #115	; 0x73
 800bd02:	d1af      	bne.n	800bc64 <__ssvfiscanf_r+0xec>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e7d8      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dd0c      	ble.n	800bd28 <__ssvfiscanf_r+0x1b0>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	455a      	cmp	r2, fp
 800bd14:	d175      	bne.n	800be02 <__ssvfiscanf_r+0x28a>
 800bd16:	3301      	adds	r3, #1
 800bd18:	6862      	ldr	r2, [r4, #4]
 800bd1a:	6023      	str	r3, [r4, #0]
 800bd1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	3301      	adds	r3, #1
 800bd22:	6062      	str	r2, [r4, #4]
 800bd24:	9345      	str	r3, [sp, #276]	; 0x114
 800bd26:	e757      	b.n	800bbd8 <__ssvfiscanf_r+0x60>
 800bd28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4798      	blx	r3
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d0ec      	beq.n	800bd0e <__ssvfiscanf_r+0x196>
 800bd34:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d159      	bne.n	800bdee <__ssvfiscanf_r+0x276>
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	e05c      	b.n	800bdfa <__ssvfiscanf_r+0x282>
 800bd40:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd42:	f042 0220 	orr.w	r2, r2, #32
 800bd46:	9241      	str	r2, [sp, #260]	; 0x104
 800bd48:	e79b      	b.n	800bc82 <__ssvfiscanf_r+0x10a>
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	9342      	str	r3, [sp, #264]	; 0x108
 800bd4e:	2304      	movs	r3, #4
 800bd50:	e7b3      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bd52:	4629      	mov	r1, r5
 800bd54:	4640      	mov	r0, r8
 800bd56:	f000 f9c7 	bl	800c0e8 <__sccl>
 800bd5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd62:	9341      	str	r3, [sp, #260]	; 0x104
 800bd64:	2301      	movs	r3, #1
 800bd66:	e7a8      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bd68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd6e:	9341      	str	r3, [sp, #260]	; 0x104
 800bd70:	2300      	movs	r3, #0
 800bd72:	e7a2      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bd74:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd76:	06c3      	lsls	r3, r0, #27
 800bd78:	f53f af2e 	bmi.w	800bbd8 <__ssvfiscanf_r+0x60>
 800bd7c:	9b00      	ldr	r3, [sp, #0]
 800bd7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd80:	1d19      	adds	r1, r3, #4
 800bd82:	9100      	str	r1, [sp, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	07c0      	lsls	r0, r0, #31
 800bd88:	bf4c      	ite	mi
 800bd8a:	801a      	strhmi	r2, [r3, #0]
 800bd8c:	601a      	strpl	r2, [r3, #0]
 800bd8e:	e723      	b.n	800bbd8 <__ssvfiscanf_r+0x60>
 800bd90:	2305      	movs	r3, #5
 800bd92:	e792      	b.n	800bcba <__ssvfiscanf_r+0x142>
 800bd94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd96:	4621      	mov	r1, r4
 800bd98:	4630      	mov	r0, r6
 800bd9a:	4798      	blx	r3
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d090      	beq.n	800bcc2 <__ssvfiscanf_r+0x14a>
 800bda0:	e7c8      	b.n	800bd34 <__ssvfiscanf_r+0x1bc>
 800bda2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bda4:	3201      	adds	r2, #1
 800bda6:	9245      	str	r2, [sp, #276]	; 0x114
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	3a01      	subs	r2, #1
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	6062      	str	r2, [r4, #4]
 800bdb0:	dd02      	ble.n	800bdb8 <__ssvfiscanf_r+0x240>
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	e787      	b.n	800bcc8 <__ssvfiscanf_r+0x150>
 800bdb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdba:	4621      	mov	r1, r4
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4798      	blx	r3
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d081      	beq.n	800bcc8 <__ssvfiscanf_r+0x150>
 800bdc4:	e7b6      	b.n	800bd34 <__ssvfiscanf_r+0x1bc>
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	dc06      	bgt.n	800bdd8 <__ssvfiscanf_r+0x260>
 800bdca:	466b      	mov	r3, sp
 800bdcc:	4622      	mov	r2, r4
 800bdce:	a941      	add	r1, sp, #260	; 0x104
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f000 f883 	bl	800bedc <_scanf_i>
 800bdd6:	e788      	b.n	800bcea <__ssvfiscanf_r+0x172>
 800bdd8:	4b0e      	ldr	r3, [pc, #56]	; (800be14 <__ssvfiscanf_r+0x29c>)
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f43f aefc 	beq.w	800bbd8 <__ssvfiscanf_r+0x60>
 800bde0:	466b      	mov	r3, sp
 800bde2:	4622      	mov	r2, r4
 800bde4:	a941      	add	r1, sp, #260	; 0x104
 800bde6:	4630      	mov	r0, r6
 800bde8:	f3af 8000 	nop.w
 800bdec:	e77d      	b.n	800bcea <__ssvfiscanf_r+0x172>
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bdf4:	bf18      	it	ne
 800bdf6:	f04f 30ff 	movne.w	r0, #4294967295
 800bdfa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be04:	e7f9      	b.n	800bdfa <__ssvfiscanf_r+0x282>
 800be06:	bf00      	nop
 800be08:	0800bac5 	.word	0x0800bac5
 800be0c:	0800bb3f 	.word	0x0800bb3f
 800be10:	0800d7bc 	.word	0x0800d7bc
 800be14:	00000000 	.word	0x00000000

0800be18 <_scanf_chars>:
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	4615      	mov	r5, r2
 800be1e:	688a      	ldr	r2, [r1, #8]
 800be20:	4680      	mov	r8, r0
 800be22:	460c      	mov	r4, r1
 800be24:	b932      	cbnz	r2, 800be34 <_scanf_chars+0x1c>
 800be26:	698a      	ldr	r2, [r1, #24]
 800be28:	2a00      	cmp	r2, #0
 800be2a:	bf14      	ite	ne
 800be2c:	f04f 32ff 	movne.w	r2, #4294967295
 800be30:	2201      	moveq	r2, #1
 800be32:	608a      	str	r2, [r1, #8]
 800be34:	2600      	movs	r6, #0
 800be36:	6822      	ldr	r2, [r4, #0]
 800be38:	06d1      	lsls	r1, r2, #27
 800be3a:	bf5f      	itttt	pl
 800be3c:	681a      	ldrpl	r2, [r3, #0]
 800be3e:	1d11      	addpl	r1, r2, #4
 800be40:	6019      	strpl	r1, [r3, #0]
 800be42:	6817      	ldrpl	r7, [r2, #0]
 800be44:	69a3      	ldr	r3, [r4, #24]
 800be46:	b1db      	cbz	r3, 800be80 <_scanf_chars+0x68>
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d107      	bne.n	800be5c <_scanf_chars+0x44>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	6962      	ldr	r2, [r4, #20]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	5cd3      	ldrb	r3, [r2, r3]
 800be54:	b9a3      	cbnz	r3, 800be80 <_scanf_chars+0x68>
 800be56:	2e00      	cmp	r6, #0
 800be58:	d131      	bne.n	800bebe <_scanf_chars+0xa6>
 800be5a:	e006      	b.n	800be6a <_scanf_chars+0x52>
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d007      	beq.n	800be70 <_scanf_chars+0x58>
 800be60:	2e00      	cmp	r6, #0
 800be62:	d12c      	bne.n	800bebe <_scanf_chars+0xa6>
 800be64:	69a3      	ldr	r3, [r4, #24]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d129      	bne.n	800bebe <_scanf_chars+0xa6>
 800be6a:	2001      	movs	r0, #1
 800be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be70:	f7ff f980 	bl	800b174 <__locale_ctype_ptr>
 800be74:	682b      	ldr	r3, [r5, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	4418      	add	r0, r3
 800be7a:	7843      	ldrb	r3, [r0, #1]
 800be7c:	071b      	lsls	r3, r3, #28
 800be7e:	d4ef      	bmi.n	800be60 <_scanf_chars+0x48>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	3601      	adds	r6, #1
 800be84:	06da      	lsls	r2, r3, #27
 800be86:	bf5e      	ittt	pl
 800be88:	682b      	ldrpl	r3, [r5, #0]
 800be8a:	781b      	ldrbpl	r3, [r3, #0]
 800be8c:	703b      	strbpl	r3, [r7, #0]
 800be8e:	682a      	ldr	r2, [r5, #0]
 800be90:	686b      	ldr	r3, [r5, #4]
 800be92:	f102 0201 	add.w	r2, r2, #1
 800be96:	602a      	str	r2, [r5, #0]
 800be98:	68a2      	ldr	r2, [r4, #8]
 800be9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800be9e:	f102 32ff 	add.w	r2, r2, #4294967295
 800bea2:	606b      	str	r3, [r5, #4]
 800bea4:	bf58      	it	pl
 800bea6:	3701      	addpl	r7, #1
 800bea8:	60a2      	str	r2, [r4, #8]
 800beaa:	b142      	cbz	r2, 800bebe <_scanf_chars+0xa6>
 800beac:	2b00      	cmp	r3, #0
 800beae:	dcc9      	bgt.n	800be44 <_scanf_chars+0x2c>
 800beb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800beb4:	4629      	mov	r1, r5
 800beb6:	4640      	mov	r0, r8
 800beb8:	4798      	blx	r3
 800beba:	2800      	cmp	r0, #0
 800bebc:	d0c2      	beq.n	800be44 <_scanf_chars+0x2c>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	f013 0310 	ands.w	r3, r3, #16
 800bec4:	d105      	bne.n	800bed2 <_scanf_chars+0xba>
 800bec6:	68e2      	ldr	r2, [r4, #12]
 800bec8:	3201      	adds	r2, #1
 800beca:	60e2      	str	r2, [r4, #12]
 800becc:	69a2      	ldr	r2, [r4, #24]
 800bece:	b102      	cbz	r2, 800bed2 <_scanf_chars+0xba>
 800bed0:	703b      	strb	r3, [r7, #0]
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	2000      	movs	r0, #0
 800bed6:	441e      	add	r6, r3
 800bed8:	6126      	str	r6, [r4, #16]
 800beda:	e7c7      	b.n	800be6c <_scanf_chars+0x54>

0800bedc <_scanf_i>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	460c      	mov	r4, r1
 800bee2:	469a      	mov	sl, r3
 800bee4:	4b74      	ldr	r3, [pc, #464]	; (800c0b8 <_scanf_i+0x1dc>)
 800bee6:	b087      	sub	sp, #28
 800bee8:	4683      	mov	fp, r0
 800beea:	4616      	mov	r6, r2
 800beec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bef0:	ab03      	add	r3, sp, #12
 800bef2:	68a7      	ldr	r7, [r4, #8]
 800bef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bef8:	4b70      	ldr	r3, [pc, #448]	; (800c0bc <_scanf_i+0x1e0>)
 800befa:	69a1      	ldr	r1, [r4, #24]
 800befc:	4a70      	ldr	r2, [pc, #448]	; (800c0c0 <_scanf_i+0x1e4>)
 800befe:	f104 091c 	add.w	r9, r4, #28
 800bf02:	2903      	cmp	r1, #3
 800bf04:	bf08      	it	eq
 800bf06:	461a      	moveq	r2, r3
 800bf08:	1e7b      	subs	r3, r7, #1
 800bf0a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bf0e:	bf84      	itt	hi
 800bf10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bf14:	60a3      	strhi	r3, [r4, #8]
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	bf88      	it	hi
 800bf1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bf1e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	bf98      	it	ls
 800bf26:	2700      	movls	r7, #0
 800bf28:	464b      	mov	r3, r9
 800bf2a:	f04f 0800 	mov.w	r8, #0
 800bf2e:	9200      	str	r2, [sp, #0]
 800bf30:	bf88      	it	hi
 800bf32:	197f      	addhi	r7, r7, r5
 800bf34:	6831      	ldr	r1, [r6, #0]
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	ab03      	add	r3, sp, #12
 800bf3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bf3e:	2202      	movs	r2, #2
 800bf40:	7809      	ldrb	r1, [r1, #0]
 800bf42:	f000 f9ef 	bl	800c324 <memchr>
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	b330      	cbz	r0, 800bf98 <_scanf_i+0xbc>
 800bf4a:	f1b8 0f01 	cmp.w	r8, #1
 800bf4e:	d15a      	bne.n	800c006 <_scanf_i+0x12a>
 800bf50:	6862      	ldr	r2, [r4, #4]
 800bf52:	b92a      	cbnz	r2, 800bf60 <_scanf_i+0x84>
 800bf54:	2108      	movs	r1, #8
 800bf56:	6822      	ldr	r2, [r4, #0]
 800bf58:	6061      	str	r1, [r4, #4]
 800bf5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	6822      	ldr	r2, [r4, #0]
 800bf62:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	68a2      	ldr	r2, [r4, #8]
 800bf6a:	1e51      	subs	r1, r2, #1
 800bf6c:	60a1      	str	r1, [r4, #8]
 800bf6e:	b19a      	cbz	r2, 800bf98 <_scanf_i+0xbc>
 800bf70:	6832      	ldr	r2, [r6, #0]
 800bf72:	1c5d      	adds	r5, r3, #1
 800bf74:	1c51      	adds	r1, r2, #1
 800bf76:	6031      	str	r1, [r6, #0]
 800bf78:	7812      	ldrb	r2, [r2, #0]
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	6873      	ldr	r3, [r6, #4]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	6073      	str	r3, [r6, #4]
 800bf84:	dc07      	bgt.n	800bf96 <_scanf_i+0xba>
 800bf86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	4798      	blx	r3
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f040 8087 	bne.w	800c0a4 <_scanf_i+0x1c8>
 800bf96:	462b      	mov	r3, r5
 800bf98:	f108 0801 	add.w	r8, r8, #1
 800bf9c:	f1b8 0f03 	cmp.w	r8, #3
 800bfa0:	d1c8      	bne.n	800bf34 <_scanf_i+0x58>
 800bfa2:	6862      	ldr	r2, [r4, #4]
 800bfa4:	b90a      	cbnz	r2, 800bfaa <_scanf_i+0xce>
 800bfa6:	220a      	movs	r2, #10
 800bfa8:	6062      	str	r2, [r4, #4]
 800bfaa:	6862      	ldr	r2, [r4, #4]
 800bfac:	4945      	ldr	r1, [pc, #276]	; (800c0c4 <_scanf_i+0x1e8>)
 800bfae:	6960      	ldr	r0, [r4, #20]
 800bfb0:	1a89      	subs	r1, r1, r2
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	f000 f898 	bl	800c0e8 <__sccl>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	f04f 0800 	mov.w	r8, #0
 800bfbe:	461d      	mov	r5, r3
 800bfc0:	68a3      	ldr	r3, [r4, #8]
 800bfc2:	6822      	ldr	r2, [r4, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d03b      	beq.n	800c040 <_scanf_i+0x164>
 800bfc8:	6831      	ldr	r1, [r6, #0]
 800bfca:	6960      	ldr	r0, [r4, #20]
 800bfcc:	f891 c000 	ldrb.w	ip, [r1]
 800bfd0:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d033      	beq.n	800c040 <_scanf_i+0x164>
 800bfd8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bfdc:	d121      	bne.n	800c022 <_scanf_i+0x146>
 800bfde:	0510      	lsls	r0, r2, #20
 800bfe0:	d51f      	bpl.n	800c022 <_scanf_i+0x146>
 800bfe2:	f108 0801 	add.w	r8, r8, #1
 800bfe6:	b117      	cbz	r7, 800bfee <_scanf_i+0x112>
 800bfe8:	3301      	adds	r3, #1
 800bfea:	3f01      	subs	r7, #1
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	6873      	ldr	r3, [r6, #4]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	6073      	str	r3, [r6, #4]
 800bff6:	dd1c      	ble.n	800c032 <_scanf_i+0x156>
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	3301      	adds	r3, #1
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	3b01      	subs	r3, #1
 800c002:	60a3      	str	r3, [r4, #8]
 800c004:	e7dc      	b.n	800bfc0 <_scanf_i+0xe4>
 800c006:	f1b8 0f02 	cmp.w	r8, #2
 800c00a:	d1ad      	bne.n	800bf68 <_scanf_i+0x8c>
 800c00c:	6822      	ldr	r2, [r4, #0]
 800c00e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c012:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c016:	d1bf      	bne.n	800bf98 <_scanf_i+0xbc>
 800c018:	2110      	movs	r1, #16
 800c01a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c01e:	6061      	str	r1, [r4, #4]
 800c020:	e7a1      	b.n	800bf66 <_scanf_i+0x8a>
 800c022:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c026:	6022      	str	r2, [r4, #0]
 800c028:	780b      	ldrb	r3, [r1, #0]
 800c02a:	3501      	adds	r5, #1
 800c02c:	f805 3c01 	strb.w	r3, [r5, #-1]
 800c030:	e7dd      	b.n	800bfee <_scanf_i+0x112>
 800c032:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c036:	4631      	mov	r1, r6
 800c038:	4658      	mov	r0, fp
 800c03a:	4798      	blx	r3
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d0de      	beq.n	800bffe <_scanf_i+0x122>
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	05d9      	lsls	r1, r3, #23
 800c044:	d50c      	bpl.n	800c060 <_scanf_i+0x184>
 800c046:	454d      	cmp	r5, r9
 800c048:	d908      	bls.n	800c05c <_scanf_i+0x180>
 800c04a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c04e:	1e6f      	subs	r7, r5, #1
 800c050:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c054:	4632      	mov	r2, r6
 800c056:	4658      	mov	r0, fp
 800c058:	4798      	blx	r3
 800c05a:	463d      	mov	r5, r7
 800c05c:	454d      	cmp	r5, r9
 800c05e:	d029      	beq.n	800c0b4 <_scanf_i+0x1d8>
 800c060:	6822      	ldr	r2, [r4, #0]
 800c062:	f012 0210 	ands.w	r2, r2, #16
 800c066:	d113      	bne.n	800c090 <_scanf_i+0x1b4>
 800c068:	702a      	strb	r2, [r5, #0]
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	4649      	mov	r1, r9
 800c06e:	4658      	mov	r0, fp
 800c070:	9e00      	ldr	r6, [sp, #0]
 800c072:	47b0      	blx	r6
 800c074:	f8da 3000 	ldr.w	r3, [sl]
 800c078:	6821      	ldr	r1, [r4, #0]
 800c07a:	1d1a      	adds	r2, r3, #4
 800c07c:	f8ca 2000 	str.w	r2, [sl]
 800c080:	f011 0f20 	tst.w	r1, #32
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	d010      	beq.n	800c0aa <_scanf_i+0x1ce>
 800c088:	6018      	str	r0, [r3, #0]
 800c08a:	68e3      	ldr	r3, [r4, #12]
 800c08c:	3301      	adds	r3, #1
 800c08e:	60e3      	str	r3, [r4, #12]
 800c090:	2000      	movs	r0, #0
 800c092:	eba5 0509 	sub.w	r5, r5, r9
 800c096:	44a8      	add	r8, r5
 800c098:	6925      	ldr	r5, [r4, #16]
 800c09a:	4445      	add	r5, r8
 800c09c:	6125      	str	r5, [r4, #16]
 800c09e:	b007      	add	sp, #28
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	f04f 0800 	mov.w	r8, #0
 800c0a8:	e7ca      	b.n	800c040 <_scanf_i+0x164>
 800c0aa:	07ca      	lsls	r2, r1, #31
 800c0ac:	bf4c      	ite	mi
 800c0ae:	8018      	strhmi	r0, [r3, #0]
 800c0b0:	6018      	strpl	r0, [r3, #0]
 800c0b2:	e7ea      	b.n	800c08a <_scanf_i+0x1ae>
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	e7f2      	b.n	800c09e <_scanf_i+0x1c2>
 800c0b8:	0800c7d0 	.word	0x0800c7d0
 800c0bc:	0800aacd 	.word	0x0800aacd
 800c0c0:	0800c265 	.word	0x0800c265
 800c0c4:	0800d7d0 	.word	0x0800d7d0

0800c0c8 <_sbrk_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4c05      	ldr	r4, [pc, #20]	; (800c0e4 <_sbrk_r+0x1c>)
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	f7f6 fb9e 	bl	8002814 <_sbrk>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_sbrk_r+0x1a>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_sbrk_r+0x1a>
 800c0e0:	602b      	str	r3, [r5, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	20003f8c 	.word	0x20003f8c

0800c0e8 <__sccl>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	780b      	ldrb	r3, [r1, #0]
 800c0ec:	1e44      	subs	r4, r0, #1
 800c0ee:	2b5e      	cmp	r3, #94	; 0x5e
 800c0f0:	bf13      	iteet	ne
 800c0f2:	1c4a      	addne	r2, r1, #1
 800c0f4:	1c8a      	addeq	r2, r1, #2
 800c0f6:	784b      	ldrbeq	r3, [r1, #1]
 800c0f8:	2100      	movne	r1, #0
 800c0fa:	bf08      	it	eq
 800c0fc:	2101      	moveq	r1, #1
 800c0fe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c102:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c106:	42ac      	cmp	r4, r5
 800c108:	d1fb      	bne.n	800c102 <__sccl+0x1a>
 800c10a:	b913      	cbnz	r3, 800c112 <__sccl+0x2a>
 800c10c:	3a01      	subs	r2, #1
 800c10e:	4610      	mov	r0, r2
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	f081 0401 	eor.w	r4, r1, #1
 800c116:	54c4      	strb	r4, [r0, r3]
 800c118:	1c51      	adds	r1, r2, #1
 800c11a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c11e:	1e4e      	subs	r6, r1, #1
 800c120:	2d2d      	cmp	r5, #45	; 0x2d
 800c122:	460a      	mov	r2, r1
 800c124:	d006      	beq.n	800c134 <__sccl+0x4c>
 800c126:	2d5d      	cmp	r5, #93	; 0x5d
 800c128:	d0f1      	beq.n	800c10e <__sccl+0x26>
 800c12a:	b90d      	cbnz	r5, 800c130 <__sccl+0x48>
 800c12c:	4632      	mov	r2, r6
 800c12e:	e7ee      	b.n	800c10e <__sccl+0x26>
 800c130:	462b      	mov	r3, r5
 800c132:	e7f0      	b.n	800c116 <__sccl+0x2e>
 800c134:	780e      	ldrb	r6, [r1, #0]
 800c136:	2e5d      	cmp	r6, #93	; 0x5d
 800c138:	d0fa      	beq.n	800c130 <__sccl+0x48>
 800c13a:	42b3      	cmp	r3, r6
 800c13c:	dcf8      	bgt.n	800c130 <__sccl+0x48>
 800c13e:	3301      	adds	r3, #1
 800c140:	429e      	cmp	r6, r3
 800c142:	54c4      	strb	r4, [r0, r3]
 800c144:	dcfb      	bgt.n	800c13e <__sccl+0x56>
 800c146:	3102      	adds	r1, #2
 800c148:	e7e7      	b.n	800c11a <__sccl+0x32>

0800c14a <strncmp>:
 800c14a:	b510      	push	{r4, lr}
 800c14c:	b16a      	cbz	r2, 800c16a <strncmp+0x20>
 800c14e:	3901      	subs	r1, #1
 800c150:	1884      	adds	r4, r0, r2
 800c152:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c156:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d103      	bne.n	800c166 <strncmp+0x1c>
 800c15e:	42a0      	cmp	r0, r4
 800c160:	d001      	beq.n	800c166 <strncmp+0x1c>
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1f5      	bne.n	800c152 <strncmp+0x8>
 800c166:	1a98      	subs	r0, r3, r2
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	4610      	mov	r0, r2
 800c16c:	e7fc      	b.n	800c168 <strncmp+0x1e>

0800c16e <_strtoul_l.isra.0>:
 800c16e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c172:	4680      	mov	r8, r0
 800c174:	4689      	mov	r9, r1
 800c176:	4692      	mov	sl, r2
 800c178:	461e      	mov	r6, r3
 800c17a:	460f      	mov	r7, r1
 800c17c:	463d      	mov	r5, r7
 800c17e:	9808      	ldr	r0, [sp, #32]
 800c180:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c184:	f7fe fff2 	bl	800b16c <__locale_ctype_ptr_l>
 800c188:	4420      	add	r0, r4
 800c18a:	7843      	ldrb	r3, [r0, #1]
 800c18c:	f013 0308 	ands.w	r3, r3, #8
 800c190:	d130      	bne.n	800c1f4 <_strtoul_l.isra.0+0x86>
 800c192:	2c2d      	cmp	r4, #45	; 0x2d
 800c194:	d130      	bne.n	800c1f8 <_strtoul_l.isra.0+0x8a>
 800c196:	2101      	movs	r1, #1
 800c198:	787c      	ldrb	r4, [r7, #1]
 800c19a:	1cbd      	adds	r5, r7, #2
 800c19c:	2e00      	cmp	r6, #0
 800c19e:	d05c      	beq.n	800c25a <_strtoul_l.isra.0+0xec>
 800c1a0:	2e10      	cmp	r6, #16
 800c1a2:	d109      	bne.n	800c1b8 <_strtoul_l.isra.0+0x4a>
 800c1a4:	2c30      	cmp	r4, #48	; 0x30
 800c1a6:	d107      	bne.n	800c1b8 <_strtoul_l.isra.0+0x4a>
 800c1a8:	782b      	ldrb	r3, [r5, #0]
 800c1aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1ae:	2b58      	cmp	r3, #88	; 0x58
 800c1b0:	d14e      	bne.n	800c250 <_strtoul_l.isra.0+0xe2>
 800c1b2:	2610      	movs	r6, #16
 800c1b4:	786c      	ldrb	r4, [r5, #1]
 800c1b6:	3502      	adds	r5, #2
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	fbb2 f2f6 	udiv	r2, r2, r6
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	fb06 fc02 	mul.w	ip, r6, r2
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	ea6f 0c0c 	mvn.w	ip, ip
 800c1cc:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c1d0:	2f09      	cmp	r7, #9
 800c1d2:	d817      	bhi.n	800c204 <_strtoul_l.isra.0+0x96>
 800c1d4:	463c      	mov	r4, r7
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	dd23      	ble.n	800c222 <_strtoul_l.isra.0+0xb4>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db1e      	blt.n	800c21c <_strtoul_l.isra.0+0xae>
 800c1de:	4282      	cmp	r2, r0
 800c1e0:	d31c      	bcc.n	800c21c <_strtoul_l.isra.0+0xae>
 800c1e2:	d101      	bne.n	800c1e8 <_strtoul_l.isra.0+0x7a>
 800c1e4:	45a4      	cmp	ip, r4
 800c1e6:	db19      	blt.n	800c21c <_strtoul_l.isra.0+0xae>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	fb00 4006 	mla	r0, r0, r6, r4
 800c1ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1f2:	e7eb      	b.n	800c1cc <_strtoul_l.isra.0+0x5e>
 800c1f4:	462f      	mov	r7, r5
 800c1f6:	e7c1      	b.n	800c17c <_strtoul_l.isra.0+0xe>
 800c1f8:	2c2b      	cmp	r4, #43	; 0x2b
 800c1fa:	bf04      	itt	eq
 800c1fc:	1cbd      	addeq	r5, r7, #2
 800c1fe:	787c      	ldrbeq	r4, [r7, #1]
 800c200:	4619      	mov	r1, r3
 800c202:	e7cb      	b.n	800c19c <_strtoul_l.isra.0+0x2e>
 800c204:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c208:	2f19      	cmp	r7, #25
 800c20a:	d801      	bhi.n	800c210 <_strtoul_l.isra.0+0xa2>
 800c20c:	3c37      	subs	r4, #55	; 0x37
 800c20e:	e7e2      	b.n	800c1d6 <_strtoul_l.isra.0+0x68>
 800c210:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c214:	2f19      	cmp	r7, #25
 800c216:	d804      	bhi.n	800c222 <_strtoul_l.isra.0+0xb4>
 800c218:	3c57      	subs	r4, #87	; 0x57
 800c21a:	e7dc      	b.n	800c1d6 <_strtoul_l.isra.0+0x68>
 800c21c:	f04f 33ff 	mov.w	r3, #4294967295
 800c220:	e7e5      	b.n	800c1ee <_strtoul_l.isra.0+0x80>
 800c222:	2b00      	cmp	r3, #0
 800c224:	da09      	bge.n	800c23a <_strtoul_l.isra.0+0xcc>
 800c226:	2322      	movs	r3, #34	; 0x22
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	f8c8 3000 	str.w	r3, [r8]
 800c230:	f1ba 0f00 	cmp.w	sl, #0
 800c234:	d107      	bne.n	800c246 <_strtoul_l.isra.0+0xd8>
 800c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23a:	b101      	cbz	r1, 800c23e <_strtoul_l.isra.0+0xd0>
 800c23c:	4240      	negs	r0, r0
 800c23e:	f1ba 0f00 	cmp.w	sl, #0
 800c242:	d0f8      	beq.n	800c236 <_strtoul_l.isra.0+0xc8>
 800c244:	b10b      	cbz	r3, 800c24a <_strtoul_l.isra.0+0xdc>
 800c246:	f105 39ff 	add.w	r9, r5, #4294967295
 800c24a:	f8ca 9000 	str.w	r9, [sl]
 800c24e:	e7f2      	b.n	800c236 <_strtoul_l.isra.0+0xc8>
 800c250:	2430      	movs	r4, #48	; 0x30
 800c252:	2e00      	cmp	r6, #0
 800c254:	d1b0      	bne.n	800c1b8 <_strtoul_l.isra.0+0x4a>
 800c256:	2608      	movs	r6, #8
 800c258:	e7ae      	b.n	800c1b8 <_strtoul_l.isra.0+0x4a>
 800c25a:	2c30      	cmp	r4, #48	; 0x30
 800c25c:	d0a4      	beq.n	800c1a8 <_strtoul_l.isra.0+0x3a>
 800c25e:	260a      	movs	r6, #10
 800c260:	e7aa      	b.n	800c1b8 <_strtoul_l.isra.0+0x4a>
	...

0800c264 <_strtoul_r>:
 800c264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c266:	4c06      	ldr	r4, [pc, #24]	; (800c280 <_strtoul_r+0x1c>)
 800c268:	4d06      	ldr	r5, [pc, #24]	; (800c284 <_strtoul_r+0x20>)
 800c26a:	6824      	ldr	r4, [r4, #0]
 800c26c:	6a24      	ldr	r4, [r4, #32]
 800c26e:	2c00      	cmp	r4, #0
 800c270:	bf08      	it	eq
 800c272:	462c      	moveq	r4, r5
 800c274:	9400      	str	r4, [sp, #0]
 800c276:	f7ff ff7a 	bl	800c16e <_strtoul_l.isra.0>
 800c27a:	b003      	add	sp, #12
 800c27c:	bd30      	pop	{r4, r5, pc}
 800c27e:	bf00      	nop
 800c280:	200001bc 	.word	0x200001bc
 800c284:	20000220 	.word	0x20000220

0800c288 <__submore>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	460c      	mov	r4, r1
 800c28e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c294:	4299      	cmp	r1, r3
 800c296:	d11b      	bne.n	800c2d0 <__submore+0x48>
 800c298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c29c:	f7ff fb92 	bl	800b9c4 <_malloc_r>
 800c2a0:	b918      	cbnz	r0, 800c2aa <__submore+0x22>
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ae:	63a3      	str	r3, [r4, #56]	; 0x38
 800c2b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c2b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c2ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c2be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c2c2:	7043      	strb	r3, [r0, #1]
 800c2c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c2c8:	7003      	strb	r3, [r0, #0]
 800c2ca:	6020      	str	r0, [r4, #0]
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	e7ea      	b.n	800c2a6 <__submore+0x1e>
 800c2d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c2d2:	0077      	lsls	r7, r6, #1
 800c2d4:	463a      	mov	r2, r7
 800c2d6:	f7ff fbcf 	bl	800ba78 <_realloc_r>
 800c2da:	4605      	mov	r5, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d0e0      	beq.n	800c2a2 <__submore+0x1a>
 800c2e0:	eb00 0806 	add.w	r8, r0, r6
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	4632      	mov	r2, r6
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	f7fd fc9a 	bl	8009c22 <memcpy>
 800c2ee:	f8c4 8000 	str.w	r8, [r4]
 800c2f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c2f6:	e7e9      	b.n	800c2cc <__submore+0x44>

0800c2f8 <__ascii_wctomb>:
 800c2f8:	b149      	cbz	r1, 800c30e <__ascii_wctomb+0x16>
 800c2fa:	2aff      	cmp	r2, #255	; 0xff
 800c2fc:	bf8b      	itete	hi
 800c2fe:	238a      	movhi	r3, #138	; 0x8a
 800c300:	700a      	strbls	r2, [r1, #0]
 800c302:	6003      	strhi	r3, [r0, #0]
 800c304:	2001      	movls	r0, #1
 800c306:	bf88      	it	hi
 800c308:	f04f 30ff 	movhi.w	r0, #4294967295
 800c30c:	4770      	bx	lr
 800c30e:	4608      	mov	r0, r1
 800c310:	4770      	bx	lr
	...

0800c314 <malloc>:
 800c314:	4b02      	ldr	r3, [pc, #8]	; (800c320 <malloc+0xc>)
 800c316:	4601      	mov	r1, r0
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f7ff bb53 	b.w	800b9c4 <_malloc_r>
 800c31e:	bf00      	nop
 800c320:	200001bc 	.word	0x200001bc

0800c324 <memchr>:
 800c324:	b510      	push	{r4, lr}
 800c326:	b2c9      	uxtb	r1, r1
 800c328:	4402      	add	r2, r0
 800c32a:	4290      	cmp	r0, r2
 800c32c:	4603      	mov	r3, r0
 800c32e:	d101      	bne.n	800c334 <memchr+0x10>
 800c330:	2300      	movs	r3, #0
 800c332:	e003      	b.n	800c33c <memchr+0x18>
 800c334:	781c      	ldrb	r4, [r3, #0]
 800c336:	3001      	adds	r0, #1
 800c338:	428c      	cmp	r4, r1
 800c33a:	d1f6      	bne.n	800c32a <memchr+0x6>
 800c33c:	4618      	mov	r0, r3
 800c33e:	bd10      	pop	{r4, pc}

0800c340 <__malloc_lock>:
 800c340:	4770      	bx	lr

0800c342 <__malloc_unlock>:
 800c342:	4770      	bx	lr

0800c344 <_free_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4605      	mov	r5, r0
 800c348:	2900      	cmp	r1, #0
 800c34a:	d043      	beq.n	800c3d4 <_free_r+0x90>
 800c34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c350:	1f0c      	subs	r4, r1, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfb8      	it	lt
 800c356:	18e4      	addlt	r4, r4, r3
 800c358:	f7ff fff2 	bl	800c340 <__malloc_lock>
 800c35c:	4a1e      	ldr	r2, [pc, #120]	; (800c3d8 <_free_r+0x94>)
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	4610      	mov	r0, r2
 800c362:	b933      	cbnz	r3, 800c372 <_free_r+0x2e>
 800c364:	6063      	str	r3, [r4, #4]
 800c366:	6014      	str	r4, [r2, #0]
 800c368:	4628      	mov	r0, r5
 800c36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36e:	f7ff bfe8 	b.w	800c342 <__malloc_unlock>
 800c372:	42a3      	cmp	r3, r4
 800c374:	d90b      	bls.n	800c38e <_free_r+0x4a>
 800c376:	6821      	ldr	r1, [r4, #0]
 800c378:	1862      	adds	r2, r4, r1
 800c37a:	4293      	cmp	r3, r2
 800c37c:	bf01      	itttt	eq
 800c37e:	681a      	ldreq	r2, [r3, #0]
 800c380:	685b      	ldreq	r3, [r3, #4]
 800c382:	1852      	addeq	r2, r2, r1
 800c384:	6022      	streq	r2, [r4, #0]
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	6004      	str	r4, [r0, #0]
 800c38a:	e7ed      	b.n	800c368 <_free_r+0x24>
 800c38c:	4613      	mov	r3, r2
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	b10a      	cbz	r2, 800c396 <_free_r+0x52>
 800c392:	42a2      	cmp	r2, r4
 800c394:	d9fa      	bls.n	800c38c <_free_r+0x48>
 800c396:	6819      	ldr	r1, [r3, #0]
 800c398:	1858      	adds	r0, r3, r1
 800c39a:	42a0      	cmp	r0, r4
 800c39c:	d10b      	bne.n	800c3b6 <_free_r+0x72>
 800c39e:	6820      	ldr	r0, [r4, #0]
 800c3a0:	4401      	add	r1, r0
 800c3a2:	1858      	adds	r0, r3, r1
 800c3a4:	4282      	cmp	r2, r0
 800c3a6:	6019      	str	r1, [r3, #0]
 800c3a8:	d1de      	bne.n	800c368 <_free_r+0x24>
 800c3aa:	6810      	ldr	r0, [r2, #0]
 800c3ac:	6852      	ldr	r2, [r2, #4]
 800c3ae:	4401      	add	r1, r0
 800c3b0:	6019      	str	r1, [r3, #0]
 800c3b2:	605a      	str	r2, [r3, #4]
 800c3b4:	e7d8      	b.n	800c368 <_free_r+0x24>
 800c3b6:	d902      	bls.n	800c3be <_free_r+0x7a>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	e7d4      	b.n	800c368 <_free_r+0x24>
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	1821      	adds	r1, r4, r0
 800c3c2:	428a      	cmp	r2, r1
 800c3c4:	bf01      	itttt	eq
 800c3c6:	6811      	ldreq	r1, [r2, #0]
 800c3c8:	6852      	ldreq	r2, [r2, #4]
 800c3ca:	1809      	addeq	r1, r1, r0
 800c3cc:	6021      	streq	r1, [r4, #0]
 800c3ce:	6062      	str	r2, [r4, #4]
 800c3d0:	605c      	str	r4, [r3, #4]
 800c3d2:	e7c9      	b.n	800c368 <_free_r+0x24>
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200019cc 	.word	0x200019cc

0800c3dc <_malloc_usable_size_r>:
 800c3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e0:	1f18      	subs	r0, r3, #4
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bfbc      	itt	lt
 800c3e6:	580b      	ldrlt	r3, [r1, r0]
 800c3e8:	18c0      	addlt	r0, r0, r3
 800c3ea:	4770      	bx	lr

0800c3ec <_init>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	bf00      	nop
 800c3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f2:	bc08      	pop	{r3}
 800c3f4:	469e      	mov	lr, r3
 800c3f6:	4770      	bx	lr

0800c3f8 <_fini>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	bf00      	nop
 800c3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3fe:	bc08      	pop	{r3}
 800c400:	469e      	mov	lr, r3
 800c402:	4770      	bx	lr

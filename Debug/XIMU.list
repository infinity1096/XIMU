
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c344  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0800c458  0800c458  0001c458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d98c  0800d98c  0002038c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d98c  0800d98c  0002038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d98c  0800d98c  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d98c  0800d98c  0001d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d994  0800d994  0001d994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0800d998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c00  20000390  0800dd24  00020390  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003f90  0800dd24  00023f90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000331e0  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006bc7  00000000  00000000  00053595  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001133b  00000000  00000000  0005a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001988  00000000  00000000  0006b498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002520  00000000  00000000  0006ce20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001de64  00000000  00000000  0006f340  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001aa26  00000000  00000000  0008d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008809f  00000000  00000000  000a7bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012fc69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b8  00000000  00000000  0012fce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000390 	.word	0x20000390
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c43c 	.word	0x0800c43c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000394 	.word	0x20000394
 800014c:	0800c43c 	.word	0x0800c43c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4607      	mov	r7, r0
 8000c5c:	460e      	mov	r6, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4638      	mov	r0, r7
 8000c66:	4631      	mov	r1, r6
 8000c68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4638      	mov	r0, r7
 8000c72:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <__aeabi_d2ulz+0x3c>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <__aeabi_d2ulz+0x40>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	4310      	orrs	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000cc8:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000cca:	4c13      	ldr	r4, [pc, #76]	; (8000d18 <set_int_enable+0x50>)
 8000ccc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000cd0:	b193      	cbz	r3, 8000cf8 <set_int_enable+0x30>
        if (enable)
 8000cd2:	b1c0      	cbz	r0, 8000d06 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000cd4:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000cd6:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000cda:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000cde:	f10d 0307 	add.w	r3, sp, #7
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	7c49      	ldrb	r1, [r1, #17]
 8000ce6:	7800      	ldrb	r0, [r0, #0]
 8000ce8:	f002 f8fe 	bl	8002ee8 <i2c_write>
 8000cec:	b970      	cbnz	r0, 8000d0c <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000cf2:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000cf8:	7aa2      	ldrb	r2, [r4, #10]
 8000cfa:	b13a      	cbz	r2, 8000d0c <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000cfc:	b118      	cbz	r0, 8000d06 <set_int_enable+0x3e>
 8000cfe:	7c62      	ldrb	r2, [r4, #17]
 8000d00:	b93a      	cbnz	r2, 8000d12 <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e7e7      	b.n	8000cd6 <set_int_enable+0xe>
            tmp = 0x00;
 8000d06:	f88d 0007 	strb.w	r0, [sp, #7]
 8000d0a:	e7e6      	b.n	8000cda <set_int_enable+0x12>
            return -1;
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	e7f0      	b.n	8000cf4 <set_int_enable+0x2c>
            return 0;
 8000d12:	4618      	mov	r0, r3
 8000d14:	e7ee      	b.n	8000cf4 <set_int_enable+0x2c>
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000

08000d1c <mpu_read_6500_accel_bias>:
 *  The format are G in +-8G format. The register is initialized with OTP 
 *  factory trim values.
 *  @param[in]  accel_bias  returned structure with the accel bias
 *  @return     0 if successful.
 */
int mpu_read_6500_accel_bias(long *accel_bias) {
 8000d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char data[6];
	if (i2c_read(st.hw->addr, 0x77, 2, &data[0]))
 8000d1e:	4d18      	ldr	r5, [pc, #96]	; (8000d80 <mpu_read_6500_accel_bias+0x64>)
int mpu_read_6500_accel_bias(long *accel_bias) {
 8000d20:	4604      	mov	r4, r0
	if (i2c_read(st.hw->addr, 0x77, 2, &data[0]))
 8000d22:	6868      	ldr	r0, [r5, #4]
 8000d24:	466b      	mov	r3, sp
 8000d26:	2202      	movs	r2, #2
 8000d28:	2177      	movs	r1, #119	; 0x77
 8000d2a:	7800      	ldrb	r0, [r0, #0]
 8000d2c:	f002 f8ea 	bl	8002f04 <i2c_read>
 8000d30:	b118      	cbz	r0, 8000d3a <mpu_read_6500_accel_bias+0x1e>
		return -1;
 8000d32:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	accel_bias[0] = ((long)data[0]<<8) | data[1];
	accel_bias[1] = ((long)data[2]<<8) | data[3];
	accel_bias[2] = ((long)data[4]<<8) | data[5];
	return 0;
}
 8000d36:	b003      	add	sp, #12
 8000d38:	bd30      	pop	{r4, r5, pc}
	if (i2c_read(st.hw->addr, 0x7A, 2, &data[2]))
 8000d3a:	6868      	ldr	r0, [r5, #4]
 8000d3c:	f10d 0302 	add.w	r3, sp, #2
 8000d40:	2202      	movs	r2, #2
 8000d42:	217a      	movs	r1, #122	; 0x7a
 8000d44:	7800      	ldrb	r0, [r0, #0]
 8000d46:	f002 f8dd 	bl	8002f04 <i2c_read>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1f1      	bne.n	8000d32 <mpu_read_6500_accel_bias+0x16>
	if (i2c_read(st.hw->addr, 0x7D, 2, &data[4]))
 8000d4e:	6868      	ldr	r0, [r5, #4]
 8000d50:	ab01      	add	r3, sp, #4
 8000d52:	2202      	movs	r2, #2
 8000d54:	217d      	movs	r1, #125	; 0x7d
 8000d56:	7800      	ldrb	r0, [r0, #0]
 8000d58:	f002 f8d4 	bl	8002f04 <i2c_read>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d1e8      	bne.n	8000d32 <mpu_read_6500_accel_bias+0x16>
	accel_bias[0] = ((long)data[0]<<8) | data[1];
 8000d60:	f8bd 3000 	ldrh.w	r3, [sp]
 8000d64:	ba5b      	rev16	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	6023      	str	r3, [r4, #0]
	accel_bias[1] = ((long)data[2]<<8) | data[3];
 8000d6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000d6e:	ba5b      	rev16	r3, r3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	6063      	str	r3, [r4, #4]
	accel_bias[2] = ((long)data[4]<<8) | data[5];
 8000d74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000d78:	ba5b      	rev16	r3, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	60a3      	str	r3, [r4, #8]
	return 0;
 8000d7e:	e7da      	b.n	8000d36 <mpu_read_6500_accel_bias+0x1a>
 8000d80:	20000000 	.word	0x20000000

08000d84 <mpu_set_gyro_bias_reg>:
 *  in +-1000dps format.
 *  @param[in]  gyro_bias  New biases.
 *  @return     0 if successful.
 */
int mpu_set_gyro_bias_reg(long *gyro_bias)
{
 8000d84:	b513      	push	{r0, r1, r4, lr}
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
    int i=0;
    for(i=0;i<3;i++) {
    	gyro_bias[i]= (-gyro_bias[i]);
 8000d86:	6842      	ldr	r2, [r0, #4]
 8000d88:	6801      	ldr	r1, [r0, #0]
 8000d8a:	6883      	ldr	r3, [r0, #8]
 8000d8c:	4249      	negs	r1, r1
 8000d8e:	4252      	negs	r2, r2
 8000d90:	425b      	negs	r3, r3
    data[1] = (gyro_bias[0]) & 0xff;
    data[2] = (gyro_bias[1] >> 8) & 0xff;
    data[3] = (gyro_bias[1]) & 0xff;
    data[4] = (gyro_bias[2] >> 8) & 0xff;
    data[5] = (gyro_bias[2]) & 0xff;
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000d92:	4c1a      	ldr	r4, [pc, #104]	; (8000dfc <mpu_set_gyro_bias_reg+0x78>)
    	gyro_bias[i]= (-gyro_bias[i]);
 8000d94:	6001      	str	r1, [r0, #0]
 8000d96:	6042      	str	r2, [r0, #4]
 8000d98:	6083      	str	r3, [r0, #8]
    data[0] = (gyro_bias[0] >> 8) & 0xff;
 8000d9a:	1208      	asrs	r0, r1, #8
 8000d9c:	f88d 0000 	strb.w	r0, [sp]
    data[1] = (gyro_bias[0]) & 0xff;
 8000da0:	f88d 1001 	strb.w	r1, [sp, #1]
    data[3] = (gyro_bias[1]) & 0xff;
 8000da4:	f88d 2003 	strb.w	r2, [sp, #3]
    data[2] = (gyro_bias[1] >> 8) & 0xff;
 8000da8:	1211      	asrs	r1, r2, #8
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000daa:	6860      	ldr	r0, [r4, #4]
    data[4] = (gyro_bias[2] >> 8) & 0xff;
 8000dac:	121a      	asrs	r2, r3, #8
    data[2] = (gyro_bias[1] >> 8) & 0xff;
 8000dae:	f88d 1002 	strb.w	r1, [sp, #2]
    data[4] = (gyro_bias[2] >> 8) & 0xff;
 8000db2:	f88d 2004 	strb.w	r2, [sp, #4]
    data[5] = (gyro_bias[2]) & 0xff;
 8000db6:	f88d 3005 	strb.w	r3, [sp, #5]
    if (i2c_write(st.hw->addr, 0x13, 2, &data[0]))
 8000dba:	2202      	movs	r2, #2
 8000dbc:	466b      	mov	r3, sp
 8000dbe:	2113      	movs	r1, #19
 8000dc0:	7800      	ldrb	r0, [r0, #0]
 8000dc2:	f002 f891 	bl	8002ee8 <i2c_write>
 8000dc6:	b118      	cbz	r0, 8000dd0 <mpu_set_gyro_bias_reg+0x4c>
        return -1;
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
    if (i2c_write(st.hw->addr, 0x15, 2, &data[2]))
        return -1;
    if (i2c_write(st.hw->addr, 0x17, 2, &data[4]))
        return -1;
    return 0;
}
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd10      	pop	{r4, pc}
    if (i2c_write(st.hw->addr, 0x15, 2, &data[2]))
 8000dd0:	6860      	ldr	r0, [r4, #4]
 8000dd2:	f10d 0302 	add.w	r3, sp, #2
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	2115      	movs	r1, #21
 8000dda:	7800      	ldrb	r0, [r0, #0]
 8000ddc:	f002 f884 	bl	8002ee8 <i2c_write>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d1f1      	bne.n	8000dc8 <mpu_set_gyro_bias_reg+0x44>
    if (i2c_write(st.hw->addr, 0x17, 2, &data[4]))
 8000de4:	6860      	ldr	r0, [r4, #4]
 8000de6:	ab01      	add	r3, sp, #4
 8000de8:	2202      	movs	r2, #2
 8000dea:	2117      	movs	r1, #23
 8000dec:	7800      	ldrb	r0, [r0, #0]
 8000dee:	f002 f87b 	bl	8002ee8 <i2c_write>
 8000df2:	3000      	adds	r0, #0
 8000df4:	bf18      	it	ne
 8000df6:	2001      	movne	r0, #1
 8000df8:	4240      	negs	r0, r0
 8000dfa:	e7e7      	b.n	8000dcc <mpu_set_gyro_bias_reg+0x48>
 8000dfc:	20000000 	.word	0x20000000

08000e00 <mpu_set_accel_bias_6500_reg>:
 *  in +-16G format.
 *  @param[in]  accel_bias  New biases.
 *  @return     0 if successful.
 */
int mpu_set_accel_bias_6500_reg(const long *accel_bias) {
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 8000e00:	2300      	movs	r3, #0
int mpu_set_accel_bias_6500_reg(const long *accel_bias) {
 8000e02:	b510      	push	{r4, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	4604      	mov	r4, r0
    long accel_reg_bias[3] = {0, 0, 0};

    if(mpu_read_6500_accel_bias(accel_reg_bias))
 8000e08:	a803      	add	r0, sp, #12
    unsigned char data[6] = {0, 0, 0, 0, 0, 0};
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	f8ad 3008 	strh.w	r3, [sp, #8]
    long accel_reg_bias[3] = {0, 0, 0};
 8000e10:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e14:	9305      	str	r3, [sp, #20]
    if(mpu_read_6500_accel_bias(accel_reg_bias))
 8000e16:	f7ff ff81 	bl	8000d1c <mpu_read_6500_accel_bias>
 8000e1a:	b118      	cbz	r0, 8000e24 <mpu_set_accel_bias_6500_reg+0x24>
        return -1;
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
        return -1;
    if (i2c_write(st.hw->addr, 0x7D, 2, &data[4]))
        return -1;

    return 0;
}
 8000e20:	b006      	add	sp, #24
 8000e22:	bd10      	pop	{r4, pc}
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000e24:	6821      	ldr	r1, [r4, #0]
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000e26:	6862      	ldr	r2, [r4, #4]
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000e28:	f021 0301 	bic.w	r3, r1, #1
 8000e2c:	9903      	ldr	r1, [sp, #12]
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000e2e:	68a0      	ldr	r0, [r4, #8]
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000e30:	1ac9      	subs	r1, r1, r3
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000e32:	f022 0301 	bic.w	r3, r2, #1
 8000e36:	9a04      	ldr	r2, [sp, #16]
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000e38:	f020 0001 	bic.w	r0, r0, #1
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000e3c:	1ad2      	subs	r2, r2, r3
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000e3e:	9b05      	ldr	r3, [sp, #20]
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000e40:	4c19      	ldr	r4, [pc, #100]	; (8000ea8 <mpu_set_accel_bias_6500_reg+0xa8>)
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000e42:	1a1b      	subs	r3, r3, r0
    data[0] = (accel_reg_bias[0] >> 8) & 0xff;
 8000e44:	1208      	asrs	r0, r1, #8
    accel_reg_bias[0] -= (accel_bias[0] & ~1);
 8000e46:	9103      	str	r1, [sp, #12]
    accel_reg_bias[1] -= (accel_bias[1] & ~1);
 8000e48:	9204      	str	r2, [sp, #16]
    data[0] = (accel_reg_bias[0] >> 8) & 0xff;
 8000e4a:	f88d 0004 	strb.w	r0, [sp, #4]
    data[1] = (accel_reg_bias[0]) & 0xff;
 8000e4e:	f88d 1005 	strb.w	r1, [sp, #5]
    data[3] = (accel_reg_bias[1]) & 0xff;
 8000e52:	f88d 2007 	strb.w	r2, [sp, #7]
    data[2] = (accel_reg_bias[1] >> 8) & 0xff;
 8000e56:	1211      	asrs	r1, r2, #8
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000e58:	6860      	ldr	r0, [r4, #4]
    data[4] = (accel_reg_bias[2] >> 8) & 0xff;
 8000e5a:	121a      	asrs	r2, r3, #8
    accel_reg_bias[2] -= (accel_bias[2] & ~1);
 8000e5c:	9305      	str	r3, [sp, #20]
    data[2] = (accel_reg_bias[1] >> 8) & 0xff;
 8000e5e:	f88d 1006 	strb.w	r1, [sp, #6]
    data[4] = (accel_reg_bias[2] >> 8) & 0xff;
 8000e62:	f88d 2008 	strb.w	r2, [sp, #8]
    data[5] = (accel_reg_bias[2]) & 0xff;
 8000e66:	f88d 3009 	strb.w	r3, [sp, #9]
    if (i2c_write(st.hw->addr, 0x77, 2, &data[0]))
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	ab01      	add	r3, sp, #4
 8000e6e:	2177      	movs	r1, #119	; 0x77
 8000e70:	7800      	ldrb	r0, [r0, #0]
 8000e72:	f002 f839 	bl	8002ee8 <i2c_write>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d1d0      	bne.n	8000e1c <mpu_set_accel_bias_6500_reg+0x1c>
    if (i2c_write(st.hw->addr, 0x7A, 2, &data[2]))
 8000e7a:	6860      	ldr	r0, [r4, #4]
 8000e7c:	f10d 0306 	add.w	r3, sp, #6
 8000e80:	2202      	movs	r2, #2
 8000e82:	217a      	movs	r1, #122	; 0x7a
 8000e84:	7800      	ldrb	r0, [r0, #0]
 8000e86:	f002 f82f 	bl	8002ee8 <i2c_write>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	d1c6      	bne.n	8000e1c <mpu_set_accel_bias_6500_reg+0x1c>
    if (i2c_write(st.hw->addr, 0x7D, 2, &data[4]))
 8000e8e:	6860      	ldr	r0, [r4, #4]
 8000e90:	ab02      	add	r3, sp, #8
 8000e92:	2202      	movs	r2, #2
 8000e94:	217d      	movs	r1, #125	; 0x7d
 8000e96:	7800      	ldrb	r0, [r0, #0]
 8000e98:	f002 f826 	bl	8002ee8 <i2c_write>
 8000e9c:	3000      	adds	r0, #0
 8000e9e:	bf18      	it	ne
 8000ea0:	2001      	movne	r0, #1
 8000ea2:	4240      	negs	r0, r0
 8000ea4:	e7bc      	b.n	8000e20 <mpu_set_accel_bias_6500_reg+0x20>
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000

08000eac <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000eae:	4c4e      	ldr	r4, [pc, #312]	; (8000fe8 <mpu_reset_fifo+0x13c>)
 8000eb0:	7aa3      	ldrb	r3, [r4, #10]
 8000eb2:	b91b      	cbnz	r3, 8000ebc <mpu_reset_fifo+0x10>
        return -1;
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000eb8:	b003      	add	sp, #12
 8000eba:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000ebc:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000ebe:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8000ec2:	ad02      	add	r5, sp, #8
 8000ec4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000ec8:	462b      	mov	r3, r5
 8000eca:	2201      	movs	r2, #1
 8000ecc:	7c49      	ldrb	r1, [r1, #17]
 8000ece:	7800      	ldrb	r0, [r0, #0]
 8000ed0:	f002 f80a 	bl	8002ee8 <i2c_write>
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d1ed      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000ed8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000edc:	462b      	mov	r3, r5
 8000ede:	2201      	movs	r2, #1
 8000ee0:	7949      	ldrb	r1, [r1, #5]
 8000ee2:	7800      	ldrb	r0, [r0, #0]
 8000ee4:	f002 f800 	bl	8002ee8 <i2c_write>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d1e3      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000eec:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000ef0:	462b      	mov	r3, r5
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	7909      	ldrb	r1, [r1, #4]
 8000ef6:	7800      	ldrb	r0, [r0, #0]
 8000ef8:	f001 fff6 	bl	8002ee8 <i2c_write>
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d1d9      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
 8000f00:	6863      	ldr	r3, [r4, #4]
 8000f02:	7818      	ldrb	r0, [r3, #0]
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8000f08:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d039      	beq.n	8000f84 <mpu_reset_fifo+0xd8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000f10:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f12:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000f14:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f18:	462b      	mov	r3, r5
 8000f1a:	f001 ffe5 	bl	8002ee8 <i2c_write>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d1c8      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f22:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000f2c:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f2e:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000f30:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8000f32:	bf44      	itt	mi
 8000f34:	23e0      	movmi	r3, #224	; 0xe0
 8000f36:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	7800      	ldrb	r0, [r0, #0]
 8000f40:	f001 ffd2 	bl	8002ee8 <i2c_write>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1b5      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000f48:	7c63      	ldrb	r3, [r4, #17]
 8000f4a:	b103      	cbz	r3, 8000f4e <mpu_reset_fifo+0xa2>
            data = BIT_DMP_INT_EN;
 8000f4c:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000f4e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000f52:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000f56:	2201      	movs	r2, #1
 8000f58:	462b      	mov	r3, r5
 8000f5a:	7c49      	ldrb	r1, [r1, #17]
 8000f5c:	7800      	ldrb	r0, [r0, #0]
 8000f5e:	f001 ffc3 	bl	8002ee8 <i2c_write>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d1a6      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000f66:	462b      	mov	r3, r5
        data = 0;
 8000f68:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000f6c:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000f70:	2201      	movs	r2, #1
 8000f72:	7949      	ldrb	r1, [r1, #5]
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	f001 ffb7 	bl	8002ee8 <i2c_write>
 8000f7a:	3000      	adds	r0, #0
 8000f7c:	bf18      	it	ne
 8000f7e:	2001      	movne	r0, #1
 8000f80:	4240      	negs	r0, r0
 8000f82:	e799      	b.n	8000eb8 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8000f84:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f86:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000f88:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000f8c:	462b      	mov	r3, r5
 8000f8e:	f001 ffab 	bl	8002ee8 <i2c_write>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d18e      	bne.n	8000eb4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000f96:	7ca3      	ldrb	r3, [r4, #18]
 8000f98:	b913      	cbnz	r3, 8000fa0 <mpu_reset_fifo+0xf4>
 8000f9a:	7aa3      	ldrb	r3, [r4, #10]
 8000f9c:	07db      	lsls	r3, r3, #31
 8000f9e:	d421      	bmi.n	8000fe4 <mpu_reset_fifo+0x138>
            data = BIT_FIFO_EN;
 8000fa0:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000fa2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000fa6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000faa:	2201      	movs	r2, #1
 8000fac:	462b      	mov	r3, r5
 8000fae:	7909      	ldrb	r1, [r1, #4]
 8000fb0:	7800      	ldrb	r0, [r0, #0]
 8000fb2:	f001 ff99 	bl	8002ee8 <i2c_write>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	f47f af7c 	bne.w	8000eb4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000fbc:	7c63      	ldrb	r3, [r4, #17]
 8000fbe:	b103      	cbz	r3, 8000fc2 <mpu_reset_fifo+0x116>
            data = BIT_DATA_RDY_EN;
 8000fc0:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000fc2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000fc6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000fca:	2201      	movs	r2, #1
 8000fcc:	462b      	mov	r3, r5
 8000fce:	7c49      	ldrb	r1, [r1, #17]
 8000fd0:	7800      	ldrb	r0, [r0, #0]
 8000fd2:	f001 ff89 	bl	8002ee8 <i2c_write>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f47f af6c 	bne.w	8000eb4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000fdc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <mpu_reset_fifo+0x140>)
 8000fe2:	e7c5      	b.n	8000f70 <mpu_reset_fifo+0xc4>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	e7dc      	b.n	8000fa2 <mpu_reset_fifo+0xf6>
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000010 	.word	0x20000010

08000ff0 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8000ff0:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000ff2:	4c1a      	ldr	r4, [pc, #104]	; (800105c <mpu_set_gyro_fsr+0x6c>)
 8000ff4:	7aa3      	ldrb	r3, [r4, #10]
 8000ff6:	b913      	cbnz	r3, 8000ffe <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	e01d      	b.n	800103a <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8000ffe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001002:	d024      	beq.n	800104e <mpu_set_gyro_fsr+0x5e>
 8001004:	d81b      	bhi.n	800103e <mpu_set_gyro_fsr+0x4e>
 8001006:	28fa      	cmp	r0, #250	; 0xfa
 8001008:	d1f6      	bne.n	8000ff8 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 800100a:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 800100c:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001010:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001014:	7a23      	ldrb	r3, [r4, #8]
 8001016:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 800101a:	d01c      	beq.n	8001056 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800101c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001020:	f10d 0307 	add.w	r3, sp, #7
 8001024:	2201      	movs	r2, #1
 8001026:	7989      	ldrb	r1, [r1, #6]
 8001028:	7800      	ldrb	r0, [r0, #0]
 800102a:	f001 ff5d 	bl	8002ee8 <i2c_write>
 800102e:	2800      	cmp	r0, #0
 8001030:	d1e2      	bne.n	8000ff8 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8001032:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	7223      	strb	r3, [r4, #8]
    return 0;
}
 800103a:	b002      	add	sp, #8
 800103c:	bd10      	pop	{r4, pc}
    switch (fsr) {
 800103e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001042:	d006      	beq.n	8001052 <mpu_set_gyro_fsr+0x62>
 8001044:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001048:	d1d6      	bne.n	8000ff8 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 800104a:	2318      	movs	r3, #24
 800104c:	e7de      	b.n	800100c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 800104e:	2308      	movs	r3, #8
 8001050:	e7dc      	b.n	800100c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8001052:	2310      	movs	r3, #16
 8001054:	e7da      	b.n	800100c <mpu_set_gyro_fsr+0x1c>
        return 0;
 8001056:	2000      	movs	r0, #0
 8001058:	e7ef      	b.n	800103a <mpu_set_gyro_fsr+0x4a>
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000

08001060 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001060:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001062:	4c18      	ldr	r4, [pc, #96]	; (80010c4 <mpu_set_accel_fsr+0x64>)
 8001064:	7aa3      	ldrb	r3, [r4, #10]
 8001066:	b913      	cbnz	r3, 800106e <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	e01c      	b.n	80010a8 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 800106e:	2804      	cmp	r0, #4
 8001070:	d022      	beq.n	80010b8 <mpu_set_accel_fsr+0x58>
 8001072:	d81b      	bhi.n	80010ac <mpu_set_accel_fsr+0x4c>
 8001074:	2802      	cmp	r0, #2
 8001076:	d1f7      	bne.n	8001068 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8001078:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 800107a:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800107e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001082:	7a63      	ldrb	r3, [r4, #9]
 8001084:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8001088:	d01a      	beq.n	80010c0 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800108a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800108e:	f10d 0307 	add.w	r3, sp, #7
 8001092:	2201      	movs	r2, #1
 8001094:	79c9      	ldrb	r1, [r1, #7]
 8001096:	7800      	ldrb	r0, [r0, #0]
 8001098:	f001 ff26 	bl	8002ee8 <i2c_write>
 800109c:	2800      	cmp	r0, #0
 800109e:	d1e3      	bne.n	8001068 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 80010a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	7263      	strb	r3, [r4, #9]
    return 0;
}
 80010a8:	b002      	add	sp, #8
 80010aa:	bd10      	pop	{r4, pc}
    switch (fsr) {
 80010ac:	2808      	cmp	r0, #8
 80010ae:	d005      	beq.n	80010bc <mpu_set_accel_fsr+0x5c>
 80010b0:	2810      	cmp	r0, #16
 80010b2:	d1d9      	bne.n	8001068 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 80010b4:	2318      	movs	r3, #24
 80010b6:	e7e0      	b.n	800107a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 80010b8:	2308      	movs	r3, #8
 80010ba:	e7de      	b.n	800107a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 80010bc:	2310      	movs	r3, #16
 80010be:	e7dc      	b.n	800107a <mpu_set_accel_fsr+0x1a>
        return 0;
 80010c0:	2000      	movs	r0, #0
 80010c2:	e7f1      	b.n	80010a8 <mpu_set_accel_fsr+0x48>
 80010c4:	20000000 	.word	0x20000000

080010c8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80010c8:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80010ca:	4c19      	ldr	r4, [pc, #100]	; (8001130 <mpu_set_lpf+0x68>)
 80010cc:	7aa3      	ldrb	r3, [r4, #10]
 80010ce:	b91b      	cbnz	r3, 80010d8 <mpu_set_lpf+0x10>
        return -1;
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 80010d4:	b002      	add	sp, #8
 80010d6:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 80010d8:	28bb      	cmp	r0, #187	; 0xbb
 80010da:	d916      	bls.n	800110a <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 80010dc:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 80010de:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 80010e2:	7ae2      	ldrb	r2, [r4, #11]
 80010e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d01f      	beq.n	800112c <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80010ec:	e9d4 1000 	ldrd	r1, r0, [r4]
 80010f0:	f10d 0307 	add.w	r3, sp, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	7889      	ldrb	r1, [r1, #2]
 80010f8:	7800      	ldrb	r0, [r0, #0]
 80010fa:	f001 fef5 	bl	8002ee8 <i2c_write>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d1e6      	bne.n	80010d0 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8001102:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001106:	72e3      	strb	r3, [r4, #11]
    return 0;
 8001108:	e7e4      	b.n	80010d4 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 800110a:	2861      	cmp	r0, #97	; 0x61
 800110c:	d901      	bls.n	8001112 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 800110e:	2302      	movs	r3, #2
 8001110:	e7e5      	b.n	80010de <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8001112:	2829      	cmp	r0, #41	; 0x29
 8001114:	d901      	bls.n	800111a <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8001116:	2303      	movs	r3, #3
 8001118:	e7e1      	b.n	80010de <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 800111a:	2813      	cmp	r0, #19
 800111c:	d901      	bls.n	8001122 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 800111e:	2304      	movs	r3, #4
 8001120:	e7dd      	b.n	80010de <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8001122:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8001124:	bf8c      	ite	hi
 8001126:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8001128:	2306      	movls	r3, #6
 800112a:	e7d8      	b.n	80010de <mpu_set_lpf+0x16>
        return 0;
 800112c:	2000      	movs	r0, #0
 800112e:	e7d1      	b.n	80010d4 <mpu_set_lpf+0xc>
 8001130:	20000000 	.word	0x20000000

08001134 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8001134:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001136:	b918      	cbnz	r0, 8001140 <mpu_set_compass_sample_rate+0xc>
        return -1;
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 800113c:	b002      	add	sp, #8
 800113e:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001140:	4c0e      	ldr	r4, [pc, #56]	; (800117c <mpu_set_compass_sample_rate+0x48>)
 8001142:	89e3      	ldrh	r3, [r4, #14]
 8001144:	4283      	cmp	r3, r0
 8001146:	d3f7      	bcc.n	8001138 <mpu_set_compass_sample_rate+0x4>
 8001148:	2864      	cmp	r0, #100	; 0x64
 800114a:	d8f5      	bhi.n	8001138 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 800114c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001150:	ab02      	add	r3, sp, #8
 8001152:	3801      	subs	r0, #1
 8001154:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001158:	2201      	movs	r2, #1
 800115a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800115e:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8001162:	7800      	ldrb	r0, [r0, #0]
 8001164:	f001 fec0 	bl	8002ee8 <i2c_write>
 8001168:	2800      	cmp	r0, #0
 800116a:	d1e5      	bne.n	8001138 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800116c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001170:	89e3      	ldrh	r3, [r4, #14]
 8001172:	3201      	adds	r2, #1
 8001174:	fb93 f3f2 	sdiv	r3, r3, r2
 8001178:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 800117a:	e7df      	b.n	800113c <mpu_set_compass_sample_rate+0x8>
 800117c:	20000000 	.word	0x20000000

08001180 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <mpu_configure_fifo+0x4c>)
 8001184:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001188:	461e      	mov	r6, r3
 800118a:	b9e2      	cbnz	r2, 80011c6 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 800118c:	7a9c      	ldrb	r4, [r3, #10]
 800118e:	b19c      	cbz	r4, 80011b8 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8001190:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001194:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8001196:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001198:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800119a:	1b64      	subs	r4, r4, r5
 800119c:	bf18      	it	ne
 800119e:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 80011a2:	b90d      	cbnz	r5, 80011a8 <mpu_configure_fifo+0x28>
 80011a4:	7d18      	ldrb	r0, [r3, #20]
 80011a6:	b150      	cbz	r0, 80011be <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff fd8d 	bl	8000cc8 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 80011ae:	b145      	cbz	r5, 80011c2 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 80011b0:	f7ff fe7c 	bl	8000eac <mpu_reset_fifo>
 80011b4:	b128      	cbz	r0, 80011c2 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 80011b6:	7437      	strb	r7, [r6, #16]
            return -1;
 80011b8:	f04f 34ff 	mov.w	r4, #4294967295
 80011bc:	e001      	b.n	80011c2 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 80011be:	f7ff fd83 	bl	8000cc8 <set_int_enable>
            }
        }
    }

    return result;
}
 80011c2:	4620      	mov	r0, r4
 80011c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80011c6:	2400      	movs	r4, #0
 80011c8:	e7fb      	b.n	80011c2 <mpu_configure_fifo+0x42>
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000

080011d0 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80011d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 80011d4:	4d24      	ldr	r5, [pc, #144]	; (8001268 <mpu_read_fifo_stream+0x98>)
{
 80011d6:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 80011d8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 80011dc:	4689      	mov	r9, r1
 80011de:	4617      	mov	r7, r2
 80011e0:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 80011e2:	b923      	cbnz	r3, 80011ee <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 80011e8:	b003      	add	sp, #12
 80011ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 80011ee:	7aab      	ldrb	r3, [r5, #10]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f7      	beq.n	80011e4 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 80011f4:	e9d5 1000 	ldrd	r1, r0, [r5]
 80011f8:	ab01      	add	r3, sp, #4
 80011fa:	2202      	movs	r2, #2
 80011fc:	7b09      	ldrb	r1, [r1, #12]
 80011fe:	7800      	ldrb	r0, [r0, #0]
 8001200:	f001 fe80 	bl	8002f04 <i2c_read>
 8001204:	2800      	cmp	r0, #0
 8001206:	d1ed      	bne.n	80011e4 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800120c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001210:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001214:	42b4      	cmp	r4, r6
 8001216:	d201      	bcs.n	800121c <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8001218:	7038      	strb	r0, [r7, #0]
 800121a:	e7e3      	b.n	80011e4 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800121c:	6868      	ldr	r0, [r5, #4]
 800121e:	8843      	ldrh	r3, [r0, #2]
 8001220:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8001224:	d911      	bls.n	800124a <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001226:	6829      	ldr	r1, [r5, #0]
 8001228:	ab01      	add	r3, sp, #4
 800122a:	2201      	movs	r2, #1
 800122c:	7cc9      	ldrb	r1, [r1, #19]
 800122e:	7800      	ldrb	r0, [r0, #0]
 8001230:	f001 fe68 	bl	8002f04 <i2c_read>
 8001234:	2800      	cmp	r0, #0
 8001236:	d1d5      	bne.n	80011e4 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001238:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800123c:	06db      	lsls	r3, r3, #27
 800123e:	d504      	bpl.n	800124a <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 8001240:	f7ff fe34 	bl	8000eac <mpu_reset_fifo>
            return -2;
 8001244:	f06f 0001 	mvn.w	r0, #1
 8001248:	e7ce      	b.n	80011e8 <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800124a:	e9d8 1000 	ldrd	r1, r0, [r8]
 800124e:	464b      	mov	r3, r9
 8001250:	b2f2      	uxtb	r2, r6
 8001252:	7b49      	ldrb	r1, [r1, #13]
 8001254:	7800      	ldrb	r0, [r0, #0]
 8001256:	f001 fe55 	bl	8002f04 <i2c_read>
 800125a:	2800      	cmp	r0, #0
 800125c:	d1c2      	bne.n	80011e4 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 800125e:	fbb4 f4f6 	udiv	r4, r4, r6
 8001262:	3c01      	subs	r4, #1
 8001264:	703c      	strb	r4, [r7, #0]
    return 0;
 8001266:	e7bf      	b.n	80011e8 <mpu_read_fifo_stream+0x18>
 8001268:	20000000 	.word	0x20000000

0800126c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800126c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800126e:	4c36      	ldr	r4, [pc, #216]	; (8001348 <mpu_set_bypass+0xdc>)
{
 8001270:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001272:	7ca3      	ldrb	r3, [r4, #18]
 8001274:	4283      	cmp	r3, r0
 8001276:	d041      	beq.n	80012fc <mpu_set_bypass+0x90>
 8001278:	6863      	ldr	r3, [r4, #4]
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800127a:	2201      	movs	r2, #1
 800127c:	7818      	ldrb	r0, [r3, #0]
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	7919      	ldrb	r1, [r3, #4]
 8001282:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8001286:	2d00      	cmp	r5, #0
 8001288:	d03a      	beq.n	8001300 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800128a:	f001 fe3b 	bl	8002f04 <i2c_read>
 800128e:	b118      	cbz	r0, 8001298 <mpu_set_bypass+0x2c>
            return -1;
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8001294:	b003      	add	sp, #12
 8001296:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8001298:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800129c:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 80012a0:	f023 0320 	bic.w	r3, r3, #32
 80012a4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80012a8:	2201      	movs	r2, #1
 80012aa:	f10d 0307 	add.w	r3, sp, #7
 80012ae:	7909      	ldrb	r1, [r1, #4]
 80012b0:	7800      	ldrb	r0, [r0, #0]
 80012b2:	f001 fe19 	bl	8002ee8 <i2c_write>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d1ea      	bne.n	8001290 <mpu_set_bypass+0x24>
        delay_ms(3);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f001 fe30 	bl	8002f20 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80012c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80012ca:	b113      	cbz	r3, 80012d2 <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 80012cc:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 80012ce:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80012d2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80012d6:	b12b      	cbz	r3, 80012e4 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80012d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012e0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80012e4:	e9d4 1000 	ldrd	r1, r0, [r4]
 80012e8:	f10d 0307 	add.w	r3, sp, #7
 80012ec:	2201      	movs	r2, #1
 80012ee:	7dc9      	ldrb	r1, [r1, #23]
 80012f0:	7800      	ldrb	r0, [r0, #0]
 80012f2:	f001 fdf9 	bl	8002ee8 <i2c_write>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d1ca      	bne.n	8001290 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 80012fa:	74a5      	strb	r5, [r4, #18]
        return 0;
 80012fc:	2000      	movs	r0, #0
 80012fe:	e7c9      	b.n	8001294 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001300:	f001 fe00 	bl	8002f04 <i2c_read>
 8001304:	2800      	cmp	r0, #0
 8001306:	d1c3      	bne.n	8001290 <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001308:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800130c:	7aa2      	ldrb	r2, [r4, #10]
 800130e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001312:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001314:	bf4c      	ite	mi
 8001316:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 800131a:	f023 0320 	bicpl.w	r3, r3, #32
 800131e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001322:	2201      	movs	r2, #1
 8001324:	f10d 0307 	add.w	r3, sp, #7
 8001328:	7909      	ldrb	r1, [r1, #4]
 800132a:	7800      	ldrb	r0, [r0, #0]
 800132c:	f001 fddc 	bl	8002ee8 <i2c_write>
 8001330:	2800      	cmp	r0, #0
 8001332:	d1ad      	bne.n	8001290 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001334:	2003      	movs	r0, #3
 8001336:	f001 fdf3 	bl	8002f20 <delay_ms>
        if (st.chip_cfg.active_low_int)
 800133a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0c5      	beq.n	80012ce <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	e7c3      	b.n	80012ce <mpu_set_bypass+0x62>
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000

0800134c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800134c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800134e:	4c18      	ldr	r4, [pc, #96]	; (80013b0 <mpu_set_int_latched+0x64>)
{
 8001350:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8001352:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001356:	4283      	cmp	r3, r0
 8001358:	d028      	beq.n	80013ac <mpu_set_int_latched+0x60>
        return 0;

    if (enable)
 800135a:	b308      	cbz	r0, 80013a0 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800135c:	2330      	movs	r3, #48	; 0x30
 800135e:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8001362:	7ca3      	ldrb	r3, [r4, #18]
 8001364:	b12b      	cbz	r3, 8001372 <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8001366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8001372:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001376:	b12b      	cbz	r3, 8001384 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001378:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800137c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001380:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001384:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001388:	f10d 0307 	add.w	r3, sp, #7
 800138c:	2201      	movs	r2, #1
 800138e:	7dc9      	ldrb	r1, [r1, #23]
 8001390:	7800      	ldrb	r0, [r0, #0]
 8001392:	f001 fda9 	bl	8002ee8 <i2c_write>
 8001396:	b930      	cbnz	r0, 80013a6 <mpu_set_int_latched+0x5a>
        return -1;
    st.chip_cfg.latched_int = enable;
 8001398:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 800139c:	b003      	add	sp, #12
 800139e:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 80013a0:	f88d 0007 	strb.w	r0, [sp, #7]
 80013a4:	e7dd      	b.n	8001362 <mpu_set_int_latched+0x16>
        return -1;
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	e7f7      	b.n	800139c <mpu_set_int_latched+0x50>
        return 0;
 80013ac:	2000      	movs	r0, #0
 80013ae:	e7f5      	b.n	800139c <mpu_set_int_latched+0x50>
 80013b0:	20000000 	.word	0x20000000

080013b4 <mpu_lp_accel_mode>:
    if (rate > 40)
 80013b4:	2828      	cmp	r0, #40	; 0x28
{
 80013b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013b8:	4605      	mov	r5, r0
    if (rate > 40)
 80013ba:	d902      	bls.n	80013c2 <mpu_lp_accel_mode+0xe>
        return -1;
 80013bc:	f04f 35ff 	mov.w	r5, #4294967295
 80013c0:	e013      	b.n	80013ea <mpu_lp_accel_mode+0x36>
 80013c2:	4c28      	ldr	r4, [pc, #160]	; (8001464 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 80013c4:	b9a0      	cbnz	r0, 80013f0 <mpu_lp_accel_mode+0x3c>
        mpu_set_int_latched(0);
 80013c6:	f7ff ffc1 	bl	800134c <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013ca:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 80013ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013d2:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013d6:	2202      	movs	r2, #2
 80013d8:	ab01      	add	r3, sp, #4
 80013da:	7d49      	ldrb	r1, [r1, #21]
 80013dc:	7800      	ldrb	r0, [r0, #0]
 80013de:	f001 fd83 	bl	8002ee8 <i2c_write>
 80013e2:	4605      	mov	r5, r0
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d1e9      	bne.n	80013bc <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 80013e8:	7520      	strb	r0, [r4, #20]
}
 80013ea:	4628      	mov	r0, r5
 80013ec:	b003      	add	sp, #12
 80013ee:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ffab 	bl	800134c <mpu_set_int_latched>
    if (rate == 1)
 80013f6:	2d01      	cmp	r5, #1
 80013f8:	d122      	bne.n	8001440 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_1_25HZ;
 80013fa:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80013fc:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_40HZ;
 8001400:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001404:	2201      	movs	r2, #1
 8001406:	ab01      	add	r3, sp, #4
 8001408:	7a49      	ldrb	r1, [r1, #9]
 800140a:	7800      	ldrb	r0, [r0, #0]
 800140c:	f001 fd6c 	bl	8002ee8 <i2c_write>
 8001410:	2800      	cmp	r0, #0
 8001412:	d1d3      	bne.n	80013bc <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001414:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8001418:	2320      	movs	r3, #32
 800141a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800141e:	2201      	movs	r2, #1
 8001420:	ab01      	add	r3, sp, #4
 8001422:	7d49      	ldrb	r1, [r1, #21]
 8001424:	7800      	ldrb	r0, [r0, #0]
 8001426:	f001 fd5f 	bl	8002ee8 <i2c_write>
 800142a:	4605      	mov	r5, r0
 800142c:	2800      	cmp	r0, #0
 800142e:	d1c5      	bne.n	80013bc <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001430:	2308      	movs	r3, #8
 8001432:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8001434:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8001436:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001438:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 800143a:	f7ff fea1 	bl	8001180 <mpu_configure_fifo>
 800143e:	e7d4      	b.n	80013ea <mpu_lp_accel_mode+0x36>
    else if (rate == 2)
 8001440:	2d02      	cmp	r5, #2
 8001442:	d101      	bne.n	8001448 <mpu_lp_accel_mode+0x94>
        tmp[0] = INV_LPA_2_5HZ;
 8001444:	2303      	movs	r3, #3
 8001446:	e7d9      	b.n	80013fc <mpu_lp_accel_mode+0x48>
    else if (rate <= 5)
 8001448:	2d05      	cmp	r5, #5
 800144a:	d801      	bhi.n	8001450 <mpu_lp_accel_mode+0x9c>
        tmp[0] = INV_LPA_5HZ;
 800144c:	2304      	movs	r3, #4
 800144e:	e7d5      	b.n	80013fc <mpu_lp_accel_mode+0x48>
    else if (rate <= 10)
 8001450:	2d0a      	cmp	r5, #10
 8001452:	d801      	bhi.n	8001458 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_10HZ;
 8001454:	2305      	movs	r3, #5
 8001456:	e7d1      	b.n	80013fc <mpu_lp_accel_mode+0x48>
    else if (rate <= 20)
 8001458:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 800145a:	bf94      	ite	ls
 800145c:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 800145e:	2307      	movhi	r3, #7
 8001460:	e7cc      	b.n	80013fc <mpu_lp_accel_mode+0x48>
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000

08001468 <mpu_set_sample_rate>:
{
 8001468:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <mpu_set_sample_rate+0x8c>)
{
 800146c:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 800146e:	7a9a      	ldrb	r2, [r3, #10]
 8001470:	461e      	mov	r6, r3
 8001472:	b922      	cbnz	r2, 800147e <mpu_set_sample_rate+0x16>
        return -1;
 8001474:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001478:	4620      	mov	r0, r4
 800147a:	b002      	add	sp, #8
 800147c:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 800147e:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8001482:	2d00      	cmp	r5, #0
 8001484:	d1f6      	bne.n	8001474 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001486:	7d1b      	ldrb	r3, [r3, #20]
 8001488:	b14b      	cbz	r3, 800149e <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 800148a:	1e43      	subs	r3, r0, #1
 800148c:	2b27      	cmp	r3, #39	; 0x27
 800148e:	d803      	bhi.n	8001498 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8001490:	f7ff ff90 	bl	80013b4 <mpu_lp_accel_mode>
                return 0;
 8001494:	462c      	mov	r4, r5
 8001496:	e7ef      	b.n	8001478 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff ff8b 	bl	80013b4 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800149e:	e9d6 1000 	ldrd	r1, r0, [r6]
 80014a2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80014a6:	bf28      	it	cs
 80014a8:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80014ac:	2c04      	cmp	r4, #4
 80014ae:	bf38      	it	cc
 80014b0:	2404      	movcc	r4, #4
 80014b2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80014b6:	fb95 f4f4 	sdiv	r4, r5, r4
 80014ba:	ab02      	add	r3, sp, #8
 80014bc:	3c01      	subs	r4, #1
 80014be:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80014c2:	2201      	movs	r2, #1
 80014c4:	7849      	ldrb	r1, [r1, #1]
 80014c6:	7800      	ldrb	r0, [r0, #0]
 80014c8:	f001 fd0e 	bl	8002ee8 <i2c_write>
 80014cc:	4604      	mov	r4, r0
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d1d0      	bne.n	8001474 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80014d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80014d6:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80014d8:	3301      	adds	r3, #1
 80014da:	fb95 f5f3 	sdiv	r5, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80014de:	2864      	cmp	r0, #100	; 0x64
 80014e0:	bf28      	it	cs
 80014e2:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80014e4:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80014e6:	f7ff fe25 	bl	8001134 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80014ea:	89f0      	ldrh	r0, [r6, #14]
 80014ec:	0840      	lsrs	r0, r0, #1
 80014ee:	f7ff fdeb 	bl	80010c8 <mpu_set_lpf>
        return 0;
 80014f2:	e7c1      	b.n	8001478 <mpu_set_sample_rate+0x10>
 80014f4:	20000000 	.word	0x20000000

080014f8 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 80014f8:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 80014fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014fe:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8001500:	d014      	beq.n	800152c <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 8001502:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001504:	4c49      	ldr	r4, [pc, #292]	; (800162c <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8001506:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800150a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800150e:	f10d 0306 	add.w	r3, sp, #6
 8001512:	2201      	movs	r2, #1
 8001514:	7d49      	ldrb	r1, [r1, #21]
 8001516:	7800      	ldrb	r0, [r0, #0]
 8001518:	f001 fce6 	bl	8002ee8 <i2c_write>
 800151c:	b150      	cbz	r0, 8001534 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001522:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001526:	4630      	mov	r0, r6
 8001528:	b002      	add	sp, #8
 800152a:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 800152c:	2800      	cmp	r0, #0
 800152e:	d1e9      	bne.n	8001504 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	e7e7      	b.n	8001504 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001534:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001538:	2201      	movs	r2, #1
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800153a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800153e:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8001540:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 8001542:	bf56      	itet	pl
 8001544:	2304      	movpl	r3, #4
    data = 0;
 8001546:	f88d 0006 	strbmi.w	r0, [sp, #6]
        data |= BIT_STBY_XG;
 800154a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 800154e:	06ae      	lsls	r6, r5, #26
        data |= BIT_STBY_YG;
 8001550:	bf5e      	ittt	pl
 8001552:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001556:	f043 0302 	orrpl.w	r3, r3, #2
 800155a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800155e:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 8001560:	bf5e      	ittt	pl
 8001562:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001566:	f043 0301 	orrpl.w	r3, r3, #1
 800156a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800156e:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 8001570:	bf58      	it	pl
 8001572:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001576:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 800157a:	bf5c      	itt	pl
 800157c:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8001580:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001584:	7d89      	ldrb	r1, [r1, #22]
 8001586:	f10d 0306 	add.w	r3, sp, #6
 800158a:	7800      	ldrb	r0, [r0, #0]
 800158c:	f001 fcac 	bl	8002ee8 <i2c_write>
 8001590:	2800      	cmp	r0, #0
 8001592:	d1c4      	bne.n	800151e <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001594:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8001598:	d001      	beq.n	800159e <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 800159a:	f7ff fed7 	bl	800134c <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800159e:	e9d4 1000 	ldrd	r1, r0, [r4]
 80015a2:	f10d 0307 	add.w	r3, sp, #7
 80015a6:	2201      	movs	r2, #1
 80015a8:	7909      	ldrb	r1, [r1, #4]
 80015aa:	7800      	ldrb	r0, [r0, #0]
 80015ac:	f001 fcaa 	bl	8002f04 <i2c_read>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d1b6      	bne.n	8001522 <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 80015b4:	07ea      	lsls	r2, r5, #31
        data = AKM_SINGLE_MEASUREMENT;
 80015b6:	bf4c      	ite	mi
 80015b8:	2211      	movmi	r2, #17
        data = AKM_POWER_DOWN;
 80015ba:	2210      	movpl	r2, #16
 80015bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 80015c0:	bf47      	ittee	mi
 80015c2:	f88d 2006 	strbmi.w	r2, [sp, #6]
        user_ctrl |= BIT_AUX_IF_EN;
 80015c6:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 80015ca:	f023 0320 	bicpl.w	r3, r3, #32
        data = AKM_POWER_DOWN;
 80015ce:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80015d2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80015d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80015da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 80015de:	b30a      	cbz	r2, 8001624 <mpu_set_sensors+0x12c>
        user_ctrl |= BIT_DMP_EN;
 80015e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
        user_ctrl &= ~BIT_DMP_EN;
 80015e4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80015e8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80015ec:	f10d 0306 	add.w	r3, sp, #6
 80015f0:	2201      	movs	r2, #1
 80015f2:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80015f6:	7800      	ldrb	r0, [r0, #0]
 80015f8:	f001 fc76 	bl	8002ee8 <i2c_write>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d190      	bne.n	8001522 <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001600:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001604:	f10d 0307 	add.w	r3, sp, #7
 8001608:	2201      	movs	r2, #1
 800160a:	7909      	ldrb	r1, [r1, #4]
 800160c:	7800      	ldrb	r0, [r0, #0]
 800160e:	f001 fc6b 	bl	8002ee8 <i2c_write>
 8001612:	4606      	mov	r6, r0
 8001614:	2800      	cmp	r0, #0
 8001616:	d184      	bne.n	8001522 <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8001618:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 800161a:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 800161c:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 800161e:	f001 fc7f 	bl	8002f20 <delay_ms>
    return 0;
 8001622:	e780      	b.n	8001526 <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8001624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001628:	e7dc      	b.n	80015e4 <mpu_set_sensors+0xec>
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <mpu_init>:
{
 8001630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    data[0] = BIT_RESET;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001636:	4ca1      	ldr	r4, [pc, #644]	; (80018bc <mpu_init+0x28c>)
    data[0] = BIT_RESET;
 8001638:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800163c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001640:	462b      	mov	r3, r5
 8001642:	2201      	movs	r2, #1
 8001644:	7d49      	ldrb	r1, [r1, #21]
 8001646:	7800      	ldrb	r0, [r0, #0]
 8001648:	f001 fc4e 	bl	8002ee8 <i2c_write>
 800164c:	4606      	mov	r6, r0
 800164e:	b120      	cbz	r0, 800165a <mpu_init+0x2a>
        return -1;
 8001650:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001654:	4620      	mov	r0, r4
 8001656:	b004      	add	sp, #16
 8001658:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f001 fc60 	bl	8002f20 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001660:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 8001664:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001668:	462b      	mov	r3, r5
 800166a:	2201      	movs	r2, #1
 800166c:	7d49      	ldrb	r1, [r1, #21]
 800166e:	7800      	ldrb	r0, [r0, #0]
 8001670:	f001 fc3a 	bl	8002ee8 <i2c_write>
 8001674:	2800      	cmp	r0, #0
 8001676:	d1eb      	bne.n	8001650 <mpu_init+0x20>
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001678:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 800167a:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800167c:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001680:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001684:	462b      	mov	r3, r5
 8001686:	2201      	movs	r2, #1
 8001688:	7a09      	ldrb	r1, [r1, #8]
 800168a:	7800      	ldrb	r0, [r0, #0]
 800168c:	f001 fc2c 	bl	8002ee8 <i2c_write>
 8001690:	2800      	cmp	r0, #0
 8001692:	d1dd      	bne.n	8001650 <mpu_init+0x20>
    st.chip_cfg.sample_rate = 0xFFFF;
 8001694:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 8001698:	2501      	movs	r5, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 800169a:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800169c:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800169e:	8523      	strh	r3, [r4, #40]	; 0x28
    st.chip_cfg.gyro_fsr = 0xFF;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
    st.chip_cfg.bypass_mode = 0xFF;
 80016a4:	22ff      	movs	r2, #255	; 0xff
    st.chip_cfg.lp_accel_mode = 0;
 80016a6:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80016a8:	f8c4 0016 	str.w	r0, [r4, #22]
 80016ac:	f8c4 001a 	str.w	r0, [r4, #26]
 80016b0:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 80016b4:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80016b6:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80016b8:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80016ba:	8465      	strh	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 80016bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.bypass_mode = 0xFF;
 80016c0:	74a2      	strb	r2, [r4, #18]
    if (mpu_set_gyro_fsr(2000))
 80016c2:	f7ff fc95 	bl	8000ff0 <mpu_set_gyro_fsr>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d1c2      	bne.n	8001650 <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff fcc8 	bl	8001060 <mpu_set_accel_fsr>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d1bd      	bne.n	8001650 <mpu_init+0x20>
    if (mpu_set_lpf(42))
 80016d4:	202a      	movs	r0, #42	; 0x2a
 80016d6:	f7ff fcf7 	bl	80010c8 <mpu_set_lpf>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d1b8      	bne.n	8001650 <mpu_init+0x20>
    if (mpu_set_sample_rate(1000))
 80016de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e2:	f7ff fec1 	bl	8001468 <mpu_set_sample_rate>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d1b2      	bne.n	8001650 <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 80016ea:	f7ff fd49 	bl	8001180 <mpu_configure_fifo>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d1ae      	bne.n	8001650 <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 80016f2:	4628      	mov	r0, r5
 80016f4:	f7ff fdba 	bl	800126c <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80016f8:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80016fa:	ab01      	add	r3, sp, #4
 80016fc:	2201      	movs	r2, #1
 80016fe:	2100      	movs	r1, #0
 8001700:	4628      	mov	r0, r5
 8001702:	f001 fbff 	bl	8002f04 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8001706:	b918      	cbnz	r0, 8001710 <mpu_init+0xe0>
 8001708:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800170c:	2b48      	cmp	r3, #72	; 0x48
 800170e:	d00c      	beq.n	800172a <mpu_init+0xfa>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001710:	3501      	adds	r5, #1
 8001712:	b2ed      	uxtb	r5, r5
 8001714:	2d10      	cmp	r5, #16
 8001716:	d1f0      	bne.n	80016fa <mpu_init+0xca>
    if (mpu_set_compass_sample_rate(10))
 8001718:	200a      	movs	r0, #10
 800171a:	f7ff fd0b 	bl	8001134 <mpu_set_compass_sample_rate>
 800171e:	4604      	mov	r4, r0
 8001720:	2800      	cmp	r0, #0
 8001722:	d195      	bne.n	8001650 <mpu_init+0x20>
    mpu_set_sensors(0);
 8001724:	f7ff fee8 	bl	80014f8 <mpu_set_sensors>
    return 0;
 8001728:	e794      	b.n	8001654 <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 800172a:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800172c:	ab01      	add	r3, sp, #4
 800172e:	2201      	movs	r2, #1
 8001730:	210a      	movs	r1, #10
 8001732:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8001734:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001738:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800173c:	f001 fbd4 	bl	8002ee8 <i2c_write>
 8001740:	2800      	cmp	r0, #0
 8001742:	d1e9      	bne.n	8001718 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 fbeb 	bl	8002f20 <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 800174a:	231f      	movs	r3, #31
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800174c:	2201      	movs	r2, #1
    data[0] = AKM_FUSE_ROM_ACCESS;
 800174e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001752:	210a      	movs	r1, #10
 8001754:	ab01      	add	r3, sp, #4
 8001756:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800175a:	f001 fbc5 	bl	8002ee8 <i2c_write>
 800175e:	2800      	cmp	r0, #0
 8001760:	d1da      	bne.n	8001718 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 fbdc 	bl	8002f20 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001768:	ab01      	add	r3, sp, #4
 800176a:	2203      	movs	r2, #3
 800176c:	4631      	mov	r1, r6
 800176e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001772:	f001 fbc7 	bl	8002f04 <i2c_read>
 8001776:	2800      	cmp	r0, #0
 8001778:	d1ce      	bne.n	8001718 <mpu_init+0xe8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800177a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800177e:	2201      	movs	r2, #1
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001780:	3380      	adds	r3, #128	; 0x80
 8001782:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001784:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001788:	210a      	movs	r1, #10
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800178a:	3380      	adds	r3, #128	; 0x80
 800178c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800178e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001792:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001796:	3380      	adds	r3, #128	; 0x80
 8001798:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800179a:	ab01      	add	r3, sp, #4
    data[0] = AKM_POWER_DOWN;
 800179c:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80017a0:	f001 fba2 	bl	8002ee8 <i2c_write>
 80017a4:	4605      	mov	r5, r0
 80017a6:	2800      	cmp	r0, #0
 80017a8:	d1b6      	bne.n	8001718 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f001 fbb8 	bl	8002f20 <delay_ms>

    mpu_set_bypass(0);
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff fd5b 	bl	800126c <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80017b6:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80017c0:	2201      	movs	r2, #1
 80017c2:	ab01      	add	r3, sp, #4
 80017c4:	7e89      	ldrb	r1, [r1, #26]
 80017c6:	7800      	ldrb	r0, [r0, #0]
 80017c8:	f001 fb8e 	bl	8002ee8 <i2c_write>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d1a3      	bne.n	8001718 <mpu_init+0xe8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80017d0:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80017d4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80017d8:	2201      	movs	r2, #1
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80017da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017de:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80017e2:	7f89      	ldrb	r1, [r1, #30]
 80017e4:	ab01      	add	r3, sp, #4
 80017e6:	7800      	ldrb	r0, [r0, #0]
 80017e8:	f001 fb7e 	bl	8002ee8 <i2c_write>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d193      	bne.n	8001718 <mpu_init+0xe8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80017f0:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80017fa:	2201      	movs	r2, #1
 80017fc:	ab01      	add	r3, sp, #4
 80017fe:	7fc9      	ldrb	r1, [r1, #31]
 8001800:	7800      	ldrb	r0, [r0, #0]
 8001802:	f001 fb71 	bl	8002ee8 <i2c_write>
 8001806:	2800      	cmp	r0, #0
 8001808:	d186      	bne.n	8001718 <mpu_init+0xe8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800180a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800180e:	2388      	movs	r3, #136	; 0x88
 8001810:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001814:	2201      	movs	r2, #1
 8001816:	ab01      	add	r3, sp, #4
 8001818:	f891 1020 	ldrb.w	r1, [r1, #32]
 800181c:	7800      	ldrb	r0, [r0, #0]
 800181e:	f001 fb63 	bl	8002ee8 <i2c_write>
 8001822:	2800      	cmp	r0, #0
 8001824:	f47f af78 	bne.w	8001718 <mpu_init+0xe8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001828:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 800182c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001830:	2201      	movs	r2, #1
    data[0] = st.chip_cfg.compass_addr;
 8001832:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001836:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 800183a:	ab01      	add	r3, sp, #4
 800183c:	7800      	ldrb	r0, [r0, #0]
 800183e:	f001 fb53 	bl	8002ee8 <i2c_write>
 8001842:	2800      	cmp	r0, #0
 8001844:	f47f af68 	bne.w	8001718 <mpu_init+0xe8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001848:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 800184c:	230a      	movs	r3, #10
 800184e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001852:	2201      	movs	r2, #1
 8001854:	ab01      	add	r3, sp, #4
 8001856:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800185a:	7800      	ldrb	r0, [r0, #0]
 800185c:	f001 fb44 	bl	8002ee8 <i2c_write>
 8001860:	2800      	cmp	r0, #0
 8001862:	f47f af59 	bne.w	8001718 <mpu_init+0xe8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001866:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 800186a:	2381      	movs	r3, #129	; 0x81
 800186c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001870:	2201      	movs	r2, #1
 8001872:	ab01      	add	r3, sp, #4
 8001874:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001878:	7800      	ldrb	r0, [r0, #0]
 800187a:	f001 fb35 	bl	8002ee8 <i2c_write>
 800187e:	2800      	cmp	r0, #0
 8001880:	f47f af4a 	bne.w	8001718 <mpu_init+0xe8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001884:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001888:	2311      	movs	r3, #17
 800188a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800188e:	2201      	movs	r2, #1
 8001890:	ab01      	add	r3, sp, #4
 8001892:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001896:	7800      	ldrb	r0, [r0, #0]
 8001898:	f001 fb26 	bl	8002ee8 <i2c_write>
 800189c:	2800      	cmp	r0, #0
 800189e:	f47f af3b 	bne.w	8001718 <mpu_init+0xe8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80018a2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80018ac:	2201      	movs	r2, #1
 80018ae:	ab01      	add	r3, sp, #4
 80018b0:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80018b4:	7800      	ldrb	r0, [r0, #0]
 80018b6:	f001 fb17 	bl	8002ee8 <i2c_write>
 80018ba:	e72d      	b.n	8001718 <mpu_init+0xe8>
 80018bc:	20000000 	.word	0x20000000

080018c0 <mpu_write_mem>:
{
 80018c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018c2:	460d      	mov	r5, r1
    if (!data)
 80018c4:	4616      	mov	r6, r2
 80018c6:	b91a      	cbnz	r2, 80018d0 <mpu_write_mem+0x10>
        return -1;
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018cc:	b003      	add	sp, #12
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80018d0:	4c12      	ldr	r4, [pc, #72]	; (800191c <mpu_write_mem+0x5c>)
 80018d2:	7aa3      	ldrb	r3, [r4, #10]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f7      	beq.n	80018c8 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80018d8:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018da:	0a03      	lsrs	r3, r0, #8
 80018dc:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018e0:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80018e2:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018e4:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80018e8:	4408      	add	r0, r1
 80018ea:	4298      	cmp	r0, r3
 80018ec:	dcec      	bgt.n	80018c8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80018ee:	6821      	ldr	r1, [r4, #0]
 80018f0:	ab01      	add	r3, sp, #4
 80018f2:	2202      	movs	r2, #2
 80018f4:	7ec9      	ldrb	r1, [r1, #27]
 80018f6:	7838      	ldrb	r0, [r7, #0]
 80018f8:	f001 faf6 	bl	8002ee8 <i2c_write>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1e3      	bne.n	80018c8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001900:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001904:	4633      	mov	r3, r6
 8001906:	b2ea      	uxtb	r2, r5
 8001908:	7e09      	ldrb	r1, [r1, #24]
 800190a:	7800      	ldrb	r0, [r0, #0]
 800190c:	f001 faec 	bl	8002ee8 <i2c_write>
 8001910:	3000      	adds	r0, #0
 8001912:	bf18      	it	ne
 8001914:	2001      	movne	r0, #1
 8001916:	4240      	negs	r0, r0
 8001918:	e7d8      	b.n	80018cc <mpu_write_mem+0xc>
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000

08001920 <mpu_read_mem>:
{
 8001920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001922:	460d      	mov	r5, r1
    if (!data)
 8001924:	4616      	mov	r6, r2
 8001926:	b91a      	cbnz	r2, 8001930 <mpu_read_mem+0x10>
        return -1;
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
}
 800192c:	b003      	add	sp, #12
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8001930:	4c12      	ldr	r4, [pc, #72]	; (800197c <mpu_read_mem+0x5c>)
 8001932:	7aa3      	ldrb	r3, [r4, #10]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f7      	beq.n	8001928 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001938:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800193a:	0a03      	lsrs	r3, r0, #8
 800193c:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001940:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001942:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001944:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001948:	4408      	add	r0, r1
 800194a:	4298      	cmp	r0, r3
 800194c:	dcec      	bgt.n	8001928 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800194e:	6821      	ldr	r1, [r4, #0]
 8001950:	ab01      	add	r3, sp, #4
 8001952:	2202      	movs	r2, #2
 8001954:	7ec9      	ldrb	r1, [r1, #27]
 8001956:	7838      	ldrb	r0, [r7, #0]
 8001958:	f001 fac6 	bl	8002ee8 <i2c_write>
 800195c:	2800      	cmp	r0, #0
 800195e:	d1e3      	bne.n	8001928 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001960:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001964:	4633      	mov	r3, r6
 8001966:	b2ea      	uxtb	r2, r5
 8001968:	7e09      	ldrb	r1, [r1, #24]
 800196a:	7800      	ldrb	r0, [r0, #0]
 800196c:	f001 faca 	bl	8002f04 <i2c_read>
 8001970:	3000      	adds	r0, #0
 8001972:	bf18      	it	ne
 8001974:	2001      	movne	r0, #1
 8001976:	4240      	negs	r0, r0
 8001978:	e7d8      	b.n	800192c <mpu_read_mem+0xc>
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000

08001980 <mpu_load_firmware>:
{
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001984:	4d25      	ldr	r5, [pc, #148]	; (8001a1c <mpu_load_firmware+0x9c>)
{
 8001986:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001988:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 800198c:	4607      	mov	r7, r0
 800198e:	4689      	mov	r9, r1
 8001990:	4616      	mov	r6, r2
 8001992:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 8001994:	b124      	cbz	r4, 80019a0 <mpu_load_firmware+0x20>
        return -1;
 8001996:	f04f 30ff 	mov.w	r0, #4294967295
}
 800199a:	b009      	add	sp, #36	; 0x24
 800199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 80019a0:	2900      	cmp	r1, #0
 80019a2:	d0f8      	beq.n	8001996 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 80019a4:	42bc      	cmp	r4, r7
 80019a6:	d314      	bcc.n	80019d2 <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 80019a8:	0a33      	lsrs	r3, r6, #8
 80019aa:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 80019ae:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80019b2:	e9d5 1000 	ldrd	r1, r0, [r5]
 80019b6:	ab03      	add	r3, sp, #12
 80019b8:	2202      	movs	r2, #2
 80019ba:	7f49      	ldrb	r1, [r1, #29]
 80019bc:	7800      	ldrb	r0, [r0, #0]
 80019be:	f001 fa93 	bl	8002ee8 <i2c_write>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d1e7      	bne.n	8001996 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80019cc:	9b01      	ldr	r3, [sp, #4]
 80019ce:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 80019d0:	e7e3      	b.n	800199a <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 80019d2:	eba7 0804 	sub.w	r8, r7, r4
 80019d6:	f1b8 0f10 	cmp.w	r8, #16
 80019da:	bfa8      	it	ge
 80019dc:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80019e0:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 80019e4:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80019e8:	465a      	mov	r2, fp
 80019ea:	4651      	mov	r1, sl
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff ff67 	bl	80018c0 <mpu_write_mem>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d1cf      	bne.n	8001996 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 80019f6:	aa04      	add	r2, sp, #16
 80019f8:	4651      	mov	r1, sl
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff ff90 	bl	8001920 <mpu_read_mem>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1c8      	bne.n	8001996 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001a04:	4652      	mov	r2, sl
 8001a06:	a904      	add	r1, sp, #16
 8001a08:	4658      	mov	r0, fp
 8001a0a:	f008 f921 	bl	8009c50 <memcmp>
 8001a0e:	b910      	cbnz	r0, 8001a16 <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 8001a10:	4454      	add	r4, sl
 8001a12:	b2a4      	uxth	r4, r4
 8001a14:	e7c6      	b.n	80019a4 <mpu_load_firmware+0x24>
            return -2;
 8001a16:	f06f 0001 	mvn.w	r0, #1
 8001a1a:	e7be      	b.n	800199a <mpu_load_firmware+0x1a>
 8001a1c:	20000000 	.word	0x20000000

08001a20 <mpu_set_dmp_state>:
{
 8001a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001a22:	4d1c      	ldr	r5, [pc, #112]	; (8001a94 <mpu_set_dmp_state+0x74>)
{
 8001a24:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8001a26:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001a2a:	4283      	cmp	r3, r0
 8001a2c:	d01d      	beq.n	8001a6a <mpu_set_dmp_state+0x4a>
    if (enable) {
 8001a2e:	b1f8      	cbz	r0, 8001a70 <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 8001a30:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8001a34:	b35b      	cbz	r3, 8001a8e <mpu_set_dmp_state+0x6e>
        tmp = 0;
 8001a36:	2400      	movs	r4, #0
        set_int_enable(0);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff f945 	bl	8000cc8 <set_int_enable>
        mpu_set_bypass(0);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fc14 	bl	800126c <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001a44:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8001a46:	f7ff fd0f 	bl	8001468 <mpu_set_sample_rate>
        tmp = 0;
 8001a4a:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a4c:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 8001a4e:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2123      	movs	r1, #35	; 0x23
 8001a56:	7800      	ldrb	r0, [r0, #0]
 8001a58:	f001 fa46 	bl	8002ee8 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8001a62:	f7ff f931 	bl	8000cc8 <set_int_enable>
        mpu_reset_fifo();
 8001a66:	f7ff fa21 	bl	8000eac <mpu_reset_fifo>
        return 0;
 8001a6a:	2000      	movs	r0, #0
}
 8001a6c:	b003      	add	sp, #12
 8001a6e:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8001a70:	f7ff f92a 	bl	8000cc8 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001a74:	7c2a      	ldrb	r2, [r5, #16]
 8001a76:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a78:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 8001a7a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a7e:	2123      	movs	r1, #35	; 0x23
 8001a80:	2201      	movs	r2, #1
 8001a82:	7800      	ldrb	r0, [r0, #0]
 8001a84:	f001 fa30 	bl	8002ee8 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001a88:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001a8c:	e7eb      	b.n	8001a66 <mpu_set_dmp_state+0x46>
            return -1;
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	e7eb      	b.n	8001a6c <mpu_set_dmp_state+0x4c>
 8001a94:	20000000 	.word	0x20000000

08001a98 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <dmp_enable_gyro_cal.part.0+0x24>)
 8001a9c:	ab01      	add	r3, sp, #4
 8001a9e:	6810      	ldr	r0, [r2, #0]
 8001aa0:	6851      	ldr	r1, [r2, #4]
 8001aa2:	7a12      	ldrb	r2, [r2, #8]
 8001aa4:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001aa6:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001aa8:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001aaa:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001aae:	aa01      	add	r2, sp, #4
 8001ab0:	f7ff ff06 	bl	80018c0 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001ab4:	b005      	add	sp, #20
 8001ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aba:	bf00      	nop
 8001abc:	0800c458 	.word	0x0800c458

08001ac0 <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001ac0:	23c8      	movs	r3, #200	; 0xc8
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac6:	4902      	ldr	r1, [pc, #8]	; (8001ad0 <dmp_load_motion_driver_firmware+0x10>)
 8001ac8:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8001acc:	f7ff bf58 	b.w	8001980 <mpu_load_firmware>
 8001ad0:	0800c894 	.word	0x0800c894

08001ad4 <dmp_set_orientation>:
{
 8001ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001ad6:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 8001ada:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001ade:	236c      	movs	r3, #108	; 0x6c
 8001ae0:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001ae4:	f64c 130c 	movw	r3, #51468	; 0xc90c
 8001ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001aec:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8001aee:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001af2:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 8001af6:	ab04      	add	r3, sp, #16
 8001af8:	4419      	add	r1, r3
 8001afa:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001afe:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 8001b02:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001b06:	ab04      	add	r3, sp, #16
 8001b08:	441a      	add	r2, r3
 8001b0a:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 8001b0e:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001b10:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001b14:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8001b18:	a804      	add	r0, sp, #16
 8001b1a:	4403      	add	r3, r0
 8001b1c:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 8001b20:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001b24:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001b28:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8001b2c:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 8001b30:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001b34:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001b38:	2103      	movs	r1, #3
 8001b3a:	466a      	mov	r2, sp
 8001b3c:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001b40:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001b44:	f7ff febc 	bl	80018c0 <mpu_write_mem>
 8001b48:	b118      	cbz	r0, 8001b52 <dmp_set_orientation+0x7e>
        return -1;
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b4e:	b004      	add	sp, #16
 8001b50:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001b52:	aa01      	add	r2, sp, #4
 8001b54:	2103      	movs	r1, #3
 8001b56:	f240 402a 	movw	r0, #1066	; 0x42a
 8001b5a:	f7ff feb1 	bl	80018c0 <mpu_write_mem>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d1f3      	bne.n	8001b4a <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8001b62:	f245 6336 	movw	r3, #22070	; 0x5636
 8001b66:	f8ad 3000 	strh.w	r3, [sp]
 8001b6a:	2376      	movs	r3, #118	; 0x76
 8001b6c:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001b70:	f244 6326 	movw	r3, #17958	; 0x4626
 8001b74:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001b78:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 8001b7a:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8001b7c:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001b80:	bf41      	itttt	mi
 8001b82:	2337      	movmi	r3, #55	; 0x37
 8001b84:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001b88:	2327      	movmi	r3, #39	; 0x27
 8001b8a:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8001b8e:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001b90:	bf41      	itttt	mi
 8001b92:	2357      	movmi	r3, #87	; 0x57
 8001b94:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001b98:	2347      	movmi	r3, #71	; 0x47
 8001b9a:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8001b9e:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001ba0:	bf42      	ittt	mi
 8001ba2:	2377      	movmi	r3, #119	; 0x77
 8001ba4:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8001ba8:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001baa:	466a      	mov	r2, sp
 8001bac:	f04f 0103 	mov.w	r1, #3
 8001bb0:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001bb4:	bf48      	it	mi
 8001bb6:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001bba:	f7ff fe81 	bl	80018c0 <mpu_write_mem>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d1c3      	bne.n	8001b4a <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001bc2:	aa01      	add	r2, sp, #4
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	f240 4031 	movw	r0, #1073	; 0x431
 8001bca:	f7ff fe79 	bl	80018c0 <mpu_write_mem>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d1bb      	bne.n	8001b4a <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8001bd2:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <dmp_set_orientation+0x104>)
 8001bd4:	811c      	strh	r4, [r3, #8]
    return 0;
 8001bd6:	e7ba      	b.n	8001b4e <dmp_set_orientation+0x7a>
 8001bd8:	200003ac 	.word	0x200003ac

08001bdc <dmp_set_fifo_rate>:
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <dmp_set_fifo_rate+0x58>)
{
 8001be2:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001be4:	6810      	ldr	r0, [r2, #0]
 8001be6:	6851      	ldr	r1, [r2, #4]
 8001be8:	ab03      	add	r3, sp, #12
 8001bea:	c303      	stmia	r3!, {r0, r1}
 8001bec:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 8001bee:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001bf0:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8001bf2:	d903      	bls.n	8001bfc <dmp_set_fifo_rate+0x20>
        return -1;
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001bf8:	b006      	add	sp, #24
 8001bfa:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 8001c02:	23c8      	movs	r3, #200	; 0xc8
 8001c04:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001c08:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8001c0a:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 8001c12:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001c16:	f7ff fe53 	bl	80018c0 <mpu_write_mem>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d1ea      	bne.n	8001bf4 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8001c1e:	aa03      	add	r2, sp, #12
 8001c20:	210c      	movs	r1, #12
 8001c22:	f640 20c1 	movw	r0, #2753	; 0xac1
 8001c26:	f7ff fe4b 	bl	80018c0 <mpu_write_mem>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d1e2      	bne.n	8001bf4 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8001c2e:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <dmp_set_fifo_rate+0x5c>)
 8001c30:	819c      	strh	r4, [r3, #12]
    return 0;
 8001c32:	e7e1      	b.n	8001bf8 <dmp_set_fifo_rate+0x1c>
 8001c34:	0800c461 	.word	0x0800c461
 8001c38:	200003ac 	.word	0x200003ac

08001c3c <dmp_enable_gyro_cal>:
{
 8001c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 8001c3e:	b120      	cbz	r0, 8001c4a <dmp_enable_gyro_cal+0xe>
 8001c40:	f7ff ff2a 	bl	8001a98 <dmp_enable_gyro_cal.part.0>
}
 8001c44:	b005      	add	sp, #20
 8001c46:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <dmp_enable_gyro_cal+0x2c>)
 8001c4c:	ab01      	add	r3, sp, #4
 8001c4e:	6810      	ldr	r0, [r2, #0]
 8001c50:	6851      	ldr	r1, [r2, #4]
 8001c52:	7a12      	ldrb	r2, [r2, #8]
 8001c54:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001c56:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001c58:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001c5a:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001c5e:	aa01      	add	r2, sp, #4
 8001c60:	f7ff fe2e 	bl	80018c0 <mpu_write_mem>
 8001c64:	e7ee      	b.n	8001c44 <dmp_enable_gyro_cal+0x8>
 8001c66:	bf00      	nop
 8001c68:	0800c46d 	.word	0x0800c46d

08001c6c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001c6c:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001c6e:	b160      	cbz	r0, 8001c8a <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001c72:	aa01      	add	r2, sp, #4
 8001c74:	2104      	movs	r1, #4
 8001c76:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001c7a:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001c7c:	f7ff fe20 	bl	80018c0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001c80:	f7ff f914 	bl	8000eac <mpu_reset_fifo>
}
 8001c84:	b003      	add	sp, #12
 8001c86:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8001c8a:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8001c8e:	e7f0      	b.n	8001c72 <dmp_enable_lp_quat+0x6>
 8001c90:	c6c4c2c0 	.word	0xc6c4c2c0

08001c94 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8001c94:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001c96:	b160      	cbz	r0, 8001cb2 <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8001c9a:	aa01      	add	r2, sp, #4
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8001ca2:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8001ca4:	f7ff fe0c 	bl	80018c0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001ca8:	f7ff f900 	bl	8000eac <mpu_reset_fifo>
}
 8001cac:	b003      	add	sp, #12
 8001cae:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8001cb2:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8001cb6:	e7f0      	b.n	8001c9a <dmp_enable_6x_lp_quat+0x6>
 8001cb8:	38302820 	.word	0x38302820

08001cbc <dmp_enable_feature>:
{
 8001cbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001cc0:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <dmp_enable_feature+0x118>)
 8001cc2:	ad04      	add	r5, sp, #16
 8001cc4:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001cc8:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 8001cca:	462a      	mov	r2, r5
 8001ccc:	2104      	movs	r1, #4
 8001cce:	2068      	movs	r0, #104	; 0x68
 8001cd0:	f7ff fdf6 	bl	80018c0 <mpu_write_mem>
    tmp[0] = 0xA3;
 8001cd4:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001cd6:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001cda:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8001cde:	bf1f      	itttt	ne
 8001ce0:	23c0      	movne	r3, #192	; 0xc0
 8001ce2:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8001ce6:	23c8      	movne	r3, #200	; 0xc8
 8001ce8:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8001cec:	bf12      	itee	ne
 8001cee:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8001cf0:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8001cf4:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001cf8:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8001cfc:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8001d00:	bf15      	itete	ne
 8001d02:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001d06:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 8001d0a:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 8001d0e:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8001d12:	bf14      	ite	ne
 8001d14:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 8001d16:	23a3      	moveq	r3, #163	; 0xa3
 8001d18:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8001d1c:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8001d1e:	462a      	mov	r2, r5
 8001d20:	210a      	movs	r1, #10
 8001d22:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001d26:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8001d2a:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8001d2e:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8001d32:	f7ff fdc5 	bl	80018c0 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001d36:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8001d3a:	bf14      	ite	ne
 8001d3c:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8001d3e:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001d40:	462a      	mov	r2, r5
 8001d42:	2101      	movs	r1, #1
 8001d44:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8001d48:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8001d4c:	f7ff fdb8 	bl	80018c0 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001d50:	f014 0020 	ands.w	r0, r4, #32
 8001d54:	d038      	beq.n	8001dc8 <dmp_enable_feature+0x10c>
 8001d56:	f7ff fe9f 	bl	8001a98 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001d5a:	f1b8 0f00 	cmp.w	r8, #0
 8001d5e:	d00a      	beq.n	8001d76 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001d60:	05e3      	lsls	r3, r4, #23
            tmp[0] = 0xB2;
 8001d62:	bf4c      	ite	mi
 8001d64:	4b1c      	ldrmi	r3, [pc, #112]	; (8001dd8 <dmp_enable_feature+0x11c>)
            tmp[0] = DINAC0;
 8001d66:	4b1d      	ldrpl	r3, [pc, #116]	; (8001ddc <dmp_enable_feature+0x120>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001d68:	462a      	mov	r2, r5
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001d70:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001d72:	f7ff fda5 	bl	80018c0 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001d76:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8001d7a:	bf18      	it	ne
 8001d7c:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8001d7e:	f7ff ff75 	bl	8001c6c <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001d82:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8001d86:	bf18      	it	ne
 8001d88:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001d8a:	4d15      	ldr	r5, [pc, #84]	; (8001de0 <dmp_enable_feature+0x124>)
        dmp_enable_6x_lp_quat(0);
 8001d8c:	f7ff ff82 	bl	8001c94 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001d90:	f044 0308 	orr.w	r3, r4, #8
 8001d94:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001d96:	f7ff f889 	bl	8000eac <mpu_reset_fifo>
 8001d9a:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001d9c:	b9bf      	cbnz	r7, 8001dce <dmp_enable_feature+0x112>
    dmp.packet_length = 0;
 8001d9e:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001da0:	f1b8 0f00 	cmp.w	r8, #0
 8001da4:	d002      	beq.n	8001dac <dmp_enable_feature+0xf0>
        dmp.packet_length += 6;
 8001da6:	7b9a      	ldrb	r2, [r3, #14]
 8001da8:	3206      	adds	r2, #6
 8001daa:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001dac:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001db0:	bf1e      	ittt	ne
 8001db2:	7b9a      	ldrbne	r2, [r3, #14]
 8001db4:	3210      	addne	r2, #16
 8001db6:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001db8:	b116      	cbz	r6, 8001dc0 <dmp_enable_feature+0x104>
        dmp.packet_length += 4;
 8001dba:	7b9a      	ldrb	r2, [r3, #14]
 8001dbc:	3204      	adds	r2, #4
 8001dbe:	739a      	strb	r2, [r3, #14]
}
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	b004      	add	sp, #16
 8001dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8001dc8:	f7ff ff38 	bl	8001c3c <dmp_enable_gyro_cal>
 8001dcc:	e7c5      	b.n	8001d5a <dmp_enable_feature+0x9e>
        dmp.packet_length += 6;
 8001dce:	2206      	movs	r2, #6
 8001dd0:	73aa      	strb	r2, [r5, #14]
 8001dd2:	e7e5      	b.n	8001da0 <dmp_enable_feature+0xe4>
 8001dd4:	09e3ca02 	.word	0x09e3ca02
 8001dd8:	9bb68bb2 	.word	0x9bb68bb2
 8001ddc:	90b480b0 	.word	0x90b480b0
 8001de0:	200003ac 	.word	0x200003ac

08001de4 <dmp_read_fifo>:
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001de4:	2300      	movs	r3, #0
{
 8001de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	9c10      	ldr	r4, [sp, #64]	; 0x40

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001dee:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001ef8 <dmp_read_fifo+0x114>
{
 8001df2:	4605      	mov	r5, r0
 8001df4:	460e      	mov	r6, r1
 8001df6:	4690      	mov	r8, r2
    sensors[0] = 0;
 8001df8:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001dfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001dfc:	4669      	mov	r1, sp
 8001dfe:	f899 000e 	ldrb.w	r0, [r9, #14]
 8001e02:	f7ff f9e5 	bl	80011d0 <mpu_read_fifo_stream>
 8001e06:	4607      	mov	r7, r0
 8001e08:	bb50      	cbnz	r0, 8001e60 <dmp_read_fifo+0x7c>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001e0a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8001e0e:	f011 0f14 	tst.w	r1, #20
 8001e12:	d06e      	beq.n	8001ef2 <dmp_read_fifo+0x10e>
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	9800      	ldr	r0, [sp, #0]
 8001e18:	fa92 fc82 	rev.w	ip, r2
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001e1c:	f8c8 c004 	str.w	ip, [r8, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8001e20:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e24:	fb0c fc0c 	mul.w	ip, ip, ip
 8001e28:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001e2a:	f8c8 0000 	str.w	r0, [r8]
        quat_q14[0] = quat[0] >> 16;
 8001e2e:	1400      	asrs	r0, r0, #16
 8001e30:	9a02      	ldr	r2, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e32:	fb00 c000 	mla	r0, r0, r0, ip
 8001e36:	ba12      	rev	r2, r2
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8001e38:	f8c8 2008 	str.w	r2, [r8, #8]
        quat_q14[2] = quat[2] >> 16;
 8001e3c:	1412      	asrs	r2, r2, #16
 8001e3e:	9b03      	ldr	r3, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e40:	fb02 0202 	mla	r2, r2, r2, r0
 8001e44:	ba1b      	rev	r3, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001e46:	f8c8 300c 	str.w	r3, [r8, #12]
        quat_q14[3] = quat[3] >> 16;
 8001e4a:	141b      	asrs	r3, r3, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e4c:	fb03 2303 	mla	r3, r3, r3, r2
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001e50:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e58:	d905      	bls.n	8001e66 <dmp_read_fifo+0x82>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8001e5a:	f7ff f827 	bl	8000eac <mpu_reset_fifo>
            sensors[0] = 0;
 8001e5e:	8027      	strh	r7, [r4, #0]
        return -1;
 8001e60:	f04f 37ff 	mov.w	r7, #4294967295
 8001e64:	e041      	b.n	8001eea <dmp_read_fifo+0x106>
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8001e66:	8823      	ldrh	r3, [r4, #0]
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8001e6e:	2310      	movs	r3, #16
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001e70:	064a      	lsls	r2, r1, #25
 8001e72:	d51c      	bpl.n	8001eae <dmp_read_fifo+0xca>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e74:	aa08      	add	r2, sp, #32
 8001e76:	441a      	add	r2, r3
 8001e78:	f812 cc20 	ldrb.w	ip, [r2, #-32]
 8001e7c:	f812 0c1f 	ldrb.w	r0, [r2, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8001e80:	3306      	adds	r3, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e82:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001e86:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e88:	f812 cc1e 	ldrb.w	ip, [r2, #-30]
 8001e8c:	f812 0c1d 	ldrb.w	r0, [r2, #-29]
        ii += 6;
 8001e90:	b2db      	uxtb	r3, r3
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e92:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001e96:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e98:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8001e9c:	f812 2c1b 	ldrb.w	r2, [r2, #-27]
 8001ea0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001ea4:	80b2      	strh	r2, [r6, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001ea6:	8822      	ldrh	r2, [r4, #0]
 8001ea8:	f042 0208 	orr.w	r2, r2, #8
 8001eac:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001eae:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8001eb2:	d01a      	beq.n	8001eea <dmp_read_fifo+0x106>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001eb4:	aa08      	add	r2, sp, #32
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8001ebc:	f813 2c1f 	ldrb.w	r2, [r3, #-31]
 8001ec0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ec4:	802a      	strh	r2, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001ec6:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8001eca:	f813 2c1d 	ldrb.w	r2, [r3, #-29]
 8001ece:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ed2:	806a      	strh	r2, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001ed4:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8001ed8:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ee0:	80ab      	strh	r3, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001ee2:	8823      	ldrh	r3, [r4, #0]
 8001ee4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001ee8:	8023      	strh	r3, [r4, #0]
    }

    //get_ms(timestamp);
    return 0;
}
 8001eea:	4638      	mov	r0, r7
 8001eec:	b009      	add	sp, #36	; 0x24
 8001eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char ii = 0;
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	e7bc      	b.n	8001e70 <dmp_read_fifo+0x8c>
 8001ef6:	bf00      	nop
 8001ef8:	200003ac 	.word	0x200003ac

08001efc <DMP_Init>:

int DMP_Init(void){
 8001efc:	b507      	push	{r0, r1, r2, lr}

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001efe:	a801      	add	r0, sp, #4
 8001f00:	f7ff fb96 	bl	8001630 <mpu_init>
 8001f04:	b9e8      	cbnz	r0, 8001f42 <DMP_Init+0x46>
		return 1;
	}

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001f06:	2079      	movs	r0, #121	; 0x79
 8001f08:	f7ff faf6 	bl	80014f8 <mpu_set_sensors>
 8001f0c:	b9d8      	cbnz	r0, 8001f46 <DMP_Init+0x4a>
		return 2;
	}

	if(dmp_load_motion_driver_firmware()){
 8001f0e:	f7ff fdd7 	bl	8001ac0 <dmp_load_motion_driver_firmware>
 8001f12:	b9d0      	cbnz	r0, 8001f4a <DMP_Init+0x4e>

		return 4;//ERROR
	}

	if(dmp_set_orientation(0x88)){//set identity matrix
 8001f14:	2088      	movs	r0, #136	; 0x88
 8001f16:	f7ff fddd 	bl	8001ad4 <dmp_set_orientation>
 8001f1a:	b9c0      	cbnz	r0, 8001f4e <DMP_Init+0x52>
	}

	unsigned short dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL
								| DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if(dmp_enable_feature(dmp_features)){
 8001f1c:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001f20:	f7ff fecc 	bl	8001cbc <dmp_enable_feature>
 8001f24:	b9a8      	cbnz	r0, 8001f52 <DMP_Init+0x56>
		return 6;
	}

	if(dmp_set_fifo_rate(100)){
 8001f26:	2064      	movs	r0, #100	; 0x64
 8001f28:	f7ff fe58 	bl	8001bdc <dmp_set_fifo_rate>
 8001f2c:	b998      	cbnz	r0, 8001f56 <DMP_Init+0x5a>
		return 7;
	}

	if (mpu_set_dmp_state(1)){
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff fd76 	bl	8001a20 <mpu_set_dmp_state>
		return 8;
 8001f34:	2800      	cmp	r0, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2008      	movne	r0, #8
 8001f3a:	2000      	moveq	r0, #0
	}

	return 0;
}
 8001f3c:	b003      	add	sp, #12
 8001f3e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8001f42:	2001      	movs	r0, #1
 8001f44:	e7fa      	b.n	8001f3c <DMP_Init+0x40>
		return 2;
 8001f46:	2002      	movs	r0, #2
 8001f48:	e7f8      	b.n	8001f3c <DMP_Init+0x40>
		return 4;//ERROR
 8001f4a:	2004      	movs	r0, #4
 8001f4c:	e7f6      	b.n	8001f3c <DMP_Init+0x40>
		return 5;
 8001f4e:	2005      	movs	r0, #5
 8001f50:	e7f4      	b.n	8001f3c <DMP_Init+0x40>
		return 6;
 8001f52:	2006      	movs	r0, #6
 8001f54:	e7f2      	b.n	8001f3c <DMP_Init+0x40>
		return 7;
 8001f56:	2007      	movs	r0, #7
 8001f58:	e7f0      	b.n	8001f3c <DMP_Init+0x40>

08001f5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5a:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5c:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5e:	2610      	movs	r6, #16
{
 8001f60:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	4622      	mov	r2, r4
 8001f64:	2100      	movs	r1, #0
 8001f66:	a80c      	add	r0, sp, #48	; 0x30
 8001f68:	f007 fe8c 	bl	8009c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	4622      	mov	r2, r4
 8001f6e:	eb0d 0004 	add.w	r0, sp, r4
 8001f72:	2100      	movs	r1, #0
 8001f74:	f007 fe86 	bl	8009c84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f78:	4632      	mov	r2, r6
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	a801      	add	r0, sp, #4
 8001f7e:	f007 fe81 	bl	8009c84 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f82:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f84:	2201      	movs	r2, #1
 8001f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f98:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f9a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	f005 fb8e 	bl	80076bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa2:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fac:	4629      	mov	r1, r5
 8001fae:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb0:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fb6:	f005 fd59 	bl	8007a6c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fba:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fbc:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001fbe:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f005 fe2e 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001fc4:	b014      	add	sp, #80	; 0x50
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}

08001fc8 <main>:
{
 8001fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8001fcc:	2400      	movs	r4, #0
{
 8001fce:	b08f      	sub	sp, #60	; 0x3c
	ximu_state = XIMU_STATE_STM_INIT;
 8001fd0:	f8df a300 	ldr.w	sl, [pc, #768]	; 80022d4 <main+0x30c>
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4daa      	ldr	r5, [pc, #680]	; (8002280 <main+0x2b8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	ae0a      	add	r6, sp, #40	; 0x28
	ximu_state = XIMU_STATE_STM_INIT;
 8001fd8:	f88a 4000 	strb.w	r4, [sl]
  HAL_Init();
 8001fdc:	f004 f924 	bl	8006228 <HAL_Init>
  SystemClock_Config();
 8001fe0:	f7ff ffbb 	bl	8001f5a <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f007 fe4b 	bl	8009c84 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ff0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	61ab      	str	r3, [r5, #24]
 8001ff8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002008:	489e      	ldr	r0, [pc, #632]	; (8002284 <main+0x2bc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	61ab      	str	r3, [r5, #24]
 8002010:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	9304      	str	r3, [sp, #16]
 800201c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8002020:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80022d8 <main+0x310>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	61ab      	str	r3, [r5, #24]
 800202a:	69ab      	ldr	r3, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f10d 091c 	add.w	r9, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	9305      	str	r3, [sp, #20]
 8002036:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 800203a:	4f93      	ldr	r7, [pc, #588]	; (8002288 <main+0x2c0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	61ab      	str	r3, [r5, #24]
 8002042:	69ab      	ldr	r3, [r5, #24]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	9306      	str	r3, [sp, #24]
 800204a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800204c:	f004 fb58 	bl	8006700 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002054:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	4631      	mov	r1, r6
 800205c:	4889      	ldr	r0, [pc, #548]	; (8002284 <main+0x2bc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f004 fa6d 	bl	8006540 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002066:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002068:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	ea43 030b 	orr.w	r3, r3, fp
 800206e:	616b      	str	r3, [r5, #20]
 8002070:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002072:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002074:	ea03 030b 	and.w	r3, r3, fp
 8002078:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800207a:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800207e:	f004 f91b 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002082:	200f      	movs	r0, #15
 8002084:	f004 f94c 	bl	8006320 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8002088:	4d80      	ldr	r5, [pc, #512]	; (800228c <main+0x2c4>)
  hi2c1.Init.ClockSpeed = 100000;
 800208a:	4a81      	ldr	r2, [pc, #516]	; (8002290 <main+0x2c8>)
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <main+0x2cc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208e:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8002090:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002098:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a0:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a4:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020a6:	f004 fcf3 	bl	8006a90 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 80020aa:	f007 f9d3 	bl	8009454 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	2210      	movs	r2, #16
 80020b0:	4621      	mov	r1, r4
 80020b2:	4630      	mov	r0, r6
 80020b4:	f007 fde6 	bl	8009c84 <memset>
  htim2.Init.Period = 1250-1;
 80020b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
  htim2.Init.Prescaler = 7200-1;
 80020bc:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80020c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c4:	4640      	mov	r0, r8
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c6:	e9c8 2403 	strd	r2, r4, [r8, #12]
  htim2.Init.Prescaler = 7200-1;
 80020ca:	e9c8 1300 	strd	r1, r3, [r8]
 80020ce:	9301      	str	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	9407      	str	r4, [sp, #28]
 80020d2:	f8c9 4004 	str.w	r4, [r9, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020de:	f005 ff05 	bl	8007eec <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020e6:	4631      	mov	r1, r6
 80020e8:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ec:	f005 ff22 	bl	8007f34 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f0:	4649      	mov	r1, r9
 80020f2:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f8:	f005 ffb0 	bl	800805c <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fc:	2210      	movs	r2, #16
 80020fe:	4621      	mov	r1, r4
 8002100:	4630      	mov	r0, r6
 8002102:	f007 fdbf 	bl	8009c84 <memset>
  htim3.Init.Prescaler = 7200-1;
 8002106:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8002108:	4963      	ldr	r1, [pc, #396]	; (8002298 <main+0x2d0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	e9c7 3401 	strd	r3, r4, [r7, #4]
  htim3.Init.Period = 50-1;
 800210e:	2331      	movs	r3, #49	; 0x31
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002110:	4638      	mov	r0, r7
  htim3.Instance = TIM3;
 8002112:	6039      	str	r1, [r7, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002114:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	9407      	str	r4, [sp, #28]
 800211c:	f8c9 4004 	str.w	r4, [r9, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002120:	f005 fee4 	bl	8007eec <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002128:	4631      	mov	r1, r6
 800212a:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800212e:	f005 ff01 	bl	8007f34 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002132:	4649      	mov	r1, r9
 8002134:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213a:	f005 ff8f 	bl	800805c <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 800213e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002142:	4f56      	ldr	r7, [pc, #344]	; (800229c <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 8002144:	4856      	ldr	r0, [pc, #344]	; (80022a0 <main+0x2d8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002146:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 800214a:	e9c7 0300 	strd	r0, r3, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214e:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002150:	4638      	mov	r0, r7
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	e9c7 3405 	strd	r3, r4, [r7, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002156:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215a:	f005 ffe7 	bl	800812c <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800215e:	4640      	mov	r0, r8
 8002160:	f005 fdd6 	bl	8007d10 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 8002164:	20cc      	movs	r0, #204	; 0xcc
 8002166:	f000 feb3 	bl	8002ed0 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 800216a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800216e:	f004 f87f 	bl	8006270 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002172:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8002174:	f88a b000 	strb.w	fp, [sl]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002178:	f000 feaa 	bl	8002ed0 <led_set>
  mpu_set_i2c(&hi2c1);
 800217c:	4628      	mov	r0, r5
 800217e:	f000 fead 	bl	8002edc <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002182:	4628      	mov	r0, r5
 8002184:	f000 fece 	bl	8002f24 <ms5611_set_i2c>
  ms5611_init();
 8002188:	f000 ff6e 	bl	8003068 <ms5611_init>
  ms5611_update();
 800218c:	f000 ff64 	bl	8003058 <ms5611_update>
  GNSS_set_huart(&huart1);
 8002190:	4638      	mov	r0, r7
 8002192:	f000 fd0f 	bl	8002bb4 <GNSS_set_huart>
  GNSS_Init();
 8002196:	f000 fd53 	bl	8002c40 <GNSS_Init>
  HMC5883L_I2C_set(&hi2c1);
 800219a:	4628      	mov	r0, r5
 800219c:	f000 fbd8 	bl	8002950 <HMC5883L_I2C_set>
  HMC5883L_Initialize();
 80021a0:	f000 fc06 	bl	80029b0 <HMC5883L_Initialize>
	  HAL_Delay(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f004 f863 	bl	8006270 <HAL_Delay>
  while (HMC5883L_TestConnection() == 0){
 80021aa:	f000 fc21 	bl	80029f0 <HMC5883L_TestConnection>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0f8      	beq.n	80021a4 <main+0x1dc>
  int dmp_state = DMP_Init();
 80021b2:	f7ff fea3 	bl	8001efc <DMP_Init>
  if (dmp_state){
 80021b6:	b100      	cbz	r0, 80021ba <main+0x1f2>
 80021b8:	e7fe      	b.n	80021b8 <main+0x1f0>
  long accel_bias[3] = {-333.0909/8.0, 69.6663/8.0, 102.8412/8.0}; // from +- 2g to +- 16g
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <main+0x2dc>)
 80021bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  long gyro_bias[3] = {-66.4549,   57.2769,  -16.6647};
 80021c0:	330c      	adds	r3, #12
  long accel_bias[3] = {-333.0909/8.0, 69.6663/8.0, 102.8412/8.0}; // from +- 2g to +- 16g
 80021c2:	e889 0007 	stmia.w	r9, {r0, r1, r2}
  long gyro_bias[3] = {-66.4549,   57.2769,  -16.6647};
 80021c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  if (mpu_set_accel_bias_6500_reg(accel_bias)){
 80021ce:	4648      	mov	r0, r9
 80021d0:	f7fe fe16 	bl	8000e00 <mpu_set_accel_bias_6500_reg>
 80021d4:	b100      	cbz	r0, 80021d8 <main+0x210>
 80021d6:	e7fe      	b.n	80021d6 <main+0x20e>
  if(mpu_set_gyro_bias_reg(gyro_bias)){
 80021d8:	4630      	mov	r0, r6
 80021da:	f7fe fdd3 	bl	8000d84 <mpu_set_gyro_bias_reg>
 80021de:	4604      	mov	r4, r0
 80021e0:	b100      	cbz	r0, 80021e4 <main+0x21c>
 80021e2:	e7fe      	b.n	80021e2 <main+0x21a>
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 80021e4:	4828      	ldr	r0, [pc, #160]	; (8002288 <main+0x2c0>)
 80021e6:	f005 fd93 	bl	8007d10 <HAL_TIM_Base_Start_IT>
  ximu_state = XIMU_STATE_GPS_INIT;
 80021ea:	2302      	movs	r3, #2
  led_set(LED_DISCONNECTED);//Fault cleared
 80021ec:	4620      	mov	r0, r4
  ximu_state = XIMU_STATE_GPS_INIT;
 80021ee:	f88a 3000 	strb.w	r3, [sl]
  led_set(LED_DISCONNECTED);//Fault cleared
 80021f2:	f000 fe6d 	bl	8002ed0 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 80021f6:	4c2c      	ldr	r4, [pc, #176]	; (80022a8 <main+0x2e0>)
 80021f8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d132      	bne.n	8002266 <main+0x29e>
  ros_init();
 8002200:	f002 fff2 	bl	80051e8 <ros_init>
  led_set(LED_IDLE);//connection formed
 8002204:	20ff      	movs	r0, #255	; 0xff
 8002206:	f000 fe63 	bl	8002ed0 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 800220a:	4f28      	ldr	r7, [pc, #160]	; (80022ac <main+0x2e4>)
 800220c:	4c28      	ldr	r4, [pc, #160]	; (80022b0 <main+0x2e8>)
 800220e:	4d29      	ldr	r5, [pc, #164]	; (80022b4 <main+0x2ec>)
	  led_set(LED_MEASURING);
 8002210:	20fe      	movs	r0, #254	; 0xfe
 8002212:	f000 fe5d 	bl	8002ed0 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	4e27      	ldr	r6, [pc, #156]	; (80022b8 <main+0x2f0>)
 800221a:	2b01      	cmp	r3, #1
 800221c:	d027      	beq.n	800226e <main+0x2a6>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d005      	beq.n	8002230 <main+0x268>
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <main+0x268>
 800222a:	6833      	ldr	r3, [r6, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d1ef      	bne.n	8002210 <main+0x248>
		  if (send_mag_data == 1){
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d104      	bne.n	8002240 <main+0x278>
			  MAG_pub(m);
 8002236:	4821      	ldr	r0, [pc, #132]	; (80022bc <main+0x2f4>)
 8002238:	f003 f88a 	bl	8005350 <MAG_pub>
			  send_mag_data = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	6023      	str	r3, [r4, #0]
		  if (send_gps_data == 1){
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d104      	bne.n	8002250 <main+0x288>
			  GPS_pub(lla);
 8002246:	481e      	ldr	r0, [pc, #120]	; (80022c0 <main+0x2f8>)
 8002248:	f003 f8c4 	bl	80053d4 <GPS_pub>
			  send_gps_data = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	602b      	str	r3, [r5, #0]
		  if (send_pt_data == 1){
 8002250:	6833      	ldr	r3, [r6, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d104      	bne.n	8002260 <main+0x298>
		  	  PT_pub(pt);
 8002256:	481b      	ldr	r0, [pc, #108]	; (80022c4 <main+0x2fc>)
 8002258:	f003 f8f8 	bl	800544c <PT_pub>
		  	  send_pt_data = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	6033      	str	r3, [r6, #0]
		  spinOnce();
 8002260:	f003 f93c 	bl	80054dc <spinOnce>
 8002264:	e7d4      	b.n	8002210 <main+0x248>
	  led_set(LED_DISCONNECTED);//wait for connection
 8002266:	2000      	movs	r0, #0
 8002268:	f000 fe32 	bl	8002ed0 <led_set>
 800226c:	e7c4      	b.n	80021f8 <main+0x230>
			  IMU_pub(a,w,q);
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <main+0x300>)
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <main+0x304>)
 8002272:	4817      	ldr	r0, [pc, #92]	; (80022d0 <main+0x308>)
 8002274:	f002 ffe2 	bl	800523c <IMU_pub>
			  send_imu_data = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	e7d8      	b.n	8002230 <main+0x268>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40011000 	.word	0x40011000
 8002288:	20001a2c 	.word	0x20001a2c
 800228c:	200019d8 	.word	0x200019d8
 8002290:	40005400 	.word	0x40005400
 8002294:	000186a0 	.word	0x000186a0
 8002298:	40000400 	.word	0x40000400
 800229c:	20001ab8 	.word	0x20001ab8
 80022a0:	40013800 	.word	0x40013800
 80022a4:	0800c48c 	.word	0x0800c48c
 80022a8:	2000205c 	.word	0x2000205c
 80022ac:	2000043c 	.word	0x2000043c
 80022b0:	20000440 	.word	0x20000440
 80022b4:	20000438 	.word	0x20000438
 80022b8:	20000444 	.word	0x20000444
 80022bc:	200003f0 	.word	0x200003f0
 80022c0:	200003d8 	.word	0x200003d8
 80022c4:	20000408 	.word	0x20000408
 80022c8:	20000418 	.word	0x20000418
 80022cc:	20000448 	.word	0x20000448
 80022d0:	200003c0 	.word	0x200003c0
 80022d4:	20001ab4 	.word	0x20001ab4
 80022d8:	20001fc0 	.word	0x20001fc0

080022dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80022dc:	6802      	ldr	r2, [r0, #0]
 80022de:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x10>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d101      	bne.n	80022e8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80022e4:	f003 bfb2 	b.w	800624c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40012c00 	.word	0x40012c00

080022f0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_MspInit+0x3c>)
{
 80022f6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	619a      	str	r2, [r3, #24]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	f002 0201 	and.w	r2, r2, #1
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002310:	61da      	str	r2, [r3, #28]
 8002312:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800231e:	6853      	ldr	r3, [r2, #4]
 8002320:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	b002      	add	sp, #8
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000

08002338 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002338:	b510      	push	{r4, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	2210      	movs	r2, #16
 8002340:	2100      	movs	r1, #0
 8002342:	a802      	add	r0, sp, #8
 8002344:	f007 fc9e 	bl	8009c84 <memset>
  if(hi2c->Instance==I2C1)
 8002348:	6822      	ldr	r2, [r4, #0]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_I2C_MspInit+0x58>)
 800234c:	429a      	cmp	r2, r3
 800234e:	d11c      	bne.n	800238a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4c10      	ldr	r4, [pc, #64]	; (8002394 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002352:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	61a3      	str	r3, [r4, #24]
 800235e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f004 f8e4 	bl	8006540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002378:	69e3      	ldr	r3, [r4, #28]
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237e:	61e3      	str	r3, [r4, #28]
 8002380:	69e3      	ldr	r3, [r4, #28]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800238a:	b006      	add	sp, #24
 800238c:	bd10      	pop	{r4, pc}
 800238e:	bf00      	nop
 8002390:	40005400 	.word	0x40005400
 8002394:	40021000 	.word	0x40021000
 8002398:	40010c00 	.word	0x40010c00

0800239c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800239c:	6803      	ldr	r3, [r0, #0]
{
 800239e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d115      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80023aa:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ac:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023b8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023c2:	f003 ff79 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c6:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023c8:	b003      	add	sp, #12
 80023ca:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ce:	f003 bfa7 	b.w	8006320 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_TIM_Base_MspInit+0x64>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d110      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023da:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	f042 0202 	orr.w	r2, r2, #2
 80023e2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023e8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023f2:	f003 ff61 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023f6:	201d      	movs	r0, #29
 80023f8:	e7e6      	b.n	80023c8 <HAL_TIM_Base_MspInit+0x2c>
}
 80023fa:	b003      	add	sp, #12
 80023fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002400:	40000400 	.word	0x40000400
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	4606      	mov	r6, r0
 800240c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	2210      	movs	r2, #16
 8002410:	2100      	movs	r1, #0
 8002412:	a802      	add	r0, sp, #8
 8002414:	f007 fc36 	bl	8009c84 <memset>
  if(huart->Instance==USART1)
 8002418:	6832      	ldr	r2, [r6, #0]
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_UART_MspInit+0x9c>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d13e      	bne.n	800249e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002420:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002424:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242c:	619a      	str	r2, [r3, #24]
 800242e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	481d      	ldr	r0, [pc, #116]	; (80024a8 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002432:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002436:	9200      	str	r2, [sp, #0]
 8002438:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	f042 0204 	orr.w	r2, r2, #4
 8002442:	619a      	str	r2, [r3, #24]
 8002444:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f004 f870 	bl	8006540 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002460:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	a902      	add	r1, sp, #8
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <HAL_UART_MspInit+0xa0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002468:	4c10      	ldr	r4, [pc, #64]	; (80024ac <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f004 f866 	bl	8006540 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_UART_MspInit+0xa8>)
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002476:	2120      	movs	r1, #32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002478:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002486:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002488:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800248c:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002490:	f003 ff54 	bl	800633c <HAL_DMA_Init>
 8002494:	b108      	cbz	r0, 800249a <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8002496:	f7ff ff2b 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800249a:	6374      	str	r4, [r6, #52]	; 0x34
 800249c:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800249e:	b006      	add	sp, #24
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	bf00      	nop
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40010800 	.word	0x40010800
 80024ac:	20001a70 	.word	0x20001a70
 80024b0:	40020058 	.word	0x40020058

080024b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80024b6:	4601      	mov	r1, r0
{
 80024b8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80024ba:	2200      	movs	r2, #0
 80024bc:	2019      	movs	r0, #25
 80024be:	f003 fefb 	bl	80062b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80024c2:	2019      	movs	r0, #25
 80024c4:	f003 ff2c 	bl	8006320 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ca:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024cc:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ce:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d4:	619a      	str	r2, [r3, #24]
 80024d6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024d8:	4c11      	ldr	r4, [pc, #68]	; (8002520 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024e2:	f005 fb7f 	bl	8007be4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024e6:	f005 fb6d 	bl	8007bc4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_InitTick+0x70>)
 80024ec:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80024ee:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024f2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_InitTick+0x74>)
 80024f6:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80024fa:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024fc:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80024fe:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002500:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002502:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002506:	f005 fcf1 	bl	8007eec <HAL_TIM_Base_Init>
 800250a:	b920      	cbnz	r0, 8002516 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800250c:	4620      	mov	r0, r4
 800250e:	f005 fbff 	bl	8007d10 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002512:	b008      	add	sp, #32
 8002514:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002516:	2001      	movs	r0, #1
 8002518:	e7fb      	b.n	8002512 <HAL_InitTick+0x5e>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	20002000 	.word	0x20002000
 8002524:	40012c00 	.word	0x40012c00
 8002528:	000f4240 	.word	0x000f4240

0800252c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800252c:	4770      	bx	lr

0800252e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252e:	e7fe      	b.n	800252e <HardFault_Handler>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	e7fe      	b.n	8002532 <BusFault_Handler>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	e7fe      	b.n	8002534 <UsageFault_Handler>

08002536 <SVC_Handler>:
 8002536:	4770      	bx	lr

08002538 <DebugMon_Handler>:
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:
 800253a:	4770      	bx	lr

0800253c <SysTick_Handler>:
 800253c:	4770      	bx	lr
	...

08002540 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002540:	4801      	ldr	r0, [pc, #4]	; (8002548 <DMA1_Channel5_IRQHandler+0x8>)
 8002542:	f003 bf69 	b.w	8006418 <HAL_DMA_IRQHandler>
 8002546:	bf00      	nop
 8002548:	20001a70 	.word	0x20001a70

0800254c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800254c:	4801      	ldr	r0, [pc, #4]	; (8002554 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800254e:	f004 be1f 	b.w	8007190 <HAL_PCD_IRQHandler>
 8002552:	bf00      	nop
 8002554:	20003d20 	.word	0x20003d20

08002558 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <TIM1_UP_IRQHandler+0x8>)
 800255a:	f005 bbed 	b.w	8007d38 <HAL_TIM_IRQHandler>
 800255e:	bf00      	nop
 8002560:	20002000 	.word	0x20002000

08002564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002566:	4803      	ldr	r0, [pc, #12]	; (8002574 <TIM2_IRQHandler+0x10>)
 8002568:	f005 fbe6 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 800256c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 8002570:	f000 bc92 	b.w	8002e98 <led_update>
 8002574:	20001fc0 	.word	0x20001fc0

08002578 <TIM3_IRQHandler>:
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz.
	if (timer_index % 1 == 0){
		//code here runs on 200Hz, the data is updating at 100Hz.
		//Over-sampling ensures the data be updated at 100Hz.
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002578:	2300      	movs	r3, #0
{
 800257a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			  q[2] = ((double)quat[2]) / 1073741824.0;
			  q[3] = ((double)quat[3]) / 1073741824.0;


			  //32768 = 2.0g
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 800257e:	a7a2      	add	r7, pc, #648	; (adr r7, 8002808 <TIM3_IRQHandler+0x290>)
 8002580:	e9d7 6700 	ldrd	r6, r7, [r7]
			  q[0] = ((double)quat[0]) / 1073741824.0;
 8002584:	2400      	movs	r4, #0
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 8002586:	f04f 0800 	mov.w	r8, #0
{
 800258a:	b08e      	sub	sp, #56	; 0x38
			  q[0] = ((double)quat[0]) / 1073741824.0;
 800258c:	4da2      	ldr	r5, [pc, #648]	; (8002818 <TIM3_IRQHandler+0x2a0>)
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 800258e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8002854 <TIM3_IRQHandler+0x2dc>
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002592:	9304      	str	r3, [sp, #16]
 8002594:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002598:	9306      	str	r3, [sp, #24]
 800259a:	f8ad 301c 	strh.w	r3, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 800259e:	f10d 0309 	add.w	r3, sp, #9
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	f10d 030a 	add.w	r3, sp, #10
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	aa08      	add	r2, sp, #32
 80025ac:	ab03      	add	r3, sp, #12
 80025ae:	a906      	add	r1, sp, #24
 80025b0:	a804      	add	r0, sp, #16
 80025b2:	f7ff fc17 	bl	8001de4 <dmp_read_fifo>
		  if (status == 0){
 80025b6:	2800      	cmp	r0, #0
 80025b8:	f040 809f 	bne.w	80026fa <TIM3_IRQHandler+0x182>
			  q[0] = ((double)quat[0]) / 1073741824.0;
 80025bc:	9808      	ldr	r0, [sp, #32]
 80025be:	f7fd ff21 	bl	8000404 <__aeabi_i2d>
 80025c2:	4622      	mov	r2, r4
 80025c4:	462b      	mov	r3, r5
 80025c6:	f7fd ff87 	bl	80004d8 <__aeabi_dmul>
 80025ca:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8002858 <TIM3_IRQHandler+0x2e0>
 80025ce:	e9ca 0100 	strd	r0, r1, [sl]
			  q[1] = ((double)quat[1]) / 1073741824.0;
 80025d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025d4:	f7fd ff16 	bl	8000404 <__aeabi_i2d>
 80025d8:	4622      	mov	r2, r4
 80025da:	462b      	mov	r3, r5
 80025dc:	f7fd ff7c 	bl	80004d8 <__aeabi_dmul>
 80025e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  q[2] = ((double)quat[2]) / 1073741824.0;
 80025e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80025e6:	f7fd ff0d 	bl	8000404 <__aeabi_i2d>
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	f7fd ff73 	bl	80004d8 <__aeabi_dmul>
 80025f2:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  q[3] = ((double)quat[3]) / 1073741824.0;
 80025f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80025f8:	f7fd ff04 	bl	8000404 <__aeabi_i2d>
 80025fc:	4622      	mov	r2, r4
 80025fe:	462b      	mov	r3, r5
 8002600:	f7fd ff6a 	bl	80004d8 <__aeabi_dmul>
 8002604:	e9ca 0106 	strd	r0, r1, [sl, #24]
			  a[0] = ((double)accel[0]) * 9.80655 / 16384.0;
 8002608:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800260c:	f7fd fefa 	bl	8000404 <__aeabi_i2d>
 8002610:	4632      	mov	r2, r6
 8002612:	463b      	mov	r3, r7
 8002614:	f7fd ff60 	bl	80004d8 <__aeabi_dmul>
 8002618:	4642      	mov	r2, r8
 800261a:	464b      	mov	r3, r9
 800261c:	f7fd ff5c 	bl	80004d8 <__aeabi_dmul>
 8002620:	f8df a238 	ldr.w	sl, [pc, #568]	; 800285c <TIM3_IRQHandler+0x2e4>
 8002624:	e9ca 0100 	strd	r0, r1, [sl]
			  a[1] = ((double)accel[1]) * 9.80655 / 16384.0;
 8002628:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 800262c:	f7fd feea 	bl	8000404 <__aeabi_i2d>
 8002630:	4632      	mov	r2, r6
 8002632:	463b      	mov	r3, r7
 8002634:	f7fd ff50 	bl	80004d8 <__aeabi_dmul>
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	f7fd ff4c 	bl	80004d8 <__aeabi_dmul>
 8002640:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  a[2] = ((double)accel[2]) * 9.80655 / 16384.0;
 8002644:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002648:	f7fd fedc 	bl	8000404 <__aeabi_i2d>
 800264c:	4632      	mov	r2, r6
 800264e:	463b      	mov	r3, r7
 8002650:	f7fd ff42 	bl	80004d8 <__aeabi_dmul>
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	f7fd ff3e 	bl	80004d8 <__aeabi_dmul>
 800265c:	e9ca 0104 	strd	r0, r1, [sl, #16]

			  w[0] = ((double)gyro[0]) * M_PI * 2000.0 / 180.0 / 32768.0; //32768 = 2000DEG/s
 8002660:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002664:	f7fd fece 	bl	8000404 <__aeabi_i2d>
 8002668:	a369      	add	r3, pc, #420	; (adr r3, 8002810 <TIM3_IRQHandler+0x298>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ff33 	bl	80004d8 <__aeabi_dmul>
 8002672:	2200      	movs	r2, #0
 8002674:	4b69      	ldr	r3, [pc, #420]	; (800281c <TIM3_IRQHandler+0x2a4>)
 8002676:	f7fd ff2f 	bl	80004d8 <__aeabi_dmul>
 800267a:	2200      	movs	r2, #0
 800267c:	4b68      	ldr	r3, [pc, #416]	; (8002820 <TIM3_IRQHandler+0x2a8>)
 800267e:	f7fe f855 	bl	800072c <__aeabi_ddiv>
 8002682:	2200      	movs	r2, #0
 8002684:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002688:	f7fd ff26 	bl	80004d8 <__aeabi_dmul>
 800268c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8002860 <TIM3_IRQHandler+0x2e8>
 8002690:	e9ca 0100 	strd	r0, r1, [sl]
			  w[1] = ((double)gyro[1]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002694:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002698:	f7fd feb4 	bl	8000404 <__aeabi_i2d>
 800269c:	a35c      	add	r3, pc, #368	; (adr r3, 8002810 <TIM3_IRQHandler+0x298>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fd ff19 	bl	80004d8 <__aeabi_dmul>
 80026a6:	2200      	movs	r2, #0
 80026a8:	4b5c      	ldr	r3, [pc, #368]	; (800281c <TIM3_IRQHandler+0x2a4>)
 80026aa:	f7fd ff15 	bl	80004d8 <__aeabi_dmul>
 80026ae:	2200      	movs	r2, #0
 80026b0:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <TIM3_IRQHandler+0x2a8>)
 80026b2:	f7fe f83b 	bl	800072c <__aeabi_ddiv>
 80026b6:	2200      	movs	r2, #0
 80026b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80026bc:	f7fd ff0c 	bl	80004d8 <__aeabi_dmul>
 80026c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 80026c4:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80026c8:	f7fd fe9c 	bl	8000404 <__aeabi_i2d>
 80026cc:	a350      	add	r3, pc, #320	; (adr r3, 8002810 <TIM3_IRQHandler+0x298>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fd ff01 	bl	80004d8 <__aeabi_dmul>
 80026d6:	2200      	movs	r2, #0
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <TIM3_IRQHandler+0x2a4>)
 80026da:	f7fd fefd 	bl	80004d8 <__aeabi_dmul>
 80026de:	2200      	movs	r2, #0
 80026e0:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <TIM3_IRQHandler+0x2a8>)
 80026e2:	f7fe f823 	bl	800072c <__aeabi_ddiv>
 80026e6:	2200      	movs	r2, #0
 80026e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80026ec:	f7fd fef4 	bl	80004d8 <__aeabi_dmul>

			  send_imu_data = 1;
 80026f0:	2201      	movs	r2, #1
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <TIM3_IRQHandler+0x2ac>)
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 80026f4:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  send_imu_data = 1;
 80026f8:	601a      	str	r2, [r3, #0]
		  }
		  }while(more != 0 && initialize == 0);
 80026fa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <TIM3_IRQHandler+0x2b0>)
 8002700:	b11a      	cbz	r2, 800270a <TIM3_IRQHandler+0x192>
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2a00      	cmp	r2, #0
 8002706:	f43f af4a 	beq.w	800259e <TIM3_IRQHandler+0x26>
		  initialize = 1;
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 10 == 1){//avoid IMU update
 800270e:	220a      	movs	r2, #10
 8002710:	4c46      	ldr	r4, [pc, #280]	; (800282c <TIM3_IRQHandler+0x2b4>)
 8002712:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002716:	fb91 f3f2 	sdiv	r3, r1, r2
 800271a:	fb02 1313 	mls	r3, r2, r3, r1
 800271e:	b21b      	sxth	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d11d      	bne.n	8002760 <TIM3_IRQHandler+0x1e8>

		if (ms5611_read_index == 0){
 8002724:	4d42      	ldr	r5, [pc, #264]	; (8002830 <TIM3_IRQHandler+0x2b8>)
 8002726:	4e43      	ldr	r6, [pc, #268]	; (8002834 <TIM3_IRQHandler+0x2bc>)
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b953      	cbnz	r3, 8002742 <TIM3_IRQHandler+0x1ca>
			ms5611_retrieve_temperature();
 800272c:	f000 fc64 	bl	8002ff8 <ms5611_retrieve_temperature>
			pt[1] = ms5611_get_temperature();
 8002730:	f000 fcb4 	bl	800309c <ms5611_get_temperature>
 8002734:	e9c6 0102 	strd	r0, r1, [r6, #8]
			ms5611_request_temperature();
			ms5611_read_index = 0;
		}else{
			ms5611_retrieve_pressure();
			pt[0] = ms5611_get_pressure();
			ms5611_request_pressure();
 8002738:	f000 fc16 	bl	8002f68 <ms5611_request_pressure>
			ms5611_read_index++;
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	e00a      	b.n	8002758 <TIM3_IRQHandler+0x1e0>
		}else if (ms5611_read_index == TEMP_READ_INTERVAL - 1){
 8002742:	2b09      	cmp	r3, #9
 8002744:	d159      	bne.n	80027fa <TIM3_IRQHandler+0x282>
			ms5611_retrieve_pressure();
 8002746:	f000 fc25 	bl	8002f94 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 800274a:	f000 fcfb 	bl	8003144 <ms5611_get_pressure>
 800274e:	e9c6 0100 	strd	r0, r1, [r6]
			ms5611_request_temperature();
 8002752:	f000 fc3b 	bl	8002fcc <ms5611_request_temperature>
			ms5611_read_index = 0;
 8002756:	2300      	movs	r3, #0
		}
		send_pt_data = 1;
 8002758:	2201      	movs	r2, #1
			ms5611_read_index++;
 800275a:	602b      	str	r3, [r5, #0]
		send_pt_data = 1;
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <TIM3_IRQHandler+0x2c0>)
 800275e:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 20 == 1){//avoid IMU update
 8002760:	2314      	movs	r3, #20
 8002762:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002766:	fb92 f5f3 	sdiv	r5, r2, r3
 800276a:	fb03 2515 	mls	r5, r3, r5, r2
 800276e:	b22d      	sxth	r5, r5
 8002770:	2d01      	cmp	r5, #1
 8002772:	d135      	bne.n	80027e0 <TIM3_IRQHandler+0x268>
		//code here runs on 10Hz
		short data[3];


		HMC5883L_GetHeading(data);
 8002774:	a806      	add	r0, sp, #24
 8002776:	f000 f959 	bl	8002a2c <HMC5883L_GetHeading>

		double raw_mag[3];
		raw_mag[0] = (double)data[0];
 800277a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800277e:	f7fd fe41 	bl	8000404 <__aeabi_i2d>
 8002782:	e9cd 0108 	strd	r0, r1, [sp, #32]
		raw_mag[1] = (double)data[2];//for HMC5883L, data is in X Z Y format
 8002786:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800278a:	f7fd fe3b 	bl	8000404 <__aeabi_i2d>
 800278e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		raw_mag[2] = (double)data[1];//for HMC5883L, data is in X Z Y format
 8002792:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002796:	f7fd fe35 	bl	8000404 <__aeabi_i2d>
 800279a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		calibrate_and_convert_mag_reading(raw_mag,m);
 800279e:	4927      	ldr	r1, [pc, #156]	; (800283c <TIM3_IRQHandler+0x2c4>)
 80027a0:	a808      	add	r0, sp, #32
 80027a2:	f000 f975 	bl	8002a90 <calibrate_and_convert_mag_reading>
		send_mag_data = 1;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <TIM3_IRQHandler+0x2c8>)
 80027a8:	601d      	str	r5, [r3, #0]

		//poll DMA buffer
		GNSS_RX_Update();
 80027aa:	f000 fa55 	bl	8002c58 <GNSS_RX_Update>

		//Record GPS data
		if (GNSS.GNGGA.status != 0){//data is valid
 80027ae:	4925      	ldr	r1, [pc, #148]	; (8002844 <TIM3_IRQHandler+0x2cc>)
 80027b0:	f8d1 34a4 	ldr.w	r3, [r1, #1188]	; 0x4a4
 80027b4:	b1a3      	cbz	r3, 80027e0 <TIM3_IRQHandler+0x268>
			lla[0] = GNSS.GNGGA.lat;
 80027b6:	4e24      	ldr	r6, [pc, #144]	; (8002848 <TIM3_IRQHandler+0x2d0>)
 80027b8:	f501 6390 	add.w	r3, r1, #1152	; 0x480
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	e9c6 2300 	strd	r2, r3, [r6]
			lla[1] = GNSS.GNGGA.lon;
 80027c4:	f501 6393 	add.w	r3, r1, #1176	; 0x498
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
			lla[2] = GNSS.GNGGA.MSL_alt;
 80027cc:	f8d1 04b0 	ldr.w	r0, [r1, #1200]	; 0x4b0
			lla[1] = GNSS.GNGGA.lon;
 80027d0:	e9c6 2302 	strd	r2, r3, [r6, #8]
			lla[2] = GNSS.GNGGA.MSL_alt;
 80027d4:	f7fd fe28 	bl	8000428 <__aeabi_f2d>
			send_gps_data = 1;
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <TIM3_IRQHandler+0x2d4>)
			lla[2] = GNSS.GNGGA.MSL_alt;
 80027da:	e9c6 0104 	strd	r0, r1, [r6, #16]
			send_gps_data = 1;
 80027de:	601d      	str	r5, [r3, #0]
		}
	}

	timer_index++;
 80027e0:	8823      	ldrh	r3, [r4, #0]
	if (timer_index == 200){
		timer_index = 0;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027e2:	481b      	ldr	r0, [pc, #108]	; (8002850 <TIM3_IRQHandler+0x2d8>)
	timer_index++;
 80027e4:	3301      	adds	r3, #1
 80027e6:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 80027e8:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 80027ea:	bf08      	it	eq
 80027ec:	2300      	moveq	r3, #0
 80027ee:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 80027f0:	f005 faa2 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027f4:	b00e      	add	sp, #56	; 0x38
 80027f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ms5611_retrieve_pressure();
 80027fa:	f000 fbcb 	bl	8002f94 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 80027fe:	f000 fca1 	bl	8003144 <ms5611_get_pressure>
 8002802:	e9c6 0100 	strd	r0, r1, [r6]
 8002806:	e797      	b.n	8002738 <TIM3_IRQHandler+0x1c0>
 8002808:	1f212d77 	.word	0x1f212d77
 800280c:	40239cf4 	.word	0x40239cf4
 8002810:	54442d18 	.word	0x54442d18
 8002814:	400921fb 	.word	0x400921fb
 8002818:	3e100000 	.word	0x3e100000
 800281c:	409f4000 	.word	0x409f4000
 8002820:	40668000 	.word	0x40668000
 8002824:	2000043c 	.word	0x2000043c
 8002828:	20000460 	.word	0x20000460
 800282c:	20000468 	.word	0x20000468
 8002830:	20000464 	.word	0x20000464
 8002834:	20000408 	.word	0x20000408
 8002838:	20000444 	.word	0x20000444
 800283c:	200003f0 	.word	0x200003f0
 8002840:	20000440 	.word	0x20000440
 8002844:	20001af8 	.word	0x20001af8
 8002848:	200003d8 	.word	0x200003d8
 800284c:	20000438 	.word	0x20000438
 8002850:	20001a2c 	.word	0x20001a2c
 8002854:	3f100000 	.word	0x3f100000
 8002858:	20000418 	.word	0x20000418
 800285c:	200003c0 	.word	0x200003c0
 8002860:	20000448 	.word	0x20000448

08002864 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002864:	2001      	movs	r0, #1
 8002866:	4770      	bx	lr

08002868 <_kill>:

int _kill(int pid, int sig)
{
 8002868:	b508      	push	{r3, lr}
	errno = EINVAL;
 800286a:	f007 f9c7 	bl	8009bfc <__errno>
 800286e:	2316      	movs	r3, #22
 8002870:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002872:	f04f 30ff 	mov.w	r0, #4294967295
 8002876:	bd08      	pop	{r3, pc}

08002878 <_exit>:

void _exit (int status)
{
 8002878:	b508      	push	{r3, lr}
	errno = EINVAL;
 800287a:	f007 f9bf 	bl	8009bfc <__errno>
 800287e:	2316      	movs	r3, #22
 8002880:	6003      	str	r3, [r0, #0]
 8002882:	e7fe      	b.n	8002882 <_exit+0xa>

08002884 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002884:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <_sbrk+0x2c>)
{
 8002888:	4602      	mov	r2, r0
	if (heap_end == 0)
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	b909      	cbnz	r1, 8002892 <_sbrk+0xe>
		heap_end = &end;
 800288e:	4909      	ldr	r1, [pc, #36]	; (80028b4 <_sbrk+0x30>)
 8002890:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002892:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002894:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002896:	4402      	add	r2, r0
 8002898:	428a      	cmp	r2, r1
 800289a:	d906      	bls.n	80028aa <_sbrk+0x26>
	{
		errno = ENOMEM;
 800289c:	f007 f9ae 	bl	8009bfc <__errno>
 80028a0:	230c      	movs	r3, #12
 80028a2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80028a8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80028aa:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80028ac:	e7fc      	b.n	80028a8 <_sbrk+0x24>
 80028ae:	bf00      	nop
 80028b0:	2000046c 	.word	0x2000046c
 80028b4:	20003f90 	.word	0x20003f90

080028b8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <SystemInit+0x40>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <SystemInit+0x44>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80028e4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <SystemInit+0x48>)
 80028f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	f8ff0000 	.word	0xf8ff0000
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002904:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002906:	e003      	b.n	8002910 <LoopCopyDataInit>

08002908 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800290a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800290c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800290e:	3104      	adds	r1, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002914:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002916:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002918:	d3f6      	bcc.n	8002908 <CopyDataInit>
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800291c:	e002      	b.n	8002924 <LoopFillZerobss>

0800291e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002920:	f842 3b04 	str.w	r3, [r2], #4

08002924 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002926:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002928:	d3f9      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292a:	f7ff ffc5 	bl	80028b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f007 f96b 	bl	8009c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002932:	f7ff fb49 	bl	8001fc8 <main>
  bx lr
 8002936:	4770      	bx	lr
  ldr r3, =_sidata
 8002938:	0800d998 	.word	0x0800d998
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002940:	2000038c 	.word	0x2000038c
  ldr r2, =_sbss
 8002944:	20000390 	.word	0x20000390
  ldr r3, = _ebss
 8002948:	20003f90 	.word	0x20003f90

0800294c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_2_IRQHandler>
	...

08002950 <HMC5883L_I2C_set>:
 * @param  None
 * @retval None
 */
void HMC5883L_I2C_set(I2C_HandleTypeDef* i2cx)
{
	hmc5883l_i2cx = i2cx;
 8002950:	4b01      	ldr	r3, [pc, #4]	; (8002958 <HMC5883L_I2C_set+0x8>)
 8002952:	6018      	str	r0, [r3, #0]
}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20001a6c 	.word	0x20001a6c

0800295c <HMC5883L_I2C_ByteWrite>:
 * @param  pBuffer : pointer to the buffer  containing the data to be written to the HMC5883L.
 * @param  WriteAddr : address of the register in which the data will be written
 * @retval None
 */
void HMC5883L_I2C_ByteWrite(uint8_t slaveAddr, uint8_t* pBuffer, uint8_t WriteAddr)
{
 800295c:	b507      	push	{r0, r1, r2, lr}
	I2C_write(hmc5883l_i2cx, slaveAddr, WriteAddr,1, pBuffer);
 800295e:	9100      	str	r1, [sp, #0]
 8002960:	4601      	mov	r1, r0
 8002962:	4804      	ldr	r0, [pc, #16]	; (8002974 <HMC5883L_I2C_ByteWrite+0x18>)
 8002964:	2301      	movs	r3, #1
 8002966:	6800      	ldr	r0, [r0, #0]
 8002968:	f000 fa88 	bl	8002e7c <I2C_write>
}
 800296c:	b003      	add	sp, #12
 800296e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002972:	bf00      	nop
 8002974:	20001a6c 	.word	0x20001a6c

08002978 <HMC5883L_SetGain>:
{
 8002978:	b507      	push	{r0, r1, r2, lr}
    uint8_t tmp = gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1);
 800297a:	0140      	lsls	r0, r0, #5
 800297c:	a902      	add	r1, sp, #8
 800297e:	f801 0d01 	strb.w	r0, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_CONFIG_B);
 8002982:	2201      	movs	r2, #1
 8002984:	201e      	movs	r0, #30
 8002986:	f7ff ffe9 	bl	800295c <HMC5883L_I2C_ByteWrite>
}
 800298a:	b003      	add	sp, #12
 800298c:	f85d fb04 	ldr.w	pc, [sp], #4

08002990 <HMC5883L_SetMode>:
{
 8002990:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t tmp = HMC5883Lmode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 8002992:	4c06      	ldr	r4, [pc, #24]	; (80029ac <HMC5883L_SetMode+0x1c>)
 8002994:	a902      	add	r1, sp, #8
 8002996:	7823      	ldrb	r3, [r4, #0]
{
 8002998:	4605      	mov	r5, r0
    uint8_t tmp = HMC5883Lmode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 800299a:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_MODE);
 800299e:	2202      	movs	r2, #2
 80029a0:	201e      	movs	r0, #30
 80029a2:	f7ff ffdb 	bl	800295c <HMC5883L_I2C_ByteWrite>
    HMC5883Lmode = newMode; // track to tell if we have to clear bit 7 after a read
 80029a6:	7025      	strb	r5, [r4, #0]
}
 80029a8:	b003      	add	sp, #12
 80029aa:	bd30      	pop	{r4, r5, pc}
 80029ac:	20002040 	.word	0x20002040

080029b0 <HMC5883L_Initialize>:
    uint8_t tmp = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1))
 80029b0:	2370      	movs	r3, #112	; 0x70
{
 80029b2:	b507      	push	{r0, r1, r2, lr}
    uint8_t tmp = (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1))
 80029b4:	a902      	add	r1, sp, #8
 80029b6:	f801 3d01 	strb.w	r3, [r1, #-1]!
    HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_CONFIG_A);
 80029ba:	2200      	movs	r2, #0
 80029bc:	201e      	movs	r0, #30
 80029be:	f7ff ffcd 	bl	800295c <HMC5883L_I2C_ByteWrite>
    HMC5883L_SetGain(HMC5883L_GAIN_1090);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7ff ffd8 	bl	8002978 <HMC5883L_SetGain>
    HMC5883L_SetMode(HMC5883L_MODE_CONTINUOUS);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff ffe1 	bl	8002990 <HMC5883L_SetMode>
}
 80029ce:	b003      	add	sp, #12
 80029d0:	f85d fb04 	ldr.w	pc, [sp], #4

080029d4 <HMC5883L_I2C_BufferRead>:
 * @param  ReadAddr : HMC5883L's internal address to read from.
 * @param  NumByteToRead : number of bytes to read from the HMC5883L ( NumByteToRead >1  only for the Magnetometer reading).
 * @retval None
 */
void HMC5883L_I2C_BufferRead(uint8_t slaveAddr, uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80029d4:	b507      	push	{r0, r1, r2, lr}
	I2C_read(hmc5883l_i2cx, slaveAddr, ReadAddr, NumByteToRead, pBuffer);
 80029d6:	9100      	str	r1, [sp, #0]
 80029d8:	4601      	mov	r1, r0
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <HMC5883L_I2C_BufferRead+0x18>)
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	6800      	ldr	r0, [r0, #0]
 80029e0:	f000 fa3e 	bl	8002e60 <I2C_read>
}
 80029e4:	b003      	add	sp, #12
 80029e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ea:	bf00      	nop
 80029ec:	20001a6c 	.word	0x20001a6c

080029f0 <HMC5883L_TestConnection>:
{
 80029f0:	b513      	push	{r0, r1, r4, lr}
    uint8_t tmp[3] = { 0 };
 80029f2:	2400      	movs	r4, #0
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmp, HMC5883L_RA_ID_A, 3);
 80029f4:	2303      	movs	r3, #3
 80029f6:	220a      	movs	r2, #10
 80029f8:	a901      	add	r1, sp, #4
 80029fa:	201e      	movs	r0, #30
    uint8_t tmp[3] = { 0 };
 80029fc:	f8ad 4004 	strh.w	r4, [sp, #4]
 8002a00:	f88d 4006 	strb.w	r4, [sp, #6]
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmp, HMC5883L_RA_ID_A, 3);
 8002a04:	f7ff ffe6 	bl	80029d4 <HMC5883L_I2C_BufferRead>
    return (tmp[0] == 'H' && tmp[1] == '4' && tmp[2] == '3') ? 1 : 0;
 8002a08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a0c:	2b48      	cmp	r3, #72	; 0x48
 8002a0e:	d109      	bne.n	8002a24 <HMC5883L_TestConnection+0x34>
 8002a10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002a14:	2b34      	cmp	r3, #52	; 0x34
 8002a16:	d105      	bne.n	8002a24 <HMC5883L_TestConnection+0x34>
 8002a18:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8002a1c:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
 8002a20:	425c      	negs	r4, r3
 8002a22:	415c      	adcs	r4, r3
}
 8002a24:	4620      	mov	r0, r4
 8002a26:	b002      	add	sp, #8
 8002a28:	bd10      	pop	{r4, pc}
	...

08002a2c <HMC5883L_GetHeading>:
{
 8002a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tmpbuff[6] = { 0 };
 8002a2e:	2300      	movs	r3, #0
{
 8002a30:	4604      	mov	r4, r0
    uint8_t tmpbuff[6] = { 0 };
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	f8ad 300c 	strh.w	r3, [sp, #12]
    HMC5883L_I2C_BufferRead(HMC5883L_DEFAULT_ADDRESS, tmpbuff, HMC5883L_RA_DATAX_H, 6);
 8002a38:	2203      	movs	r2, #3
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	a902      	add	r1, sp, #8
 8002a3e:	201e      	movs	r0, #30
 8002a40:	f7ff ffc8 	bl	80029d4 <HMC5883L_I2C_BufferRead>
    uint8_t tmp = HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1);
 8002a44:	2301      	movs	r3, #1
 8002a46:	f88d 3007 	strb.w	r3, [sp, #7]
    if (HMC5883Lmode == HMC5883L_MODE_SINGLE)
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HMC5883L_GetHeading+0x60>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HMC5883L_GetHeading+0x32>
        HMC5883L_I2C_ByteWrite(HMC5883L_DEFAULT_ADDRESS, &tmp, HMC5883L_RA_MODE);
 8002a52:	2202      	movs	r2, #2
 8002a54:	f10d 0107 	add.w	r1, sp, #7
 8002a58:	201e      	movs	r0, #30
 8002a5a:	f7ff ff7f 	bl	800295c <HMC5883L_I2C_ByteWrite>
        Mag[i] = ((int16_t) ((uint16_t) tmpbuff[2 * i] << 8) + tmpbuff[2 * i + 1]);
 8002a5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002a62:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002a66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a6a:	8023      	strh	r3, [r4, #0]
 8002a6c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002a70:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002a74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a78:	8063      	strh	r3, [r4, #2]
 8002a7a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002a7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002a82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a86:	80a3      	strh	r3, [r4, #4]
}
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	20002040 	.word	0x20002040

08002a90 <calibrate_and_convert_mag_reading>:

/**
 * Calibrate magnetic sensor reading and convert readings from magnetic sensor
 * frame to IMU(accel and gyroscope) frame.
 */
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 8002a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	double m_unbias[3]; //magnatic readings minus offset
	double m_mag[3];

	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002a94:	2200      	movs	r2, #0
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 8002a96:	b086      	sub	sp, #24
 8002a98:	468a      	mov	sl, r1
 8002a9a:	4604      	mov	r4, r0
	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002a9c:	c803      	ldmia	r0, {r0, r1}
 8002a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aa2:	f7fd fb63 	bl	800016c <__adddf3>
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <calibrate_and_convert_mag_reading+0x118>)
 8002aaa:	f7fd fb5f 	bl	800016c <__adddf3>
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002aae:	2200      	movs	r2, #0
	m_unbias[0] = m_reading[0] + MAG_X_OFFSET;
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	4689      	mov	r9, r1
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002ab4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002ab8:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <calibrate_and_convert_mag_reading+0x11c>)
 8002aba:	f7fd fb57 	bl	800016c <__adddf3>
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002abe:	2200      	movs	r2, #0
	m_unbias[1] = m_reading[1] + MAG_Y_OFFSET;
 8002ac0:	4606      	mov	r6, r0
 8002ac2:	460f      	mov	r7, r1
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002ac4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <calibrate_and_convert_mag_reading+0x120>)
 8002aca:	f7fd fb4d 	bl	8000168 <__aeabi_dsub>

	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002ace:	2200      	movs	r2, #0
	m_unbias[2] = m_reading[2] + MAG_Z_OFFSET;
 8002ad0:	e9cd 0100 	strd	r0, r1, [sp]
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	4639      	mov	r1, r7
 8002ada:	f7fd fcfd 	bl	80004d8 <__aeabi_dmul>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f7fd fcf5 	bl	80004d8 <__aeabi_dmul>
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002aee:	2200      	movs	r2, #0
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002af4:	2300      	movs	r3, #0
 8002af6:	4640      	mov	r0, r8
 8002af8:	4649      	mov	r1, r9
 8002afa:	f7fd fced 	bl	80004d8 <__aeabi_dmul>
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002afe:	a324      	add	r3, pc, #144	; (adr r3, 8002b90 <calibrate_and_convert_mag_reading+0x100>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002b04:	4604      	mov	r4, r0
 8002b06:	460d      	mov	r5, r1
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002b08:	4640      	mov	r0, r8
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	f7fd fce4 	bl	80004d8 <__aeabi_dmul>
 8002b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b14:	f7fd fb2a 	bl	800016c <__adddf3>
 8002b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b1c:	f7fd fb26 	bl	800016c <__adddf3>
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002b20:	a31d      	add	r3, pc, #116	; (adr r3, 8002b98 <calibrate_and_convert_mag_reading+0x108>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
	 * 		+Y	-------------------------	-Y
	 * 		+Z	-------------------------	-Z
	 *
	 */

	m[0] = m_mag[0];
 8002b26:	e9ca 0100 	strd	r0, r1, [sl]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	4639      	mov	r1, r7
 8002b2e:	f7fd fcd3 	bl	80004d8 <__aeabi_dmul>
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f7fd fb19 	bl	800016c <__adddf3>
 8002b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b3e:	f7fd fb15 	bl	800016c <__adddf3>
	m[1] = -m_mag[1];
 8002b42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002b46:	f8ca 0008 	str.w	r0, [sl, #8]
 8002b4a:	f8ca 100c 	str.w	r1, [sl, #12]
	m_mag[2] = MAG_TRANSF_31*m_unbias[0] + MAG_TRANSF_32*m_unbias[1] + MAG_TRANSF_33*m_unbias[2];
 8002b4e:	4622      	mov	r2, r4
 8002b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b54:	462b      	mov	r3, r5
 8002b56:	f7fd fb09 	bl	800016c <__adddf3>
 8002b5a:	a311      	add	r3, pc, #68	; (adr r3, 8002ba0 <calibrate_and_convert_mag_reading+0x110>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
 8002b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4620      	mov	r0, r4
 8002b72:	4629      	mov	r1, r5
 8002b74:	f7fd fafa 	bl	800016c <__adddf3>
	m[2] = -m_mag[2];
 8002b78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002b7c:	f8ca 0010 	str.w	r0, [sl, #16]
 8002b80:	f8ca 1014 	str.w	r1, [sl, #20]
}
 8002b84:	b006      	add	sp, #24
 8002b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w
 8002b90:	40e53dbc 	.word	0x40e53dbc
 8002b94:	3f5af834 	.word	0x3f5af834
 8002b98:	1b31801b 	.word	0x1b31801b
 8002b9c:	3f5b3180 	.word	0x3f5b3180
 8002ba0:	1d41d41d 	.word	0x1d41d41d
 8002ba4:	3f5d41d4 	.word	0x3f5d41d4
 8002ba8:	403b8000 	.word	0x403b8000
 8002bac:	40600000 	.word	0x40600000
 8002bb0:	40564000 	.word	0x40564000

08002bb4 <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <GNSS_set_huart+0x8>)
 8002bb6:	6018      	str	r0, [r3, #0]
}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20001fbc 	.word	0x20001fbc

08002bc0 <parse_GNGGA>:
/**
 * parse GNSS.GNGGA sentence into fields as strings.(char[] s)
 * @param msg GNSS.GNGGA message
 * @param fields GNSS.GNGGA message parser output
 */
void parse_GNGGA(unsigned char* msg, char fields[][MAX_FIELD_SIZE]){
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
	        fields[current_field][current_pos] = *ch_ptr;
	        current_pos++;
	        ch_ptr++;
	    }
        fields[current_field][current_pos]='\0';
 8002bc2:	2600      	movs	r6, #0
    while (*ch_ptr != '\0'){
 8002bc4:	7803      	ldrb	r3, [r0, #0]
 8002bc6:	b19b      	cbz	r3, 8002bf0 <parse_GNGGA+0x30>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	1e4d      	subs	r5, r1, #1
	        fields[current_field][current_pos] = *ch_ptr;
 8002bcc:	4603      	mov	r3, r0
 8002bce:	e001      	b.n	8002bd4 <parse_GNGGA+0x14>
 8002bd0:	f805 2f01 	strb.w	r2, [r5, #1]!
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	1b1f      	subs	r7, r3, r4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8002bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bdc:	2a2c      	cmp	r2, #44	; 0x2c
 8002bde:	d001      	beq.n	8002be4 <parse_GNGGA+0x24>
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d1f5      	bne.n	8002bd0 <parse_GNGGA+0x10>
        fields[current_field][current_pos]='\0';
 8002be4:	55ce      	strb	r6, [r1, r7]
	    current_field++;
	    if (*ch_ptr != '\0'){ // skip ',' when not at end of string
 8002be6:	7803      	ldrb	r3, [r0, #0]
 8002be8:	b103      	cbz	r3, 8002bec <parse_GNGGA+0x2c>
	        ch_ptr++;
 8002bea:	3001      	adds	r0, #1
 8002bec:	310c      	adds	r1, #12
 8002bee:	e7e9      	b.n	8002bc4 <parse_GNGGA+0x4>
	    }
    }
}
 8002bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bf4 <convert_raw_lat_lon>:
 * convert raw latitude and longitude, which have format dddmm.mmmm
 * into decimal.
 * @param raw raw latitude and longitude input
 * @return decimal latitude and longitude
 */
double convert_raw_lat_lon(double raw){
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <convert_raw_lat_lon+0x44>)
double convert_raw_lat_lon(double raw){
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460d      	mov	r5, r1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002bfe:	f006 fe87 	bl	8009910 <fmod>
 8002c02:	4606      	mov	r6, r0
 8002c04:	460f      	mov	r7, r1
 8002c06:	4620      	mov	r0, r4
 8002c08:	4629      	mov	r1, r5
 8002c0a:	f7fd ff15 	bl	8000a38 <__aeabi_d2iz>
 8002c0e:	2364      	movs	r3, #100	; 0x64
 8002c10:	fb90 f0f3 	sdiv	r0, r0, r3
 8002c14:	f7fd fbf6 	bl	8000404 <__aeabi_i2d>
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <convert_raw_lat_lon+0x48>)
 8002c20:	4630      	mov	r0, r6
 8002c22:	4639      	mov	r1, r7
 8002c24:	f7fd fd82 	bl	800072c <__aeabi_ddiv>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4629      	mov	r1, r5
 8002c30:	f7fd fa9c 	bl	800016c <__adddf3>
}
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40590000 	.word	0x40590000
 8002c3c:	404e0000 	.word	0x404e0000

08002c40 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <GNSS_Init+0x10>)
 8002c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c46:	4903      	ldr	r1, [pc, #12]	; (8002c54 <GNSS_Init+0x14>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f005 ba9d 	b.w	8008188 <HAL_UART_Receive_DMA>
 8002c4e:	bf00      	nop
 8002c50:	20001fbc 	.word	0x20001fbc
 8002c54:	20001af8 	.word	0x20001af8

08002c58 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	b0b3      	sub	sp, #204	; 0xcc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5e:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8002c60:	4b77      	ldr	r3, [pc, #476]	; (8002e40 <GNSS_RX_Update+0x1e8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685e      	ldr	r6, [r3, #4]
 8002c6a:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8002c6e:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8002c70:	f04f 0800 	mov.w	r8, #0

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002c74:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002e5c <GNSS_RX_Update+0x204>
			//field 14: checksum
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
			GNSS.GNGGA.checksum[1] = fields[14][2];

			//convert raw latitude and longitude to decimal format
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002c78:	f109 070c 	add.w	r7, r9, #12
	while (GNSS.start != i){
 8002c7c:	4c71      	ldr	r4, [pc, #452]	; (8002e44 <GNSS_RX_Update+0x1ec>)
 8002c7e:	f04f 0b00 	mov.w	fp, #0
 8002c82:	4625      	mov	r5, r4
		GNSS.message_buffer[counter] = '\n';
 8002c84:	f04f 0a0a 	mov.w	sl, #10
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002c88:	f504 6280 	add.w	r2, r4, #1024	; 0x400
	while (GNSS.start != i){
 8002c8c:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 8002c90:	42b3      	cmp	r3, r6
 8002c92:	d00f      	beq.n	8002cb4 <GNSS_RX_Update+0x5c>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8002c94:	5ce1      	ldrb	r1, [r4, r3]
 8002c96:	2924      	cmp	r1, #36	; 0x24
 8002c98:	d006      	beq.n	8002ca8 <GNSS_RX_Update+0x50>
 8002c9a:	2100      	movs	r1, #0
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8002c9c:	5ce8      	ldrb	r0, [r5, r3]
 8002c9e:	2824      	cmp	r0, #36	; 0x24
 8002ca0:	d10c      	bne.n	8002cbc <GNSS_RX_Update+0x64>
 8002ca2:	b109      	cbz	r1, 8002ca8 <GNSS_RX_Update+0x50>
 8002ca4:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		if (GNSS.dma_buffer[GNSS.start] != '$'){break;}//if start not found, return.
 8002ca8:	f8d5 1464 	ldr.w	r1, [r5, #1124]	; 0x464
 8002cac:	5c6b      	ldrb	r3, [r5, r1]
 8002cae:	2b24      	cmp	r3, #36	; 0x24
 8002cb0:	f000 80b2 	beq.w	8002e18 <GNSS_RX_Update+0x1c0>
			new_information = 1;
		}
	}

	return new_information;
}
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	b033      	add	sp, #204	; 0xcc
 8002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4259      	negs	r1, r3
 8002cc0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc8:	bf58      	it	pl
 8002cca:	424b      	negpl	r3, r1
 8002ccc:	42b3      	cmp	r3, r6
 8002cce:	f04f 0101 	mov.w	r1, #1
 8002cd2:	d1e3      	bne.n	8002c9c <GNSS_RX_Update+0x44>
 8002cd4:	f8c5 6464 	str.w	r6, [r5, #1124]	; 0x464
 8002cd8:	e7e6      	b.n	8002ca8 <GNSS_RX_Update+0x50>
			if (GNSS.dma_buffer[end] == '\n'){
 8002cda:	5ce8      	ldrb	r0, [r5, r3]
 8002cdc:	280a      	cmp	r0, #10
 8002cde:	d009      	beq.n	8002cf4 <GNSS_RX_Update+0x9c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4258      	negs	r0, r3
 8002ce4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cec:	bf58      	it	pl
 8002cee:	4243      	negpl	r3, r0
 8002cf0:	42b3      	cmp	r3, r6
 8002cf2:	d1f2      	bne.n	8002cda <GNSS_RX_Update+0x82>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8002cf4:	5ce8      	ldrb	r0, [r5, r3]
 8002cf6:	280a      	cmp	r0, #10
 8002cf8:	d1dc      	bne.n	8002cb4 <GNSS_RX_Update+0x5c>
		int counter = 0;
 8002cfa:	f04f 0c00 	mov.w	ip, #0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002cfe:	428b      	cmp	r3, r1
 8002d00:	f10c 0001 	add.w	r0, ip, #1
 8002d04:	f040 808a 	bne.w	8002e1c <GNSS_RX_Update+0x1c4>
		GNSS.message_buffer[counter] = '\n';
 8002d08:	44ac      	add	ip, r5
		GNSS.message_buffer[counter+1] = '\0';
 8002d0a:	4428      	add	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8002d0c:	f88c a400 	strb.w	sl, [ip, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <GNSS_RX_Update+0x1f0>)
		GNSS.message_buffer[counter+1] = '\0';
 8002d12:	f880 b400 	strb.w	fp, [r0, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002d16:	4610      	mov	r0, r2
 8002d18:	9203      	str	r2, [sp, #12]
		GNSS.start = end;
 8002d1a:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002d1e:	f007 f831 	bl	8009d84 <strstr>
		if (str != NULL){
 8002d22:	9a03      	ldr	r2, [sp, #12]
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d0b1      	beq.n	8002c8c <GNSS_RX_Update+0x34>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002d28:	4d48      	ldr	r5, [pc, #288]	; (8002e4c <GNSS_RX_Update+0x1f4>)
			parse_GNGGA(GNSS.message_buffer,fields);
 8002d2a:	a905      	add	r1, sp, #20
 8002d2c:	4848      	ldr	r0, [pc, #288]	; (8002e50 <GNSS_RX_Update+0x1f8>)
 8002d2e:	f7ff ff47 	bl	8002bc0 <parse_GNGGA>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002d32:	f1a5 0208 	sub.w	r2, r5, #8
 8002d36:	1f2b      	subs	r3, r5, #4
 8002d38:	4946      	ldr	r1, [pc, #280]	; (8002e54 <GNSS_RX_Update+0x1fc>)
 8002d3a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d3e:	9500      	str	r5, [sp, #0]
 8002d40:	a808      	add	r0, sp, #32
 8002d42:	f006 fff3 	bl	8009d2c <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002d46:	a80b      	add	r0, sp, #44	; 0x2c
 8002d48:	f006 ff51 	bl	8009bee <atof>
 8002d4c:	f7fd febc 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8002d50:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002d54:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002d58:	a811      	add	r0, sp, #68	; 0x44
			GNSS.GNGGA.North_South = fields[3][0];
 8002d5a:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002d5e:	f006 ff46 	bl	8009bee <atof>
			GNSS.GNGGA.East_West = fields[5][0];
 8002d62:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002d66:	e9c5 0108 	strd	r0, r1, [r5, #32]
			GNSS.GNGGA.status = atoi(fields[6]);
 8002d6a:	a817      	add	r0, sp, #92	; 0x5c
			GNSS.GNGGA.East_West = fields[5][0];
 8002d6c:	f884 34a0 	strb.w	r3, [r4, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8002d70:	f006 ff40 	bl	8009bf4 <atoi>
 8002d74:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8002d78:	a81a      	add	r0, sp, #104	; 0x68
 8002d7a:	f006 ff3b 	bl	8009bf4 <atoi>
 8002d7e:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8002d82:	a81d      	add	r0, sp, #116	; 0x74
 8002d84:	f006 ff33 	bl	8009bee <atof>
 8002d88:	f7fd fe9e 	bl	8000ac8 <__aeabi_d2f>
 8002d8c:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002d90:	a820      	add	r0, sp, #128	; 0x80
 8002d92:	f006 ff2c 	bl	8009bee <atof>
 8002d96:	f7fd fe97 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002d9a:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002d9e:	f8c4 04b0 	str.w	r0, [r4, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002da2:	a826      	add	r0, sp, #152	; 0x98
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002da4:	f884 34b4 	strb.w	r3, [r4, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002da8:	f006 ff21 	bl	8009bee <atof>
 8002dac:	f7fd fe8c 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002db0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002db4:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002db8:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002dbc:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002dc0:	f8d4 0478 	ldr.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002dc4:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002dc8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
			new_information = 1;
 8002dcc:	f04f 0801 	mov.w	r8, #1
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002dd0:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002dd4:	f7fd fb28 	bl	8000428 <__aeabi_f2d>
 8002dd8:	f7ff ff0c 	bl	8002bf4 <convert_raw_lat_lon>
 8002ddc:	e9c7 0100 	strd	r0, r1, [r7]
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8002de0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8002de4:	f7ff ff06 	bl	8002bf4 <convert_raw_lat_lon>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002de8:	f894 3488 	ldrb.w	r3, [r4, #1160]	; 0x488
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	2b4e      	cmp	r3, #78	; 0x4e
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4692      	mov	sl, r2
 8002df4:	bf18      	it	ne
 8002df6:	f103 4300 	addne.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	469b      	mov	fp, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002dfc:	f894 34a0 	ldrb.w	r3, [r4, #1184]	; 0x4a0
 8002e00:	4602      	mov	r2, r0
 8002e02:	2b45      	cmp	r3, #69	; 0x45
 8002e04:	bf18      	it	ne
 8002e06:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4912      	ldr	r1, [pc, #72]	; (8002e58 <GNSS_RX_Update+0x200>)
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002e0e:	e9c7 ab00 	strd	sl, fp, [r7]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002e12:	e9c1 2300 	strd	r2, r3, [r1]
 8002e16:	e731      	b.n	8002c7c <GNSS_RX_Update+0x24>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002e18:	460b      	mov	r3, r1
 8002e1a:	e769      	b.n	8002cf0 <GNSS_RX_Update+0x98>
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002e1c:	f815 e001 	ldrb.w	lr, [r5, r1]
 8002e20:	eb05 0c00 	add.w	ip, r5, r0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002e24:	3101      	adds	r1, #1
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002e26:	f88c e3ff 	strb.w	lr, [ip, #1023]	; 0x3ff
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002e2a:	f1d1 0c00 	rsbs	ip, r1, #0
 8002e2e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002e32:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002e36:	bf58      	it	pl
 8002e38:	f1cc 0100 	rsbpl	r1, ip, #0
 8002e3c:	4684      	mov	ip, r0
 8002e3e:	e75e      	b.n	8002cfe <GNSS_RX_Update+0xa6>
 8002e40:	20001fbc 	.word	0x20001fbc
 8002e44:	20001af8 	.word	0x20001af8
 8002e48:	0800d4a2 	.word	0x0800d4a2
 8002e4c:	20001f68 	.word	0x20001f68
 8002e50:	20001ef8 	.word	0x20001ef8
 8002e54:	0800d4aa 	.word	0x0800d4aa
 8002e58:	20001f90 	.word	0x20001f90
 8002e5c:	20001f6c 	.word	0x20001f6c

08002e60 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8002e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8002e62:	2414      	movs	r4, #20
 8002e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e68:	9b06      	ldr	r3, [sp, #24]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4099      	lsls	r1, r3
 8002e70:	f003 ff42 	bl	8006cf8 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8002e74:	b100      	cbz	r0, 8002e78 <I2C_read+0x18>
		__NOP();
 8002e76:	bf00      	nop
	}
	return state;
}
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd10      	pop	{r4, pc}

08002e7c <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8002e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8002e7e:	2414      	movs	r4, #20
 8002e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e84:	9b06      	ldr	r3, [sp, #24]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	4099      	lsls	r1, r3
 8002e8c:	f003 fea4 	bl	8006bd8 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8002e90:	b100      	cbz	r0, 8002e94 <I2C_write+0x18>
			__NOP();
 8002e92:	bf00      	nop
		}
	return state;
}
 8002e94:	b004      	add	sp, #16
 8002e96:	bd10      	pop	{r4, pc}

08002e98 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8002e98:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <led_update+0x2c>)
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ec8 <led_update+0x30>)
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	7823      	ldrb	r3, [r4, #0]
 8002ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea6:	411a      	asrs	r2, r3
 8002ea8:	f1c2 0201 	rsb	r2, r2, #1
 8002eac:	f002 0201 	and.w	r2, r2, #1
 8002eb0:	4806      	ldr	r0, [pc, #24]	; (8002ecc <led_update+0x34>)
 8002eb2:	f003 fc25 	bl	8006700 <HAL_GPIO_WritePin>
	led_state++;
 8002eb6:	7823      	ldrb	r3, [r4, #0]
 8002eb8:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	7023      	strb	r3, [r4, #0]
}
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000470 	.word	0x20000470
 8002ec8:	20000471 	.word	0x20000471
 8002ecc:	40011000 	.word	0x40011000

08002ed0 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <led_set+0x8>)
 8002ed2:	7018      	strb	r0, [r3, #0]
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000470 	.word	0x20000470

08002edc <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <mpu_set_i2c+0x8>)
 8002ede:	6018      	str	r0, [r3, #0]
}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200019d4 	.word	0x200019d4

08002ee8 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8002ee8:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	460a      	mov	r2, r1
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <i2c_write+0x18>)
 8002ef4:	6800      	ldr	r0, [r0, #0]
 8002ef6:	f7ff ffc1 	bl	8002e7c <I2C_write>
}
 8002efa:	b003      	add	sp, #12
 8002efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f00:	200019d4 	.word	0x200019d4

08002f04 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8002f04:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4803      	ldr	r0, [pc, #12]	; (8002f1c <i2c_read+0x18>)
 8002f10:	6800      	ldr	r0, [r0, #0]
 8002f12:	f7ff ffa5 	bl	8002e60 <I2C_read>
}
 8002f16:	b003      	add	sp, #12
 8002f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f1c:	200019d4 	.word	0x200019d4

08002f20 <delay_ms>:

void delay_ms(unsigned long num_ms){
	HAL_Delay(num_ms);
 8002f20:	f003 b9a6 	b.w	8006270 <HAL_Delay>

08002f24 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8002f24:	4b01      	ldr	r3, [pc, #4]	; (8002f2c <ms5611_set_i2c+0x8>)
 8002f26:	6018      	str	r0, [r3, #0]
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20001fb8 	.word	0x20001fb8

08002f30 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8002f30:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8002f32:	9200      	str	r2, [sp, #0]
 8002f34:	4602      	mov	r2, r0
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <ms5611_read_i2c+0x18>)
 8002f38:	460b      	mov	r3, r1
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	2177      	movs	r1, #119	; 0x77
 8002f3e:	f7ff ff8f 	bl	8002e60 <I2C_read>
}
 8002f42:	b003      	add	sp, #12
 8002f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f48:	20001fb8 	.word	0x20001fb8

08002f4c <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 8002f4c:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	4602      	mov	r2, r0
 8002f52:	4804      	ldr	r0, [pc, #16]	; (8002f64 <ms5611_write_i2c+0x18>)
 8002f54:	460b      	mov	r3, r1
 8002f56:	6800      	ldr	r0, [r0, #0]
 8002f58:	2177      	movs	r1, #119	; 0x77
 8002f5a:	f7ff ff8f 	bl	8002e7c <I2C_write>
}
 8002f5e:	b003      	add	sp, #12
 8002f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f64:	20001fb8 	.word	0x20001fb8

08002f68 <ms5611_request_pressure>:

/**
 * Start ADC conversion of raw pressure in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_pressure(){
 8002f68:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f6a:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <ms5611_request_pressure+0x28>)
 8002f6e:	aa01      	add	r2, sp, #4
 8002f70:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f72:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002f76:	0040      	lsls	r0, r0, #1
 8002f78:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002f7c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f80:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002f84:	f7ff ffe2 	bl	8002f4c <ms5611_write_i2c>
}
 8002f88:	b003      	add	sp, #12
 8002f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f8e:	bf00      	nop
 8002f90:	2000003c 	.word	0x2000003c

08002f94 <ms5611_retrieve_pressure>:

/**
 * Read result of ADC conversion of raw pressure.
 */
void ms5611_retrieve_pressure(){
 8002f94:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f96:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002f98:	aa01      	add	r2, sp, #4
 8002f9a:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002f9c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002fa0:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002fa4:	f7ff ffc4 	bl	8002f30 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002fa8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002fac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fb6:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8002fba:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8002fbc:	bf1c      	itt	ne
 8002fbe:	4a02      	ldrne	r2, [pc, #8]	; (8002fc8 <ms5611_retrieve_pressure+0x34>)
 8002fc0:	6013      	strne	r3, [r2, #0]
	}
}
 8002fc2:	b003      	add	sp, #12
 8002fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fc8:	20002044 	.word	0x20002044

08002fcc <ms5611_request_temperature>:

/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
 8002fcc:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002fce:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <ms5611_request_temperature+0x28>)
 8002fd2:	aa01      	add	r2, sp, #4
 8002fd4:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002fd6:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002fda:	0040      	lsls	r0, r0, #1
 8002fdc:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8002fe0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002fe4:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002fe8:	f7ff ffb0 	bl	8002f4c <ms5611_write_i2c>
}
 8002fec:	b003      	add	sp, #12
 8002fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ff2:	bf00      	nop
 8002ff4:	2000003c 	.word	0x2000003c

08002ff8 <ms5611_retrieve_temperature>:

/**
 * Read result of ADC conversion of raw temperature.
 */
void ms5611_retrieve_temperature(){
 8002ff8:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002ffa:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002ffc:	aa01      	add	r2, sp, #4
 8002ffe:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003000:	f8ad 0004 	strh.w	r0, [sp, #4]
 8003004:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8003008:	f7ff ff92 	bl	8002f30 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800300c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003010:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800301a:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 800301e:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8003020:	bf1c      	itt	ne
 8003022:	4a02      	ldrne	r2, [pc, #8]	; (800302c <ms5611_retrieve_temperature+0x34>)
 8003024:	6013      	strne	r3, [r2, #0]
	}
}
 8003026:	b003      	add	sp, #12
 8003028:	f85d fb04 	ldr.w	pc, [sp], #4
 800302c:	20002054 	.word	0x20002054

08003030 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8003030:	b508      	push	{r3, lr}

	ms5611_request_pressure();
 8003032:	f7ff ff99 	bl	8002f68 <ms5611_request_pressure>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003036:	200c      	movs	r0, #12
 8003038:	f003 f91a 	bl	8006270 <HAL_Delay>
	ms5611_retrieve_pressure();

}
 800303c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_pressure();
 8003040:	f7ff bfa8 	b.w	8002f94 <ms5611_retrieve_pressure>

08003044 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8003044:	b508      	push	{r3, lr}

	ms5611_request_temperature();
 8003046:	f7ff ffc1 	bl	8002fcc <ms5611_request_temperature>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 800304a:	200c      	movs	r0, #12
 800304c:	f003 f910 	bl	8006270 <HAL_Delay>
	ms5611_retrieve_temperature();

}
 8003050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_temperature();
 8003054:	f7ff bfd0 	b.w	8002ff8 <ms5611_retrieve_temperature>

08003058 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8003058:	b508      	push	{r3, lr}
	ms5611_update_temperature();
 800305a:	f7ff fff3 	bl	8003044 <ms5611_update_temperature>
	ms5611_update_pressure();
}
 800305e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_update_pressure();
 8003062:	f7ff bfe5 	b.w	8003030 <ms5611_update_pressure>
	...

08003068 <ms5611_init>:
void ms5611_init(){
 8003068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800306a:	24a2      	movs	r4, #162	; 0xa2
 800306c:	4d0a      	ldr	r5, [pc, #40]	; (8003098 <ms5611_init+0x30>)
		ms5611_read_i2c(reg_addr,2,buffer);
 800306e:	aa01      	add	r2, sp, #4
 8003070:	4620      	mov	r0, r4
 8003072:	2102      	movs	r1, #2
 8003074:	f7ff ff5c 	bl	8002f30 <ms5611_read_i2c>
 8003078:	3402      	adds	r4, #2
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800307a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800307e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003082:	b2e4      	uxtb	r4, r4
 8003084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003088:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800308a:	f825 3f02 	strh.w	r3, [r5, #2]!
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800308e:	d1ee      	bne.n	800306e <ms5611_init+0x6>
	ms5611_update();
 8003090:	f7ff ffe2 	bl	8003058 <ms5611_update>
}
 8003094:	b003      	add	sp, #12
 8003096:	bd30      	pop	{r4, r5, pc}
 8003098:	20002046 	.word	0x20002046

0800309c <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256.0);
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <ms5611_get_temperature+0x94>)
 80030a0:	4e24      	ldr	r6, [pc, #144]	; (8003134 <ms5611_get_temperature+0x98>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	f7fd f9ae 	bl	8000404 <__aeabi_i2d>
 80030a8:	4604      	mov	r4, r0
 80030aa:	8930      	ldrh	r0, [r6, #8]
 80030ac:	460d      	mov	r5, r1
 80030ae:	f7fd f999 	bl	80003e4 <__aeabi_ui2d>
 80030b2:	2200      	movs	r2, #0
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <ms5611_get_temperature+0x9c>)
 80030b6:	f7fd fa0f 	bl	80004d8 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd f851 	bl	8000168 <__aeabi_dsub>
 80030c6:	f7fd fcdf 	bl	8000a88 <__aeabi_d2uiz>
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80030ca:	f7fd f98b 	bl	80003e4 <__aeabi_ui2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
 80030d2:	8970      	ldrh	r0, [r6, #10]
 80030d4:	f7fd f996 	bl	8000404 <__aeabi_i2d>
 80030d8:	2200      	movs	r2, #0
 80030da:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80030de:	f7fd f9fb 	bl	80004d8 <__aeabi_dmul>
 80030e2:	4622      	mov	r2, r4
 80030e4:	462b      	mov	r3, r5
 80030e6:	f7fd f9f7 	bl	80004d8 <__aeabi_dmul>
 80030ea:	2200      	movs	r2, #0
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <ms5611_get_temperature+0xa0>)
 80030ee:	f7fd f83d 	bl	800016c <__adddf3>

	double T2=0;
	if (TEMP < 2000.0){
 80030f2:	2200      	movs	r2, #0
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <ms5611_get_temperature+0xa0>)
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80030f6:	4606      	mov	r6, r0
 80030f8:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80030fa:	f7fd fc5f 	bl	80009bc <__aeabi_dcmplt>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 80030fe:	2200      	movs	r2, #0
	if (TEMP < 2000.0){
 8003100:	b1a0      	cbz	r0, 800312c <ms5611_get_temperature+0x90>
		T2 = dT * (dT / (2147483648.0));
 8003102:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8003106:	4620      	mov	r0, r4
 8003108:	4629      	mov	r1, r5
 800310a:	f7fd f9e5 	bl	80004d8 <__aeabi_dmul>
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	f7fd f9e1 	bl	80004d8 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
	}

	TEMP = TEMP - T2;
 800311a:	4630      	mov	r0, r6
 800311c:	4639      	mov	r1, r7
 800311e:	f7fd f823 	bl	8000168 <__aeabi_dsub>
	return TEMP / 100.0;
 8003122:	2200      	movs	r2, #0
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <ms5611_get_temperature+0xa4>)
 8003126:	f7fd fb01 	bl	800072c <__aeabi_ddiv>
}
 800312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	double T2=0;
 800312c:	2300      	movs	r3, #0
 800312e:	e7f4      	b.n	800311a <ms5611_get_temperature+0x7e>
 8003130:	20002054 	.word	0x20002054
 8003134:	20002048 	.word	0x20002048
 8003138:	40700000 	.word	0x40700000
 800313c:	409f4000 	.word	0x409f4000
 8003140:	40590000 	.word	0x40590000

08003144 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8003144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	int32_t dT = raw_temperature - (uint32_t)fc[4] * 256;
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <ms5611_get_pressure+0x194>)
 800314a:	4964      	ldr	r1, [pc, #400]	; (80032dc <ms5611_get_pressure+0x198>)
 800314c:	891a      	ldrh	r2, [r3, #8]
 800314e:	680e      	ldr	r6, [r1, #0]

	int64_t OFF = (int64_t)fc[1] * 65536 + (int64_t)fc[3] * dT / 128;
 8003150:	88d8      	ldrh	r0, [r3, #6]
	int32_t dT = raw_temperature - (uint32_t)fc[4] * 256;
 8003152:	eba6 2602 	sub.w	r6, r6, r2, lsl #8
	int64_t OFF = (int64_t)fc[1] * 65536 + (int64_t)fc[3] * dT / 128;
 8003156:	fb80 0106 	smull	r0, r1, r0, r6
 800315a:	2800      	cmp	r0, #0
 800315c:	f171 0200 	sbcs.w	r2, r1, #0
 8003160:	da02      	bge.n	8003168 <ms5611_get_pressure+0x24>
 8003162:	307f      	adds	r0, #127	; 0x7f
 8003164:	f141 0100 	adc.w	r1, r1, #0
 8003168:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800316c:	ea4f 1ad0 	mov.w	sl, r0, lsr #7
 8003170:	ea4a 6a41 	orr.w	sl, sl, r1, lsl #25
 8003174:	ea4f 4008 	mov.w	r0, r8, lsl #16
 8003178:	eb1a 0400 	adds.w	r4, sl, r0
	int64_t SENS = (int64_t)fc[0] * 32768 + (int64_t)fc[2] * dT / 256;
 800317c:	8898      	ldrh	r0, [r3, #4]
	int64_t OFF = (int64_t)fc[1] * 65536 + (int64_t)fc[3] * dT / 128;
 800317e:	ea4f 1be1 	mov.w	fp, r1, asr #7
 8003182:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003186:	eb4b 0501 	adc.w	r5, fp, r1
	int64_t SENS = (int64_t)fc[0] * 32768 + (int64_t)fc[2] * dT / 256;
 800318a:	fb80 0106 	smull	r0, r1, r0, r6
 800318e:	2800      	cmp	r0, #0
 8003190:	f171 0700 	sbcs.w	r7, r1, #0
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	da02      	bge.n	800319e <ms5611_get_pressure+0x5a>
 8003198:	30ff      	adds	r0, #255	; 0xff
 800319a:	f141 0100 	adc.w	r1, r1, #0
 800319e:	ea4f 2810 	mov.w	r8, r0, lsr #8
 80031a2:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 80031a6:	ea4f 2921 	mov.w	r9, r1, asr #8
 80031aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ae:	fbe2 8901 	umlal	r8, r9, r2, r1


	int32_t TEMP = 2000 + ((int64_t) dT * fc[5]) / 8388608;
 80031b2:	895a      	ldrh	r2, [r3, #10]
	int64_t SENS = (int64_t)fc[0] * 32768 + (int64_t)fc[2] * dT / 256;
 80031b4:	e9cd 8900 	strd	r8, r9, [sp]
	int32_t TEMP = 2000 + ((int64_t) dT * fc[5]) / 8388608;
 80031b8:	fb82 2306 	smull	r2, r3, r2, r6
 80031bc:	2a00      	cmp	r2, #0
 80031be:	f173 0100 	sbcs.w	r1, r3, #0
 80031c2:	da03      	bge.n	80031cc <ms5611_get_pressure+0x88>
 80031c4:	2100      	movs	r1, #0
 80031c6:	4846      	ldr	r0, [pc, #280]	; (80032e0 <ms5611_get_pressure+0x19c>)
 80031c8:	1812      	adds	r2, r2, r0
 80031ca:	414b      	adcs	r3, r1
 80031cc:	ea4f 5ad2 	mov.w	sl, r2, lsr #23
 80031d0:	ea4a 2a43 	orr.w	sl, sl, r3, lsl #9
 80031d4:	f50a 6bfa 	add.w	fp, sl, #2000	; 0x7d0

	double OFF2 = 0;
	double SENS2 = 0;

	if (TEMP < 2000)
 80031d8:	f5bb 6ffa 	cmp.w	fp, #2000	; 0x7d0
 80031dc:	da77      	bge.n	80032ce <ms5611_get_pressure+0x18a>
	{
		OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 80031de:	fb0a f60a 	mul.w	r6, sl, sl
 80031e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80031e6:	1070      	asrs	r0, r6, #1
 80031e8:	f7fd f90c 	bl	8000404 <__aeabi_i2d>
 80031ec:	4680      	mov	r8, r0
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 80031ee:	10b0      	asrs	r0, r6, #2
		OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 80031f0:	4689      	mov	r9, r1
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 80031f2:	f7fd f907 	bl	8000404 <__aeabi_i2d>
	}

	if (TEMP < -1500)
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <ms5611_get_pressure+0x1a0>)
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 80031f8:	4606      	mov	r6, r0
	if (TEMP < -1500)
 80031fa:	459b      	cmp	fp, r3
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 80031fc:	460f      	mov	r7, r1
	if (TEMP < -1500)
 80031fe:	da1d      	bge.n	800323c <ms5611_get_pressure+0xf8>
	{
		OFF2 = OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8003200:	f60a 5aac 	addw	sl, sl, #3500	; 0xdac
 8003204:	fb0a fa0a 	mul.w	sl, sl, sl
 8003208:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
 800320c:	f7fd f8fa 	bl	8000404 <__aeabi_i2d>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4640      	mov	r0, r8
 8003216:	4649      	mov	r1, r9
 8003218:	f7fc ffa8 	bl	800016c <__adddf3>
 800321c:	4680      	mov	r8, r0
		SENS2 = SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 800321e:	200b      	movs	r0, #11
 8003220:	fb00 f00a 	mul.w	r0, r0, sl
 8003224:	1040      	asrs	r0, r0, #1
		OFF2 = OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8003226:	4689      	mov	r9, r1
		SENS2 = SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 8003228:	f7fd f8ec 	bl	8000404 <__aeabi_i2d>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4630      	mov	r0, r6
 8003232:	4639      	mov	r1, r7
 8003234:	f7fc ff9a 	bl	800016c <__adddf3>
 8003238:	4606      	mov	r6, r0
 800323a:	460f      	mov	r7, r1
	}

	OFF = OFF - OFF2;
 800323c:	4620      	mov	r0, r4
 800323e:	4629      	mov	r1, r5
 8003240:	f7fd f91c 	bl	800047c <__aeabi_l2d>
 8003244:	464b      	mov	r3, r9
 8003246:	4642      	mov	r2, r8
 8003248:	f7fc ff8e 	bl	8000168 <__aeabi_dsub>
 800324c:	4604      	mov	r4, r0
 800324e:	460d      	mov	r5, r1
	SENS = SENS - SENS2;
 8003250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003254:	f7fd f912 	bl	800047c <__aeabi_l2d>
 8003258:	4632      	mov	r2, r6
 800325a:	463b      	mov	r3, r7
 800325c:	f7fc ff84 	bl	8000168 <__aeabi_dsub>


	uint32_t P = (raw_pressure * SENS / 2097152 - OFF) / 32768;
 8003260:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <ms5611_get_pressure+0x1a4>)
 8003262:	681e      	ldr	r6, [r3, #0]
	SENS = SENS - SENS2;
 8003264:	f7fd fcf6 	bl	8000c54 <__aeabi_d2lz>
	uint32_t P = (raw_pressure * SENS / 2097152 - OFF) / 32768;
 8003268:	4371      	muls	r1, r6
 800326a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800326e:	fb00 1309 	mla	r3, r0, r9, r1
 8003272:	fba6 0100 	umull	r0, r1, r6, r0
 8003276:	4419      	add	r1, r3
 8003278:	2800      	cmp	r0, #0
 800327a:	f171 0300 	sbcs.w	r3, r1, #0
 800327e:	da03      	bge.n	8003288 <ms5611_get_pressure+0x144>
 8003280:	2300      	movs	r3, #0
 8003282:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <ms5611_get_pressure+0x1a8>)
 8003284:	1880      	adds	r0, r0, r2
 8003286:	4159      	adcs	r1, r3
 8003288:	ea4f 5850 	mov.w	r8, r0, lsr #21
 800328c:	ea48 28c1 	orr.w	r8, r8, r1, lsl #11
 8003290:	ea4f 5961 	mov.w	r9, r1, asr #21
	OFF = OFF - OFF2;
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fd fcdc 	bl	8000c54 <__aeabi_d2lz>
	uint32_t P = (raw_pressure * SENS / 2097152 - OFF) / 32768;
 800329c:	ebb8 0600 	subs.w	r6, r8, r0
 80032a0:	eb69 0701 	sbc.w	r7, r9, r1
 80032a4:	2e00      	cmp	r6, #0
 80032a6:	f177 0300 	sbcs.w	r3, r7, #0
 80032aa:	da04      	bge.n	80032b6 <ms5611_get_pressure+0x172>
 80032ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032b0:	2300      	movs	r3, #0
 80032b2:	18b6      	adds	r6, r6, r2
 80032b4:	415f      	adcs	r7, r3
 80032b6:	0bf0      	lsrs	r0, r6, #15

	return (double)P / 100.0;
 80032b8:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
 80032bc:	f7fd f892 	bl	80003e4 <__aeabi_ui2d>
 80032c0:	2200      	movs	r2, #0
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <ms5611_get_pressure+0x1ac>)
 80032c4:	f7fd fa32 	bl	800072c <__aeabi_ddiv>
}
 80032c8:	b003      	add	sp, #12
 80032ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double SENS2 = 0;
 80032ce:	2600      	movs	r6, #0
 80032d0:	2700      	movs	r7, #0
	double OFF2 = 0;
 80032d2:	46b0      	mov	r8, r6
 80032d4:	46b9      	mov	r9, r7
 80032d6:	e7b1      	b.n	800323c <ms5611_get_pressure+0xf8>
 80032d8:	20002048 	.word	0x20002048
 80032dc:	20002054 	.word	0x20002054
 80032e0:	007fffff 	.word	0x007fffff
 80032e4:	fffffa24 	.word	0xfffffa24
 80032e8:	20002044 	.word	0x20002044
 80032ec:	001fffff 	.word	0x001fffff
 80032f0:	40590000 	.word	0x40590000

080032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  {
    const int32_t* val = (int32_t*) &f;
 80032fe:	463b      	mov	r3, r7
 8003300:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	15db      	asrs	r3, r3, #23
 8003308:	b2db      	uxtb	r3, r3
 800330a:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x26>
    {
      exp += 1023 - 127;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8003318:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0159      	lsls	r1, r3, #5
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	b2ca      	uxtb	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	10d9      	asrs	r1, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	b2ca      	uxtb	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	12d9      	asrs	r1, r3, #11
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	b2ca      	uxtb	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	b25a      	sxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	14db      	asrs	r3, r3, #19
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	b25b      	sxtb	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b259      	sxtb	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	b2ca      	uxtb	r2, r1
 8003386:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	111b      	asrs	r3, r3, #4
 800338c:	b2da      	uxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	6079      	str	r1, [r7, #4]
 8003394:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fc2e 	bl	8000c04 <__aeabi_fcmplt>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xcc>
    {
      *(outbuffer - 1) |= 0x80;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80033c0:	2308      	movs	r3, #8
  }
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3303      	adds	r3, #3
 80033dc:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	f003 0207 	and.w	r2, r3, #7
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	00da      	lsls	r2, r3, #3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	02da      	lsls	r2, r3, #11
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	431a      	orrs	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	04db      	lsls	r3, r3, #19
 8003422:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	431a      	orrs	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	431a      	orrs	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]

    return 8;
 800347c:	2308      	movs	r3, #8
  }
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <_ZN3ros3MsgC1Ev>:
class Msg
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <_ZN3ros3MsgC1Ev+0x1c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	0800d63c 	.word	0x0800d63c

080034c8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
      data()
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ffe8 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80034d8:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ffd0 	bl	8003488 <_ZN3ros4TimeC1Ev>
    {
    }
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	0800d624 	.word	0x0800d624

080034f8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	4413      	add	r3, r2
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	0a19      	lsrs	r1, r3, #8
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3301      	adds	r3, #1
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	4413      	add	r3, r2
 8003522:	b2ca      	uxtb	r2, r1
 8003524:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0c19      	lsrs	r1, r3, #16
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3302      	adds	r3, #2
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4413      	add	r3, r2
 8003534:	b2ca      	uxtb	r2, r1
 8003536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0e19      	lsrs	r1, r3, #24
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3303      	adds	r3, #3
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	b2ca      	uxtb	r2, r1
 8003548:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	4413      	add	r3, r2
 800355a:	b2ca      	uxtb	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0a19      	lsrs	r1, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4413      	add	r3, r2
 800356c:	b2ca      	uxtb	r2, r1
 800356e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	0c19      	lsrs	r1, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3302      	adds	r3, #2
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	4413      	add	r3, r2
 800357e:	b2ca      	uxtb	r2, r1
 8003580:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0e19      	lsrs	r1, r3, #24
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3303      	adds	r3, #3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3304      	adds	r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
      return offset;
 800359a:	68fb      	ldr	r3, [r7, #12]
    }
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	440b      	add	r3, r1
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3302      	adds	r3, #2
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	440b      	add	r3, r1
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3303      	adds	r3, #3
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	440b      	add	r3, r1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3304      	adds	r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	440b      	add	r3, r1
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3302      	adds	r3, #2
 8003636:	6839      	ldr	r1, [r7, #0]
 8003638:	440b      	add	r3, r1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3303      	adds	r3, #3
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	440b      	add	r3, r1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3304      	adds	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
     return offset;
 8003660:	68fb      	ldr	r3, [r7, #12]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	0800c4a4 	.word	0x0800c4a4

08003684 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	0800c4b4 	.word	0x0800c4b4

0800369c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fefe 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	809a      	strh	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80036c8:	611a      	str	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
    {
    }
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	0800d60c 	.word	0x0800d60c
 80036e0:	0800c4d8 	.word	0x0800c4d8

080036e4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8899      	ldrh	r1, [r3, #4]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	b2ca      	uxtb	r2, r1
 80036fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b299      	uxth	r1, r3
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	3301      	adds	r3, #1
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	b2ca      	uxtb	r2, r1
 8003712:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3302      	adds	r3, #2
 8003718:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc fd16 	bl	8000150 <strlen>
 8003724:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	69b9      	ldr	r1, [r7, #24]
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fede 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	3304      	adds	r3, #4
 8003738:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	18d0      	adds	r0, r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4619      	mov	r1, r3
 8003748:	f006 fa91 	bl	8009c6e <memcpy>
      offset += length_topic_name;
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fcf9 	bl	8000150 <strlen>
 800375e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fec1 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	18d0      	adds	r0, r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4619      	mov	r1, r3
 8003782:	f006 fa74 	bl	8009c6e <memcpy>
      offset += length_message_type;
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4413      	add	r3, r2
 800378c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fcdc 	bl	8000150 <strlen>
 8003798:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	6939      	ldr	r1, [r7, #16]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fea4 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3304      	adds	r3, #4
 80037ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	18d0      	adds	r0, r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4619      	mov	r1, r3
 80037bc:	f006 fa57 	bl	8009c6e <memcpy>
      offset += length_md5sum;
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	b2ca      	uxtb	r2, r1
 80037d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	0a19      	lsrs	r1, r3, #8
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	b2ca      	uxtb	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0c19      	lsrs	r1, r3, #16
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3302      	adds	r3, #2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	b2ca      	uxtb	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	0e19      	lsrs	r1, r3, #24
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3303      	adds	r3, #3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	b2ca      	uxtb	r2, r1
 8003808:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	61fb      	str	r3, [r7, #28]
      return offset;
 8003810:	69fb      	ldr	r3, [r7, #28]
    }
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800381a:	b580      	push	{r7, lr}
 800381c:	b08a      	sub	sp, #40	; 0x28
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	b21a      	sxth	r2, r3
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	3301      	adds	r3, #1
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	440b      	add	r3, r1
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	b21b      	sxth	r3, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	b21b      	sxth	r3, r3
 800384e:	b29a      	uxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	3302      	adds	r3, #2
 8003858:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	441a      	add	r2, r3
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fe5f 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3304      	adds	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4413      	add	r3, r2
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	429a      	cmp	r2, r3
 8003880:	d20c      	bcs.n	800389c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	441a      	add	r2, r3
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	3b01      	subs	r3, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	440b      	add	r3, r1
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	3301      	adds	r3, #1
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	e7ec      	b.n	8003876 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	4413      	add	r3, r2
 80038a2:	3b01      	subs	r3, #1
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	441a      	add	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4413      	add	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	441a      	add	r2, r3
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fe2c 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3304      	adds	r3, #4
 80038d6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d20c      	bcs.n	8003902 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	441a      	add	r2, r3
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	440b      	add	r3, r1
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	3301      	adds	r3, #1
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	e7ec      	b.n	80038dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	3b01      	subs	r3, #1
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3b01      	subs	r3, #1
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	441a      	add	r2, r3
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fdf9 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3304      	adds	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	429a      	cmp	r2, r3
 800394c:	d20c      	bcs.n	8003968 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	441a      	add	r2, r3
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3b01      	subs	r3, #1
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	440b      	add	r3, r1
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e7ec      	b.n	8003942 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	3b01      	subs	r3, #1
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	4413      	add	r3, r2
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	3b01      	subs	r3, #1
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	441a      	add	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	440a      	add	r2, r1
 8003998:	7812      	ldrb	r2, [r2, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	3301      	adds	r3, #1
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	440b      	add	r3, r1
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3302      	adds	r3, #2
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	440b      	add	r3, r1
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	4313      	orrs	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	3303      	adds	r3, #3
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	440b      	add	r3, r1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3304      	adds	r3, #4
 80039de:	61bb      	str	r3, [r7, #24]
     return offset;
 80039e0:	69bb      	ldr	r3, [r7, #24]
    }
 80039e2:	4618      	mov	r0, r3
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	0800c4dc 	.word	0x0800c4dc

08003a04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	4b02      	ldr	r3, [pc, #8]	; (8003a18 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	0800c4f8 	.word	0x0800c4f8

08003a1c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fd3e 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	711a      	strb	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003a3c:	609a      	str	r2, [r3, #8]
    {
    }
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	0800d5f4 	.word	0x0800d5f4
 8003a4c:	0800c4d8 	.word	0x0800c4d8

08003a50 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	7912      	ldrb	r2, [r2, #4]
 8003a68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fb6b 	bl	8000150 <strlen>
 8003a7a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 fd33 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	18d0      	adds	r0, r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f006 f8e6 	bl	8009c6e <memcpy>
      offset += length_msg;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
      return offset;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
    }
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	441a      	add	r2, r3
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fd22 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d20c      	bcs.n	8003b16 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	441a      	add	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	6839      	ldr	r1, [r7, #0]
 8003b08:	440b      	add	r3, r1
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e7ec      	b.n	8003af0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
     return offset;
 8003b3a:	693b      	ldr	r3, [r7, #16]
    }
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	0800c51c 	.word	0x0800c51c

08003b5c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	0800c530 	.word	0x0800c530

08003b74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fc92 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8003b84:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	61da      	str	r2, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	0800d5dc 	.word	0x0800d5dc

08003bbc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b2ca      	uxtb	r2, r1
 8003bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0a19      	lsrs	r1, r3, #8
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	3301      	adds	r3, #1
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	b2ca      	uxtb	r2, r1
 8003be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	0c19      	lsrs	r1, r3, #16
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	b2ca      	uxtb	r2, r1
 8003bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0e19      	lsrs	r1, r3, #24
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	3303      	adds	r3, #3
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	b2ca      	uxtb	r2, r1
 8003c0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	3304      	adds	r3, #4
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d22b      	bcs.n	8003c7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003c30:	6939      	ldr	r1, [r7, #16]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	b2ca      	uxtb	r2, r1
 8003c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	0a19      	lsrs	r1, r3, #8
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	3301      	adds	r3, #1
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	b2ca      	uxtb	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	0c19      	lsrs	r1, r3, #16
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	3302      	adds	r3, #2
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	b2ca      	uxtb	r2, r1
 8003c5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	0e19      	lsrs	r1, r3, #24
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	3303      	adds	r3, #3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	b2ca      	uxtb	r2, r1
 8003c6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	3304      	adds	r3, #4
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	3301      	adds	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	e7ce      	b.n	8003c18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6919      	ldr	r1, [r3, #16]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	b2ca      	uxtb	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	0a19      	lsrs	r1, r3, #8
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	0c19      	lsrs	r1, r3, #16
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b2ca      	uxtb	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	0e19      	lsrs	r1, r3, #24
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	3303      	adds	r3, #3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2ca      	uxtb	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d22b      	bcs.n	8003d2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2ca      	uxtb	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	0a19      	lsrs	r1, r3, #8
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b2ca      	uxtb	r2, r1
 8003cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	0c19      	lsrs	r1, r3, #16
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	3302      	adds	r3, #2
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	b2ca      	uxtb	r2, r1
 8003d0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0e19      	lsrs	r1, r3, #24
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	3303      	adds	r3, #3
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	b2ca      	uxtb	r2, r1
 8003d1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	3304      	adds	r3, #4
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e7ce      	b.n	8003cc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69d9      	ldr	r1, [r3, #28]
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	b2ca      	uxtb	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	0a19      	lsrs	r1, r3, #8
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2ca      	uxtb	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	0c19      	lsrs	r1, r3, #16
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3302      	adds	r3, #2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	b2ca      	uxtb	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	0e19      	lsrs	r1, r3, #24
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	3303      	adds	r3, #3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2ca      	uxtb	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	3304      	adds	r3, #4
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d228      	bcs.n	8003dd4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fc f9de 	bl	8000150 <strlen>
 8003d94:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fba6 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	3304      	adds	r3, #4
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	18d0      	adds	r0, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f005 ff55 	bl	8009c6e <memcpy>
      offset += length_stringsi;
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e7d1      	b.n	8003d78 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3728      	adds	r7, #40	; 0x28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08e      	sub	sp, #56	; 0x38
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df8:	3301      	adds	r3, #1
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	3303      	adds	r3, #3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	6a3a      	ldr	r2, [r7, #32]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2e:	3304      	adds	r3, #4
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d90a      	bls.n	8003e52 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f005 ff24 	bl	8009c94 <realloc>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003e58:	2300      	movs	r3, #0
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d236      	bcs.n	8003ed4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	440a      	add	r2, r1
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	440b      	add	r3, r1
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	3302      	adds	r3, #2
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	440b      	add	r3, r1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	440b      	add	r3, r1
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	3301      	adds	r3, #1
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed2:	e7c3      	b.n	8003e5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4413      	add	r3, r2
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	3303      	adds	r3, #3
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f16:	3304      	adds	r3, #4
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d90a      	bls.n	8003f3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f005 feb0 	bl	8009c94 <realloc>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d236      	bcs.n	8003fbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	440a      	add	r2, r1
 8003f5a:	7812      	ldrb	r2, [r2, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f64:	3301      	adds	r3, #1
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	440b      	add	r3, r1
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	3302      	adds	r3, #2
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	440b      	add	r3, r1
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	3303      	adds	r3, #3
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	440b      	add	r3, r1
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	3214      	adds	r2, #20
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fba:	e7c3      	b.n	8003f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	3301      	adds	r3, #1
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fda:	3302      	adds	r3, #2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fec:	3303      	adds	r3, #3
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	3304      	adds	r3, #4
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	429a      	cmp	r2, r3
 800400a:	d90a      	bls.n	8004022 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f005 fe3c 	bl	8009c94 <realloc>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8004028:	2300      	movs	r3, #0
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004032:	429a      	cmp	r2, r3
 8004034:	d23f      	bcs.n	80040b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	441a      	add	r2, r3
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fa71 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404a:	3304      	adds	r3, #4
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	429a      	cmp	r2, r3
 800405c:	d20c      	bcs.n	8004078 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	441a      	add	r2, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3b01      	subs	r3, #1
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	440b      	add	r3, r1
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	3301      	adds	r3, #1
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	e7ec      	b.n	8004052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	3b01      	subs	r3, #1
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	4413      	add	r3, r2
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	3b01      	subs	r3, #1
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	441a      	add	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8004094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	3220      	adds	r2, #32
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	3301      	adds	r3, #1
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b4:	e7ba      	b.n	800402c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80040b8:	4618      	mov	r0, r3
 80040ba:	3738      	adds	r7, #56	; 0x38
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	0800d4b8 	.word	0x0800d4b8

080040d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	4b02      	ldr	r3, [pc, #8]	; (80040ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	0800c554 	.word	0x0800c554

080040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	611a      	str	r2, [r3, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68d8      	ldr	r0, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6891      	ldr	r1, [r2, #8]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4798      	blx	r3
 800413a:	4603      	mov	r3, r0
  };
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
  }
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <_ZN13STM32HardwareC1Ev>:
class STM32Hardware
{

	public:

	STM32Hardware(){
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]

	}
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <_ZN13STM32Hardware4initEv>:

	void init(){
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]

	}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from received bytes
	// If no new data is available, returns -1
	int read(){
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
		return vcp_read();
 8004188:	f005 f9e4 	bl	8009554 <vcp_read>
 800418c:	4603      	mov	r3, r0
	}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length){
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
		vcp_write(data,length);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	4619      	mov	r1, r3
 80041a8:	68b8      	ldr	r0, [r7, #8]
 80041aa:	f005 f9e9 	bl	8009580 <vcp_write>
	}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void){
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();
 80041be:	f002 f851 	bl	8006264 <HAL_GetTick>
 80041c2:	4603      	mov	r3, r0
	}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff f966 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3308      	adds	r3, #8
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f94b 	bl	8003488 <_ZN3ros4TimeC1Ev>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80041f6:	611a      	str	r2, [r3, #16]
    {
    }
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	0800d5b0 	.word	0x0800d5b0
 8004208:	0800c4d8 	.word	0x0800c4d8

0800420c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	4413      	add	r3, r2
 8004224:	b2ca      	uxtb	r2, r1
 8004226:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0a19      	lsrs	r1, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3301      	adds	r3, #1
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4413      	add	r3, r2
 8004236:	b2ca      	uxtb	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	0c19      	lsrs	r1, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3302      	adds	r3, #2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4413      	add	r3, r2
 8004248:	b2ca      	uxtb	r2, r1
 800424a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0e19      	lsrs	r1, r3, #24
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3303      	adds	r3, #3
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	4413      	add	r3, r2
 800425a:	b2ca      	uxtb	r2, r1
 800425c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4413      	add	r3, r2
 800426e:	b2ca      	uxtb	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0a19      	lsrs	r1, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	4413      	add	r3, r2
 8004280:	b2ca      	uxtb	r2, r1
 8004282:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3302      	adds	r3, #2
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4413      	add	r3, r2
 8004292:	b2ca      	uxtb	r2, r1
 8004294:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0e19      	lsrs	r1, r3, #24
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3303      	adds	r3, #3
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	4413      	add	r3, r2
 80042a4:	b2ca      	uxtb	r2, r1
 80042a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	b2ca      	uxtb	r2, r1
 80042ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	0a19      	lsrs	r1, r3, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	b2ca      	uxtb	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	0c19      	lsrs	r1, r3, #16
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3302      	adds	r3, #2
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	4413      	add	r3, r2
 80042dc:	b2ca      	uxtb	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	0e19      	lsrs	r1, r3, #24
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3303      	adds	r3, #3
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	4413      	add	r3, r2
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3304      	adds	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fb ff27 	bl	8000150 <strlen>
 8004302:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4413      	add	r3, r2
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f8ef 	bl	80054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	18d0      	adds	r0, r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4619      	mov	r1, r3
 8004326:	f005 fca2 	bl	8009c6e <memcpy>
      offset += length_frame_id;
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
      return offset;
 8004332:	68fb      	ldr	r3, [r7, #12]
    }
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	3301      	adds	r3, #1
 8004360:	6839      	ldr	r1, [r7, #0]
 8004362:	440b      	add	r3, r1
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3302      	adds	r3, #2
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	440b      	add	r3, r1
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	3303      	adds	r3, #3
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	440b      	add	r3, r1
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3304      	adds	r3, #4
 800439e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3301      	adds	r3, #1
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	440b      	add	r3, r1
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3302      	adds	r3, #2
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	440b      	add	r3, r1
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3303      	adds	r3, #3
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	440b      	add	r3, r1
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3304      	adds	r3, #4
 80043f4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3301      	adds	r3, #1
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	440b      	add	r3, r1
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3302      	adds	r3, #2
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	440b      	add	r3, r1
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3303      	adds	r3, #3
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	440b      	add	r3, r1
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3304      	adds	r3, #4
 800444a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	441a      	add	r2, r3
 8004452:	f107 030c 	add.w	r3, r7, #12
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f866 	bl	800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3304      	adds	r3, #4
 8004462:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d20c      	bcs.n	800448e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	441a      	add	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3b01      	subs	r3, #1
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	440b      	add	r3, r1
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e7ec      	b.n	8004468 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	3b01      	subs	r3, #1
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4413      	add	r3, r2
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
     return offset;
 80044b2:	693b      	ldr	r3, [r7, #16]
    }
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	0800c578 	.word	0x0800c578

080044d4 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	4b02      	ldr	r3, [pc, #8]	; (80044e8 <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	0800c588 	.word	0x0800c588

080044ec <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe ffd6 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80044fc:	4a0b      	ldr	r2, [pc, #44]	; (800452c <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    {
    }
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	0800d598 	.word	0x0800d598

08004530 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe fed2 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe fec5 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800456a:	4602      	mov	r2, r0
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7fe feb8 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7fe feab 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800459e:	4602      	mov	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80045a6:	68fb      	ldr	r3, [r7, #12]
    }
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fefd 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3308      	adds	r3, #8
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fe fef0 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	441a      	add	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	330c      	adds	r3, #12
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fe fee3 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	441a      	add	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3310      	adds	r3, #16
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe fed6 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
     return offset;
 8004626:	68fb      	ldr	r3, [r7, #12]
    }
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	0800c5ac 	.word	0x0800c5ac

08004648 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	4b02      	ldr	r3, [pc, #8]	; (800465c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	0800c5c8 	.word	0x0800c5c8

08004660 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe ff1c 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
    {
    }
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	0800d580 	.word	0x0800d580

0800469c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7fe fe1c 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	441a      	add	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f7fe fe0f 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	441a      	add	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fe02 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
      return offset;
 80046f8:	68fb      	ldr	r3, [r7, #12]
    }
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f7fe fe54 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004722:	4602      	mov	r2, r0
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	441a      	add	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3308      	adds	r3, #8
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7fe fe47 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4413      	add	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	330c      	adds	r3, #12
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe fe3a 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
     return offset;
 800475e:	68fb      	ldr	r3, [r7, #12]
    }
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	0800c5ec 	.word	0x0800c5ec

08004780 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	0800c604 	.word	0x0800c604

08004798 <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fe80 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fd0a 	bl	80041cc <_ZN8std_msgs6HeaderC1Ev>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3318      	adds	r3, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fe95 	bl	80044ec <_ZN13geometry_msgs10QuaternionC1Ev>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80047c8:	2308      	movs	r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db05      	blt.n	80047da <_ZN11sensor_msgs3ImuC1Ev+0x42>
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	6011      	str	r1, [r2, #0]
 80047d4:	3204      	adds	r2, #4
 80047d6:	3b01      	subs	r3, #1
 80047d8:	e7f7      	b.n	80047ca <_ZN11sensor_msgs3ImuC1Ev+0x32>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3350      	adds	r3, #80	; 0x50
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ff3e 	bl	8004660 <_ZN13geometry_msgs7Vector3C1Ev>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80047ea:	2308      	movs	r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db05      	blt.n	80047fc <_ZN11sensor_msgs3ImuC1Ev+0x64>
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	6011      	str	r1, [r2, #0]
 80047f6:	3204      	adds	r2, #4
 80047f8:	3b01      	subs	r3, #1
 80047fa:	e7f7      	b.n	80047ec <_ZN11sensor_msgs3ImuC1Ev+0x54>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff2d 	bl	8004660 <_ZN13geometry_msgs7Vector3C1Ev>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800480c:	2308      	movs	r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	db05      	blt.n	800481e <_ZN11sensor_msgs3ImuC1Ev+0x86>
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	6011      	str	r1, [r2, #0]
 8004818:	3204      	adds	r2, #4
 800481a:	3b01      	subs	r3, #1
 800481c:	e7f7      	b.n	800480e <_ZN11sensor_msgs3ImuC1Ev+0x76>
    {
    }
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	0800d568 	.word	0x0800d568

0800482c <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	1d18      	adds	r0, r3, #4
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	4619      	mov	r1, r3
 8004846:	f7ff fce1 	bl	800420c <_ZNK8std_msgs6Header9serializeEPh>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	4413      	add	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f103 0018 	add.w	r0, r3, #24
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4413      	add	r3, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f7ff fe66 	bl	8004530 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4413      	add	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d813      	bhi.n	800489e <_ZNK11sensor_msgs3Imu9serializeEPh+0x72>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	18d0      	adds	r0, r2, r3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	330a      	adds	r3, #10
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4619      	mov	r1, r3
 800488a:	f7fe fd33 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800488e:	4602      	mov	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	4413      	add	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e7e8      	b.n	8004870 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7ff fef6 	bl	800469c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80048b0:	4602      	mov	r2, r0
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d812      	bhi.n	80048e8 <_ZNK11sensor_msgs3Imu9serializeEPh+0xbc>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	18d0      	adds	r0, r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	3218      	adds	r2, #24
 80048ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d2:	4619      	mov	r1, r3
 80048d4:	f7fe fd0e 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80048d8:	4602      	mov	r2, r0
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e7e9      	b.n	80048bc <_ZNK11sensor_msgs3Imu9serializeEPh+0x90>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	4413      	add	r3, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f7ff fed1 	bl	800469c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d813      	bhi.n	8004934 <_ZNK11sensor_msgs3Imu9serializeEPh+0x108>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	18d0      	adds	r0, r2, r3
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3324      	adds	r3, #36	; 0x24
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4619      	mov	r1, r3
 8004920:	f7fe fce8 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004924:	4602      	mov	r2, r0
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3301      	adds	r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	e7e8      	b.n	8004906 <_ZNK11sensor_msgs3Imu9serializeEPh+0xda>
      }
      return offset;
 8004934:	697b      	ldr	r3, [r7, #20]
    }
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1d18      	adds	r0, r3, #4
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4413      	add	r3, r2
 8004956:	4619      	mov	r1, r3
 8004958:	f7ff fcf0 	bl	800433c <_ZN8std_msgs6Header11deserializeEPh>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f103 0018 	add.w	r0, r3, #24
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fe1d 	bl	80045b0 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d813      	bhi.n	80049b0 <_ZN11sensor_msgs3Imu11deserializeEPh+0x72>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	18d0      	adds	r0, r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	330a      	adds	r3, #10
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	f7fe fd15 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4413      	add	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3301      	adds	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e7e8      	b.n	8004982 <_ZN11sensor_msgs3Imu11deserializeEPh+0x44>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	4413      	add	r3, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7ff fea0 	bl	8004702 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d812      	bhi.n	80049fa <_ZN11sensor_msgs3Imu11deserializeEPh+0xbc>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	18d0      	adds	r0, r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3318      	adds	r3, #24
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	4413      	add	r3, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe fcf0 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80049ea:	4602      	mov	r2, r0
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e7e9      	b.n	80049ce <_ZN11sensor_msgs3Imu11deserializeEPh+0x90>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7ff fe7b 	bl	8004702 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d813      	bhi.n	8004a46 <_ZN11sensor_msgs3Imu11deserializeEPh+0x108>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	18d0      	adds	r0, r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	f7fe fcca 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e7e8      	b.n	8004a18 <_ZN11sensor_msgs3Imu11deserializeEPh+0xda>
      }
     return offset;
 8004a46:	697b      	ldr	r3, [r7, #20]
    }
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	0800c628 	.word	0x0800c628

08004a68 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	0800c638 	.word	0x0800c638

08004a80 <_ZN11sensor_msgs13MagneticFieldC1Ev>:
      _header_type header;
      typedef geometry_msgs::Vector3 _magnetic_field_type;
      _magnetic_field_type magnetic_field;
      float magnetic_field_covariance[9];

    MagneticField():
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
      header(),
      magnetic_field(),
      magnetic_field_covariance()
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fd0c 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <_ZN11sensor_msgs13MagneticFieldC1Ev+0x4c>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fb96 	bl	80041cc <_ZN8std_msgs6HeaderC1Ev>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fddb 	bl	8004660 <_ZN13geometry_msgs7Vector3C1Ev>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db05      	blt.n	8004ac2 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x42>
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	6011      	str	r1, [r2, #0]
 8004abc:	3204      	adds	r2, #4
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	e7f7      	b.n	8004ab2 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x32>
    {
    }
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0800d550 	.word	0x0800d550

08004ad0 <_ZNK11sensor_msgs13MagneticField9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	1d18      	adds	r0, r3, #4
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7ff fb8f 	bl	800420c <_ZNK8std_msgs6Header9serializeEPh>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.serialize(outbuffer + offset);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f103 0018 	add.w	r0, r3, #24
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	4413      	add	r3, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	f7ff fdca 	bl	800469c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d812      	bhi.n	8004b40 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x70>
      offset += serializeAvrFloat64(outbuffer + offset, this->magnetic_field_covariance[i]);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	18d0      	adds	r0, r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	320a      	adds	r2, #10
 8004b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f7fe fbe2 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	e7e9      	b.n	8004b14 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x44>
      }
      return offset;
 8004b40:	68fb      	ldr	r3, [r7, #12]
    }
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_ZN11sensor_msgs13MagneticField11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	1d18      	adds	r0, r3, #4
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	f7ff fbea 	bl	800433c <_ZN8std_msgs6Header11deserializeEPh>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.deserialize(inbuffer + offset);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f103 0018 	add.w	r0, r3, #24
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7ff fdc0 	bl	8004702 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d812      	bhi.n	8004bba <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x70>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->magnetic_field_covariance[i]));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	18d0      	adds	r0, r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	330a      	adds	r3, #10
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f7fe fc10 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	e7e9      	b.n	8004b8e <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x44>
      }
     return offset;
 8004bba:	68fb      	ldr	r3, [r7, #12]
    }
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZN11sensor_msgs13MagneticField7getTypeEv>:

    const char * getType(){ return "sensor_msgs/MagneticField"; };
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <_ZN11sensor_msgs13MagneticField7getTypeEv+0x14>)
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	0800c65c 	.word	0x0800c65c

08004bdc <_ZN11sensor_msgs13MagneticField6getMD5Ev>:
    const char * getMD5(){ return "2f3b0b43eed0c9501de0fa3ff89a45aa"; };
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <_ZN11sensor_msgs13MagneticField6getMD5Ev+0x14>)
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	0800c678 	.word	0x0800c678

08004bf4 <_ZN11sensor_msgs12NavSatStatusC1Ev>:
      enum { SERVICE_GPS =      1 };
      enum { SERVICE_GLONASS =  2 };
      enum { SERVICE_COMPASS =  4       };
      enum { SERVICE_GALILEO =  8 };

    NavSatStatus():
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
      status(0),
      service(0)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fc52 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8004c04:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <_ZN11sensor_msgs12NavSatStatusC1Ev+0x2c>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	711a      	strb	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	80da      	strh	r2, [r3, #6]
    {
    }
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	0800d538 	.word	0x0800d538

08004c24 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.real = this->status;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004c38:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_status.base >> (8 * 0)) & 0xFF;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	4413      	add	r3, r2
 8004c40:	7a3a      	ldrb	r2, [r7, #8]
 8004c42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->status);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->service >> (8 * 0)) & 0xFF;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	88d9      	ldrh	r1, [r3, #6]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	4413      	add	r3, r2
 8004c54:	b2ca      	uxtb	r2, r1
 8004c56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->service >> (8 * 1)) & 0xFF;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	88db      	ldrh	r3, [r3, #6]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	b299      	uxth	r1, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	b2ca      	uxtb	r2, r1
 8004c6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->service);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c72:	68fb      	ldr	r3, [r7, #12]
    }
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.base = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	723b      	strb	r3, [r7, #8]
      u_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004c90:	7a3a      	ldrb	r2, [r7, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	440b      	add	r3, r1
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	723b      	strb	r3, [r7, #8]
      this->status = u_status.real;
 8004ca0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->status);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
      this->service =  ((uint16_t) (*(inbuffer + offset)));
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	80da      	strh	r2, [r3, #6]
      this->service |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	88db      	ldrh	r3, [r3, #6]
 8004cc0:	b21a      	sxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	440b      	add	r3, r1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	b21b      	sxth	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b21b      	sxth	r3, r3
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	80da      	strh	r2, [r3, #6]
      offset += sizeof(this->service);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3302      	adds	r3, #2
 8004cde:	60fb      	str	r3, [r7, #12]
     return offset;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <_ZN11sensor_msgs12NavSatStatus7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatStatus"; };
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <_ZN11sensor_msgs12NavSatStatus7getTypeEv+0x14>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	0800c69c 	.word	0x0800c69c

08004d04 <_ZN11sensor_msgs12NavSatStatus6getMD5Ev>:
    const char * getMD5(){ return "331cdbddfa4bc96ffc3b9ad98900a54c"; };
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4b02      	ldr	r3, [pc, #8]	; (8004d18 <_ZN11sensor_msgs12NavSatStatus6getMD5Ev+0x14>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	0800c6b8 	.word	0x0800c6b8

08004d1c <_ZN11sensor_msgs9NavSatFixC1Ev>:
      enum { COVARIANCE_TYPE_UNKNOWN =  0 };
      enum { COVARIANCE_TYPE_APPROXIMATED =  1 };
      enum { COVARIANCE_TYPE_DIAGONAL_KNOWN =  2 };
      enum { COVARIANCE_TYPE_KNOWN =  3 };

    NavSatFix():
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
      status(),
      latitude(0),
      longitude(0),
      altitude(0),
      position_covariance(),
      position_covariance_type(0)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fbbe 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <_ZN11sensor_msgs9NavSatFixC1Ev+0x6c>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fa48 	bl	80041cc <_ZN8std_msgs6HeaderC1Ev>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff57 	bl	8004bf4 <_ZN11sensor_msgs12NavSatStatusC1Ev>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	621a      	str	r2, [r3, #32]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004d64:	2308      	movs	r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db05      	blt.n	8004d76 <_ZN11sensor_msgs9NavSatFixC1Ev+0x5a>
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	6011      	str	r1, [r2, #0]
 8004d70:	3204      	adds	r2, #4
 8004d72:	3b01      	subs	r3, #1
 8004d74:	e7f7      	b.n	8004d66 <_ZN11sensor_msgs9NavSatFixC1Ev+0x4a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    {
    }
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	0800d520 	.word	0x0800d520

08004d8c <_ZNK11sensor_msgs9NavSatFix9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1d18      	adds	r0, r3, #4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	4413      	add	r3, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	f7ff fa31 	bl	800420c <_ZNK8std_msgs6Header9serializeEPh>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
      offset += this->status.serialize(outbuffer + offset);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 0018 	add.w	r0, r3, #24
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7ff ff30 	bl	8004c24 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->latitude);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe fa8b 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004dde:	4602      	mov	r2, r0
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->longitude);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	441a      	add	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7fe fa7e 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->altitude);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f7fe fa71 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d813      	bhi.n	8004e4c <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0xc0>
      offset += serializeAvrFloat64(outbuffer + offset, this->position_covariance[i]);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	18d0      	adds	r0, r2, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	330a      	adds	r3, #10
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7fe fa5c 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	e7e8      	b.n	8004e1e <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0x92>
      }
      *(outbuffer + offset + 0) = (this->position_covariance_type >> (8 * 0)) & 0xFF;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4413      	add	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8004e58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_covariance_type);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
      return offset;
 8004e60:	68fb      	ldr	r3, [r7, #12]
    }
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_ZN11sensor_msgs9NavSatFix11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1d18      	adds	r0, r3, #4
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	f7ff fa5a 	bl	800433c <_ZN8std_msgs6Header11deserializeEPh>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
      offset += this->status.deserialize(inbuffer + offset);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f103 0018 	add.w	r0, r3, #24
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7ff feee 	bl	8004c7e <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->latitude));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fe fa87 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->longitude));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3324      	adds	r3, #36	; 0x24
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe fa7a 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->altitude));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3328      	adds	r3, #40	; 0x28
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe fa6d 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d813      	bhi.n	8004f2a <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0xc0>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->position_covariance[i]));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	18d0      	adds	r0, r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	330a      	adds	r3, #10
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fe fa58 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	e7e8      	b.n	8004efc <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0x92>
      }
      this->position_covariance_type =  ((uint8_t) (*(inbuffer + offset)));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      offset += sizeof(this->position_covariance_type);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
    }
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <_ZN11sensor_msgs9NavSatFix7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatFix"; };
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	4b02      	ldr	r3, [pc, #8]	; (8004f5c <_ZN11sensor_msgs9NavSatFix7getTypeEv+0x14>)
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	0800c6dc 	.word	0x0800c6dc

08004f60 <_ZN11sensor_msgs9NavSatFix6getMD5Ev>:
    const char * getMD5(){ return "2d3a8cd499b9b4a0249fb98fd05cfa48"; };
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <_ZN11sensor_msgs9NavSatFix6getMD5Ev+0x14>)
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	0800c6f4 	.word	0x0800c6f4

08004f78 <_ZN11sensor_msgs13FluidPressureC1Ev>:
      typedef float _fluid_pressure_type;
      _fluid_pressure_type fluid_pressure;
      typedef float _variance_type;
      _variance_type variance;

    FluidPressure():
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
      header(),
      fluid_pressure(0),
      variance(0)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fa90 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <_ZN11sensor_msgs13FluidPressureC1Ev+0x3c>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff f91a 	bl	80041cc <_ZN8std_msgs6HeaderC1Ev>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	619a      	str	r2, [r3, #24]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	61da      	str	r2, [r3, #28]
    {
    }
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	0800d508 	.word	0x0800d508

08004fb8 <_ZNK11sensor_msgs13FluidPressure9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1d18      	adds	r0, r3, #4
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f7ff f91b 	bl	800420c <_ZNK8std_msgs6Header9serializeEPh>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->fluid_pressure);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fe f982 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	441a      	add	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe f975 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800500a:	4602      	mov	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
      return offset;
 8005012:	68fb      	ldr	r3, [r7, #12]
    }
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_ZN11sensor_msgs13FluidPressure11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	1d18      	adds	r0, r3, #4
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f7ff f981 	bl	800433c <_ZN8std_msgs6Header11deserializeEPh>
 800503a:	4602      	mov	r2, r0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->fluid_pressure));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	441a      	add	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3318      	adds	r3, #24
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f7fe f9bb 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	331c      	adds	r3, #28
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe f9ae 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800506e:	4602      	mov	r2, r0
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
     return offset;
 8005076:	68fb      	ldr	r3, [r7, #12]
    }
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <_ZN11sensor_msgs13FluidPressure7getTypeEv>:

    const char * getType(){ return "sensor_msgs/FluidPressure"; };
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <_ZN11sensor_msgs13FluidPressure7getTypeEv+0x14>)
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	0800c718 	.word	0x0800c718

08005098 <_ZN11sensor_msgs13FluidPressure6getMD5Ev>:
    const char * getMD5(){ return "804dc5cea1c5306d6a2eb80b9833befe"; };
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	4b02      	ldr	r3, [pc, #8]	; (80050ac <_ZN11sensor_msgs13FluidPressure6getMD5Ev+0x14>)
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	0800c734 	.word	0x0800c734

080050b0 <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef float _temperature_type;
      _temperature_type temperature;
      typedef float _variance_type;
      _variance_type variance;

    Temperature():
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe f9f4 	bl	80034a8 <_ZN3ros3MsgC1Ev>
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <_ZN11sensor_msgs11TemperatureC1Ev+0x3c>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff f87e 	bl	80041cc <_ZN8std_msgs6HeaderC1Ev>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	61da      	str	r2, [r3, #28]
    {
    }
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	0800d4f0 	.word	0x0800d4f0

080050f0 <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	1d18      	adds	r0, r3, #4
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	4413      	add	r3, r2
 8005108:	4619      	mov	r1, r3
 800510a:	f7ff f87f 	bl	800420c <_ZNK8std_msgs6Header9serializeEPh>
 800510e:	4602      	mov	r2, r0
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fe f8e6 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	441a      	add	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f7fe f8d9 	bl	80032f4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
      return offset;
 800514a:	68fb      	ldr	r3, [r7, #12]
    }
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1d18      	adds	r0, r3, #4
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	4413      	add	r3, r2
 800516c:	4619      	mov	r1, r3
 800516e:	f7ff f8e5 	bl	800433c <_ZN8std_msgs6Header11deserializeEPh>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	441a      	add	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3318      	adds	r3, #24
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fe f91f 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	441a      	add	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	331c      	adds	r3, #28
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe f912 	bl	80033ca <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
     return offset;
 80051ae:	68fb      	ldr	r3, [r7, #12]
    }
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <_ZN11sensor_msgs11Temperature7getTypeEv+0x14>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	0800c758 	.word	0x0800c758

080051d0 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <_ZN11sensor_msgs11Temperature6getMD5Ev+0x14>)
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	0800c770 	.word	0x0800c770

080051e8 <ros_init>:
ros::Publisher gps_pub("/fix",&fix_msg);
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
ros::Publisher temp_pub("/temperature",&temp_msg);


extern "C" void ros_init(){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	nh.initNode();
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <ros_init+0x3c>)
 80051ee:	f000 fa5d 	bl	80056ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>
	nh.advertise(imu_pub);
 80051f2:	490d      	ldr	r1, [pc, #52]	; (8005228 <ros_init+0x40>)
 80051f4:	480b      	ldr	r0, [pc, #44]	; (8005224 <ros_init+0x3c>)
 80051f6:	f000 fa7d 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(mag_pub);
 80051fa:	490c      	ldr	r1, [pc, #48]	; (800522c <ros_init+0x44>)
 80051fc:	4809      	ldr	r0, [pc, #36]	; (8005224 <ros_init+0x3c>)
 80051fe:	f000 fa79 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(gps_pub);
 8005202:	490b      	ldr	r1, [pc, #44]	; (8005230 <ros_init+0x48>)
 8005204:	4807      	ldr	r0, [pc, #28]	; (8005224 <ros_init+0x3c>)
 8005206:	f000 fa75 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(pressure_pub);
 800520a:	490a      	ldr	r1, [pc, #40]	; (8005234 <ros_init+0x4c>)
 800520c:	4805      	ldr	r0, [pc, #20]	; (8005224 <ros_init+0x3c>)
 800520e:	f000 fa71 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(temp_pub);
 8005212:	4909      	ldr	r1, [pc, #36]	; (8005238 <ros_init+0x50>)
 8005214:	4803      	ldr	r0, [pc, #12]	; (8005224 <ros_init+0x3c>)
 8005216:	f000 fa6d 	bl	80056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.spinOnce();
 800521a:	4802      	ldr	r0, [pc, #8]	; (8005224 <ros_init+0x3c>)
 800521c:	f000 fa97 	bl	800574e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 8005220:	bf00      	nop
 8005222:	bd80      	pop	{r7, pc}
 8005224:	2000060c 	.word	0x2000060c
 8005228:	2000173c 	.word	0x2000173c
 800522c:	20001750 	.word	0x20001750
 8005230:	20001764 	.word	0x20001764
 8005234:	20001778 	.word	0x20001778
 8005238:	2000178c 	.word	0x2000178c

0800523c <IMU_pub>:

extern "C" void IMU_pub(double a[3], double w[3], double q[4]){
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6178      	str	r0, [r7, #20]
 8005244:	6139      	str	r1, [r7, #16]
 8005246:	60fa      	str	r2, [r7, #12]

	imu_msg.header.stamp = nh.now();
 8005248:	4c3d      	ldr	r4, [pc, #244]	; (8005340 <IMU_pub+0x104>)
 800524a:	463b      	mov	r3, r7
 800524c:	493d      	ldr	r1, [pc, #244]	; (8005344 <IMU_pub+0x108>)
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fcbe 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005254:	f104 030c 	add.w	r3, r4, #12
 8005258:	463a      	mov	r2, r7
 800525a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800525e:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id = "XIMU";
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <IMU_pub+0x104>)
 8005264:	4a38      	ldr	r2, [pc, #224]	; (8005348 <IMU_pub+0x10c>)
 8005266:	615a      	str	r2, [r3, #20]

	imu_msg.linear_acceleration.x = a[0];
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	cb18      	ldmia	r3, {r3, r4}
 800526c:	4618      	mov	r0, r3
 800526e:	4621      	mov	r1, r4
 8005270:	f7fb fc2a 	bl	8000ac8 <__aeabi_d2f>
 8005274:	4602      	mov	r2, r0
 8005276:	4b32      	ldr	r3, [pc, #200]	; (8005340 <IMU_pub+0x104>)
 8005278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu_msg.linear_acceleration.y = a[1];
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3308      	adds	r3, #8
 8005280:	cb18      	ldmia	r3, {r3, r4}
 8005282:	4618      	mov	r0, r3
 8005284:	4621      	mov	r1, r4
 8005286:	f7fb fc1f 	bl	8000ac8 <__aeabi_d2f>
 800528a:	4602      	mov	r2, r0
 800528c:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <IMU_pub+0x104>)
 800528e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu_msg.linear_acceleration.z = a[2];
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	3310      	adds	r3, #16
 8005296:	cb18      	ldmia	r3, {r3, r4}
 8005298:	4618      	mov	r0, r3
 800529a:	4621      	mov	r1, r4
 800529c:	f7fb fc14 	bl	8000ac8 <__aeabi_d2f>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b27      	ldr	r3, [pc, #156]	; (8005340 <IMU_pub+0x104>)
 80052a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	imu_msg.angular_velocity.x = w[0];
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	cb18      	ldmia	r3, {r3, r4}
 80052ac:	4618      	mov	r0, r3
 80052ae:	4621      	mov	r1, r4
 80052b0:	f7fb fc0a 	bl	8000ac8 <__aeabi_d2f>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b22      	ldr	r3, [pc, #136]	; (8005340 <IMU_pub+0x104>)
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
	imu_msg.angular_velocity.y = w[1];
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3308      	adds	r3, #8
 80052be:	cb18      	ldmia	r3, {r3, r4}
 80052c0:	4618      	mov	r0, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	f7fb fc00 	bl	8000ac8 <__aeabi_d2f>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <IMU_pub+0x104>)
 80052cc:	659a      	str	r2, [r3, #88]	; 0x58
	imu_msg.angular_velocity.z = w[2];
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	3310      	adds	r3, #16
 80052d2:	cb18      	ldmia	r3, {r3, r4}
 80052d4:	4618      	mov	r0, r3
 80052d6:	4621      	mov	r1, r4
 80052d8:	f7fb fbf6 	bl	8000ac8 <__aeabi_d2f>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <IMU_pub+0x104>)
 80052e0:	65da      	str	r2, [r3, #92]	; 0x5c

	imu_msg.orientation.w = q[0];
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	cb18      	ldmia	r3, {r3, r4}
 80052e6:	4618      	mov	r0, r3
 80052e8:	4621      	mov	r1, r4
 80052ea:	f7fb fbed 	bl	8000ac8 <__aeabi_d2f>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <IMU_pub+0x104>)
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
	imu_msg.orientation.x = q[1];
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3308      	adds	r3, #8
 80052f8:	cb18      	ldmia	r3, {r3, r4}
 80052fa:	4618      	mov	r0, r3
 80052fc:	4621      	mov	r1, r4
 80052fe:	f7fb fbe3 	bl	8000ac8 <__aeabi_d2f>
 8005302:	4602      	mov	r2, r0
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <IMU_pub+0x104>)
 8005306:	61da      	str	r2, [r3, #28]
	imu_msg.orientation.y = q[2];
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3310      	adds	r3, #16
 800530c:	cb18      	ldmia	r3, {r3, r4}
 800530e:	4618      	mov	r0, r3
 8005310:	4621      	mov	r1, r4
 8005312:	f7fb fbd9 	bl	8000ac8 <__aeabi_d2f>
 8005316:	4602      	mov	r2, r0
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <IMU_pub+0x104>)
 800531a:	621a      	str	r2, [r3, #32]
	imu_msg.orientation.z = q[3];
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3318      	adds	r3, #24
 8005320:	cb18      	ldmia	r3, {r3, r4}
 8005322:	4618      	mov	r0, r3
 8005324:	4621      	mov	r1, r4
 8005326:	f7fb fbcf 	bl	8000ac8 <__aeabi_d2f>
 800532a:	4602      	mov	r2, r0
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <IMU_pub+0x104>)
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

	imu_pub.publish(&imu_msg);
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <IMU_pub+0x104>)
 8005332:	4806      	ldr	r0, [pc, #24]	; (800534c <IMU_pub+0x110>)
 8005334:	f7fe fef2 	bl	800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd90      	pop	{r4, r7, pc}
 8005340:	20000474 	.word	0x20000474
 8005344:	2000060c 	.word	0x2000060c
 8005348:	0800c794 	.word	0x0800c794
 800534c:	2000173c 	.word	0x2000173c

08005350 <MAG_pub>:

extern "C" void MAG_pub(double m[3]){
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]

	mag_msg.header.stamp = nh.now();
 8005358:	4c1a      	ldr	r4, [pc, #104]	; (80053c4 <MAG_pub+0x74>)
 800535a:	463b      	mov	r3, r7
 800535c:	491a      	ldr	r1, [pc, #104]	; (80053c8 <MAG_pub+0x78>)
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fc36 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005364:	f104 030c 	add.w	r3, r4, #12
 8005368:	463a      	mov	r2, r7
 800536a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800536e:	e883 0003 	stmia.w	r3, {r0, r1}
	mag_msg.header.frame_id = "XIMU";
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <MAG_pub+0x74>)
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <MAG_pub+0x7c>)
 8005376:	615a      	str	r2, [r3, #20]

	mag_msg.magnetic_field.x = m[0];
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	cb18      	ldmia	r3, {r3, r4}
 800537c:	4618      	mov	r0, r3
 800537e:	4621      	mov	r1, r4
 8005380:	f7fb fba2 	bl	8000ac8 <__aeabi_d2f>
 8005384:	4602      	mov	r2, r0
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <MAG_pub+0x74>)
 8005388:	61da      	str	r2, [r3, #28]
	mag_msg.magnetic_field.y = m[1];
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3308      	adds	r3, #8
 800538e:	cb18      	ldmia	r3, {r3, r4}
 8005390:	4618      	mov	r0, r3
 8005392:	4621      	mov	r1, r4
 8005394:	f7fb fb98 	bl	8000ac8 <__aeabi_d2f>
 8005398:	4602      	mov	r2, r0
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <MAG_pub+0x74>)
 800539c:	621a      	str	r2, [r3, #32]
	mag_msg.magnetic_field.z = m[2];
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3310      	adds	r3, #16
 80053a2:	cb18      	ldmia	r3, {r3, r4}
 80053a4:	4618      	mov	r0, r3
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7fb fb8e 	bl	8000ac8 <__aeabi_d2f>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <MAG_pub+0x74>)
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24

	mag_pub.publish(&mag_msg);
 80053b2:	4904      	ldr	r1, [pc, #16]	; (80053c4 <MAG_pub+0x74>)
 80053b4:	4806      	ldr	r0, [pc, #24]	; (80053d0 <MAG_pub+0x80>)
 80053b6:	f7fe feb1 	bl	800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd90      	pop	{r4, r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000052c 	.word	0x2000052c
 80053c8:	2000060c 	.word	0x2000060c
 80053cc:	0800c794 	.word	0x0800c794
 80053d0:	20001750 	.word	0x20001750

080053d4 <GPS_pub>:

extern "C" void GPS_pub(double lla[3]){
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
	fix_msg.header.stamp = nh.now();
 80053dc:	4c18      	ldr	r4, [pc, #96]	; (8005440 <GPS_pub+0x6c>)
 80053de:	463b      	mov	r3, r7
 80053e0:	4918      	ldr	r1, [pc, #96]	; (8005444 <GPS_pub+0x70>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbf4 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 80053e8:	f104 030c 	add.w	r3, r4, #12
 80053ec:	463a      	mov	r2, r7
 80053ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053f2:	e883 0003 	stmia.w	r3, {r0, r1}

	fix_msg.latitude = lla[0];
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	cb18      	ldmia	r3, {r3, r4}
 80053fa:	4618      	mov	r0, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	f7fb fb63 	bl	8000ac8 <__aeabi_d2f>
 8005402:	4602      	mov	r2, r0
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <GPS_pub+0x6c>)
 8005406:	621a      	str	r2, [r3, #32]
	fix_msg.longitude = lla[1];
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3308      	adds	r3, #8
 800540c:	cb18      	ldmia	r3, {r3, r4}
 800540e:	4618      	mov	r0, r3
 8005410:	4621      	mov	r1, r4
 8005412:	f7fb fb59 	bl	8000ac8 <__aeabi_d2f>
 8005416:	4602      	mov	r2, r0
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <GPS_pub+0x6c>)
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
	fix_msg.altitude = lla[2];
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3310      	adds	r3, #16
 8005420:	cb18      	ldmia	r3, {r3, r4}
 8005422:	4618      	mov	r0, r3
 8005424:	4621      	mov	r1, r4
 8005426:	f7fb fb4f 	bl	8000ac8 <__aeabi_d2f>
 800542a:	4602      	mov	r2, r0
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <GPS_pub+0x6c>)
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

	gps_pub.publish(&fix_msg);
 8005430:	4903      	ldr	r1, [pc, #12]	; (8005440 <GPS_pub+0x6c>)
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <GPS_pub+0x74>)
 8005434:	f7fe fe72 	bl	800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}
 8005440:	20000578 	.word	0x20000578
 8005444:	2000060c 	.word	0x2000060c
 8005448:	20001764 	.word	0x20001764

0800544c <PT_pub>:

extern "C" void PT_pub(double pt[2]){
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
	air_ps_msg.header.stamp = nh.now();
 8005454:	4c1c      	ldr	r4, [pc, #112]	; (80054c8 <PT_pub+0x7c>)
 8005456:	463b      	mov	r3, r7
 8005458:	491c      	ldr	r1, [pc, #112]	; (80054cc <PT_pub+0x80>)
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fbb8 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005460:	f104 030c 	add.w	r3, r4, #12
 8005464:	463a      	mov	r2, r7
 8005466:	e892 0003 	ldmia.w	r2, {r0, r1}
 800546a:	e883 0003 	stmia.w	r3, {r0, r1}
	air_ps_msg.fluid_pressure = pt[0];
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	cb18      	ldmia	r3, {r3, r4}
 8005472:	4618      	mov	r0, r3
 8005474:	4621      	mov	r1, r4
 8005476:	f7fb fb27 	bl	8000ac8 <__aeabi_d2f>
 800547a:	4602      	mov	r2, r0
 800547c:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <PT_pub+0x7c>)
 800547e:	619a      	str	r2, [r3, #24]

	pressure_pub.publish(&air_ps_msg);
 8005480:	4911      	ldr	r1, [pc, #68]	; (80054c8 <PT_pub+0x7c>)
 8005482:	4813      	ldr	r0, [pc, #76]	; (80054d0 <PT_pub+0x84>)
 8005484:	f7fe fe4a 	bl	800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	temp_msg.header.stamp = nh.now();
 8005488:	4c12      	ldr	r4, [pc, #72]	; (80054d4 <PT_pub+0x88>)
 800548a:	463b      	mov	r3, r7
 800548c:	490f      	ldr	r1, [pc, #60]	; (80054cc <PT_pub+0x80>)
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fb9e 	bl	8005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005494:	f104 030c 	add.w	r3, r4, #12
 8005498:	463a      	mov	r2, r7
 800549a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800549e:	e883 0003 	stmia.w	r3, {r0, r1}
	temp_msg.temperature = pt[1];
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3308      	adds	r3, #8
 80054a6:	cb18      	ldmia	r3, {r3, r4}
 80054a8:	4618      	mov	r0, r3
 80054aa:	4621      	mov	r1, r4
 80054ac:	f7fb fb0c 	bl	8000ac8 <__aeabi_d2f>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <PT_pub+0x88>)
 80054b4:	619a      	str	r2, [r3, #24]

	temp_pub.publish(&temp_msg);
 80054b6:	4907      	ldr	r1, [pc, #28]	; (80054d4 <PT_pub+0x88>)
 80054b8:	4807      	ldr	r0, [pc, #28]	; (80054d8 <PT_pub+0x8c>)
 80054ba:	f7fe fe2f 	bl	800411c <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200005cc 	.word	0x200005cc
 80054cc:	2000060c 	.word	0x2000060c
 80054d0:	20001778 	.word	0x20001778
 80054d4:	200005ec 	.word	0x200005ec
 80054d8:	2000178c 	.word	0x2000178c

080054dc <spinOnce>:

extern "C" void spinOnce(){
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80054e0:	4802      	ldr	r0, [pc, #8]	; (80054ec <spinOnce+0x10>)
 80054e2:	f000 f934 	bl	800574e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000060c 	.word	0x2000060c

080054f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d80d      	bhi.n	8005520 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	fa22 f103 	lsr.w	r1, r2, r3
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	b2ca      	uxtb	r2, r1
 8005516:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e7ee      	b.n	80054fe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d811      	bhi.n	8005568 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	4611      	mov	r1, r2
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	00d2      	lsls	r2, r2, #3
 8005556:	fa01 f202 	lsl.w	r2, r1, r2
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e7ea      	b.n	800553e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr
	...

08005574 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "stm32f1xx_hal.h"

namespace ros
{

class NodeHandleBase_
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	0800d5c8 	.word	0x0800d5c8

08005594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ffe8 	bl	8005574 <_ZN3ros15NodeHandleBase_C1Ev>
 80055a4:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x114>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fe fdd3 	bl	800415a <_ZN13STM32HardwareC1Ev>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055ba:	3314      	adds	r3, #20
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055c6:	3308      	adds	r3, #8
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fad3 	bl	8003b74 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b18      	cmp	r3, #24
 80055d6:	d80a      	bhi.n	80055ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5a>
      publishers[i] = 0;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80055e0:	2100      	movs	r1, #0
 80055e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	3301      	adds	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e7f1      	b.n	80055d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b18      	cmp	r3, #24
 80055f6:	d80b      	bhi.n	8005610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x7c>
      subscribers[i] = 0;
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	2200      	movs	r2, #0
 8005606:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3301      	adds	r3, #1
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e7f0      	b.n	80055f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561a:	d209      	bcs.n	8005630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x9c>
      message_in[i] = 0;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	3318      	adds	r3, #24
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	e7f1      	b.n	8005614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563a:	d20a      	bcs.n	8005652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xbe>
      message_out[i] = 0;
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4413      	add	r3, r2
 8005642:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3301      	adds	r3, #1
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	e7f0      	b.n	8005634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005658:	330c      	adds	r3, #12
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005664:	3314      	adds	r3, #20
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005670:	3318      	adds	r3, #24
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005686:	330c      	adds	r3, #12
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005692:	3314      	adds	r3, #20
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	615a      	str	r2, [r3, #20]
  }
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	0800d4dc 	.word	0x0800d4dc

080056ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fd58 	bl	800416e <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056ce:	3304      	adds	r3, #4
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
    index_ = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056da:	330c      	adds	r3, #12
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056e6:	3308      	adds	r3, #8
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
  };
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b18      	cmp	r3, #24
 8005706:	dc1c      	bgt.n	8005742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d110      	bne.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	60da      	str	r2, [r3, #12]
        return true;
 8005736:	2301      	movs	r3, #1
 8005738:	e004      	b.n	8005744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e7df      	b.n	8005702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8005742:	2300      	movs	r3, #0
  }
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fd2b 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8005760:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005768:	331c      	adds	r3, #28
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005774:	4293      	cmp	r3, r2
 8005776:	d905      	bls.n	8005784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800577e:	3314      	adds	r3, #20
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      if (c_time > last_msg_timeout_time)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	429a      	cmp	r2, r3
 800579c:	d904      	bls.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fcfe 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf8c      	ite	hi
 80057c8:	2301      	movhi	r3, #1
 80057ca:	2300      	movls	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
          return SPIN_TIMEOUT;
 80057d2:	f06f 0301 	mvn.w	r3, #1
 80057d6:	e1f7      	b.n	8005bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      int data = hardware_.read();
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fccf 	bl	8004180 <_ZN13STM32Hardware4readEv>
 80057e2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f2c0 81d1 	blt.w	8005b8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x440>
      checksum_ += data;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057f2:	3310      	adds	r3, #16
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005800:	3310      	adds	r3, #16
 8005802:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d128      	bne.n	8005862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x114>
        message_in[index_++] = data;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005816:	330c      	adds	r3, #12
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	1c51      	adds	r1, r2, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005822:	330c      	adds	r3, #12
 8005824:	6019      	str	r1, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	b2d9      	uxtb	r1, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	460a      	mov	r2, r1
 8005830:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005838:	3304      	adds	r3, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	1e5a      	subs	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005844:	3304      	adds	r3, #4
 8005846:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800584e:	3304      	adds	r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1a8      	bne.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800585c:	2208      	movs	r2, #8
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e7a2      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d12e      	bne.n	80058cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x17e>
        if (data == 0xff)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2bff      	cmp	r3, #255	; 0xff
 8005872:	d110      	bne.n	8005896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x148>
          mode_++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005884:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f103 0214 	add.w	r2, r3, #20
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e788      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fc8b 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	bf8c      	ite	hi
 80058ae:	2301      	movhi	r3, #1
 80058b0:	2300      	movls	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f43f af77 	beq.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          configured_ = false;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058c0:	3314      	adds	r3, #20
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 80058c6:	f06f 0301 	mvn.w	r3, #1
 80058ca:	e17d      	b.n	8005bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      else if (mode_ == MODE_PROTOCOL_VER)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d120      	bne.n	800591a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
        if (data == PROTOCOL_VER)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2bfe      	cmp	r3, #254	; 0xfe
 80058dc:	d109      	bne.n	80058f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a4>
          mode_++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e75a      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005902:	3314      	adds	r3, #20
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f083 0301 	eor.w	r3, r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	f43f af4b 	beq.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f996 	bl	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 8005918:	e746      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d11b      	bne.n	800595e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x210>
        bytes_ = data;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800592c:	3304      	adds	r3, #4
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005938:	330c      	adds	r3, #12
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
        mode_++;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800594e:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005956:	3310      	adds	r3, #16
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	e724      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d116      	bne.n	8005998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x24a>
        bytes_ += data << 8;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005970:	3304      	adds	r3, #4
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	441a      	add	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005980:	3304      	adds	r3, #4
 8005982:	601a      	str	r2, [r3, #0]
        mode_++;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e707      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d11b      	bne.n	80059dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x28e>
        if ((checksum_ % 256) == 255)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059aa:	3310      	adds	r3, #16
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	425a      	negs	r2, r3
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	bf58      	it	pl
 80059b6:	4253      	negpl	r3, r2
 80059b8:	2bff      	cmp	r3, #255	; 0xff
 80059ba:	d109      	bne.n	80059d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
          mode_++;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e6eb      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e6e5      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d115      	bne.n	8005a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c6>
        topic_ = data;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059ee:	3308      	adds	r3, #8
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	601a      	str	r2, [r3, #0]
        mode_++;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a04:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e6c9      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	d11f      	bne.n	8005a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ += data << 8;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a26:	3308      	adds	r3, #8
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	441a      	add	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a36:	3308      	adds	r3, #8
 8005a38:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f47f aeaa 	bne.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	e6a3      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	f47f ae9d 	bne.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a7e:	3310      	adds	r3, #16
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	425a      	negs	r2, r3
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	bf58      	it	pl
 8005a8a:	4253      	negpl	r3, r2
 8005a8c:	2bff      	cmp	r3, #255	; 0xff
 8005a8e:	f47f ae8b 	bne.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a98:	3308      	adds	r3, #8
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x37c>
            requestSyncTime();
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8cf 	bl	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8e9 	bl	8005c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005abe:	331c      	adds	r3, #28
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	e07e      	b.n	8005bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
          else if (topic_ == TopicInfo::ID_TIME)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b0a      	cmp	r3, #10
 8005ad6:	d106      	bne.n	8005ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x398>
            syncTime(message_in);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3318      	adds	r3, #24
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9b6 	bl	8005e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8005ae4:	e660      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005aec:	3308      	adds	r3, #8
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d110      	bne.n	8005b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3c8>
            req_param_resp.deserialize(message_in);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005afa:	3308      	adds	r3, #8
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	3218      	adds	r2, #24
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe f96b 	bl	8003dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005b0e:	3304      	adds	r3, #4
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e648      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b0b      	cmp	r3, #11
 8005b22:	d106      	bne.n	8005b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3e4>
            configured_ = false;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b2a:	3314      	adds	r3, #20
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e63a      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            if (subscribers[topic_ - 100])
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b38:	3308      	adds	r3, #8
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3b64      	subs	r3, #100	; 0x64
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f ae2c 	beq.w	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
              subscribers[topic_ - 100]->callback(message_in);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b56:	3308      	adds	r3, #8
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3b64      	subs	r3, #100	; 0x64
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	6858      	ldr	r0, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b6e:	3308      	adds	r3, #8
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3b64      	subs	r3, #100	; 0x64
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	3218      	adds	r2, #24
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4798      	blx	r3
    while (true)
 8005b8c:	e60c      	b.n	80057a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        break;
 8005b8e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005b96:	3314      	adds	r3, #20
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d013      	beq.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d908      	bls.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
      requestSyncTime();
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f845 	bl	8005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8005bc6:	2300      	movs	r3, #0
  }
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fae9 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8005be4:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fd fc4e 	bl	8003488 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	099a      	lsrs	r2, r3, #6
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 8005c04:	fba3 1302 	umull	r1, r3, r3, r2
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x70>)
 8005c16:	fb02 f203 	mul.w	r2, r2, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	441a      	add	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fad0 	bl	80061d0 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005c30:	bf00      	nop
  }
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	10624dd3 	.word	0x10624dd3
 8005c40:	000f4240 	.word	0x000f4240

08005c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005c4c:	f107 030c 	add.w	r3, r7, #12
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fd fc39 	bl	80034c8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f107 020c 	add.w	r2, r7, #12
 8005c60:	210a      	movs	r1, #10
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
    rt_time = hardware_.time();
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe faa3 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8005c70:	4602      	mov	r2, r0
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	609a      	str	r2, [r3, #8]
  }
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005c7e:	b590      	push	{r4, r7, lr}
 8005c80:	b08b      	sub	sp, #44	; 0x2c
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fd fd06 	bl	800369c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	2b18      	cmp	r3, #24
 8005c98:	dc5e      	bgt.n	8005d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9e:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d052      	beq.n	8005d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cae:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd8:	6859      	ldr	r1, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d02:	6859      	ldr	r1, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4798      	blx	r3
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d24:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681c      	ldr	r4, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fa03 	bl	8004144 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	461a      	mov	r2, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	47a0      	blx	r4
        HAL_Delay(50);
 8005d4a:	2032      	movs	r0, #50	; 0x32
 8005d4c:	f000 fa90 	bl	8006270 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	3301      	adds	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	e79d      	b.n	8005c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	2b18      	cmp	r3, #24
 8005d60:	dc6b      	bgt.n	8005e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05e      	beq.n	8005e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4798      	blx	r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	6859      	ldr	r1, [r3, #4]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4608      	mov	r0, r1
 8005de8:	4798      	blx	r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005df2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681c      	ldr	r4, [r3, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4798      	blx	r3
 8005e20:	4601      	mov	r1, r0
 8005e22:	f107 030c 	add.w	r3, r7, #12
 8005e26:	461a      	mov	r2, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	47a0      	blx	r4
        HAL_Delay(50);
 8005e2c:	2032      	movs	r0, #50	; 0x32
 8005e2e:	f000 fa1f 	bl	8006270 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	3301      	adds	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
 8005e38:	e790      	b.n	8005d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005e40:	3314      	adds	r3, #20
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
  }
 8005e46:	bf00      	nop
 8005e48:	372c      	adds	r7, #44	; 0x2c
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd90      	pop	{r4, r7, pc}
	...

08005e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fd fb32 	bl	80034c8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe f9a4 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005e78:	f107 0308 	add.w	r3, r7, #8
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fb91 	bl	80035a6 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4915      	ldr	r1, [pc, #84]	; (8005ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005e8a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	4413      	add	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005e94:	6939      	ldr	r1, [r7, #16]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ea4:	fb00 f303 	mul.w	r3, r0, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005eb4:	f107 0308 	add.w	r3, r7, #8
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8a7 	bl	8006010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f975 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005ed4:	331c      	adds	r3, #28
 8005ed6:	601a      	str	r2, [r3, #0]
  }
 8005ed8:	bf00      	nop
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	10624dd3 	.word	0x10624dd3
 8005ee4:	000f4240 	.word	0x000f4240

08005ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b63      	cmp	r3, #99	; 0x63
 8005ef8:	dd0b      	ble.n	8005f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005f00:	3314      	adds	r3, #20
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f083 0301 	eor.w	r3, r3, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e077      	b.n	8006002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8005f1e:	3207      	adds	r2, #7
 8005f20:	4611      	mov	r1, r2
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	22ff      	movs	r2, #255	; 0xff
 8005f2c:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	22fe      	movs	r2, #254	; 0xfe
 8005f34:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	121b      	asrs	r3, r3, #8
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 281a 	ldrb.w	r2, [r3, #2074]	; 0x81a
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 381b 	ldrb.w	r3, [r3, #2075]	; 0x81b
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	121b      	asrs	r3, r3, #8
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005f86:	2305      	movs	r3, #5
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	da0d      	bge.n	8005fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e7ec      	b.n	8005f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	425a      	negs	r2, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	bf58      	it	pl
 8005fc0:	4253      	negpl	r3, r2
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	6179      	str	r1, [r7, #20]
 8005fca:	43d2      	mvns	r2, r2
 8005fcc:	b2d1      	uxtb	r1, r2
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fde:	dc0a      	bgt.n	8005ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1d18      	adds	r0, r3, #4
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4619      	mov	r1, r3
 8005fee:	f7fe f8d2 	bl	8004196 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e005      	b.n	8006002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005ff6:	4905      	ldr	r1, [pc, #20]	; (800600c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x124>)
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f847 	bl	800608c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8006002:	4618      	mov	r0, r3
 8006004:	3720      	adds	r7, #32
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	0800c79c 	.word	0x0800c79c

08006010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe f8c9 	bl	80041b6 <_ZN13STM32Hardware4timeEv>
 8006024:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4914      	ldr	r1, [pc, #80]	; (8006080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 800602e:	fba1 1303 	umull	r1, r3, r1, r3
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	1e5a      	subs	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 8006044:	fba3 0302 	umull	r0, r3, r3, r2
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800604e:	fb00 f303 	mul.w	r3, r0, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x74>)
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	1aca      	subs	r2, r1, r3
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x78>)
 800605e:	4413      	add	r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 020c 	add.w	r2, r3, #12
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3310      	adds	r3, #16
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 f8ad 	bl	80061d0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	10624dd3 	.word	0x10624dd3
 8006084:	000f4240 	.word	0x000f4240
 8006088:	3b9aca00 	.word	0x3b9aca00

0800608c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	2103      	movs	r1, #3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f804 	bl	80060a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	460b      	mov	r3, r1
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80060b6:	f107 0314 	add.w	r3, r7, #20
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fcae 	bl	8003a1c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f107 0214 	add.w	r2, r7, #20
 80060d2:	2107      	movs	r1, #7
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	4798      	blx	r3
  }
 80060d8:	bf00      	nop
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <_Z41__static_initialization_and_destruction_0ii>:
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d134      	bne.n	800615a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d12f      	bne.n	800615a <_Z41__static_initialization_and_destruction_0ii+0x7a>
sensor_msgs::Imu imu_msg;
 80060fa:	481a      	ldr	r0, [pc, #104]	; (8006164 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060fc:	f7fe fb4c 	bl	8004798 <_ZN11sensor_msgs3ImuC1Ev>
sensor_msgs::MagneticField mag_msg;
 8006100:	4819      	ldr	r0, [pc, #100]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006102:	f7fe fcbd 	bl	8004a80 <_ZN11sensor_msgs13MagneticFieldC1Ev>
sensor_msgs::NavSatFix fix_msg;
 8006106:	4819      	ldr	r0, [pc, #100]	; (800616c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006108:	f7fe fe08 	bl	8004d1c <_ZN11sensor_msgs9NavSatFixC1Ev>
sensor_msgs::FluidPressure air_ps_msg;
 800610c:	4818      	ldr	r0, [pc, #96]	; (8006170 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800610e:	f7fe ff33 	bl	8004f78 <_ZN11sensor_msgs13FluidPressureC1Ev>
sensor_msgs::Temperature temp_msg;
 8006112:	4818      	ldr	r0, [pc, #96]	; (8006174 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006114:	f7fe ffcc 	bl	80050b0 <_ZN11sensor_msgs11TemperatureC1Ev>
ros::NodeHandle nh;
 8006118:	4817      	ldr	r0, [pc, #92]	; (8006178 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800611a:	f7ff fa3b 	bl	8005594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
ros::Publisher imu_pub("/imu",&imu_msg);
 800611e:	2300      	movs	r3, #0
 8006120:	4a10      	ldr	r2, [pc, #64]	; (8006164 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006122:	4916      	ldr	r1, [pc, #88]	; (800617c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006124:	4816      	ldr	r0, [pc, #88]	; (8006180 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006126:	f7fd ffe3 	bl	80040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher mag_pub("/mag",&mag_msg);
 800612a:	2300      	movs	r3, #0
 800612c:	4a0e      	ldr	r2, [pc, #56]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800612e:	4915      	ldr	r1, [pc, #84]	; (8006184 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006130:	4815      	ldr	r0, [pc, #84]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006132:	f7fd ffdd 	bl	80040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gps_pub("/fix",&fix_msg);
 8006136:	2300      	movs	r3, #0
 8006138:	4a0c      	ldr	r2, [pc, #48]	; (800616c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800613a:	4914      	ldr	r1, [pc, #80]	; (800618c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800613c:	4814      	ldr	r0, [pc, #80]	; (8006190 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800613e:	f7fd ffd7 	bl	80040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
 8006142:	2300      	movs	r3, #0
 8006144:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006146:	4913      	ldr	r1, [pc, #76]	; (8006194 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8006148:	4813      	ldr	r0, [pc, #76]	; (8006198 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800614a:	f7fd ffd1 	bl	80040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher temp_pub("/temperature",&temp_msg);
 800614e:	2300      	movs	r3, #0
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8006152:	4912      	ldr	r1, [pc, #72]	; (800619c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8006154:	4812      	ldr	r0, [pc, #72]	; (80061a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8006156:	f7fd ffcb 	bl	80040f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000474 	.word	0x20000474
 8006168:	2000052c 	.word	0x2000052c
 800616c:	20000578 	.word	0x20000578
 8006170:	200005cc 	.word	0x200005cc
 8006174:	200005ec 	.word	0x200005ec
 8006178:	2000060c 	.word	0x2000060c
 800617c:	0800c7d8 	.word	0x0800c7d8
 8006180:	2000173c 	.word	0x2000173c
 8006184:	0800c7e0 	.word	0x0800c7e0
 8006188:	20001750 	.word	0x20001750
 800618c:	0800c7e8 	.word	0x0800c7e8
 8006190:	20001764 	.word	0x20001764
 8006194:	0800c7f0 	.word	0x0800c7f0
 8006198:	20001778 	.word	0x20001778
 800619c:	0800c800 	.word	0x0800c800
 80061a0:	2000178c 	.word	0x2000178c

080061a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected()
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
    return configured_;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80061b2:	3314      	adds	r3, #20
 80061b4:	781b      	ldrb	r3, [r3, #0]
  };
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <_GLOBAL__sub_I_imu_msg>:
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7ff ff89 	bl	80060e0 <_Z41__static_initialization_and_destruction_0ii>
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	0a5a      	lsrs	r2, r3, #9
 80061e0:	490f      	ldr	r1, [pc, #60]	; (8006220 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061e2:	fba1 1202 	umull	r1, r2, r1, r2
 80061e6:	09d2      	lsrs	r2, r2, #7
 80061e8:	490e      	ldr	r1, [pc, #56]	; (8006224 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80061ea:	fb01 f202 	mul.w	r2, r1, r2
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	09db      	lsrs	r3, r3, #7
 8006200:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	441a      	add	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	00044b83 	.word	0x00044b83
 8006224:	3b9aca00 	.word	0x3b9aca00

08006228 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006228:	4a07      	ldr	r2, [pc, #28]	; (8006248 <HAL_Init+0x20>)
{
 800622a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800622c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800622e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006230:	f043 0310 	orr.w	r3, r3, #16
 8006234:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006236:	f000 f82d 	bl	8006294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800623a:	2000      	movs	r0, #0
 800623c:	f7fc f93a 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006240:	f7fc f858 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006244:	2000      	movs	r0, #0
 8006246:	bd08      	pop	{r3, pc}
 8006248:	40022000 	.word	0x40022000

0800624c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800624c:	4a03      	ldr	r2, [pc, #12]	; (800625c <HAL_IncTick+0x10>)
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_IncTick+0x14>)
 8006250:	6811      	ldr	r1, [r2, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	440b      	add	r3, r1
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20002058 	.word	0x20002058
 8006260:	2000003d 	.word	0x2000003d

08006264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006264:	4b01      	ldr	r3, [pc, #4]	; (800626c <HAL_GetTick+0x8>)
 8006266:	6818      	ldr	r0, [r3, #0]
}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20002058 	.word	0x20002058

08006270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006274:	f7ff fff6 	bl	8006264 <HAL_GetTick>
 8006278:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800627a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800627c:	bf1e      	ittt	ne
 800627e:	4b04      	ldrne	r3, [pc, #16]	; (8006290 <HAL_Delay+0x20>)
 8006280:	781b      	ldrbne	r3, [r3, #0]
 8006282:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006284:	f7ff ffee 	bl	8006264 <HAL_GetTick>
 8006288:	1b40      	subs	r0, r0, r5
 800628a:	42a0      	cmp	r0, r4
 800628c:	d3fa      	bcc.n	8006284 <HAL_Delay+0x14>
  {
  }
}
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	2000003d 	.word	0x2000003d

08006294 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006296:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006298:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800629a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80062ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80062b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062b2:	4770      	bx	lr
 80062b4:	e000ed00 	.word	0xe000ed00

080062b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062ba:	b570      	push	{r4, r5, r6, lr}
 80062bc:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062be:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c6:	f1c4 0507 	rsb	r5, r4, #7
 80062ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062cc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062d0:	bf28      	it	cs
 80062d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	bf98      	it	ls
 80062d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062da:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062de:	bf88      	it	hi
 80062e0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e2:	ea21 0303 	bic.w	r3, r1, r3
 80062e6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e8:	fa06 f404 	lsl.w	r4, r6, r4
 80062ec:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80062f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f6:	bfa8      	it	ge
 80062f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80062fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006300:	bfb8      	it	lt
 8006302:	4a06      	ldrlt	r2, [pc, #24]	; (800631c <HAL_NVIC_SetPriority+0x64>)
 8006304:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006306:	bfab      	itete	ge
 8006308:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800630c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006310:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006314:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	e000ed00 	.word	0xe000ed00
 800631c:	e000ed14 	.word	0xe000ed14

08006320 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006320:	2800      	cmp	r0, #0
 8006322:	db08      	blt.n	8006336 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006324:	2301      	movs	r3, #1
 8006326:	0942      	lsrs	r2, r0, #5
 8006328:	f000 001f 	and.w	r0, r0, #31
 800632c:	fa03 f000 	lsl.w	r0, r3, r0
 8006330:	4b01      	ldr	r3, [pc, #4]	; (8006338 <HAL_NVIC_EnableIRQ+0x18>)
 8006332:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006336:	4770      	bx	lr
 8006338:	e000e100 	.word	0xe000e100

0800633c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800633c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800633e:	b330      	cbz	r0, 800638e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006340:	2214      	movs	r2, #20
 8006342:	6801      	ldr	r1, [r0, #0]
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_DMA_Init+0x58>)
 8006346:	440b      	add	r3, r1
 8006348:	fbb3 f3f2 	udiv	r3, r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006350:	4b11      	ldr	r3, [pc, #68]	; (8006398 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006352:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8006354:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006356:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800635a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800635e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006362:	4323      	orrs	r3, r4
 8006364:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006366:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636c:	6944      	ldr	r4, [r0, #20]
 800636e:	4323      	orrs	r3, r4
 8006370:	6984      	ldr	r4, [r0, #24]
 8006372:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006374:	69c4      	ldr	r4, [r0, #28]
 8006376:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8006378:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800637a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800637c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006380:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006384:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006386:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800638a:	4618      	mov	r0, r3
}
 800638c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800638e:	2001      	movs	r0, #1
 8006390:	e7fc      	b.n	800638c <HAL_DMA_Init+0x50>
 8006392:	bf00      	nop
 8006394:	bffdfff8 	.word	0xbffdfff8
 8006398:	40020000 	.word	0x40020000

0800639c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800639c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800639e:	f890 4020 	ldrb.w	r4, [r0, #32]
 80063a2:	2c01      	cmp	r4, #1
 80063a4:	d035      	beq.n	8006412 <HAL_DMA_Start_IT+0x76>
 80063a6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063a8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80063ac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80063b0:	42a5      	cmp	r5, r4
 80063b2:	f04f 0600 	mov.w	r6, #0
 80063b6:	f04f 0402 	mov.w	r4, #2
 80063ba:	d128      	bne.n	800640e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063bc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063c0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80063c4:	6826      	ldr	r6, [r4, #0]
 80063c6:	f026 0601 	bic.w	r6, r6, #1
 80063ca:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063cc:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80063d0:	40bd      	lsls	r5, r7
 80063d2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063d4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063d6:	6843      	ldr	r3, [r0, #4]
 80063d8:	6805      	ldr	r5, [r0, #0]
 80063da:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80063dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063de:	bf0b      	itete	eq
 80063e0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80063e2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80063e4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80063e6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80063e8:	b14b      	cbz	r3, 80063fe <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80063f0:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	602b      	str	r3, [r5, #0]
}
 80063fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f023 0304 	bic.w	r3, r3, #4
 8006404:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 030a 	orr.w	r3, r3, #10
 800640c:	e7f0      	b.n	80063f0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800640e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8006412:	2002      	movs	r0, #2
 8006414:	e7f2      	b.n	80063fc <HAL_DMA_Start_IT+0x60>
	...

08006418 <HAL_DMA_IRQHandler>:
{
 8006418:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800641a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800641c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800641e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006420:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006422:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006424:	4095      	lsls	r5, r2
 8006426:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006428:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800642a:	d032      	beq.n	8006492 <HAL_DMA_IRQHandler+0x7a>
 800642c:	074d      	lsls	r5, r1, #29
 800642e:	d530      	bpl.n	8006492 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006434:	bf5e      	ittt	pl
 8006436:	681a      	ldrpl	r2, [r3, #0]
 8006438:	f022 0204 	bicpl.w	r2, r2, #4
 800643c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800643e:	4a3e      	ldr	r2, [pc, #248]	; (8006538 <HAL_DMA_IRQHandler+0x120>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d019      	beq.n	8006478 <HAL_DMA_IRQHandler+0x60>
 8006444:	3214      	adds	r2, #20
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_DMA_IRQHandler+0x64>
 800644a:	3214      	adds	r2, #20
 800644c:	4293      	cmp	r3, r2
 800644e:	d017      	beq.n	8006480 <HAL_DMA_IRQHandler+0x68>
 8006450:	3214      	adds	r2, #20
 8006452:	4293      	cmp	r3, r2
 8006454:	d017      	beq.n	8006486 <HAL_DMA_IRQHandler+0x6e>
 8006456:	3214      	adds	r2, #20
 8006458:	4293      	cmp	r3, r2
 800645a:	d017      	beq.n	800648c <HAL_DMA_IRQHandler+0x74>
 800645c:	3214      	adds	r2, #20
 800645e:	4293      	cmp	r3, r2
 8006460:	bf0c      	ite	eq
 8006462:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8006466:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800646a:	4a34      	ldr	r2, [pc, #208]	; (800653c <HAL_DMA_IRQHandler+0x124>)
 800646c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800646e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05e      	beq.n	8006532 <HAL_DMA_IRQHandler+0x11a>
}
 8006474:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006476:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006478:	2304      	movs	r3, #4
 800647a:	e7f6      	b.n	800646a <HAL_DMA_IRQHandler+0x52>
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	e7f4      	b.n	800646a <HAL_DMA_IRQHandler+0x52>
 8006480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006484:	e7f1      	b.n	800646a <HAL_DMA_IRQHandler+0x52>
 8006486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800648a:	e7ee      	b.n	800646a <HAL_DMA_IRQHandler+0x52>
 800648c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006490:	e7eb      	b.n	800646a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006492:	2502      	movs	r5, #2
 8006494:	4095      	lsls	r5, r2
 8006496:	4225      	tst	r5, r4
 8006498:	d035      	beq.n	8006506 <HAL_DMA_IRQHandler+0xee>
 800649a:	078d      	lsls	r5, r1, #30
 800649c:	d533      	bpl.n	8006506 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	0694      	lsls	r4, r2, #26
 80064a2:	d406      	bmi.n	80064b2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	f022 020a 	bic.w	r2, r2, #10
 80064aa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80064ac:	2201      	movs	r2, #1
 80064ae:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_DMA_IRQHandler+0x120>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d019      	beq.n	80064ec <HAL_DMA_IRQHandler+0xd4>
 80064b8:	3214      	adds	r2, #20
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_DMA_IRQHandler+0xd8>
 80064be:	3214      	adds	r2, #20
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d017      	beq.n	80064f4 <HAL_DMA_IRQHandler+0xdc>
 80064c4:	3214      	adds	r2, #20
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d017      	beq.n	80064fa <HAL_DMA_IRQHandler+0xe2>
 80064ca:	3214      	adds	r2, #20
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d017      	beq.n	8006500 <HAL_DMA_IRQHandler+0xe8>
 80064d0:	3214      	adds	r2, #20
 80064d2:	4293      	cmp	r3, r2
 80064d4:	bf0c      	ite	eq
 80064d6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80064da:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80064de:	4a17      	ldr	r2, [pc, #92]	; (800653c <HAL_DMA_IRQHandler+0x124>)
 80064e0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80064e2:	2300      	movs	r3, #0
 80064e4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80064e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064ea:	e7c1      	b.n	8006470 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80064ec:	2302      	movs	r3, #2
 80064ee:	e7f6      	b.n	80064de <HAL_DMA_IRQHandler+0xc6>
 80064f0:	2320      	movs	r3, #32
 80064f2:	e7f4      	b.n	80064de <HAL_DMA_IRQHandler+0xc6>
 80064f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f8:	e7f1      	b.n	80064de <HAL_DMA_IRQHandler+0xc6>
 80064fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064fe:	e7ee      	b.n	80064de <HAL_DMA_IRQHandler+0xc6>
 8006500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006504:	e7eb      	b.n	80064de <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006506:	2508      	movs	r5, #8
 8006508:	4095      	lsls	r5, r2
 800650a:	4225      	tst	r5, r4
 800650c:	d011      	beq.n	8006532 <HAL_DMA_IRQHandler+0x11a>
 800650e:	0709      	lsls	r1, r1, #28
 8006510:	d50f      	bpl.n	8006532 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	f021 010e 	bic.w	r1, r1, #14
 8006518:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800651a:	2301      	movs	r3, #1
 800651c:	fa03 f202 	lsl.w	r2, r3, r2
 8006520:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006522:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006524:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006528:	2300      	movs	r3, #0
 800652a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800652e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006530:	e79e      	b.n	8006470 <HAL_DMA_IRQHandler+0x58>
}
 8006532:	bc70      	pop	{r4, r5, r6}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40020008 	.word	0x40020008
 800653c:	40020000 	.word	0x40020000

08006540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006544:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8006546:	4626      	mov	r6, r4
 8006548:	4b65      	ldr	r3, [pc, #404]	; (80066e0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800654a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80066f0 <HAL_GPIO_Init+0x1b0>
 800654e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80066f4 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006552:	680a      	ldr	r2, [r1, #0]
 8006554:	fa32 f506 	lsrs.w	r5, r2, r6
 8006558:	d102      	bne.n	8006560 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8006560:	f04f 0801 	mov.w	r8, #1
 8006564:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006568:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800656c:	4590      	cmp	r8, r2
 800656e:	d17e      	bne.n	800666e <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8006570:	684d      	ldr	r5, [r1, #4]
 8006572:	2d12      	cmp	r5, #18
 8006574:	f000 80a9 	beq.w	80066ca <HAL_GPIO_Init+0x18a>
 8006578:	f200 8082 	bhi.w	8006680 <HAL_GPIO_Init+0x140>
 800657c:	2d02      	cmp	r5, #2
 800657e:	f000 80a1 	beq.w	80066c4 <HAL_GPIO_Init+0x184>
 8006582:	d876      	bhi.n	8006672 <HAL_GPIO_Init+0x132>
 8006584:	2d00      	cmp	r5, #0
 8006586:	f000 8088 	beq.w	800669a <HAL_GPIO_Init+0x15a>
 800658a:	2d01      	cmp	r5, #1
 800658c:	f000 8098 	beq.w	80066c0 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006590:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006594:	2aff      	cmp	r2, #255	; 0xff
 8006596:	bf93      	iteet	ls
 8006598:	4682      	movls	sl, r0
 800659a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800659e:	3d08      	subhi	r5, #8
 80065a0:	f8d0 b000 	ldrls.w	fp, [r0]
 80065a4:	bf92      	itee	ls
 80065a6:	00b5      	lslls	r5, r6, #2
 80065a8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80065ac:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065ae:	fa09 f805 	lsl.w	r8, r9, r5
 80065b2:	ea2b 0808 	bic.w	r8, fp, r8
 80065b6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065ba:	bf88      	it	hi
 80065bc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065c0:	ea48 0505 	orr.w	r5, r8, r5
 80065c4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80065cc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80065d0:	d04d      	beq.n	800666e <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80065d2:	4f44      	ldr	r7, [pc, #272]	; (80066e4 <HAL_GPIO_Init+0x1a4>)
 80065d4:	f026 0803 	bic.w	r8, r6, #3
 80065d8:	69bd      	ldr	r5, [r7, #24]
 80065da:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80065de:	f045 0501 	orr.w	r5, r5, #1
 80065e2:	61bd      	str	r5, [r7, #24]
 80065e4:	69bd      	ldr	r5, [r7, #24]
 80065e6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80065ea:	f005 0501 	and.w	r5, r5, #1
 80065ee:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065f0:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80065f4:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80065fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065fe:	fa09 f90b 	lsl.w	r9, r9, fp
 8006602:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006606:	4d38      	ldr	r5, [pc, #224]	; (80066e8 <HAL_GPIO_Init+0x1a8>)
 8006608:	42a8      	cmp	r0, r5
 800660a:	d063      	beq.n	80066d4 <HAL_GPIO_Init+0x194>
 800660c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006610:	42a8      	cmp	r0, r5
 8006612:	d061      	beq.n	80066d8 <HAL_GPIO_Init+0x198>
 8006614:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006618:	42a8      	cmp	r0, r5
 800661a:	d05f      	beq.n	80066dc <HAL_GPIO_Init+0x19c>
 800661c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006620:	42a8      	cmp	r0, r5
 8006622:	bf0c      	ite	eq
 8006624:	2503      	moveq	r5, #3
 8006626:	2504      	movne	r5, #4
 8006628:	fa05 f50b 	lsl.w	r5, r5, fp
 800662c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8006630:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8006634:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006636:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800663a:	bf14      	ite	ne
 800663c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800663e:	4395      	biceq	r5, r2
 8006640:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8006642:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006644:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8006648:	bf14      	ite	ne
 800664a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800664c:	4395      	biceq	r5, r2
 800664e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006650:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006652:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8006656:	bf14      	ite	ne
 8006658:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800665a:	4395      	biceq	r5, r2
 800665c:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800665e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006660:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006664:	bf14      	ite	ne
 8006666:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006668:	ea25 0202 	biceq.w	r2, r5, r2
 800666c:	60da      	str	r2, [r3, #12]
	position++;
 800666e:	3601      	adds	r6, #1
 8006670:	e76f      	b.n	8006552 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8006672:	2d03      	cmp	r5, #3
 8006674:	d022      	beq.n	80066bc <HAL_GPIO_Init+0x17c>
 8006676:	2d11      	cmp	r5, #17
 8006678:	d18a      	bne.n	8006590 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800667a:	68cc      	ldr	r4, [r1, #12]
 800667c:	3404      	adds	r4, #4
          break;
 800667e:	e787      	b.n	8006590 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8006680:	4f1a      	ldr	r7, [pc, #104]	; (80066ec <HAL_GPIO_Init+0x1ac>)
 8006682:	42bd      	cmp	r5, r7
 8006684:	d009      	beq.n	800669a <HAL_GPIO_Init+0x15a>
 8006686:	d812      	bhi.n	80066ae <HAL_GPIO_Init+0x16e>
 8006688:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80066f8 <HAL_GPIO_Init+0x1b8>
 800668c:	454d      	cmp	r5, r9
 800668e:	d004      	beq.n	800669a <HAL_GPIO_Init+0x15a>
 8006690:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8006694:	454d      	cmp	r5, r9
 8006696:	f47f af7b 	bne.w	8006590 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800669a:	688c      	ldr	r4, [r1, #8]
 800669c:	b1c4      	cbz	r4, 80066d0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800669e:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80066a0:	bf0c      	ite	eq
 80066a2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80066a6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80066aa:	2408      	movs	r4, #8
 80066ac:	e770      	b.n	8006590 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80066ae:	4565      	cmp	r5, ip
 80066b0:	d0f3      	beq.n	800669a <HAL_GPIO_Init+0x15a>
 80066b2:	4575      	cmp	r5, lr
 80066b4:	d0f1      	beq.n	800669a <HAL_GPIO_Init+0x15a>
 80066b6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80066fc <HAL_GPIO_Init+0x1bc>
 80066ba:	e7eb      	b.n	8006694 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80066bc:	2400      	movs	r4, #0
 80066be:	e767      	b.n	8006590 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80066c0:	68cc      	ldr	r4, [r1, #12]
          break;
 80066c2:	e765      	b.n	8006590 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80066c4:	68cc      	ldr	r4, [r1, #12]
 80066c6:	3408      	adds	r4, #8
          break;
 80066c8:	e762      	b.n	8006590 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80066ca:	68cc      	ldr	r4, [r1, #12]
 80066cc:	340c      	adds	r4, #12
          break;
 80066ce:	e75f      	b.n	8006590 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80066d0:	2404      	movs	r4, #4
 80066d2:	e75d      	b.n	8006590 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066d4:	2500      	movs	r5, #0
 80066d6:	e7a7      	b.n	8006628 <HAL_GPIO_Init+0xe8>
 80066d8:	2501      	movs	r5, #1
 80066da:	e7a5      	b.n	8006628 <HAL_GPIO_Init+0xe8>
 80066dc:	2502      	movs	r5, #2
 80066de:	e7a3      	b.n	8006628 <HAL_GPIO_Init+0xe8>
 80066e0:	40010400 	.word	0x40010400
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40010800 	.word	0x40010800
 80066ec:	10210000 	.word	0x10210000
 80066f0:	10310000 	.word	0x10310000
 80066f4:	10320000 	.word	0x10320000
 80066f8:	10110000 	.word	0x10110000
 80066fc:	10220000 	.word	0x10220000

08006700 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006700:	b10a      	cbz	r2, 8006706 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006702:	6101      	str	r1, [r0, #16]
  }
}
 8006704:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006706:	0409      	lsls	r1, r1, #16
 8006708:	e7fb      	b.n	8006702 <HAL_GPIO_WritePin+0x2>

0800670a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800670a:	6801      	ldr	r1, [r0, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	694b      	ldr	r3, [r1, #20]
 8006710:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8006714:	d010      	beq.n	8006738 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006716:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800671a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006720:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006728:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672e:	f043 0304 	orr.w	r3, r3, #4
 8006732:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8006734:	2001      	movs	r0, #1
 8006736:	4770      	bx	lr
  }
  return HAL_OK;
 8006738:	4618      	mov	r0, r3
}
 800673a:	4770      	bx	lr

0800673c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	4616      	mov	r6, r2
 8006744:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006746:	b28f      	uxth	r7, r1
 8006748:	6825      	ldr	r5, [r4, #0]
 800674a:	6968      	ldr	r0, [r5, #20]
 800674c:	ea37 0000 	bics.w	r0, r7, r0
 8006750:	d017      	beq.n	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006752:	696b      	ldr	r3, [r5, #20]
 8006754:	055a      	lsls	r2, r3, #21
 8006756:	d516      	bpl.n	8006786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800675a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006760:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006762:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8006766:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006768:	2300      	movs	r3, #0
 800676a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800676c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006770:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006776:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800677a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800677e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8006786:	1c73      	adds	r3, r6, #1
 8006788:	d0df      	beq.n	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7ff fd6b 	bl	8006264 <HAL_GetTick>
 800678e:	eba0 0008 	sub.w	r0, r0, r8
 8006792:	42b0      	cmp	r0, r6
 8006794:	d801      	bhi.n	800679a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8006796:	2e00      	cmp	r6, #0
 8006798:	d1d6      	bne.n	8006748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800679a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800679c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800679e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067aa:	f042 0220 	orr.w	r2, r2, #32
 80067ae:	e7e4      	b.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080067b0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	075b      	lsls	r3, r3, #29
 80067be:	d501      	bpl.n	80067c4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80067c0:	2000      	movs	r0, #0
}
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff ffa0 	bl	800670a <I2C_IsAcknowledgeFailed>
 80067ca:	b9a8      	cbnz	r0, 80067f8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80067cc:	1c6a      	adds	r2, r5, #1
 80067ce:	d0f3      	beq.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d0:	f7ff fd48 	bl	8006264 <HAL_GetTick>
 80067d4:	1b80      	subs	r0, r0, r6
 80067d6:	42a8      	cmp	r0, r5
 80067d8:	d801      	bhi.n	80067de <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80067da:	2d00      	cmp	r5, #0
 80067dc:	d1ec      	bne.n	80067b8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067de:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80067e0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067e2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067f2:	f042 0220 	orr.w	r2, r2, #32
 80067f6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80067f8:	2001      	movs	r0, #1
 80067fa:	e7e2      	b.n	80067c2 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080067fc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	6943      	ldr	r3, [r0, #20]
 8006808:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800680c:	d001      	beq.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800680e:	2000      	movs	r0, #0
 8006810:	e010      	b.n	8006834 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006812:	6942      	ldr	r2, [r0, #20]
 8006814:	06d2      	lsls	r2, r2, #27
 8006816:	d50e      	bpl.n	8006836 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006818:	f06f 0210 	mvn.w	r2, #16
 800681c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800681e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006820:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006822:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006826:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800682a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800682c:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800682e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006834:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7ff fd15 	bl	8006264 <HAL_GetTick>
 800683a:	1b80      	subs	r0, r0, r6
 800683c:	42a8      	cmp	r0, r5
 800683e:	d801      	bhi.n	8006844 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8006840:	2d00      	cmp	r5, #0
 8006842:	d1df      	bne.n	8006804 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006844:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006846:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006848:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800684a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800684e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006854:	f042 0220 	orr.w	r2, r2, #32
 8006858:	e7e8      	b.n	800682c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800685a <I2C_WaitOnFlagUntilTimeout>:
{
 800685a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685e:	4604      	mov	r4, r0
 8006860:	4690      	mov	r8, r2
 8006862:	461f      	mov	r7, r3
 8006864:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006866:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800686a:	b28d      	uxth	r5, r1
 800686c:	6821      	ldr	r1, [r4, #0]
 800686e:	f1b9 0f01 	cmp.w	r9, #1
 8006872:	bf0c      	ite	eq
 8006874:	694b      	ldreq	r3, [r1, #20]
 8006876:	698b      	ldrne	r3, [r1, #24]
 8006878:	ea35 0303 	bics.w	r3, r5, r3
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2300      	movne	r3, #0
 8006882:	4598      	cmp	r8, r3
 8006884:	d001      	beq.n	800688a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8006886:	2000      	movs	r0, #0
 8006888:	e016      	b.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800688a:	1c7b      	adds	r3, r7, #1
 800688c:	d0ef      	beq.n	800686e <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7ff fce9 	bl	8006264 <HAL_GetTick>
 8006892:	1b80      	subs	r0, r0, r6
 8006894:	42b8      	cmp	r0, r7
 8006896:	d801      	bhi.n	800689c <I2C_WaitOnFlagUntilTimeout+0x42>
 8006898:	2f00      	cmp	r7, #0
 800689a:	d1e7      	bne.n	800686c <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800689c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800689e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80068a0:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068a2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80068ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068b2:	f042 0220 	orr.w	r2, r2, #32
 80068b6:	6422      	str	r2, [r4, #64]	; 0x40
}
 80068b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080068bc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	460d      	mov	r5, r1
 80068c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	061b      	lsls	r3, r3, #24
 80068ca:	d501      	bpl.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80068cc:	2000      	movs	r0, #0
}
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff ff1a 	bl	800670a <I2C_IsAcknowledgeFailed>
 80068d6:	b9a8      	cbnz	r0, 8006904 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80068d8:	1c6a      	adds	r2, r5, #1
 80068da:	d0f3      	beq.n	80068c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7ff fcc2 	bl	8006264 <HAL_GetTick>
 80068e0:	1b80      	subs	r0, r0, r6
 80068e2:	42a8      	cmp	r0, r5
 80068e4:	d801      	bhi.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	d1ec      	bne.n	80068c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068ea:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80068ec:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068ee:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80068fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	f042 0220 	orr.w	r2, r2, #32
 8006902:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006904:	2001      	movs	r0, #1
 8006906:	e7e2      	b.n	80068ce <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08006908 <I2C_RequestMemoryWrite>:
{
 8006908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800690c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800690e:	6802      	ldr	r2, [r0, #0]
{
 8006910:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006912:	6813      	ldr	r3, [r2, #0]
{
 8006914:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691a:	6013      	str	r3, [r2, #0]
{
 800691c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800691e:	9600      	str	r6, [sp, #0]
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	2200      	movs	r2, #0
 8006924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8006928:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	f7ff ff96 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 800692e:	b118      	cbz	r0, 8006938 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8006930:	2001      	movs	r0, #1
}
 8006932:	b004      	add	sp, #16
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800693e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006942:	4633      	mov	r3, r6
 8006944:	4916      	ldr	r1, [pc, #88]	; (80069a0 <I2C_RequestMemoryWrite+0x98>)
 8006946:	4620      	mov	r0, r4
 8006948:	f7ff fef8 	bl	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800694c:	2800      	cmp	r0, #0
 800694e:	d1ef      	bne.n	8006930 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	9003      	str	r0, [sp, #12]
 8006954:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006956:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006958:	9203      	str	r2, [sp, #12]
 800695a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695c:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800695e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006960:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006964:	f7ff ffaa 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006968:	b140      	cbz	r0, 800697c <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800696a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800696c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696e:	bf01      	itttt	eq
 8006970:	6822      	ldreq	r2, [r4, #0]
 8006972:	6813      	ldreq	r3, [r2, #0]
 8006974:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006978:	6013      	streq	r3, [r2, #0]
 800697a:	e7d9      	b.n	8006930 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800697c:	f1b8 0f01 	cmp.w	r8, #1
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	d102      	bne.n	800698a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006984:	b2ed      	uxtb	r5, r5
 8006986:	611d      	str	r5, [r3, #16]
 8006988:	e7d3      	b.n	8006932 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800698a:	0a2a      	lsrs	r2, r5, #8
 800698c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800698e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006990:	4632      	mov	r2, r6
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff ff92 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006998:	2800      	cmp	r0, #0
 800699a:	d1e6      	bne.n	800696a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	e7f1      	b.n	8006984 <I2C_RequestMemoryWrite+0x7c>
 80069a0:	00010002 	.word	0x00010002

080069a4 <I2C_RequestMemoryRead>:
{
 80069a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80069a8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069aa:	6803      	ldr	r3, [r0, #0]
{
 80069ac:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ae:	681a      	ldr	r2, [r3, #0]
{
 80069b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069b6:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069b8:	681a      	ldr	r2, [r3, #0]
{
 80069ba:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c0:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069c6:	9500      	str	r5, [sp, #0]
 80069c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ca:	2200      	movs	r2, #0
{
 80069cc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ce:	f7ff ff44 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 80069d2:	b118      	cbz	r0, 80069dc <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 80069d4:	2001      	movs	r0, #1
}
 80069d6:	b004      	add	sp, #16
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	b2ff      	uxtb	r7, r7
 80069e0:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80069e4:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069e6:	4929      	ldr	r1, [pc, #164]	; (8006a8c <I2C_RequestMemoryRead+0xe8>)
 80069e8:	462b      	mov	r3, r5
 80069ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7ff fea5 	bl	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d1ee      	bne.n	80069d4 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	9003      	str	r0, [sp, #12]
 80069fa:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069fe:	9203      	str	r2, [sp, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a02:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a04:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a06:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a08:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a0a:	f7ff ff57 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a0e:	b140      	cbz	r0, 8006a22 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a12:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a14:	bf01      	itttt	eq
 8006a16:	6822      	ldreq	r2, [r4, #0]
 8006a18:	6813      	ldreq	r3, [r2, #0]
 8006a1a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006a1e:	6013      	streq	r3, [r2, #0]
 8006a20:	e7d8      	b.n	80069d4 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a22:	f1b8 0f01 	cmp.w	r8, #1
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	d125      	bne.n	8006a76 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a2a:	b2f6      	uxtb	r6, r6
 8006a2c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2e:	462a      	mov	r2, r5
 8006a30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7ff ff42 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d1e8      	bne.n	8006a10 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a3e:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a40:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a42:	680b      	ldr	r3, [r1, #0]
 8006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a48:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4a:	9500      	str	r5, [sp, #0]
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a52:	f7ff ff02 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1bc      	bne.n	80069d4 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f047 0701 	orr.w	r7, r7, #1
 8006a60:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a64:	462b      	mov	r3, r5
 8006a66:	4909      	ldr	r1, [pc, #36]	; (8006a8c <I2C_RequestMemoryRead+0xe8>)
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7ff fe67 	bl	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8006a6e:	3000      	adds	r0, #0
 8006a70:	bf18      	it	ne
 8006a72:	2001      	movne	r0, #1
 8006a74:	e7af      	b.n	80069d6 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a76:	0a32      	lsrs	r2, r6, #8
 8006a78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ff1c 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d1c3      	bne.n	8006a10 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	e7ce      	b.n	8006a2a <I2C_RequestMemoryRead+0x86>
 8006a8c:	00010002 	.word	0x00010002

08006a90 <HAL_I2C_Init>:
{
 8006a90:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8006a92:	4604      	mov	r4, r0
 8006a94:	b908      	cbnz	r0, 8006a9a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8006a96:	2001      	movs	r0, #1
}
 8006a98:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006a9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006aa2:	b91b      	cbnz	r3, 8006aac <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8006aa4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006aa8:	f7fb fc46 	bl	8002338 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006aac:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8006aae:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006abc:	f001 f872 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	4a41      	ldr	r2, [pc, #260]	; (8006bc8 <HAL_I2C_Init+0x138>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d84d      	bhi.n	8006b64 <HAL_I2C_Init+0xd4>
 8006ac8:	4a40      	ldr	r2, [pc, #256]	; (8006bcc <HAL_I2C_Init+0x13c>)
 8006aca:	4290      	cmp	r0, r2
 8006acc:	d9e3      	bls.n	8006a96 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8006ace:	4940      	ldr	r1, [pc, #256]	; (8006bd0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ad0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8006ad2:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ad6:	6855      	ldr	r5, [r2, #4]
 8006ad8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006adc:	430d      	orrs	r5, r1
 8006ade:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ae0:	6a15      	ldr	r5, [r2, #32]
 8006ae2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006ae6:	3101      	adds	r1, #1
 8006ae8:	4329      	orrs	r1, r5
 8006aea:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006aec:	69d1      	ldr	r1, [r2, #28]
 8006aee:	4d36      	ldr	r5, [pc, #216]	; (8006bc8 <HAL_I2C_Init+0x138>)
 8006af0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006afa:	f100 30ff 	add.w	r0, r0, #4294967295
 8006afe:	d848      	bhi.n	8006b92 <HAL_I2C_Init+0x102>
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	bf38      	it	cc
 8006b10:	2304      	movcc	r3, #4
 8006b12:	430b      	orrs	r3, r1
 8006b14:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b16:	6811      	ldr	r1, [r2, #0]
 8006b18:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006b1c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006b20:	4303      	orrs	r3, r0
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b26:	6891      	ldr	r1, [r2, #8]
 8006b28:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006b2c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006b30:	4303      	orrs	r3, r0
 8006b32:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006b36:	430b      	orrs	r3, r1
 8006b38:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b3a:	68d1      	ldr	r1, [r2, #12]
 8006b3c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8006b40:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006b44:	4303      	orrs	r3, r0
 8006b46:	430b      	orrs	r3, r1
 8006b48:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006b4a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b4c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006b54:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b56:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b5c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b5e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8006b62:	e799      	b.n	8006a98 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b64:	4a1b      	ldr	r2, [pc, #108]	; (8006bd4 <HAL_I2C_Init+0x144>)
 8006b66:	4290      	cmp	r0, r2
 8006b68:	d995      	bls.n	8006a96 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8006b6a:	4e19      	ldr	r6, [pc, #100]	; (8006bd0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b6c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8006b70:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b74:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b76:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b78:	6855      	ldr	r5, [r2, #4]
 8006b7a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006b7e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b80:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b84:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b86:	6a15      	ldr	r5, [r2, #32]
 8006b88:	fbb1 f1f6 	udiv	r1, r1, r6
 8006b8c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006b90:	e7a9      	b.n	8006ae6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b92:	68a5      	ldr	r5, [r4, #8]
 8006b94:	b955      	cbnz	r5, 8006bac <HAL_I2C_Init+0x11c>
 8006b96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	b16b      	cbz	r3, 8006bc2 <HAL_I2C_Init+0x132>
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	e7b2      	b.n	8006b12 <HAL_I2C_Init+0x82>
 8006bac:	2519      	movs	r5, #25
 8006bae:	436b      	muls	r3, r5
 8006bb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bba:	b113      	cbz	r3, 8006bc2 <HAL_I2C_Init+0x132>
 8006bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bc0:	e7a7      	b.n	8006b12 <HAL_I2C_Init+0x82>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e7a5      	b.n	8006b12 <HAL_I2C_Init+0x82>
 8006bc6:	bf00      	nop
 8006bc8:	000186a0 	.word	0x000186a0
 8006bcc:	001e847f 	.word	0x001e847f
 8006bd0:	000f4240 	.word	0x000f4240
 8006bd4:	003d08ff 	.word	0x003d08ff

08006bd8 <HAL_I2C_Mem_Write>:
{
 8006bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	4699      	mov	r9, r3
 8006be0:	460f      	mov	r7, r1
 8006be2:	4690      	mov	r8, r2
 8006be4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006be6:	f7ff fb3d 	bl	8006264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006bee:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d003      	beq.n	8006bfc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8006bf4:	2002      	movs	r0, #2
}
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bfc:	9000      	str	r0, [sp, #0]
 8006bfe:	2319      	movs	r3, #25
 8006c00:	2201      	movs	r2, #1
 8006c02:	493b      	ldr	r1, [pc, #236]	; (8006cf0 <HAL_I2C_Mem_Write+0x118>)
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff fe28 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d1f2      	bne.n	8006bf4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8006c0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d0ee      	beq.n	8006bf4 <HAL_I2C_Mem_Write+0x1c>
 8006c16:	2301      	movs	r3, #1
 8006c18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c1c:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c1e:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006c24:	bf58      	it	pl
 8006c26:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c28:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8006c2a:	bf5c      	itt	pl
 8006c2c:	f042 0201 	orrpl.w	r2, r2, #1
 8006c30:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c38:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c3a:	2321      	movs	r3, #33	; 0x21
 8006c3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c40:	2340      	movs	r3, #64	; 0x40
 8006c42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c4c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8006c50:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c52:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c56:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006c58:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c5c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c5e:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <HAL_I2C_Mem_Write+0x11c>)
 8006c60:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c62:	464b      	mov	r3, r9
 8006c64:	f7ff fe50 	bl	8006908 <I2C_RequestMemoryWrite>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d02a      	beq.n	8006cc2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e7c2      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c70:	f7ff fe24 	bl	80068bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006c74:	b140      	cbz	r0, 8006c88 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c78:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7a:	bf01      	itttt	eq
 8006c7c:	6822      	ldreq	r2, [r4, #0]
 8006c7e:	6813      	ldreq	r3, [r2, #0]
 8006c80:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006c84:	6013      	streq	r3, [r2, #0]
 8006c86:	e7f1      	b.n	8006c6c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8a:	6827      	ldr	r7, [r4, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006c92:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006c94:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006c98:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006c9a:	3a01      	subs	r2, #1
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ca0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006ca2:	1e48      	subs	r0, r1, #1
 8006ca4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ca6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006ca8:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006caa:	d50a      	bpl.n	8006cc2 <HAL_I2C_Mem_Write+0xea>
 8006cac:	b148      	cbz	r0, 8006cc2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cae:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006cb0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cb2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006cb4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006cb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006cb8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006cbe:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1d0      	bne.n	8006c70 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cce:	f7ff fd6f 	bl	80067b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d1cf      	bne.n	8006c76 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	6813      	ldr	r3, [r2, #0]
 8006cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cde:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ce0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8006ce2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8006cee:	e782      	b.n	8006bf6 <HAL_I2C_Mem_Write+0x1e>
 8006cf0:	00100002 	.word	0x00100002
 8006cf4:	ffff0000 	.word	0xffff0000

08006cf8 <HAL_I2C_Mem_Read>:
{
 8006cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	b087      	sub	sp, #28
 8006d00:	4699      	mov	r9, r3
 8006d02:	460d      	mov	r5, r1
 8006d04:	4690      	mov	r8, r2
 8006d06:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006d08:	f7ff faac 	bl	8006264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006d10:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d004      	beq.n	8006d20 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8006d16:	2502      	movs	r5, #2
}
 8006d18:	4628      	mov	r0, r5
 8006d1a:	b007      	add	sp, #28
 8006d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d20:	9000      	str	r0, [sp, #0]
 8006d22:	2319      	movs	r3, #25
 8006d24:	2201      	movs	r2, #1
 8006d26:	497e      	ldr	r1, [pc, #504]	; (8006f20 <HAL_I2C_Mem_Read+0x228>)
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff fd96 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d1f1      	bne.n	8006d16 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8006d32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d0ed      	beq.n	8006d16 <HAL_I2C_Mem_Read+0x1e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d40:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d42:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006d48:	bf58      	it	pl
 8006d4a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d4c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8006d4e:	bf5c      	itt	pl
 8006d50:	f042 0201 	orrpl.w	r2, r2, #1
 8006d54:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d5e:	2322      	movs	r3, #34	; 0x22
 8006d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d70:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 8006d74:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d76:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d7a:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006d7c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d80:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d82:	4b68      	ldr	r3, [pc, #416]	; (8006f24 <HAL_I2C_Mem_Read+0x22c>)
 8006d84:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d86:	464b      	mov	r3, r9
 8006d88:	f7ff fe0c 	bl	80069a4 <I2C_RequestMemoryRead>
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	b108      	cbz	r0, 8006d94 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8006d90:	2501      	movs	r5, #1
 8006d92:	e7c1      	b.n	8006d18 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8006d94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	b992      	cbnz	r2, 8006dc0 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9a:	9002      	str	r0, [sp, #8]
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	9202      	str	r2, [sp, #8]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	9202      	str	r2, [sp, #8]
 8006da4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dac:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006dae:	2320      	movs	r3, #32
 8006db0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006dba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006dbe:	e7ab      	b.n	8006d18 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8006dc0:	2a01      	cmp	r2, #1
 8006dc2:	d12f      	bne.n	8006e24 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dcc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	9003      	str	r0, [sp, #12]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	9203      	str	r2, [sp, #12]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	9203      	str	r2, [sp, #12]
 8006dda:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006de4:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006de6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006f28 <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8006dea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0de      	beq.n	8006dae <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d877      	bhi.n	8006ee4 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d131      	bne.n	8006e5c <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff fcfd 	bl	80067fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d1c4      	bne.n	8006d90 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e10:	3301      	adds	r3, #1
 8006e12:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e16:	3b01      	subs	r3, #1
 8006e18:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006e22:	e7e2      	b.n	8006dea <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8006e24:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e26:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8006e28:	d10e      	bne.n	8006e48 <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e30:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	9004      	str	r0, [sp, #16]
 8006e36:	695a      	ldr	r2, [r3, #20]
 8006e38:	9204      	str	r2, [sp, #16]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	9204      	str	r2, [sp, #16]
 8006e3e:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e46:	e7cc      	b.n	8006de2 <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4e:	9005      	str	r0, [sp, #20]
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	9205      	str	r2, [sp, #20]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	9305      	str	r3, [sp, #20]
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	e7c4      	b.n	8006de6 <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8006e5c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e5e:	9600      	str	r6, [sp, #0]
 8006e60:	463b      	mov	r3, r7
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	4641      	mov	r1, r8
 8006e68:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8006e6a:	d118      	bne.n	8006e9e <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e6c:	f7ff fcf5 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d18d      	bne.n	8006d90 <HAL_I2C_Mem_Read+0x98>
 8006e74:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e84:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e88:	3301      	adds	r3, #1
 8006e8a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006e8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006e92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006e9a:	b662      	cpsie	i
 8006e9c:	e7b3      	b.n	8006e06 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e9e:	f7ff fcdc 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f47f af73 	bne.w	8006d90 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eaa:	6821      	ldr	r1, [r4, #0]
 8006eac:	680b      	ldr	r3, [r1, #0]
 8006eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006eb4:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb6:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eb8:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eba:	6919      	ldr	r1, [r3, #16]
 8006ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebe:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8006ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ec2:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eca:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006ed0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ed8:	463b      	mov	r3, r7
 8006eda:	f7ff fcbe 	bl	800685a <I2C_WaitOnFlagUntilTimeout>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0c9      	beq.n	8006e76 <HAL_I2C_Mem_Read+0x17e>
 8006ee2:	e755      	b.n	8006d90 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff fc87 	bl	80067fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f47f af4e 	bne.w	8006d90 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006efa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006efc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006efe:	1c53      	adds	r3, r2, #1
 8006f00:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006f02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	6959      	ldr	r1, [r3, #20]
 8006f14:	0749      	lsls	r1, r1, #29
 8006f16:	f57f af68 	bpl.w	8006dea <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	7053      	strb	r3, [r2, #1]
 8006f1e:	e776      	b.n	8006e0e <HAL_I2C_Mem_Read+0x116>
 8006f20:	00100002 	.word	0x00100002
 8006f24:	ffff0000 	.word	0xffff0000
 8006f28:	00010004 	.word	0x00010004

08006f2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f2e:	4604      	mov	r4, r0
{
 8006f30:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8006f32:	b310      	cbz	r0, 8006f7a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f34:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006f38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f3c:	b91b      	cbnz	r3, 8006f46 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f3e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f42:	f002 fba1 	bl	8009688 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f46:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f48:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f4a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8006f4c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f50:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006f54:	f001 f9ba 	bl	80082cc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	4625      	mov	r5, r4
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	1d27      	adds	r7, r4, #4
 8006f64:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006f68:	f855 0b10 	ldr.w	r0, [r5], #16
 8006f6c:	f001 f99f 	bl	80082ae <USB_CoreInit>
 8006f70:	4606      	mov	r6, r0
 8006f72:	b120      	cbz	r0, 8006f7e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f74:	2302      	movs	r3, #2
 8006f76:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8006f7a:	2501      	movs	r5, #1
 8006f7c:	e048      	b.n	8007010 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	f001 f9ad 	bl	80082e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f86:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f88:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f8c:	6861      	ldr	r1, [r4, #4]
 8006f8e:	b2c3      	uxtb	r3, r0
 8006f90:	4299      	cmp	r1, r3
 8006f92:	f100 0001 	add.w	r0, r0, #1
 8006f96:	d817      	bhi.n	8006fc8 <HAL_PCD_Init+0x9c>
 8006f98:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	f102 0201 	add.w	r2, r2, #1
 8006fa4:	d81d      	bhi.n	8006fe2 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fa8:	466e      	mov	r6, sp
 8006faa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	f001 f995 	bl	80082e4 <USB_DevInit>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	b300      	cbz	r0, 8007002 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8006fc6:	e7d8      	b.n	8006f7a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8006fc8:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8006fcc:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8006fd0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006fd4:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006fd6:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fda:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fde:	6416      	str	r6, [r2, #64]	; 0x40
 8006fe0:	e7d5      	b.n	8006f8e <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8006fe2:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8006fe6:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fea:	330a      	adds	r3, #10
 8006fec:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8006fee:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ff2:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ff6:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ffa:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ffe:	50e0      	str	r0, [r4, r3]
 8007000:	e7cc      	b.n	8006f9c <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8007002:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007006:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	f001 fc0b 	bl	8008826 <USB_DevDisconnect>

  return HAL_OK;
}
 8007010:	4628      	mov	r0, r5
 8007012:	b007      	add	sp, #28
 8007014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007016 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8007016:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 800701a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800701c:	2b01      	cmp	r3, #1
{
 800701e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007020:	d00e      	beq.n	8007040 <HAL_PCD_Start+0x2a>
 8007022:	2101      	movs	r1, #1
 8007024:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007028:	f002 fc5b 	bl	80098e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	f001 fbf8 	bl	8008822 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	f001 f942 	bl	80082bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007038:	2000      	movs	r0, #0
 800703a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800703e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007040:	2002      	movs	r0, #2
 8007042:	e7fc      	b.n	800703e <HAL_PCD_Start+0x28>

08007044 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8007044:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8007048:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800704a:	2a01      	cmp	r2, #1
{
 800704c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800704e:	d00b      	beq.n	8007068 <HAL_PCD_SetAddress+0x24>
 8007050:	2201      	movs	r2, #1
 8007052:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8007056:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	f001 fbdb 	bl	8008816 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007060:	2000      	movs	r0, #0
 8007062:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8007066:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007068:	2002      	movs	r0, #2
 800706a:	e7fc      	b.n	8007066 <HAL_PCD_SetAddress+0x22>

0800706c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4604      	mov	r4, r0
 8007070:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007074:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007078:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800707c:	bf14      	ite	ne
 800707e:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007082:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 8007086:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 800708a:	bf17      	itett	ne
 800708c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800708e:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007090:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8007092:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007096:	bf04      	itt	eq
 8007098:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 800709a:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 800709e:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80070a0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070a2:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80070a4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80070a6:	b102      	cbz	r2, 80070aa <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80070a8:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070aa:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80070ac:	bf04      	itt	eq
 80070ae:	2300      	moveq	r3, #0
 80070b0:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80070b2:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d009      	beq.n	80070ce <HAL_PCD_EP_Open+0x62>
 80070ba:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070bc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80070be:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070c2:	f001 f929 	bl	8008318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070c6:	2000      	movs	r0, #0
 80070c8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80070ce:	2002      	movs	r0, #2
 80070d0:	e7fc      	b.n	80070cc <HAL_PCD_EP_Open+0x60>

080070d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070d2:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80070da:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e2:	bf18      	it	ne
 80070e4:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 80070e8:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ea:	bf0b      	itete	eq
 80070ec:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 80070f0:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80070f2:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070f4:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070f6:	bf0a      	itet	eq
 80070f8:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80070fa:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 80070fe:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007102:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8007104:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8007108:	2b01      	cmp	r3, #1
 800710a:	d009      	beq.n	8007120 <HAL_PCD_EP_Close+0x4e>
 800710c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800710e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007110:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007114:	f001 fa5a 	bl	80085cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007118:	2000      	movs	r0, #0
 800711a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800711e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007120:	2002      	movs	r0, #2
 8007122:	e7fc      	b.n	800711e <HAL_PCD_EP_Close+0x4c>

08007124 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007124:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8007126:	2600      	movs	r6, #0
 8007128:	f001 0107 	and.w	r1, r1, #7
 800712c:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800712e:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8007130:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007134:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007138:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800713a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 800713e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8007142:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8007146:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	f001 fb82 	bl	8008854 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8007150:	4630      	mov	r0, r6
 8007152:	bd70      	pop	{r4, r5, r6, pc}

08007154 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007154:	f001 0107 	and.w	r1, r1, #7
 8007158:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800715c:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8007160:	4770      	bx	lr

08007162 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007162:	f001 0107 	and.w	r1, r1, #7
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800716a:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 800716c:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007170:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8007172:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007174:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007178:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800717c:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 800717e:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8007180:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007184:	6800      	ldr	r0, [r0, #0]
 8007186:	f001 fb65 	bl	8008854 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800718a:	4630      	mov	r0, r6
 800718c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007190 <HAL_PCD_IRQHandler>:
{
 8007190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007196:	6800      	ldr	r0, [r0, #0]
 8007198:	f001 fb47 	bl	800882a <USB_ReadInterrupts>
 800719c:	0402      	lsls	r2, r0, #16
 800719e:	d50b      	bpl.n	80071b8 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80071a0:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 80075b0 <HAL_PCD_IRQHandler+0x420>
 80071a4:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 80075b4 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80071a8:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 80075b8 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071ac:	6820      	ldr	r0, [r4, #0]
 80071ae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	f100 809e 	bmi.w	80072f4 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	f001 fb36 	bl	800882a <USB_ReadInterrupts>
 80071be:	0543      	lsls	r3, r0, #21
 80071c0:	d50f      	bpl.n	80071e2 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80071c2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80071c4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80071c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80071ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80071d6:	f002 fa90 	bl	80096fa <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80071da:	2100      	movs	r1, #0
 80071dc:	4620      	mov	r0, r4
 80071de:	f7ff ff31 	bl	8007044 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	f001 fb21 	bl	800882a <USB_ReadInterrupts>
 80071e8:	0447      	lsls	r7, r0, #17
 80071ea:	d508      	bpl.n	80071fe <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80071f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	f001 fb13 	bl	800882a <USB_ReadInterrupts>
 8007204:	0486      	lsls	r6, r0, #18
 8007206:	d508      	bpl.n	800721a <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007208:	6822      	ldr	r2, [r4, #0]
 800720a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800720e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	f001 fb05 	bl	800882a <USB_ReadInterrupts>
 8007220:	04c5      	lsls	r5, r0, #19
 8007222:	d51c      	bpl.n	800725e <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007224:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8007226:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007228:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800722c:	f023 0304 	bic.w	r3, r3, #4
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007238:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800723c:	f023 0308 	bic.w	r3, r3, #8
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8007248:	f002 fa7a 	bl	8009740 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800725e:	6820      	ldr	r0, [r4, #0]
 8007260:	f001 fae3 	bl	800882a <USB_ReadInterrupts>
 8007264:	0500      	lsls	r0, r0, #20
 8007266:	d524      	bpl.n	80072b2 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800726e:	f043 0308 	orr.w	r3, r3, #8
 8007272:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007276:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800727a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8007286:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007292:	f001 faca 	bl	800882a <USB_ReadInterrupts>
 8007296:	04c1      	lsls	r1, r0, #19
 8007298:	d508      	bpl.n	80072ac <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80072ac:	4620      	mov	r0, r4
 80072ae:	f002 fa37 	bl	8009720 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80072b2:	6820      	ldr	r0, [r4, #0]
 80072b4:	f001 fab9 	bl	800882a <USB_ReadInterrupts>
 80072b8:	0582      	lsls	r2, r0, #22
 80072ba:	d50b      	bpl.n	80072d4 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80072bc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80072be:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80072c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80072d0:	f002 fa0f 	bl	80096f2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	f001 faa8 	bl	800882a <USB_ReadInterrupts>
 80072da:	05c3      	lsls	r3, r0, #23
 80072dc:	d508      	bpl.n	80072f0 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e8:	041b      	lsls	r3, r3, #16
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80072f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80072f4:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80072f8:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80072fa:	f011 060f 	ands.w	r6, r1, #15
 80072fe:	f040 80b1 	bne.w	8007464 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007302:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007306:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007308:	d12a      	bne.n	8007360 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800730a:	ea09 0303 	and.w	r3, r9, r3
 800730e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007312:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007314:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007318:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007320:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8007324:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8007328:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800732a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800732e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007330:	4413      	add	r3, r2
 8007332:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007334:	4620      	mov	r0, r4
 8007336:	f002 f9d5 	bl	80096e4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800733a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800733e:	2b00      	cmp	r3, #0
 8007340:	f43f af34 	beq.w	80071ac <HAL_PCD_IRQHandler+0x1c>
 8007344:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007346:	2a00      	cmp	r2, #0
 8007348:	f47f af30 	bne.w	80071ac <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800734c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007350:	6821      	ldr	r1, [r4, #0]
 8007352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007356:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800735a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800735e:	e725      	b.n	80071ac <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007360:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007362:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8007366:	d020      	beq.n	80073aa <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007368:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800736c:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007370:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007378:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800737c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007380:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8007384:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007388:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800738c:	f001 fb36 	bl	80089fc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007390:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007392:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007394:	8813      	ldrh	r3, [r2, #0]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	051b      	lsls	r3, r3, #20
 800739c:	0d1b      	lsrs	r3, r3, #20
 800739e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80073a4:	f002 f990 	bl	80096c8 <HAL_PCD_SetupStageCallback>
 80073a8:	e700      	b.n	80071ac <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80073aa:	041f      	lsls	r7, r3, #16
 80073ac:	f57f aefe 	bpl.w	80071ac <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80073b0:	8803      	ldrh	r3, [r0, #0]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	051b      	lsls	r3, r3, #20
 80073b8:	0d1b      	lsrs	r3, r3, #20
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80073c4:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80073c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80073d0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80073d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073d8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80073dc:	b18b      	cbz	r3, 8007402 <HAL_PCD_IRQHandler+0x272>
 80073de:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80073e2:	b171      	cbz	r1, 8007402 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073e4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80073e8:	f001 fb08 	bl	80089fc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80073ec:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80073f0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073f4:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80073f6:	4413      	add	r3, r2
 80073f8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073fc:	4620      	mov	r0, r4
 80073fe:	f002 f969 	bl	80096d4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007402:	6821      	ldr	r1, [r4, #0]
 8007404:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8007408:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800740c:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8007410:	b29b      	uxth	r3, r3
 8007412:	b9bd      	cbnz	r5, 8007444 <HAL_PCD_IRQHandler+0x2b4>
 8007414:	5ac2      	ldrh	r2, [r0, r3]
 8007416:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800741a:	0412      	lsls	r2, r2, #16
 800741c:	0c12      	lsrs	r2, r2, #16
 800741e:	52c2      	strh	r2, [r0, r3]
 8007420:	5ac2      	ldrh	r2, [r0, r3]
 8007422:	ea4a 0202 	orr.w	r2, sl, r2
 8007426:	b292      	uxth	r2, r2
 8007428:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800742a:	880b      	ldrh	r3, [r1, #0]
 800742c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007440:	800b      	strh	r3, [r1, #0]
 8007442:	e6b3      	b.n	80071ac <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007444:	2d3e      	cmp	r5, #62	; 0x3e
 8007446:	d805      	bhi.n	8007454 <HAL_PCD_IRQHandler+0x2c4>
 8007448:	086a      	lsrs	r2, r5, #1
 800744a:	07ee      	lsls	r6, r5, #31
 800744c:	bf48      	it	mi
 800744e:	3201      	addmi	r2, #1
 8007450:	0292      	lsls	r2, r2, #10
 8007452:	e7e8      	b.n	8007426 <HAL_PCD_IRQHandler+0x296>
 8007454:	096a      	lsrs	r2, r5, #5
 8007456:	06ed      	lsls	r5, r5, #27
 8007458:	bf08      	it	eq
 800745a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800745e:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8007462:	e7e0      	b.n	8007426 <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007464:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8007468:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800746c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8007470:	d03c      	beq.n	80074ec <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007472:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8007476:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	051b      	lsls	r3, r3, #20
 800747e:	0d1b      	lsrs	r3, r3, #20
 8007480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007484:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8007488:	19e1      	adds	r1, r4, r7
 800748a:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 800748e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8007492:	2b00      	cmp	r3, #0
 8007494:	d150      	bne.n	8007538 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007496:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800749a:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 800749e:	3306      	adds	r3, #6
 80074a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80074a4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80074a8:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80074ac:	b135      	cbz	r5, 80074bc <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80074ae:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80074b2:	462b      	mov	r3, r5
 80074b4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80074b8:	f001 faa0 	bl	80089fc <USB_ReadPMA>
 80074bc:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 80074be:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 80074c2:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 80074c6:	442b      	add	r3, r5
 80074c8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80074cc:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 80074d0:	442a      	add	r2, r5
 80074d2:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80074d6:	b11b      	cbz	r3, 80074e0 <HAL_PCD_IRQHandler+0x350>
 80074d8:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80074dc:	4285      	cmp	r5, r0
 80074de:	d25d      	bcs.n	800759c <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80074e0:	4427      	add	r7, r4
 80074e2:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80074e6:	4620      	mov	r0, r4
 80074e8:	f002 f8f4 	bl	80096d4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80074ec:	f018 0f80 	tst.w	r8, #128	; 0x80
 80074f0:	f43f ae5c 	beq.w	80071ac <HAL_PCD_IRQHandler+0x1c>
 80074f4:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80074f6:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80074f8:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80074fc:	ea09 0202 	and.w	r2, r9, r2
 8007500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007504:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007508:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800750c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8007510:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8007514:	3202      	adds	r2, #2
 8007516:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800751a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800751e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8007522:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007524:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007528:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800752a:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 800752c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800752e:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8007530:	bbd3      	cbnz	r3, 80075a8 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007532:	f002 f8d7 	bl	80096e4 <HAL_PCD_DataInStageCallback>
 8007536:	e639      	b.n	80071ac <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007538:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 800753c:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007546:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800754a:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800754c:	d01b      	beq.n	8007586 <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800754e:	3302      	adds	r3, #2
 8007550:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007554:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8007558:	b135      	cbz	r5, 8007568 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800755a:	462b      	mov	r3, r5
 800755c:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007560:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8007564:	f001 fa4a 	bl	80089fc <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007568:	19e3      	adds	r3, r4, r7
 800756a:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007574:	ea0b 0303 	and.w	r3, fp, r3
 8007578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007580:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007584:	e79a      	b.n	80074bc <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007586:	3306      	adds	r3, #6
 8007588:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800758c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8007590:	2d00      	cmp	r5, #0
 8007592:	d0e9      	beq.n	8007568 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007594:	462b      	mov	r3, r5
 8007596:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800759a:	e7e1      	b.n	8007560 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800759c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fdbf 	bl	8007124 <HAL_PCD_EP_Receive>
 80075a6:	e7a1      	b.n	80074ec <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80075a8:	f7ff fddb 	bl	8007162 <HAL_PCD_EP_Transmit>
 80075ac:	e5fe      	b.n	80071ac <HAL_PCD_IRQHandler+0x1c>
 80075ae:	bf00      	nop
 80075b0:	ffff8f0f 	.word	0xffff8f0f
 80075b4:	ffff8000 	.word	0xffff8000
 80075b8:	ffff8f8f 	.word	0xffff8f8f

080075bc <HAL_PCD_EP_SetStall>:
{
 80075bc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075be:	6843      	ldr	r3, [r0, #4]
 80075c0:	f001 0507 	and.w	r5, r1, #7
 80075c4:	429d      	cmp	r5, r3
{
 80075c6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075c8:	d828      	bhi.n	800761c <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80075ca:	060b      	lsls	r3, r1, #24
 80075cc:	d51d      	bpl.n	800760a <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80075ce:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075d0:	016b      	lsls	r3, r5, #5
 80075d2:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 80075d6:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075d8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80075da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 80075de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80075e0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80075e2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80075e4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d019      	beq.n	8007620 <HAL_PCD_EP_SetStall+0x64>
 80075ec:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	f001 f8b1 	bl	8008758 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075f6:	b925      	cbnz	r5, 8007602 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80075f8:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	f001 f917 	bl	8008830 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8007602:	2000      	movs	r0, #0
 8007604:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8007608:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800760a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800760c:	014b      	lsls	r3, r1, #5
 800760e:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8007612:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8007614:	4401      	add	r1, r0
    ep->is_in = 0U;
 8007616:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800761a:	e7e0      	b.n	80075de <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 800761c:	2001      	movs	r0, #1
 800761e:	e7f3      	b.n	8007608 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8007620:	2002      	movs	r0, #2
 8007622:	e7f1      	b.n	8007608 <HAL_PCD_EP_SetStall+0x4c>

08007624 <HAL_PCD_EP_ClrStall>:
{
 8007624:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007626:	6843      	ldr	r3, [r0, #4]
 8007628:	f001 020f 	and.w	r2, r1, #15
 800762c:	429a      	cmp	r2, r3
{
 800762e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007630:	d827      	bhi.n	8007682 <HAL_PCD_EP_ClrStall+0x5e>
 8007632:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8007636:	f011 0f80 	tst.w	r1, #128	; 0x80
 800763a:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800763e:	bf14      	ite	ne
 8007640:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007644:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8007648:	4418      	add	r0, r3
  ep->is_stall = 0U;
 800764a:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800764e:	bf15      	itete	ne
 8007650:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8007652:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007654:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007656:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8007658:	bf14      	ite	ne
 800765a:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 800765e:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8007662:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007664:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007666:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800766a:	2b01      	cmp	r3, #1
 800766c:	d00b      	beq.n	8007686 <HAL_PCD_EP_ClrStall+0x62>
 800766e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007670:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007672:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007676:	f001 f88b 	bl	8008790 <USB_EPClearStall>
  return HAL_OK;
 800767a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800767c:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8007680:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007682:	2001      	movs	r0, #1
 8007684:	e7fc      	b.n	8007680 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 8007686:	2002      	movs	r0, #2
 8007688:	e7fa      	b.n	8007680 <HAL_PCD_EP_ClrStall+0x5c>

0800768a <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800768a:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800768e:	bf1b      	ittet	ne
 8007690:	f001 0107 	andne.w	r1, r1, #7
 8007694:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007698:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800769c:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800769e:	bf08      	it	eq
 80076a0:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 80076a4:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80076a6:	b91a      	cbnz	r2, 80076b0 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80076a8:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80076aa:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80076ac:	2000      	movs	r0, #0
 80076ae:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80076b0:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80076b2:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80076b4:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80076b6:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80076b8:	8143      	strh	r3, [r0, #10]
 80076ba:	e7f7      	b.n	80076ac <HAL_PCDEx_PMAConfig+0x22>

080076bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076c0:	4605      	mov	r5, r0
 80076c2:	b908      	cbnz	r0, 80076c8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80076c4:	2001      	movs	r0, #1
 80076c6:	e03c      	b.n	8007742 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076c8:	6803      	ldr	r3, [r0, #0]
 80076ca:	07db      	lsls	r3, r3, #31
 80076cc:	d410      	bmi.n	80076f0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ce:	682b      	ldr	r3, [r5, #0]
 80076d0:	079f      	lsls	r7, r3, #30
 80076d2:	d45d      	bmi.n	8007790 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	0719      	lsls	r1, r3, #28
 80076d8:	f100 8094 	bmi.w	8007804 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	075a      	lsls	r2, r3, #29
 80076e0:	f100 80be 	bmi.w	8007860 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076e4:	69e8      	ldr	r0, [r5, #28]
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f040 812c 	bne.w	8007944 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80076ec:	2000      	movs	r0, #0
 80076ee:	e028      	b.n	8007742 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076f0:	4c8f      	ldr	r4, [pc, #572]	; (8007930 <HAL_RCC_OscConfig+0x274>)
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	f003 030c 	and.w	r3, r3, #12
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d007      	beq.n	800770c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b08      	cmp	r3, #8
 8007704:	d109      	bne.n	800771a <HAL_RCC_OscConfig+0x5e>
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	03de      	lsls	r6, r3, #15
 800770a:	d506      	bpl.n	800771a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	039c      	lsls	r4, r3, #14
 8007710:	d5dd      	bpl.n	80076ce <HAL_RCC_OscConfig+0x12>
 8007712:	686b      	ldr	r3, [r5, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1da      	bne.n	80076ce <HAL_RCC_OscConfig+0x12>
 8007718:	e7d4      	b.n	80076c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800771a:	686b      	ldr	r3, [r5, #4]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007720:	d112      	bne.n	8007748 <HAL_RCC_OscConfig+0x8c>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007728:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800772a:	f7fe fd9b 	bl	8006264 <HAL_GetTick>
 800772e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	0398      	lsls	r0, r3, #14
 8007734:	d4cb      	bmi.n	80076ce <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007736:	f7fe fd95 	bl	8006264 <HAL_GetTick>
 800773a:	1b80      	subs	r0, r0, r6
 800773c:	2864      	cmp	r0, #100	; 0x64
 800773e:	d9f7      	bls.n	8007730 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8007740:	2003      	movs	r0, #3
}
 8007742:	b002      	add	sp, #8
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007748:	b99b      	cbnz	r3, 8007772 <HAL_RCC_OscConfig+0xb6>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007758:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800775a:	f7fe fd83 	bl	8006264 <HAL_GetTick>
 800775e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	0399      	lsls	r1, r3, #14
 8007764:	d5b3      	bpl.n	80076ce <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007766:	f7fe fd7d 	bl	8006264 <HAL_GetTick>
 800776a:	1b80      	subs	r0, r0, r6
 800776c:	2864      	cmp	r0, #100	; 0x64
 800776e:	d9f7      	bls.n	8007760 <HAL_RCC_OscConfig+0xa4>
 8007770:	e7e6      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	d103      	bne.n	8007782 <HAL_RCC_OscConfig+0xc6>
 800777a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	e7cf      	b.n	8007722 <HAL_RCC_OscConfig+0x66>
 8007782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800778e:	e7cb      	b.n	8007728 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007790:	4c67      	ldr	r4, [pc, #412]	; (8007930 <HAL_RCC_OscConfig+0x274>)
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	f013 0f0c 	tst.w	r3, #12
 8007798:	d007      	beq.n	80077aa <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	f003 030c 	and.w	r3, r3, #12
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d110      	bne.n	80077c6 <HAL_RCC_OscConfig+0x10a>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	03da      	lsls	r2, r3, #15
 80077a8:	d40d      	bmi.n	80077c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	079b      	lsls	r3, r3, #30
 80077ae:	d502      	bpl.n	80077b6 <HAL_RCC_OscConfig+0xfa>
 80077b0:	692b      	ldr	r3, [r5, #16]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d186      	bne.n	80076c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	696a      	ldr	r2, [r5, #20]
 80077ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80077be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	e786      	b.n	80076d4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077c6:	692a      	ldr	r2, [r5, #16]
 80077c8:	4b5a      	ldr	r3, [pc, #360]	; (8007934 <HAL_RCC_OscConfig+0x278>)
 80077ca:	b16a      	cbz	r2, 80077e8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80077cc:	2201      	movs	r2, #1
 80077ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80077d0:	f7fe fd48 	bl	8006264 <HAL_GetTick>
 80077d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	079f      	lsls	r7, r3, #30
 80077da:	d4ec      	bmi.n	80077b6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077dc:	f7fe fd42 	bl	8006264 <HAL_GetTick>
 80077e0:	1b80      	subs	r0, r0, r6
 80077e2:	2802      	cmp	r0, #2
 80077e4:	d9f7      	bls.n	80077d6 <HAL_RCC_OscConfig+0x11a>
 80077e6:	e7ab      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80077e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80077ea:	f7fe fd3b 	bl	8006264 <HAL_GetTick>
 80077ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	0798      	lsls	r0, r3, #30
 80077f4:	f57f af6e 	bpl.w	80076d4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f8:	f7fe fd34 	bl	8006264 <HAL_GetTick>
 80077fc:	1b80      	subs	r0, r0, r6
 80077fe:	2802      	cmp	r0, #2
 8007800:	d9f6      	bls.n	80077f0 <HAL_RCC_OscConfig+0x134>
 8007802:	e79d      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007804:	69aa      	ldr	r2, [r5, #24]
 8007806:	4c4a      	ldr	r4, [pc, #296]	; (8007930 <HAL_RCC_OscConfig+0x274>)
 8007808:	4b4b      	ldr	r3, [pc, #300]	; (8007938 <HAL_RCC_OscConfig+0x27c>)
 800780a:	b1da      	cbz	r2, 8007844 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007810:	f7fe fd28 	bl	8006264 <HAL_GetTick>
 8007814:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007818:	079b      	lsls	r3, r3, #30
 800781a:	d50d      	bpl.n	8007838 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800781c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007820:	4b46      	ldr	r3, [pc, #280]	; (800793c <HAL_RCC_OscConfig+0x280>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	fbb3 f3f2 	udiv	r3, r3, r2
 8007828:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800782a:	bf00      	nop
  }
  while (Delay --);
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	9201      	str	r2, [sp, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f9      	bne.n	800782a <HAL_RCC_OscConfig+0x16e>
 8007836:	e751      	b.n	80076dc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007838:	f7fe fd14 	bl	8006264 <HAL_GetTick>
 800783c:	1b80      	subs	r0, r0, r6
 800783e:	2802      	cmp	r0, #2
 8007840:	d9e9      	bls.n	8007816 <HAL_RCC_OscConfig+0x15a>
 8007842:	e77d      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8007844:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007846:	f7fe fd0d 	bl	8006264 <HAL_GetTick>
 800784a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784e:	079f      	lsls	r7, r3, #30
 8007850:	f57f af44 	bpl.w	80076dc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007854:	f7fe fd06 	bl	8006264 <HAL_GetTick>
 8007858:	1b80      	subs	r0, r0, r6
 800785a:	2802      	cmp	r0, #2
 800785c:	d9f6      	bls.n	800784c <HAL_RCC_OscConfig+0x190>
 800785e:	e76f      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007860:	4c33      	ldr	r4, [pc, #204]	; (8007930 <HAL_RCC_OscConfig+0x274>)
 8007862:	69e3      	ldr	r3, [r4, #28]
 8007864:	00d8      	lsls	r0, r3, #3
 8007866:	d424      	bmi.n	80078b2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8007868:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800786a:	69e3      	ldr	r3, [r4, #28]
 800786c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007870:	61e3      	str	r3, [r4, #28]
 8007872:	69e3      	ldr	r3, [r4, #28]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787c:	4e30      	ldr	r6, [pc, #192]	; (8007940 <HAL_RCC_OscConfig+0x284>)
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	05d9      	lsls	r1, r3, #23
 8007882:	d518      	bpl.n	80078b6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007884:	68eb      	ldr	r3, [r5, #12]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d126      	bne.n	80078d8 <HAL_RCC_OscConfig+0x21c>
 800788a:	6a23      	ldr	r3, [r4, #32]
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007892:	f7fe fce7 	bl	8006264 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007896:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800789a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789c:	6a23      	ldr	r3, [r4, #32]
 800789e:	079b      	lsls	r3, r3, #30
 80078a0:	d53f      	bpl.n	8007922 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80078a2:	2f00      	cmp	r7, #0
 80078a4:	f43f af1e 	beq.w	80076e4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80078a8:	69e3      	ldr	r3, [r4, #28]
 80078aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ae:	61e3      	str	r3, [r4, #28]
 80078b0:	e718      	b.n	80076e4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80078b2:	2700      	movs	r7, #0
 80078b4:	e7e2      	b.n	800787c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078b6:	6833      	ldr	r3, [r6, #0]
 80078b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80078be:	f7fe fcd1 	bl	8006264 <HAL_GetTick>
 80078c2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	05da      	lsls	r2, r3, #23
 80078c8:	d4dc      	bmi.n	8007884 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ca:	f7fe fccb 	bl	8006264 <HAL_GetTick>
 80078ce:	eba0 0008 	sub.w	r0, r0, r8
 80078d2:	2864      	cmp	r0, #100	; 0x64
 80078d4:	d9f6      	bls.n	80078c4 <HAL_RCC_OscConfig+0x208>
 80078d6:	e733      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078d8:	b9ab      	cbnz	r3, 8007906 <HAL_RCC_OscConfig+0x24a>
 80078da:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	6223      	str	r3, [r4, #32]
 80078e6:	6a23      	ldr	r3, [r4, #32]
 80078e8:	f023 0304 	bic.w	r3, r3, #4
 80078ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80078ee:	f7fe fcb9 	bl	8006264 <HAL_GetTick>
 80078f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	6a23      	ldr	r3, [r4, #32]
 80078f6:	0798      	lsls	r0, r3, #30
 80078f8:	d5d3      	bpl.n	80078a2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fe fcb3 	bl	8006264 <HAL_GetTick>
 80078fe:	1b80      	subs	r0, r0, r6
 8007900:	4540      	cmp	r0, r8
 8007902:	d9f7      	bls.n	80078f4 <HAL_RCC_OscConfig+0x238>
 8007904:	e71c      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007906:	2b05      	cmp	r3, #5
 8007908:	6a23      	ldr	r3, [r4, #32]
 800790a:	d103      	bne.n	8007914 <HAL_RCC_OscConfig+0x258>
 800790c:	f043 0304 	orr.w	r3, r3, #4
 8007910:	6223      	str	r3, [r4, #32]
 8007912:	e7ba      	b.n	800788a <HAL_RCC_OscConfig+0x1ce>
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	6223      	str	r3, [r4, #32]
 800791a:	6a23      	ldr	r3, [r4, #32]
 800791c:	f023 0304 	bic.w	r3, r3, #4
 8007920:	e7b6      	b.n	8007890 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fe fc9f 	bl	8006264 <HAL_GetTick>
 8007926:	eba0 0008 	sub.w	r0, r0, r8
 800792a:	42b0      	cmp	r0, r6
 800792c:	d9b6      	bls.n	800789c <HAL_RCC_OscConfig+0x1e0>
 800792e:	e707      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
 8007930:	40021000 	.word	0x40021000
 8007934:	42420000 	.word	0x42420000
 8007938:	42420480 	.word	0x42420480
 800793c:	20000038 	.word	0x20000038
 8007940:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007944:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <HAL_RCC_OscConfig+0x334>)
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	461c      	mov	r4, r3
 800794a:	f002 020c 	and.w	r2, r2, #12
 800794e:	2a08      	cmp	r2, #8
 8007950:	d03d      	beq.n	80079ce <HAL_RCC_OscConfig+0x312>
 8007952:	2300      	movs	r3, #0
 8007954:	4e27      	ldr	r6, [pc, #156]	; (80079f4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007956:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007958:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800795a:	d12b      	bne.n	80079b4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800795c:	f7fe fc82 	bl	8006264 <HAL_GetTick>
 8007960:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	0199      	lsls	r1, r3, #6
 8007966:	d41f      	bmi.n	80079a8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007968:	6a2b      	ldr	r3, [r5, #32]
 800796a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796e:	d105      	bne.n	800797c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007970:	6862      	ldr	r2, [r4, #4]
 8007972:	68a9      	ldr	r1, [r5, #8]
 8007974:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007978:	430a      	orrs	r2, r1
 800797a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800797c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800797e:	6862      	ldr	r2, [r4, #4]
 8007980:	430b      	orrs	r3, r1
 8007982:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007986:	4313      	orrs	r3, r2
 8007988:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800798a:	2301      	movs	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800798e:	f7fe fc69 	bl	8006264 <HAL_GetTick>
 8007992:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	019a      	lsls	r2, r3, #6
 8007998:	f53f aea8 	bmi.w	80076ec <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800799c:	f7fe fc62 	bl	8006264 <HAL_GetTick>
 80079a0:	1b40      	subs	r0, r0, r5
 80079a2:	2802      	cmp	r0, #2
 80079a4:	d9f6      	bls.n	8007994 <HAL_RCC_OscConfig+0x2d8>
 80079a6:	e6cb      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a8:	f7fe fc5c 	bl	8006264 <HAL_GetTick>
 80079ac:	1bc0      	subs	r0, r0, r7
 80079ae:	2802      	cmp	r0, #2
 80079b0:	d9d7      	bls.n	8007962 <HAL_RCC_OscConfig+0x2a6>
 80079b2:	e6c5      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80079b4:	f7fe fc56 	bl	8006264 <HAL_GetTick>
 80079b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	019b      	lsls	r3, r3, #6
 80079be:	f57f ae95 	bpl.w	80076ec <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c2:	f7fe fc4f 	bl	8006264 <HAL_GetTick>
 80079c6:	1b40      	subs	r0, r0, r5
 80079c8:	2802      	cmp	r0, #2
 80079ca:	d9f6      	bls.n	80079ba <HAL_RCC_OscConfig+0x2fe>
 80079cc:	e6b8      	b.n	8007740 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079ce:	2801      	cmp	r0, #1
 80079d0:	f43f aeb7 	beq.w	8007742 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80079d4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d6:	6a2b      	ldr	r3, [r5, #32]
 80079d8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80079dc:	429a      	cmp	r2, r3
 80079de:	f47f ae71 	bne.w	80076c4 <HAL_RCC_OscConfig+0x8>
 80079e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80079e4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80079e8:	1ac0      	subs	r0, r0, r3
 80079ea:	bf18      	it	ne
 80079ec:	2001      	movne	r0, #1
 80079ee:	e6a8      	b.n	8007742 <HAL_RCC_OscConfig+0x86>
 80079f0:	40021000 	.word	0x40021000
 80079f4:	42420060 	.word	0x42420060

080079f8 <HAL_RCC_GetSysClockFreq>:
{
 80079f8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079fa:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80079fc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079fe:	ac02      	add	r4, sp, #8
 8007a00:	f103 0510 	add.w	r5, r3, #16
 8007a04:	4622      	mov	r2, r4
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	6859      	ldr	r1, [r3, #4]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	c203      	stmia	r2!, {r0, r1}
 8007a0e:	42ab      	cmp	r3, r5
 8007a10:	4614      	mov	r4, r2
 8007a12:	d1f7      	bne.n	8007a04 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007a14:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8007a18:	4911      	ldr	r1, [pc, #68]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007a1a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8007a1e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007a20:	f003 020c 	and.w	r2, r3, #12
 8007a24:	2a08      	cmp	r2, #8
 8007a26:	d117      	bne.n	8007a58 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a28:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007a2c:	a806      	add	r0, sp, #24
 8007a2e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a30:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a32:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a36:	d50c      	bpl.n	8007a52 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a38:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a3a:	480a      	ldr	r0, [pc, #40]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a3c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a40:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a42:	aa06      	add	r2, sp, #24
 8007a44:	4413      	add	r3, r2
 8007a46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a4a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007a4e:	b007      	add	sp, #28
 8007a50:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a52:	4805      	ldr	r0, [pc, #20]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x70>)
 8007a54:	4350      	muls	r0, r2
 8007a56:	e7fa      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007a58:	4802      	ldr	r0, [pc, #8]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007a5a:	e7f8      	b.n	8007a4e <HAL_RCC_GetSysClockFreq+0x56>
 8007a5c:	0800c80d 	.word	0x0800c80d
 8007a60:	40021000 	.word	0x40021000
 8007a64:	007a1200 	.word	0x007a1200
 8007a68:	003d0900 	.word	0x003d0900

08007a6c <HAL_RCC_ClockConfig>:
{
 8007a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a70:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007a72:	4604      	mov	r4, r0
 8007a74:	b910      	cbnz	r0, 8007a7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007a76:	2001      	movs	r0, #1
}
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a7c:	4a44      	ldr	r2, [pc, #272]	; (8007b90 <HAL_RCC_ClockConfig+0x124>)
 8007a7e:	6813      	ldr	r3, [r2, #0]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d328      	bcc.n	8007ada <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a88:	6821      	ldr	r1, [r4, #0]
 8007a8a:	078e      	lsls	r6, r1, #30
 8007a8c:	d430      	bmi.n	8007af0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a8e:	07ca      	lsls	r2, r1, #31
 8007a90:	d443      	bmi.n	8007b1a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a92:	4a3f      	ldr	r2, [pc, #252]	; (8007b90 <HAL_RCC_ClockConfig+0x124>)
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	42ab      	cmp	r3, r5
 8007a9c:	d865      	bhi.n	8007b6a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	4d3c      	ldr	r5, [pc, #240]	; (8007b94 <HAL_RCC_ClockConfig+0x128>)
 8007aa2:	f012 0f04 	tst.w	r2, #4
 8007aa6:	d16c      	bne.n	8007b82 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa8:	0713      	lsls	r3, r2, #28
 8007aaa:	d506      	bpl.n	8007aba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007aac:	686b      	ldr	r3, [r5, #4]
 8007aae:	6922      	ldr	r2, [r4, #16]
 8007ab0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007ab4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007ab8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007aba:	f7ff ff9d 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
 8007abe:	686b      	ldr	r3, [r5, #4]
 8007ac0:	4a35      	ldr	r2, [pc, #212]	; (8007b98 <HAL_RCC_ClockConfig+0x12c>)
 8007ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007ac6:	5cd3      	ldrb	r3, [r2, r3]
 8007ac8:	40d8      	lsrs	r0, r3
 8007aca:	4b34      	ldr	r3, [pc, #208]	; (8007b9c <HAL_RCC_ClockConfig+0x130>)
 8007acc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8007ace:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <HAL_RCC_ClockConfig+0x134>)
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f7fa fcef 	bl	80024b4 <HAL_InitTick>
  return HAL_OK;
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7ce      	b.n	8007a78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae4:	6813      	ldr	r3, [r2, #0]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	428b      	cmp	r3, r1
 8007aec:	d1c3      	bne.n	8007a76 <HAL_RCC_ClockConfig+0xa>
 8007aee:	e7cb      	b.n	8007a88 <HAL_RCC_ClockConfig+0x1c>
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007af6:	bf1e      	ittt	ne
 8007af8:	685a      	ldrne	r2, [r3, #4]
 8007afa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8007afe:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b00:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b02:	bf42      	ittt	mi
 8007b04:	685a      	ldrmi	r2, [r3, #4]
 8007b06:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8007b0a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68a0      	ldr	r0, [r4, #8]
 8007b10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b14:	4302      	orrs	r2, r0
 8007b16:	605a      	str	r2, [r3, #4]
 8007b18:	e7b9      	b.n	8007a8e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b1a:	6862      	ldr	r2, [r4, #4]
 8007b1c:	4e1d      	ldr	r6, [pc, #116]	; (8007b94 <HAL_RCC_ClockConfig+0x128>)
 8007b1e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b20:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b22:	d11a      	bne.n	8007b5a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b28:	d0a5      	beq.n	8007a76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b2a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b30:	f023 0303 	bic.w	r3, r3, #3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007b38:	f7fe fb94 	bl	8006264 <HAL_GetTick>
 8007b3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3e:	6873      	ldr	r3, [r6, #4]
 8007b40:	6862      	ldr	r2, [r4, #4]
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007b4a:	d0a2      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b4c:	f7fe fb8a 	bl	8006264 <HAL_GetTick>
 8007b50:	1bc0      	subs	r0, r0, r7
 8007b52:	4540      	cmp	r0, r8
 8007b54:	d9f3      	bls.n	8007b3e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007b56:	2003      	movs	r0, #3
 8007b58:	e78e      	b.n	8007a78 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b5a:	2a02      	cmp	r2, #2
 8007b5c:	d102      	bne.n	8007b64 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007b62:	e7e1      	b.n	8007b28 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b64:	f013 0f02 	tst.w	r3, #2
 8007b68:	e7de      	b.n	8007b28 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
 8007b70:	432b      	orrs	r3, r5
 8007b72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b74:	6813      	ldr	r3, [r2, #0]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	42ab      	cmp	r3, r5
 8007b7c:	f47f af7b 	bne.w	8007a76 <HAL_RCC_ClockConfig+0xa>
 8007b80:	e78d      	b.n	8007a9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b82:	686b      	ldr	r3, [r5, #4]
 8007b84:	68e1      	ldr	r1, [r4, #12]
 8007b86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	606b      	str	r3, [r5, #4]
 8007b8e:	e78b      	b.n	8007aa8 <HAL_RCC_ClockConfig+0x3c>
 8007b90:	40022000 	.word	0x40022000
 8007b94:	40021000 	.word	0x40021000
 8007b98:	0800d48a 	.word	0x0800d48a
 8007b9c:	20000038 	.word	0x20000038
 8007ba0:	20000040 	.word	0x20000040

08007ba4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ba4:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007ba6:	4a05      	ldr	r2, [pc, #20]	; (8007bbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007bae:	5cd3      	ldrb	r3, [r2, r3]
 8007bb0:	4a03      	ldr	r2, [pc, #12]	; (8007bc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007bb2:	6810      	ldr	r0, [r2, #0]
}
 8007bb4:	40d8      	lsrs	r0, r3
 8007bb6:	4770      	bx	lr
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	0800d49a 	.word	0x0800d49a
 8007bc0:	20000038 	.word	0x20000038

08007bc4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007bc6:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007bce:	5cd3      	ldrb	r3, [r2, r3]
 8007bd0:	4a03      	ldr	r2, [pc, #12]	; (8007be0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007bd2:	6810      	ldr	r0, [r2, #0]
}
 8007bd4:	40d8      	lsrs	r0, r3
 8007bd6:	4770      	bx	lr
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	0800d49a 	.word	0x0800d49a
 8007be0:	20000038 	.word	0x20000038

08007be4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007be4:	230f      	movs	r3, #15
 8007be6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <HAL_RCC_GetClockConfig+0x34>)
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	f002 0203 	and.w	r2, r2, #3
 8007bf0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007bf8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007c00:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <HAL_RCC_GetClockConfig+0x38>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	600b      	str	r3, [r1, #0]
}
 8007c16:	4770      	bx	lr
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	40022000 	.word	0x40022000

08007c20 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c20:	6803      	ldr	r3, [r0, #0]
{
 8007c22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c26:	07d9      	lsls	r1, r3, #31
{
 8007c28:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007c2a:	d520      	bpl.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c2c:	4c35      	ldr	r4, [pc, #212]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c2e:	69e3      	ldr	r3, [r4, #28]
 8007c30:	00da      	lsls	r2, r3, #3
 8007c32:	d432      	bmi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8007c34:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c36:	69e3      	ldr	r3, [r4, #28]
 8007c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	61e3      	str	r3, [r4, #28]
 8007c3e:	69e3      	ldr	r3, [r4, #28]
 8007c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c48:	4e2f      	ldr	r6, [pc, #188]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007c4a:	6833      	ldr	r3, [r6, #0]
 8007c4c:	05db      	lsls	r3, r3, #23
 8007c4e:	d526      	bpl.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c50:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c52:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c56:	d136      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c58:	6a23      	ldr	r3, [r4, #32]
 8007c5a:	686a      	ldr	r2, [r5, #4]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c60:	4313      	orrs	r3, r2
 8007c62:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c64:	b11f      	cbz	r7, 8007c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c66:	69e3      	ldr	r3, [r4, #28]
 8007c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c6c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c6e:	6828      	ldr	r0, [r5, #0]
 8007c70:	0783      	lsls	r3, r0, #30
 8007c72:	d506      	bpl.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c74:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c76:	68a9      	ldr	r1, [r5, #8]
 8007c78:	6853      	ldr	r3, [r2, #4]
 8007c7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c82:	f010 0010 	ands.w	r0, r0, #16
 8007c86:	d01b      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c88:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007c8a:	68e9      	ldr	r1, [r5, #12]
 8007c8c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c8e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6053      	str	r3, [r2, #4]
 8007c98:	e012      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8007c9a:	2700      	movs	r7, #0
 8007c9c:	e7d4      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c9e:	6833      	ldr	r3, [r6, #0]
 8007ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007ca6:	f7fe fadd 	bl	8006264 <HAL_GetTick>
 8007caa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cac:	6833      	ldr	r3, [r6, #0]
 8007cae:	05d8      	lsls	r0, r3, #23
 8007cb0:	d4ce      	bmi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb2:	f7fe fad7 	bl	8006264 <HAL_GetTick>
 8007cb6:	eba0 0008 	sub.w	r0, r0, r8
 8007cba:	2864      	cmp	r0, #100	; 0x64
 8007cbc:	d9f6      	bls.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8007cbe:	2003      	movs	r0, #3
}
 8007cc0:	b002      	add	sp, #8
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cc6:	686a      	ldr	r2, [r5, #4]
 8007cc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d0c3      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	4a0e      	ldr	r2, [pc, #56]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cd4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cd6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cd8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cde:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8007ce0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007ce2:	07d9      	lsls	r1, r3, #31
 8007ce4:	d5b8      	bpl.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8007ce6:	f7fe fabd 	bl	8006264 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cea:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007cee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf0:	6a23      	ldr	r3, [r4, #32]
 8007cf2:	079a      	lsls	r2, r3, #30
 8007cf4:	d4b0      	bmi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf6:	f7fe fab5 	bl	8006264 <HAL_GetTick>
 8007cfa:	1b80      	subs	r0, r0, r6
 8007cfc:	4540      	cmp	r0, r8
 8007cfe:	d9f7      	bls.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8007d00:	e7dd      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007d02:	bf00      	nop
 8007d04:	40021000 	.word	0x40021000
 8007d08:	40007000 	.word	0x40007000
 8007d0c:	42420440 	.word	0x42420440

08007d10 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d10:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8007d12:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d22:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007d24:	bf1e      	ittt	ne
 8007d26:	681a      	ldrne	r2, [r3, #0]
 8007d28:	f042 0201 	orrne.w	r2, r2, #1
 8007d2c:	601a      	strne	r2, [r3, #0]
}
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIM_OC_DelayElapsedCallback>:
 8007d30:	4770      	bx	lr

08007d32 <HAL_TIM_IC_CaptureCallback>:
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIM_TriggerCallback>:
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d38:	6803      	ldr	r3, [r0, #0]
{
 8007d3a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d3c:	691a      	ldr	r2, [r3, #16]
{
 8007d3e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d40:	0791      	lsls	r1, r2, #30
 8007d42:	d50e      	bpl.n	8007d62 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	0792      	lsls	r2, r2, #30
 8007d48:	d50b      	bpl.n	8007d62 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d4a:	f06f 0202 	mvn.w	r2, #2
 8007d4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d50:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d52:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d54:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d077      	beq.n	8007e4a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d5a:	f7ff ffea 	bl	8007d32 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	691a      	ldr	r2, [r3, #16]
 8007d66:	0750      	lsls	r0, r2, #29
 8007d68:	d510      	bpl.n	8007d8c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	0751      	lsls	r1, r2, #29
 8007d6e:	d50d      	bpl.n	8007d8c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d70:	f06f 0204 	mvn.w	r2, #4
 8007d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d76:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d78:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d7c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d82:	d068      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d84:	f7ff ffd5 	bl	8007d32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	0712      	lsls	r2, r2, #28
 8007d92:	d50f      	bpl.n	8007db4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	0710      	lsls	r0, r2, #28
 8007d98:	d50c      	bpl.n	8007db4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d9a:	f06f 0208 	mvn.w	r2, #8
 8007d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da0:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da6:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007daa:	d05a      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007dac:	f7ff ffc1 	bl	8007d32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db0:	2300      	movs	r3, #0
 8007db2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	06d2      	lsls	r2, r2, #27
 8007dba:	d510      	bpl.n	8007dde <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	06d0      	lsls	r0, r2, #27
 8007dc0:	d50d      	bpl.n	8007dde <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dc2:	f06f 0210 	mvn.w	r2, #16
 8007dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dc8:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dca:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dcc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dce:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dd4:	d04b      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd6:	f7ff ffac 	bl	8007d32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	07d1      	lsls	r1, r2, #31
 8007de4:	d508      	bpl.n	8007df8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	07d2      	lsls	r2, r2, #31
 8007dea:	d505      	bpl.n	8007df8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dec:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007df0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007df4:	f7fa fa72 	bl	80022dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	0610      	lsls	r0, r2, #24
 8007dfe:	d508      	bpl.n	8007e12 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	0611      	lsls	r1, r2, #24
 8007e04:	d505      	bpl.n	8007e12 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e06:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007e0e:	f000 f944 	bl	800809a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	0652      	lsls	r2, r2, #25
 8007e18:	d508      	bpl.n	8007e2c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	0650      	lsls	r0, r2, #25
 8007e1e:	d505      	bpl.n	8007e2c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007e28:	f7ff ff85 	bl	8007d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	0691      	lsls	r1, r2, #26
 8007e32:	d522      	bpl.n	8007e7a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	0692      	lsls	r2, r2, #26
 8007e38:	d51f      	bpl.n	8007e7a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e3a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e3e:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007e46:	f000 b927 	b.w	8008098 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4a:	f7ff ff71 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff ff70 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e54:	e783      	b.n	8007d5e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	f7ff ff6b 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff ff6a 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e60:	e792      	b.n	8007d88 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	f7ff ff65 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7ff ff64 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e6c:	e7a0      	b.n	8007db0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6e:	f7ff ff5f 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7ff ff5e 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
 8007e78:	e7af      	b.n	8007dda <HAL_TIM_IRQHandler+0xa2>
}
 8007e7a:	bd10      	pop	{r4, pc}

08007e7c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007e7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e80:	4290      	cmp	r0, r2
 8007e82:	d00a      	beq.n	8007e9a <TIM_Base_SetConfig+0x1e>
 8007e84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e88:	d007      	beq.n	8007e9a <TIM_Base_SetConfig+0x1e>
 8007e8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007e8e:	4290      	cmp	r0, r2
 8007e90:	d003      	beq.n	8007e9a <TIM_Base_SetConfig+0x1e>
 8007e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e96:	4290      	cmp	r0, r2
 8007e98:	d115      	bne.n	8007ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007e9a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ea0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea2:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <TIM_Base_SetConfig+0x6c>)
 8007ea4:	4290      	cmp	r0, r2
 8007ea6:	d00a      	beq.n	8007ebe <TIM_Base_SetConfig+0x42>
 8007ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007eac:	d007      	beq.n	8007ebe <TIM_Base_SetConfig+0x42>
 8007eae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007eb2:	4290      	cmp	r0, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_Base_SetConfig+0x42>
 8007eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eba:	4290      	cmp	r0, r2
 8007ebc:	d103      	bne.n	8007ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ebe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec6:	694a      	ldr	r2, [r1, #20]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ecc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007ece:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed0:	688b      	ldr	r3, [r1, #8]
 8007ed2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <TIM_Base_SetConfig+0x6c>)
 8007eda:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007edc:	bf04      	itt	eq
 8007ede:	690b      	ldreq	r3, [r1, #16]
 8007ee0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	6143      	str	r3, [r0, #20]
}
 8007ee6:	4770      	bx	lr
 8007ee8:	40012c00 	.word	0x40012c00

08007eec <HAL_TIM_Base_Init>:
{
 8007eec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b1a0      	cbz	r0, 8007f1c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ef6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007efa:	b91b      	cbnz	r3, 8007f04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007efc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007f00:	f7fa fa4c 	bl	800239c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007f04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0c:	1d21      	adds	r1, r4, #4
 8007f0e:	f7ff ffb5 	bl	8007e7c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007f12:	2301      	movs	r3, #1
  return HAL_OK;
 8007f14:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007f1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	e7fc      	b.n	8007f1a <HAL_TIM_Base_Init+0x2e>

08007f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f20:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f22:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f24:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f26:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f2a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007f2e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f30:	6083      	str	r3, [r0, #8]
}
 8007f32:	bd10      	pop	{r4, pc}

08007f34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007f34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007f38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007f3a:	2b01      	cmp	r3, #1
{
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007f42:	d019      	beq.n	8007f78 <HAL_TIM_ConfigClockSource+0x44>
 8007f44:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007f46:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007f4a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007f4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007f50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007f5a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007f5c:	680b      	ldr	r3, [r1, #0]
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d065      	beq.n	800802e <HAL_TIM_ConfigClockSource+0xfa>
 8007f62:	d815      	bhi.n	8007f90 <HAL_TIM_ConfigClockSource+0x5c>
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d00c      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x4e>
 8007f68:	d807      	bhi.n	8007f7a <HAL_TIM_ConfigClockSource+0x46>
 8007f6a:	b153      	cbz	r3, 8007f82 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007f6e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f74:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007f78:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d001      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x4e>
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d1f4      	bne.n	8007f6c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8007f82:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f84:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	e01a      	b.n	8007fc6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8007f90:	2b60      	cmp	r3, #96	; 0x60
 8007f92:	d034      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xca>
 8007f94:	d819      	bhi.n	8007fca <HAL_TIM_ConfigClockSource+0x96>
 8007f96:	2b50      	cmp	r3, #80	; 0x50
 8007f98:	d1e8      	bne.n	8007f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9a:	684a      	ldr	r2, [r1, #4]
 8007f9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f9e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fa2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	f025 0501 	bic.w	r5, r5, #1
 8007faa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fac:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007fae:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fb4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007fb8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007fba:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007fbc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007fc6:	6083      	str	r3, [r0, #8]
 8007fc8:	e7d0      	b.n	8007f6c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8007fca:	2b70      	cmp	r3, #112	; 0x70
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_TIM_ConfigClockSource+0xb4>
 8007fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd2:	d1cb      	bne.n	8007f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8007fd4:	68cb      	ldr	r3, [r1, #12]
 8007fd6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007fda:	f7ff ffa1 	bl	8007f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	6893      	ldr	r3, [r2, #8]
 8007fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fe6:	e008      	b.n	8007ffa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	68cb      	ldr	r3, [r1, #12]
 8007fea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007fee:	f7ff ff97 	bl	8007f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ffa:	6093      	str	r3, [r2, #8]
      break;
 8007ffc:	e7b6      	b.n	8007f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ffe:	684d      	ldr	r5, [r1, #4]
 8008000:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008002:	6a01      	ldr	r1, [r0, #32]
 8008004:	f021 0110 	bic.w	r1, r1, #16
 8008008:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800800a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800800c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800800e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008016:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800801a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800801e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008020:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008022:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008028:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800802c:	e7cb      	b.n	8007fc6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800802e:	684a      	ldr	r2, [r1, #4]
 8008030:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008032:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008034:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008036:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803a:	f025 0501 	bic.w	r5, r5, #1
 800803e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008040:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8008042:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008048:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800804c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800804e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008050:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008056:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800805a:	e7b4      	b.n	8007fc6 <HAL_TIM_ConfigClockSource+0x92>

0800805c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800805c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8008060:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8008062:	2b01      	cmp	r3, #1
 8008064:	f04f 0302 	mov.w	r3, #2
 8008068:	d014      	beq.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800806a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8008070:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008072:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008074:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008076:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800807c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008080:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008082:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008084:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008086:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008088:	2301      	movs	r3, #1
 800808a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808e:	2300      	movs	r3, #0
 8008090:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8008094:	4618      	mov	r0, r3

  return HAL_OK;
}
 8008096:	bd30      	pop	{r4, r5, pc}

08008098 <HAL_TIMEx_CommutCallback>:
 8008098:	4770      	bx	lr

0800809a <HAL_TIMEx_BreakCallback>:
 800809a:	4770      	bx	lr

0800809c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800809c:	6803      	ldr	r3, [r0, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a6:	695a      	ldr	r2, [r3, #20]
 80080a8:	f022 0201 	bic.w	r2, r2, #1
 80080ac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ae:	2320      	movs	r3, #32
 80080b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80080b4:	4770      	bx	lr
	...

080080b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080bc:	6803      	ldr	r3, [r0, #0]
 80080be:	68c1      	ldr	r1, [r0, #12]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	2419      	movs	r4, #25
 80080c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80080c8:	430a      	orrs	r2, r1
 80080ca:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080cc:	6882      	ldr	r2, [r0, #8]
 80080ce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80080d0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080d2:	4302      	orrs	r2, r0
 80080d4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80080d6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80080da:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80080e0:	430a      	orrs	r2, r1
 80080e2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080e4:	695a      	ldr	r2, [r3, #20]
 80080e6:	69a9      	ldr	r1, [r5, #24]
 80080e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080ec:	430a      	orrs	r2, r1
 80080ee:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80080f0:	4a0d      	ldr	r2, [pc, #52]	; (8008128 <UART_SetConfig+0x70>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d114      	bne.n	8008120 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080f6:	f7ff fd65 	bl	8007bc4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080fa:	4360      	muls	r0, r4
 80080fc:	686c      	ldr	r4, [r5, #4]
 80080fe:	2264      	movs	r2, #100	; 0x64
 8008100:	00a4      	lsls	r4, r4, #2
 8008102:	fbb0 f0f4 	udiv	r0, r0, r4
 8008106:	fbb0 f1f2 	udiv	r1, r0, r2
 800810a:	fb02 0311 	mls	r3, r2, r1, r0
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	3332      	adds	r3, #50	; 0x32
 8008112:	fbb3 f3f2 	udiv	r3, r3, r2
 8008116:	682c      	ldr	r4, [r5, #0]
 8008118:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800811c:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800811e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8008120:	f7ff fd40 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8008124:	e7e9      	b.n	80080fa <UART_SetConfig+0x42>
 8008126:	bf00      	nop
 8008128:	40013800 	.word	0x40013800

0800812c <HAL_UART_Init>:
{
 800812c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800812e:	4604      	mov	r4, r0
 8008130:	b340      	cbz	r0, 8008184 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008136:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800813a:	b91b      	cbnz	r3, 8008144 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800813c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8008140:	f7fa f962 	bl	8002408 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008144:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8008146:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008148:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800814c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800814e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008154:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008156:	f7ff ffaf 	bl	80080b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008166:	695a      	ldr	r2, [r3, #20]
 8008168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800816c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008174:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008176:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008178:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800817a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008182:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008184:	2001      	movs	r0, #1
 8008186:	e7fc      	b.n	8008182 <HAL_UART_Init+0x56>

08008188 <HAL_UART_Receive_DMA>:
{
 8008188:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800818a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 800818e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008190:	2a20      	cmp	r2, #32
{
 8008192:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8008194:	d138      	bne.n	8008208 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8008196:	2900      	cmp	r1, #0
 8008198:	d034      	beq.n	8008204 <HAL_UART_Receive_DMA+0x7c>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d032      	beq.n	8008204 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 800819e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	d030      	beq.n	8008208 <HAL_UART_Receive_DMA+0x80>
 80081a6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a8:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80081aa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ae:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 80081b0:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80081b2:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081b6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081ba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80081bc:	4a13      	ldr	r2, [pc, #76]	; (800820c <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081be:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081c0:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081c2:	4a13      	ldr	r2, [pc, #76]	; (8008210 <HAL_UART_Receive_DMA+0x88>)
 80081c4:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081c6:	4a13      	ldr	r2, [pc, #76]	; (8008214 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80081c8:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80081cc:	460a      	mov	r2, r1
 80081ce:	1d31      	adds	r1, r6, #4
 80081d0:	f7fe f8e4 	bl	800639c <HAL_DMA_Start_IT>
    return HAL_OK;
 80081d4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 80081d6:	682b      	ldr	r3, [r5, #0]
 80081d8:	9401      	str	r4, [sp, #4]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	9201      	str	r2, [sp, #4]
 80081de:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80081e0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 80081e4:	9201      	str	r2, [sp, #4]
 80081e6:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ee:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081f8:	695a      	ldr	r2, [r3, #20]
 80081fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081fe:	615a      	str	r2, [r3, #20]
}
 8008200:	b002      	add	sp, #8
 8008202:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008204:	2001      	movs	r0, #1
 8008206:	e7fb      	b.n	8008200 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8008208:	2002      	movs	r0, #2
 800820a:	e7f9      	b.n	8008200 <HAL_UART_Receive_DMA+0x78>
 800820c:	0800821b 	.word	0x0800821b
 8008210:	08008255 	.word	0x08008255
 8008214:	08008261 	.word	0x08008261

08008218 <HAL_UART_RxCpltCallback>:
 8008218:	4770      	bx	lr

0800821a <UART_DMAReceiveCplt>:
{
 800821a:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800821c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f013 0320 	ands.w	r3, r3, #32
 8008226:	d110      	bne.n	800824a <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8008228:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	68d9      	ldr	r1, [r3, #12]
 800822e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008232:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008234:	6959      	ldr	r1, [r3, #20]
 8008236:	f021 0101 	bic.w	r1, r1, #1
 800823a:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823c:	6959      	ldr	r1, [r3, #20]
 800823e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008242:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008244:	2320      	movs	r3, #32
 8008246:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800824a:	4610      	mov	r0, r2
 800824c:	f7ff ffe4 	bl	8008218 <HAL_UART_RxCpltCallback>
}
 8008250:	bd08      	pop	{r3, pc}

08008252 <HAL_UART_RxHalfCpltCallback>:
 8008252:	4770      	bx	lr

08008254 <UART_DMARxHalfCplt>:
{
 8008254:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8008256:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008258:	f7ff fffb 	bl	8008252 <HAL_UART_RxHalfCpltCallback>
}
 800825c:	bd08      	pop	{r3, pc}

0800825e <HAL_UART_ErrorCallback>:
 800825e:	4770      	bx	lr

08008260 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008260:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8008262:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008264:	680b      	ldr	r3, [r1, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008268:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800826c:	2821      	cmp	r0, #33	; 0x21
 800826e:	d10a      	bne.n	8008286 <UART_DMAError+0x26>
 8008270:	0612      	lsls	r2, r2, #24
 8008272:	d508      	bpl.n	8008286 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8008274:	2200      	movs	r2, #0
 8008276:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800827e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008280:	2220      	movs	r2, #32
 8008282:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008286:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008288:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800828c:	2a22      	cmp	r2, #34	; 0x22
 800828e:	d106      	bne.n	800829e <UART_DMAError+0x3e>
 8008290:	065b      	lsls	r3, r3, #25
 8008292:	d504      	bpl.n	800829e <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8008294:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8008296:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8008298:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800829a:	f7ff feff 	bl	800809c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800829e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80082a0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082a2:	f043 0310 	orr.w	r3, r3, #16
 80082a6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80082a8:	f7ff ffd9 	bl	800825e <HAL_UART_ErrorCallback>
}
 80082ac:	bd08      	pop	{r3, pc}

080082ae <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082ae:	b084      	sub	sp, #16
 80082b0:	a801      	add	r0, sp, #4
 80082b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80082b6:	b004      	add	sp, #16
 80082b8:	2000      	movs	r0, #0
 80082ba:	4770      	bx	lr

080082bc <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80082bc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80082c0:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80082c4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80082c8:	2000      	movs	r0, #0
 80082ca:	4770      	bx	lr

080082cc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80082cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80082d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082d4:	045b      	lsls	r3, r3, #17
 80082d6:	0c5b      	lsrs	r3, r3, #17
 80082d8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80082dc:	2000      	movs	r0, #0
 80082de:	4770      	bx	lr

080082e0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr

080082e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082e4:	b084      	sub	sp, #16
 80082e6:	b510      	push	{r4, lr}
 80082e8:	ac03      	add	r4, sp, #12
 80082ea:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80082ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80082fe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8008302:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8008306:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 800830a:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 800830c:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 8008310:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 8008314:	4618      	mov	r0, r3
 8008316:	4770      	bx	lr

08008318 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008318:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800831a:	780c      	ldrb	r4, [r1, #0]
{
 800831c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800831e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8008322:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008324:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8008328:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 800832c:	2803      	cmp	r0, #3
 800832e:	d803      	bhi.n	8008338 <USB_ActivateEndpoint+0x20>
 8008330:	e8df f000 	tbb	[pc, r0]
 8008334:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8008338:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800833a:	f248 0580 	movw	r5, #32896	; 0x8080
 800833e:	432a      	orrs	r2, r5
 8008340:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008344:	780e      	ldrb	r6, [r1, #0]
 8008346:	4a9e      	ldr	r2, [pc, #632]	; (80085c0 <USB_ActivateEndpoint+0x2a8>)
 8008348:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 800834c:	4335      	orrs	r5, r6
 800834e:	4014      	ands	r4, r2
 8008350:	432c      	orrs	r4, r5
 8008352:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8008356:	7b0d      	ldrb	r5, [r1, #12]
 8008358:	780c      	ldrb	r4, [r1, #0]
 800835a:	2d00      	cmp	r5, #0
 800835c:	f040 8082 	bne.w	8008464 <USB_ActivateEndpoint+0x14c>
 8008360:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8008362:	784e      	ldrb	r6, [r1, #1]
 8008364:	086d      	lsrs	r5, r5, #1
 8008366:	006d      	lsls	r5, r5, #1
 8008368:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800836c:	b376      	cbz	r6, 80083cc <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800836e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8008372:	4434      	add	r4, r6
 8008374:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008378:	780d      	ldrb	r5, [r1, #0]
 800837a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800837e:	0667      	lsls	r7, r4, #25
 8008380:	d508      	bpl.n	8008394 <USB_ActivateEndpoint+0x7c>
 8008382:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008386:	4022      	ands	r2, r4
 8008388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800838c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008390:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008394:	78ca      	ldrb	r2, [r1, #3]
 8008396:	780c      	ldrb	r4, [r1, #0]
 8008398:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800839a:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800839e:	4a89      	ldr	r2, [pc, #548]	; (80085c4 <USB_ActivateEndpoint+0x2ac>)
 80083a0:	ea02 0201 	and.w	r2, r2, r1
 80083a4:	bf18      	it	ne
 80083a6:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083b2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80083b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80083b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80083bc:	2000      	movs	r0, #0
 80083be:	e7bc      	b.n	800833a <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80083c0:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80083c4:	e7fa      	b.n	80083bc <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80083c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083ca:	e7f7      	b.n	80083bc <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083cc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083d0:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083d2:	4414      	add	r4, r2
 80083d4:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083d8:	780a      	ldrb	r2, [r1, #0]
 80083da:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80083de:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80083e2:	b2a4      	uxth	r4, r4
 80083e4:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80083e8:	bb56      	cbnz	r6, 8008440 <USB_ActivateEndpoint+0x128>
 80083ea:	5b15      	ldrh	r5, [r2, r4]
 80083ec:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80083f0:	042d      	lsls	r5, r5, #16
 80083f2:	0c2d      	lsrs	r5, r5, #16
 80083f4:	5315      	strh	r5, [r2, r4]
 80083f6:	5b15      	ldrh	r5, [r2, r4]
 80083f8:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80083fc:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083fe:	780c      	ldrb	r4, [r1, #0]
 8008400:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008404:	0457      	lsls	r7, r2, #17
 8008406:	d50b      	bpl.n	8008420 <USB_ActivateEndpoint+0x108>
 8008408:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800840c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008410:	0512      	lsls	r2, r2, #20
 8008412:	0d12      	lsrs	r2, r2, #20
 8008414:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800841c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008420:	7809      	ldrb	r1, [r1, #0]
 8008422:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800842a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800842e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800843a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800843e:	e7ba      	b.n	80083b6 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008440:	2e3e      	cmp	r6, #62	; 0x3e
 8008442:	d806      	bhi.n	8008452 <USB_ActivateEndpoint+0x13a>
 8008444:	0875      	lsrs	r5, r6, #1
 8008446:	07f6      	lsls	r6, r6, #31
 8008448:	bf48      	it	mi
 800844a:	3501      	addmi	r5, #1
 800844c:	02ad      	lsls	r5, r5, #10
 800844e:	b2ad      	uxth	r5, r5
 8008450:	e7d4      	b.n	80083fc <USB_ActivateEndpoint+0xe4>
 8008452:	0977      	lsrs	r7, r6, #5
 8008454:	06f5      	lsls	r5, r6, #27
 8008456:	4d5c      	ldr	r5, [pc, #368]	; (80085c8 <USB_ActivateEndpoint+0x2b0>)
 8008458:	bf08      	it	eq
 800845a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800845e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8008462:	e7f4      	b.n	800844e <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008464:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008468:	4015      	ands	r5, r2
 800846a:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800846e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008472:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008476:	780c      	ldrb	r4, [r1, #0]
 8008478:	890d      	ldrh	r5, [r1, #8]
 800847a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800847e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8008482:	086d      	lsrs	r5, r5, #1
 8008484:	b2b6      	uxth	r6, r6
 8008486:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800848a:	006d      	lsls	r5, r5, #1
 800848c:	53a5      	strh	r5, [r4, r6]
 800848e:	780c      	ldrb	r4, [r1, #0]
 8008490:	894d      	ldrh	r5, [r1, #10]
 8008492:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8008496:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800849a:	086d      	lsrs	r5, r5, #1
 800849c:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 80084a0:	006d      	lsls	r5, r5, #1
 80084a2:	b2b6      	uxth	r6, r6
 80084a4:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 80084a6:	784c      	ldrb	r4, [r1, #1]
 80084a8:	780d      	ldrb	r5, [r1, #0]
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	d143      	bne.n	8008536 <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ae:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80084b2:	0466      	lsls	r6, r4, #17
 80084b4:	d508      	bpl.n	80084c8 <USB_ActivateEndpoint+0x1b0>
 80084b6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80084ba:	4022      	ands	r2, r4
 80084bc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80084c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c8:	780c      	ldrb	r4, [r1, #0]
 80084ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80084ce:	0655      	lsls	r5, r2, #25
 80084d0:	d50b      	bpl.n	80084ea <USB_ActivateEndpoint+0x1d2>
 80084d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80084d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80084da:	0512      	lsls	r2, r2, #20
 80084dc:	0d12      	lsrs	r2, r2, #20
 80084de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80084e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80084ea:	780c      	ldrb	r4, [r1, #0]
 80084ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80084f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80084f4:	0512      	lsls	r2, r2, #20
 80084f6:	0d12      	lsrs	r2, r2, #20
 80084f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008500:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008504:	f248 0480 	movw	r4, #32896	; 0x8080
 8008508:	780d      	ldrb	r5, [r1, #0]
 800850a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800850e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008516:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800851a:	4322      	orrs	r2, r4
 800851c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008520:	7809      	ldrb	r1, [r1, #0]
 8008522:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008526:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	4314      	orrs	r4, r2
 8008530:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8008534:	e73f      	b.n	80083b6 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008536:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800853a:	0464      	lsls	r4, r4, #17
 800853c:	d508      	bpl.n	8008550 <USB_ActivateEndpoint+0x238>
 800853e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008542:	4022      	ands	r2, r4
 8008544:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800854c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008550:	780c      	ldrb	r4, [r1, #0]
 8008552:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008556:	0652      	lsls	r2, r2, #25
 8008558:	d50b      	bpl.n	8008572 <USB_ActivateEndpoint+0x25a>
 800855a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800855e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008562:	0512      	lsls	r2, r2, #20
 8008564:	0d12      	lsrs	r2, r2, #20
 8008566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800856a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800856e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008572:	780c      	ldrb	r4, [r1, #0]
 8008574:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008578:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800857c:	0512      	lsls	r2, r2, #20
 800857e:	0d12      	lsrs	r2, r2, #20
 8008580:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008588:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800858c:	78ca      	ldrb	r2, [r1, #3]
 800858e:	780c      	ldrb	r4, [r1, #0]
 8008590:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008592:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008596:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <USB_ActivateEndpoint+0x2ac>)
 8008598:	ea02 0205 	and.w	r2, r2, r5
 800859c:	bf18      	it	ne
 800859e:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085aa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085ae:	7809      	ldrb	r1, [r1, #0]
 80085b0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80085b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085b8:	0492      	lsls	r2, r2, #18
 80085ba:	0c92      	lsrs	r2, r2, #18
 80085bc:	e739      	b.n	8008432 <USB_ActivateEndpoint+0x11a>
 80085be:	bf00      	nop
 80085c0:	ffff8f8f 	.word	0xffff8f8f
 80085c4:	ffff8fbf 	.word	0xffff8fbf
 80085c8:	ffff8000 	.word	0xffff8000

080085cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085cc:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80085ce:	7b0c      	ldrb	r4, [r1, #12]
 80085d0:	784a      	ldrb	r2, [r1, #1]
 80085d2:	780b      	ldrb	r3, [r1, #0]
 80085d4:	bbbc      	cbnz	r4, 8008646 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80085d6:	b1f2      	cbz	r2, 8008616 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085d8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80085dc:	0652      	lsls	r2, r2, #25
 80085de:	d50b      	bpl.n	80085f8 <USB_DeactivateEndpoint+0x2c>
 80085e0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80085e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085e8:	0512      	lsls	r2, r2, #20
 80085ea:	0d12      	lsrs	r2, r2, #20
 80085ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80085f4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085f8:	780a      	ldrb	r2, [r1, #0]
 80085fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008602:	051b      	lsls	r3, r3, #20
 8008604:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8008612:	2000      	movs	r0, #0
 8008614:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008616:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800861a:	0454      	lsls	r4, r2, #17
 800861c:	d50b      	bpl.n	8008636 <USB_DeactivateEndpoint+0x6a>
 800861e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008622:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008626:	0512      	lsls	r2, r2, #20
 8008628:	0d12      	lsrs	r2, r2, #20
 800862a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800862e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008632:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008636:	780a      	ldrb	r2, [r1, #0]
 8008638:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800863c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008640:	049b      	lsls	r3, r3, #18
 8008642:	0c9b      	lsrs	r3, r3, #18
 8008644:	e7df      	b.n	8008606 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8008646:	2a00      	cmp	r2, #0
 8008648:	d144      	bne.n	80086d4 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800864a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800864e:	0452      	lsls	r2, r2, #17
 8008650:	d50b      	bpl.n	800866a <USB_DeactivateEndpoint+0x9e>
 8008652:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800865a:	0512      	lsls	r2, r2, #20
 800865c:	0d12      	lsrs	r2, r2, #20
 800865e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008666:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866a:	780a      	ldrb	r2, [r1, #0]
 800866c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008670:	065c      	lsls	r4, r3, #25
 8008672:	d50b      	bpl.n	800868c <USB_DeactivateEndpoint+0xc0>
 8008674:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800867c:	051b      	lsls	r3, r3, #20
 800867e:	0d1b      	lsrs	r3, r3, #20
 8008680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008688:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800868c:	780a      	ldrb	r2, [r1, #0]
 800868e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008696:	051b      	lsls	r3, r3, #20
 8008698:	0d1b      	lsrs	r3, r3, #20
 800869a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086a6:	f248 0280 	movw	r2, #32896	; 0x8080
 80086aa:	780c      	ldrb	r4, [r1, #0]
 80086ac:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80086b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086be:	7809      	ldrb	r1, [r1, #0]
 80086c0:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80086c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086cc:	431a      	orrs	r2, r3
 80086ce:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80086d2:	e79e      	b.n	8008612 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80086d8:	0452      	lsls	r2, r2, #17
 80086da:	d50b      	bpl.n	80086f4 <USB_DeactivateEndpoint+0x128>
 80086dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80086e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80086e4:	0512      	lsls	r2, r2, #20
 80086e6:	0d12      	lsrs	r2, r2, #20
 80086e8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80086ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086f0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086f4:	780a      	ldrb	r2, [r1, #0]
 80086f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80086fa:	065b      	lsls	r3, r3, #25
 80086fc:	d50b      	bpl.n	8008716 <USB_DeactivateEndpoint+0x14a>
 80086fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008706:	051b      	lsls	r3, r3, #20
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008712:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8008716:	780a      	ldrb	r2, [r1, #0]
 8008718:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800871c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	0d1b      	lsrs	r3, r3, #20
 8008724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008730:	f248 0280 	movw	r2, #32896	; 0x8080
 8008734:	780c      	ldrb	r4, [r1, #0]
 8008736:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008742:	4313      	orrs	r3, r2
 8008744:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008748:	7809      	ldrb	r1, [r1, #0]
 800874a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800874e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008756:	e7b9      	b.n	80086cc <USB_DeactivateEndpoint+0x100>

08008758 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8008758:	784b      	ldrb	r3, [r1, #1]
 800875a:	780a      	ldrb	r2, [r1, #0]
 800875c:	b17b      	cbz	r3, 800877e <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800875e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876a:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800876e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008776:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800877a:	2000      	movs	r0, #0
 800877c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800877e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800878e:	e7ee      	b.n	800876e <USB_EPSetStall+0x16>

08008790 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008790:	7b0b      	ldrb	r3, [r1, #12]
 8008792:	bb23      	cbnz	r3, 80087de <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8008794:	784b      	ldrb	r3, [r1, #1]
 8008796:	780a      	ldrb	r2, [r1, #0]
 8008798:	b31b      	cbz	r3, 80087e2 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800879a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800879e:	065b      	lsls	r3, r3, #25
 80087a0:	d50b      	bpl.n	80087ba <USB_EPClearStall+0x2a>
 80087a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087aa:	051b      	lsls	r3, r3, #20
 80087ac:	0d1b      	lsrs	r3, r3, #20
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80087ba:	78cb      	ldrb	r3, [r1, #3]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d00e      	beq.n	80087de <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087c0:	780a      	ldrb	r2, [r1, #0]
 80087c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ce:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087e6:	045b      	lsls	r3, r3, #17
 80087e8:	d50b      	bpl.n	8008802 <USB_EPClearStall+0x72>
 80087ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087f2:	051b      	lsls	r3, r3, #20
 80087f4:	0d1b      	lsrs	r3, r3, #20
 80087f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008802:	780a      	ldrb	r2, [r1, #0]
 8008804:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800880c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008810:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008814:	e7dd      	b.n	80087d2 <USB_EPClearStall+0x42>

08008816 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8008816:	b911      	cbnz	r1, 800881e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800881e:	2000      	movs	r0, #0
 8008820:	4770      	bx	lr

08008822 <USB_DevConnect>:
 8008822:	2000      	movs	r0, #0
 8008824:	4770      	bx	lr

08008826 <USB_DevDisconnect>:
 8008826:	2000      	movs	r0, #0
 8008828:	4770      	bx	lr

0800882a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800882a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800882e:	4770      	bx	lr

08008830 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8008830:	2000      	movs	r0, #0
 8008832:	4770      	bx	lr

08008834 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008834:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008838:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800883a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8008844:	429a      	cmp	r2, r3
 8008846:	d100      	bne.n	800884a <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8008848:	4770      	bx	lr
 800884a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800884e:	f822 0b04 	strh.w	r0, [r2], #4
 8008852:	e7f7      	b.n	8008844 <USB_WritePMA+0x10>

08008854 <USB_EPStartXfer>:
{
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8008858:	7849      	ldrb	r1, [r1, #1]
{
 800885a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800885c:	2901      	cmp	r1, #1
 800885e:	69aa      	ldr	r2, [r5, #24]
 8008860:	692b      	ldr	r3, [r5, #16]
 8008862:	7b28      	ldrb	r0, [r5, #12]
 8008864:	d15d      	bne.n	8008922 <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8008866:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8008868:	bf9d      	ittte	ls
 800886a:	2300      	movls	r3, #0
 800886c:	61ab      	strls	r3, [r5, #24]
 800886e:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8008870:	1ad2      	subhi	r2, r2, r3
 8008872:	bf88      	it	hi
 8008874:	61aa      	strhi	r2, [r5, #24]
 8008876:	6969      	ldr	r1, [r5, #20]
 8008878:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 800887a:	b9e8      	cbnz	r0, 80088b8 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800887c:	4633      	mov	r3, r6
 800887e:	88ea      	ldrh	r2, [r5, #6]
 8008880:	4620      	mov	r0, r4
 8008882:	f7ff ffd7 	bl	8008834 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008886:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800888a:	782a      	ldrb	r2, [r5, #0]
 800888c:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8008890:	0112      	lsls	r2, r2, #4
 8008892:	440b      	add	r3, r1
 8008894:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008896:	782a      	ldrb	r2, [r5, #0]
 8008898:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800889c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b0:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80088b4:	2000      	movs	r0, #0
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088b8:	782b      	ldrb	r3, [r5, #0]
 80088ba:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088be:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80088c2:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088c4:	bf4b      	itete	mi
 80088c6:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088ca:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088ce:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088d0:	1812      	addpl	r2, r2, r0
 80088d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088d6:	bf4b      	itete	mi
 80088d8:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088da:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80088dc:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80088de:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088e0:	4633      	mov	r3, r6
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff ffa6 	bl	8008834 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80088e8:	786b      	ldrb	r3, [r5, #1]
 80088ea:	782a      	ldrb	r2, [r5, #0]
 80088ec:	b963      	cbnz	r3, 8008908 <USB_EPStartXfer+0xb4>
 80088ee:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80088f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088f6:	051b      	lsls	r3, r3, #20
 80088f8:	0d1b      	lsrs	r3, r3, #20
 80088fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008902:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8008906:	e7c6      	b.n	8008896 <USB_EPStartXfer+0x42>
 8008908:	2b01      	cmp	r3, #1
 800890a:	d1c4      	bne.n	8008896 <USB_EPStartXfer+0x42>
 800890c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8008910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008914:	051b      	lsls	r3, r3, #20
 8008916:	0d1b      	lsrs	r3, r3, #20
 8008918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800891c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008920:	e7ef      	b.n	8008902 <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8008922:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8008924:	bf93      	iteet	ls
 8008926:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8008928:	1ad2      	subhi	r2, r2, r3
 800892a:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 800892c:	61ab      	strls	r3, [r5, #24]
 800892e:	bf98      	it	ls
 8008930:	4613      	movls	r3, r2
 8008932:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8008934:	b990      	cbnz	r0, 800895c <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008936:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800893a:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800893e:	4401      	add	r1, r0
 8008940:	0112      	lsls	r2, r2, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	d13b      	bne.n	80089be <USB_EPStartXfer+0x16a>
 8008946:	5a8b      	ldrh	r3, [r1, r2]
 8008948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800894c:	041b      	lsls	r3, r3, #16
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	528b      	strh	r3, [r1, r2]
 8008952:	5a8b      	ldrh	r3, [r1, r2]
 8008954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008958:	528b      	strh	r3, [r1, r2]
 800895a:	e039      	b.n	80089d0 <USB_EPStartXfer+0x17c>
 800895c:	b981      	cbnz	r1, 8008980 <USB_EPStartXfer+0x12c>
 800895e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008962:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8008966:	4401      	add	r1, r0
 8008968:	0112      	lsls	r2, r2, #4
 800896a:	b9b3      	cbnz	r3, 800899a <USB_EPStartXfer+0x146>
 800896c:	5a88      	ldrh	r0, [r1, r2]
 800896e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8008972:	0400      	lsls	r0, r0, #16
 8008974:	0c00      	lsrs	r0, r0, #16
 8008976:	5288      	strh	r0, [r1, r2]
 8008978:	5a88      	ldrh	r0, [r1, r2]
 800897a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800897e:	5288      	strh	r0, [r1, r2]
 8008980:	7869      	ldrb	r1, [r5, #1]
 8008982:	782a      	ldrb	r2, [r5, #0]
 8008984:	2900      	cmp	r1, #0
 8008986:	d0d6      	beq.n	8008936 <USB_EPStartXfer+0xe2>
 8008988:	2901      	cmp	r1, #1
 800898a:	d121      	bne.n	80089d0 <USB_EPStartXfer+0x17c>
 800898c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8008990:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8008994:	4401      	add	r1, r0
 8008996:	0112      	lsls	r2, r2, #4
 8008998:	e02c      	b.n	80089f4 <USB_EPStartXfer+0x1a0>
 800899a:	2b3e      	cmp	r3, #62	; 0x3e
 800899c:	d806      	bhi.n	80089ac <USB_EPStartXfer+0x158>
 800899e:	0858      	lsrs	r0, r3, #1
 80089a0:	07de      	lsls	r6, r3, #31
 80089a2:	bf48      	it	mi
 80089a4:	3001      	addmi	r0, #1
 80089a6:	0280      	lsls	r0, r0, #10
 80089a8:	b280      	uxth	r0, r0
 80089aa:	e7e8      	b.n	800897e <USB_EPStartXfer+0x12a>
 80089ac:	095e      	lsrs	r6, r3, #5
 80089ae:	06d8      	lsls	r0, r3, #27
 80089b0:	4811      	ldr	r0, [pc, #68]	; (80089f8 <USB_EPStartXfer+0x1a4>)
 80089b2:	bf08      	it	eq
 80089b4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80089b8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80089bc:	e7f4      	b.n	80089a8 <USB_EPStartXfer+0x154>
 80089be:	2b3e      	cmp	r3, #62	; 0x3e
 80089c0:	d810      	bhi.n	80089e4 <USB_EPStartXfer+0x190>
 80089c2:	0858      	lsrs	r0, r3, #1
 80089c4:	07de      	lsls	r6, r3, #31
 80089c6:	bf48      	it	mi
 80089c8:	3001      	addmi	r0, #1
 80089ca:	0280      	lsls	r0, r0, #10
 80089cc:	b280      	uxth	r0, r0
 80089ce:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089d0:	782a      	ldrb	r2, [r5, #0]
 80089d2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80089d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089de:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80089e2:	e761      	b.n	80088a8 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089e4:	0958      	lsrs	r0, r3, #5
 80089e6:	06db      	lsls	r3, r3, #27
 80089e8:	4b03      	ldr	r3, [pc, #12]	; (80089f8 <USB_EPStartXfer+0x1a4>)
 80089ea:	bf08      	it	eq
 80089ec:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80089f0:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	e7af      	b.n	8008958 <USB_EPStartXfer+0x104>
 80089f8:	ffff8000 	.word	0xffff8000

080089fc <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8008a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a06:	085d      	lsrs	r5, r3, #1
 8008a08:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a0a:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8008a0c:	462e      	mov	r6, r5
 8008a0e:	3002      	adds	r0, #2
 8008a10:	b936      	cbnz	r6, 8008a20 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a12:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8008a14:	bf44      	itt	mi
 8008a16:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a1a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8008a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8008a20:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8008a24:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008a26:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a28:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a2c:	0a24      	lsrs	r4, r4, #8
 8008a2e:	f800 4c01 	strb.w	r4, [r0, #-1]
 8008a32:	e7ec      	b.n	8008a0e <USB_ReadPMA+0x12>

08008a34 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a34:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8008a38:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a3a:	b16b      	cbz	r3, 8008a58 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a3c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a40:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008a44:	28ff      	cmp	r0, #255	; 0xff
 8008a46:	d007      	beq.n	8008a58 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008a52:	23ff      	movs	r3, #255	; 0xff
 8008a54:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008a58:	2000      	movs	r0, #0
 8008a5a:	bd10      	pop	{r4, pc}

08008a5c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a5c:	2343      	movs	r3, #67	; 0x43
 8008a5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008a60:	4800      	ldr	r0, [pc, #0]	; (8008a64 <USBD_CDC_GetFSCfgDesc+0x8>)
 8008a62:	4770      	bx	lr
 8008a64:	2000007c 	.word	0x2000007c

08008a68 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a68:	2343      	movs	r3, #67	; 0x43
 8008a6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008a6c:	4800      	ldr	r0, [pc, #0]	; (8008a70 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008a6e:	4770      	bx	lr
 8008a70:	200000c0 	.word	0x200000c0

08008a74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a74:	2343      	movs	r3, #67	; 0x43
 8008a76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008a78:	4800      	ldr	r0, [pc, #0]	; (8008a7c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008a7a:	4770      	bx	lr
 8008a7c:	20000110 	.word	0x20000110

08008a80 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a80:	230a      	movs	r3, #10
 8008a82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008a84:	4800      	ldr	r0, [pc, #0]	; (8008a88 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008a86:	4770      	bx	lr
 8008a88:	20000104 	.word	0x20000104

08008a8c <USBD_CDC_DataOut>:
{
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a90:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a94:	f000 ff1c 	bl	80098d0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8008a98:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a9c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8008aa0:	b14b      	cbz	r3, 8008ab6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008aa2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8008aa6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8008ab0:	4798      	blx	r3
    return USBD_OK;
 8008ab2:	2000      	movs	r0, #0
}
 8008ab4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008ab6:	2002      	movs	r0, #2
 8008ab8:	e7fc      	b.n	8008ab4 <USBD_CDC_DataOut+0x28>

08008aba <USBD_CDC_DataIn>:
{
 8008aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008abc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8008ac0:	b1ce      	cbz	r6, 8008af6 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ac2:	2314      	movs	r3, #20
 8008ac4:	fb03 0301 	mla	r3, r3, r1, r0
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	b182      	cbz	r2, 8008aee <USBD_CDC_DataIn+0x34>
 8008acc:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8008ad0:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8008ad4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008ad6:	fbb2 f4f5 	udiv	r4, r2, r5
 8008ada:	fb05 2414 	mls	r4, r5, r4, r2
 8008ade:	b934      	cbnz	r4, 8008aee <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8008ae0:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	f000 fed7 	bl	8009898 <USBD_LL_Transmit>
    return USBD_OK;
 8008aea:	4620      	mov	r0, r4
}
 8008aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8008aee:	2000      	movs	r0, #0
 8008af0:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8008af4:	e7fa      	b.n	8008aec <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8008af6:	2002      	movs	r0, #2
 8008af8:	e7f8      	b.n	8008aec <USBD_CDC_DataIn+0x32>

08008afa <USBD_CDC_Setup>:
{
 8008afa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8008afe:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b02:	780a      	ldrb	r2, [r1, #0]
{
 8008b04:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b06:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8008b0a:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b0c:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8008b10:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8008b14:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b18:	d028      	beq.n	8008b6c <USBD_CDC_Setup+0x72>
 8008b1a:	2c20      	cmp	r4, #32
 8008b1c:	d145      	bne.n	8008baa <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8008b1e:	88cc      	ldrh	r4, [r1, #6]
 8008b20:	784b      	ldrb	r3, [r1, #1]
 8008b22:	b1e4      	cbz	r4, 8008b5e <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8008b24:	0612      	lsls	r2, r2, #24
 8008b26:	d511      	bpl.n	8008b4c <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b28:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008b32:	4618      	mov	r0, r3
 8008b34:	4622      	mov	r2, r4
 8008b36:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b38:	88f2      	ldrh	r2, [r6, #6]
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 fc46 	bl	80093ce <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008b42:	4644      	mov	r4, r8
}
 8008b44:	4620      	mov	r0, r4
 8008b46:	b003      	add	sp, #12
 8008b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8008b4c:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b50:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b54:	4622      	mov	r2, r4
 8008b56:	4639      	mov	r1, r7
 8008b58:	f000 fc4e 	bl	80093f8 <USBD_CtlPrepareRx>
 8008b5c:	e7f1      	b.n	8008b42 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b5e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008b62:	4618      	mov	r0, r3
 8008b64:	6895      	ldr	r5, [r2, #8]
 8008b66:	4622      	mov	r2, r4
 8008b68:	47a8      	blx	r5
 8008b6a:	e7eb      	b.n	8008b44 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8008b6c:	784f      	ldrb	r7, [r1, #1]
 8008b6e:	2f0a      	cmp	r7, #10
 8008b70:	d00d      	beq.n	8008b8e <USBD_CDC_Setup+0x94>
 8008b72:	2f0b      	cmp	r7, #11
 8008b74:	d015      	beq.n	8008ba2 <USBD_CDC_Setup+0xa8>
 8008b76:	b9c7      	cbnz	r7, 8008baa <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d114      	bne.n	8008baa <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b80:	2202      	movs	r2, #2
 8008b82:	f10d 0106 	add.w	r1, sp, #6
 8008b86:	f000 fc22 	bl	80093ce <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008b8a:	463c      	mov	r4, r7
 8008b8c:	e7da      	b.n	8008b44 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d109      	bne.n	8008baa <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b96:	2201      	movs	r2, #1
 8008b98:	f10d 0105 	add.w	r1, sp, #5
 8008b9c:	f000 fc17 	bl	80093ce <USBD_CtlSendData>
 8008ba0:	e7d0      	b.n	8008b44 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ba2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d0cc      	beq.n	8008b44 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 fbe7 	bl	8009380 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bb2:	2402      	movs	r4, #2
          break;
 8008bb4:	e7c6      	b.n	8008b44 <USBD_CDC_Setup+0x4a>

08008bb6 <USBD_CDC_DeInit>:
{
 8008bb6:	b538      	push	{r3, r4, r5, lr}
 8008bb8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008bba:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008bbc:	2181      	movs	r1, #129	; 0x81
 8008bbe:	f000 fe23 	bl	8009808 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bc2:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008bc4:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fe1e 	bl	8009808 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008bcc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008bd0:	2182      	movs	r1, #130	; 0x82
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fe18 	bl	8009808 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008bd8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008bdc:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008bde:	b14b      	cbz	r3, 8008bf4 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008be0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008be8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008bec:	f000 fe78 	bl	80098e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bf0:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}

08008bf8 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bf8:	7c03      	ldrb	r3, [r0, #16]
{
 8008bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfe:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c00:	bbcb      	cbnz	r3, 8008c76 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c06:	2202      	movs	r2, #2
 8008c08:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c0a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c0c:	f000 fdec 	bl	80097e8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c10:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c14:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c16:	4629      	mov	r1, r5
 8008c18:	2202      	movs	r2, #2
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 fde4 	bl	80097e8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c20:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c24:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c26:	2308      	movs	r3, #8
 8008c28:	2203      	movs	r2, #3
 8008c2a:	2182      	movs	r1, #130	; 0x82
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fddb 	bl	80097e8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c32:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c38:	f000 fe4e 	bl	80098d8 <USBD_static_malloc>
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008c42:	b350      	cbz	r0, 8008c9a <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8008c44:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c46:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4e:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8008c52:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c56:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d113      	bne.n	8008c88 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c64:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fe22 	bl	80098b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008c70:	4640      	mov	r0, r8
}
 8008c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c76:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c78:	2340      	movs	r3, #64	; 0x40
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	2181      	movs	r1, #129	; 0x81
 8008c7e:	f000 fdb3 	bl	80097e8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c82:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c84:	2340      	movs	r3, #64	; 0x40
 8008c86:	e7c6      	b.n	8008c16 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fe0f 	bl	80098b4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008c96:	4638      	mov	r0, r7
 8008c98:	e7eb      	b.n	8008c72 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	e7e9      	b.n	8008c72 <USBD_CDC_Init+0x7a>

08008c9e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008c9e:	b119      	cbz	r1, 8008ca8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008ca0:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008ca8:	2002      	movs	r0, #2
  }

  return ret;
}
 8008caa:	4770      	bx	lr

08008cac <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008cb0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008cb2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008cb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008cba:	4770      	bx	lr

08008cbc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008cbc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008cc0:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008cc2:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cc8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008ccc:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8008cce:	b182      	cbz	r2, 8008cf2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8008cd0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	b974      	cbnz	r4, 8008cf6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008cd8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008cdc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ce0:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ce2:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ce4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f000 fdd5 	bl	8009898 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8008cee:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008cf0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008cf2:	2002      	movs	r0, #2
 8008cf4:	e7fc      	b.n	8008cf0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	e7fa      	b.n	8008cf0 <USBD_CDC_TransmitPacket+0x28>

08008cfa <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cfa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008cfe:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d00:	b162      	cbz	r2, 8008d1c <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d02:	7c04      	ldrb	r4, [r0, #16]
 8008d04:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008d08:	b934      	cbnz	r4, 8008d18 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d0e:	2101      	movs	r1, #1
 8008d10:	f000 fdd0 	bl	80098b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d14:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008d16:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	e7f8      	b.n	8008d0e <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8008d1c:	2002      	movs	r0, #2
 8008d1e:	e7fa      	b.n	8008d16 <USBD_CDC_ReceivePacket+0x1c>

08008d20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d20:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d22:	b180      	cbz	r0, 8008d46 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d28:	b113      	cbz	r3, 8008d30 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d30:	b109      	cbz	r1, 8008d36 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008d32:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d36:	2301      	movs	r3, #1
  pdev->id = id;
 8008d38:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d3a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d3e:	f000 fd03 	bl	8009748 <USBD_LL_Init>

  return USBD_OK;
 8008d42:	2000      	movs	r0, #0
}
 8008d44:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008d46:	2002      	movs	r0, #2
 8008d48:	e7fc      	b.n	8008d44 <USBD_Init+0x24>

08008d4a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008d4a:	b119      	cbz	r1, 8008d54 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d4c:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008d50:	2000      	movs	r0, #0
 8008d52:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d54:	2002      	movs	r0, #2
  }

  return status;
}
 8008d56:	4770      	bx	lr

08008d58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d58:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d5a:	f000 fd37 	bl	80097cc <USBD_LL_Start>

  return USBD_OK;
}
 8008d5e:	2000      	movs	r0, #0
 8008d60:	bd08      	pop	{r3, pc}

08008d62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d62:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008d64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d68:	b90b      	cbnz	r3, 8008d6e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d6a:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008d6c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4798      	blx	r3
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0fa      	beq.n	8008d6c <USBD_SetClassConfig+0xa>
 8008d76:	e7f8      	b.n	8008d6a <USBD_SetClassConfig+0x8>

08008d78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d78:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4798      	blx	r3

  return USBD_OK;
}
 8008d82:	2000      	movs	r0, #0
 8008d84:	bd08      	pop	{r3, pc}

08008d86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d86:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d88:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8008d8c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 fae2 	bl	8009358 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d94:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008d96:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8008d9a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8008d9e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8008da2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008da6:	f001 031f 	and.w	r3, r1, #31
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d00e      	beq.n	8008dcc <USBD_LL_SetupStage+0x46>
 8008dae:	d307      	bcc.n	8008dc0 <USBD_LL_SetupStage+0x3a>
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d010      	beq.n	8008dd6 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008db4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fd33 	bl	8009824 <USBD_LL_StallEP>
      break;
 8008dbe:	e003      	b.n	8008dc8 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 f8f6 	bl	8008fb4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8008dc8:	2000      	movs	r0, #0
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fa14 	bl	80091fc <USBD_StdItfReq>
      break;
 8008dd4:	e7f8      	b.n	8008dc8 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 fa34 	bl	8009246 <USBD_StdEPReq>
      break;
 8008dde:	e7f3      	b.n	8008dc8 <USBD_LL_SetupStage+0x42>

08008de0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4605      	mov	r5, r0
 8008de4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008de6:	bb49      	cbnz	r1, 8008e3c <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008de8:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d11e      	bne.n	8008e2e <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008df0:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8008df4:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d90b      	bls.n	8008e14 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8008dfc:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008dfe:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8008e00:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008e04:	bf8c      	ite	hi
 8008e06:	b29a      	uxthhi	r2, r3
 8008e08:	b292      	uxthls	r2, r2
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	f000 fb03 	bl	8009416 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008e10:	2000      	movs	r0, #0
}
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	b123      	cbz	r3, 8008e26 <USBD_LL_DataOutStage+0x46>
 8008e1c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008e20:	2a03      	cmp	r2, #3
 8008e22:	d100      	bne.n	8008e26 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8008e24:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008e26:	4628      	mov	r0, r5
 8008e28:	f000 fafd 	bl	8009426 <USBD_CtlSendStatus>
 8008e2c:	e7f0      	b.n	8008e10 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e2e:	2b05      	cmp	r3, #5
 8008e30:	d1ee      	bne.n	8008e10 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e32:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e36:	f000 fcf5 	bl	8009824 <USBD_LL_StallEP>
 8008e3a:	e7e9      	b.n	8008e10 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	b12b      	cbz	r3, 8008e50 <USBD_LL_DataOutStage+0x70>
 8008e44:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008e48:	2a03      	cmp	r2, #3
 8008e4a:	d101      	bne.n	8008e50 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8008e4c:	4798      	blx	r3
 8008e4e:	e7df      	b.n	8008e10 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008e50:	2002      	movs	r0, #2
 8008e52:	e7de      	b.n	8008e12 <USBD_LL_DataOutStage+0x32>

08008e54 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4613      	mov	r3, r2
 8008e58:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e5a:	460e      	mov	r6, r1
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	d147      	bne.n	8008ef0 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e60:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008e64:	2a02      	cmp	r2, #2
 8008e66:	d13c      	bne.n	8008ee2 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e68:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8008e6c:	4295      	cmp	r5, r2
 8008e6e:	d913      	bls.n	8008e98 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8008e70:	1aaa      	subs	r2, r5, r2
 8008e72:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008e74:	4619      	mov	r1, r3
 8008e76:	b292      	uxth	r2, r2
 8008e78:	f000 fab6 	bl	80093e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7c:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4619      	mov	r1, r3
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fd16 	bl	80098b4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008e88:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008e92:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e98:	69c3      	ldr	r3, [r0, #28]
 8008e9a:	fbb3 f5f2 	udiv	r5, r3, r2
 8008e9e:	fb02 3515 	mls	r5, r2, r5, r3
 8008ea2:	b965      	cbnz	r5, 8008ebe <USBD_LL_DataInStage+0x6a>
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d80a      	bhi.n	8008ebe <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8008ea8:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d206      	bcs.n	8008ebe <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	f000 fa99 	bl	80093e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008eb6:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eba:	462b      	mov	r3, r5
 8008ebc:	e7df      	b.n	8008e7e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ebe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	b12b      	cbz	r3, 8008ed2 <USBD_LL_DataInStage+0x7e>
 8008ec6:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008eca:	2a03      	cmp	r2, #3
 8008ecc:	d101      	bne.n	8008ed2 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008ed2:	2180      	movs	r1, #128	; 0x80
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fca5 	bl	8009824 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 faae 	bl	800943c <USBD_CtlReceiveStatus>
 8008ee0:	e7d2      	b.n	8008e88 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ee2:	f032 0304 	bics.w	r3, r2, #4
 8008ee6:	d1cf      	bne.n	8008e88 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008ee8:	2180      	movs	r1, #128	; 0x80
 8008eea:	f000 fc9b 	bl	8009824 <USBD_LL_StallEP>
 8008eee:	e7cb      	b.n	8008e88 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ef0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	b133      	cbz	r3, 8008f06 <USBD_LL_DataInStage+0xb2>
 8008ef8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008efc:	2a03      	cmp	r2, #3
 8008efe:	d102      	bne.n	8008f06 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8008f00:	4798      	blx	r3
  return USBD_OK;
 8008f02:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8008f04:	e7c7      	b.n	8008e96 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8008f06:	2002      	movs	r0, #2
 8008f08:	e7c5      	b.n	8008e96 <USBD_LL_DataInStage+0x42>

08008f0a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f0a:	2200      	movs	r2, #0
{
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f10:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f12:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f14:	4611      	mov	r1, r2
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	f000 fc66 	bl	80097e8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f1c:	4633      	mov	r3, r6
 8008f1e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f20:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f24:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fc5c 	bl	80097e8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f30:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008f32:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f36:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f38:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f3a:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f3e:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f42:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f44:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008f48:	b123      	cbz	r3, 8008f54 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f4a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008f4e:	4620      	mov	r0, r4
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008f54:	2000      	movs	r0, #0
 8008f56:	bd70      	pop	{r4, r5, r6, pc}

08008f58 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008f58:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	4770      	bx	lr

08008f5e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008f5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f62:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f66:	2304      	movs	r3, #4
 8008f68:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4770      	bx	lr

08008f70 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f74:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f76:	bf04      	itt	eq
 8008f78:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8008f7c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8008f80:	2000      	movs	r0, #0
 8008f82:	4770      	bx	lr

08008f84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f84:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008f8a:	2a03      	cmp	r2, #3
 8008f8c:	d104      	bne.n	8008f98 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008f8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	b103      	cbz	r3, 8008f98 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008f96:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8008f98:	2000      	movs	r0, #0
 8008f9a:	bd08      	pop	{r3, pc}

08008f9c <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8008fa0:	2180      	movs	r1, #128	; 0x80
 8008fa2:	f000 fc3f 	bl	8009824 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008fa6:	4620      	mov	r0, r4
}
 8008fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008fac:	2100      	movs	r1, #0
 8008fae:	f000 bc39 	b.w	8009824 <USBD_LL_StallEP>
	...

08008fb4 <USBD_StdDevReq>:
{
 8008fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fb6:	780b      	ldrb	r3, [r1, #0]
{
 8008fb8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fbe:	2b20      	cmp	r3, #32
{
 8008fc0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fc2:	d012      	beq.n	8008fea <USBD_StdDevReq+0x36>
 8008fc4:	2b40      	cmp	r3, #64	; 0x40
 8008fc6:	d010      	beq.n	8008fea <USBD_StdDevReq+0x36>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d15b      	bne.n	8009084 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8008fcc:	784b      	ldrb	r3, [r1, #1]
 8008fce:	2b09      	cmp	r3, #9
 8008fd0:	d858      	bhi.n	8009084 <USBD_StdDevReq+0xd0>
 8008fd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fd6:	00e9      	.short	0x00e9
 8008fd8:	00570105 	.word	0x00570105
 8008fdc:	005700fe 	.word	0x005700fe
 8008fe0:	00130084 	.word	0x00130084
 8008fe4:	00d20057 	.word	0x00d20057
 8008fe8:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8008fea:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4798      	blx	r3
}
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	b003      	add	sp, #12
 8008ffa:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8009002:	884b      	ldrh	r3, [r1, #2]
 8009004:	0a1a      	lsrs	r2, r3, #8
 8009006:	3a01      	subs	r2, #1
 8009008:	2a06      	cmp	r2, #6
 800900a:	d83b      	bhi.n	8009084 <USBD_StdDevReq+0xd0>
 800900c:	e8df f002 	tbb	[pc, r2]
 8009010:	3a2d2004 	.word	0x3a2d2004
 8009014:	523a      	.short	0x523a
 8009016:	5c          	.byte	0x5c
 8009017:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009018:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800901c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800901e:	f10d 0106 	add.w	r1, sp, #6
 8009022:	7c20      	ldrb	r0, [r4, #16]
 8009024:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8009026:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800902a:	b152      	cbz	r2, 8009042 <USBD_StdDevReq+0x8e>
 800902c:	88eb      	ldrh	r3, [r5, #6]
 800902e:	b143      	cbz	r3, 8009042 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8009030:	429a      	cmp	r2, r3
 8009032:	bf28      	it	cs
 8009034:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009036:	4601      	mov	r1, r0
 8009038:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800903a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800903e:	f000 f9c6 	bl	80093ce <USBD_CtlSendData>
    if (req->wLength == 0U)
 8009042:	88eb      	ldrh	r3, [r5, #6]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1d6      	bne.n	8008ff6 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8009048:	4620      	mov	r0, r4
 800904a:	f000 f9ec 	bl	8009426 <USBD_CtlSendStatus>
 800904e:	e7d2      	b.n	8008ff6 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009050:	7c02      	ldrb	r2, [r0, #16]
 8009052:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009056:	b932      	cbnz	r2, 8009066 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800905a:	f10d 0006 	add.w	r0, sp, #6
 800905e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009060:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009062:	7043      	strb	r3, [r0, #1]
 8009064:	e7df      	b.n	8009026 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	e7f7      	b.n	800905a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b05      	cmp	r3, #5
 800906e:	d809      	bhi.n	8009084 <USBD_StdDevReq+0xd0>
 8009070:	e8df f003 	tbb	[pc, r3]
 8009074:	14100c03 	.word	0x14100c03
 8009078:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800907a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800907e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1cc      	bne.n	800901e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8009084:	4620      	mov	r0, r4
 8009086:	f7ff ff89 	bl	8008f9c <USBD_CtlError.constprop.1>
 800908a:	e7b4      	b.n	8008ff6 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800908c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	e7f5      	b.n	8009080 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009094:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	e7f1      	b.n	8009080 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800909c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	e7ed      	b.n	8009080 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	e7e9      	b.n	8009080 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	e7e5      	b.n	8009080 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b4:	7c03      	ldrb	r3, [r0, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80090be:	f10d 0006 	add.w	r0, sp, #6
 80090c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c4:	4798      	blx	r3
 80090c6:	e7ae      	b.n	8009026 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c8:	7c03      	ldrb	r3, [r0, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1da      	bne.n	8009084 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80090d2:	f10d 0006 	add.w	r0, sp, #6
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090da:	2307      	movs	r3, #7
 80090dc:	e7c1      	b.n	8009062 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090de:	888b      	ldrh	r3, [r1, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1cf      	bne.n	8009084 <USBD_StdDevReq+0xd0>
 80090e4:	88cb      	ldrh	r3, [r1, #6]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1cc      	bne.n	8009084 <USBD_StdDevReq+0xd0>
 80090ea:	884d      	ldrh	r5, [r1, #2]
 80090ec:	2d7f      	cmp	r5, #127	; 0x7f
 80090ee:	d8c9      	bhi.n	8009084 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d0c5      	beq.n	8009084 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090f8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80090fa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090fe:	f000 fbbd 	bl	800987c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f98f 	bl	8009426 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8009108:	b11d      	cbz	r5, 8009112 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800910a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800910c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8009110:	e771      	b.n	8008ff6 <USBD_StdDevReq+0x42>
 8009112:	2301      	movs	r3, #1
 8009114:	e7fa      	b.n	800910c <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8009116:	7889      	ldrb	r1, [r1, #2]
 8009118:	4d37      	ldr	r5, [pc, #220]	; (80091f8 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800911a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800911c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800911e:	d8b1      	bhi.n	8009084 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8009120:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009124:	2b02      	cmp	r3, #2
 8009126:	d008      	beq.n	800913a <USBD_StdDevReq+0x186>
 8009128:	2b03      	cmp	r3, #3
 800912a:	d014      	beq.n	8009156 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 800912c:	f7ff ff36 	bl	8008f9c <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009130:	7829      	ldrb	r1, [r5, #0]
 8009132:	4620      	mov	r0, r4
 8009134:	f7ff fe20 	bl	8008d78 <USBD_ClrClassConfig>
 8009138:	e75d      	b.n	8008ff6 <USBD_StdDevReq+0x42>
        if (cfgidx)
 800913a:	2900      	cmp	r1, #0
 800913c:	d084      	beq.n	8009048 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800913e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009140:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8009142:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009144:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009148:	4620      	mov	r0, r4
 800914a:	f7ff fe0a 	bl	8008d62 <USBD_SetClassConfig>
 800914e:	2802      	cmp	r0, #2
 8009150:	f47f af7a 	bne.w	8009048 <USBD_StdDevReq+0x94>
 8009154:	e796      	b.n	8009084 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8009156:	b931      	cbnz	r1, 8009166 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009158:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800915a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800915c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8009160:	f7ff fe0a 	bl	8008d78 <USBD_ClrClassConfig>
 8009164:	e770      	b.n	8009048 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8009166:	6841      	ldr	r1, [r0, #4]
 8009168:	2901      	cmp	r1, #1
 800916a:	f43f af6d 	beq.w	8009048 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800916e:	b2c9      	uxtb	r1, r1
 8009170:	f7ff fe02 	bl	8008d78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009174:	7829      	ldrb	r1, [r5, #0]
 8009176:	6061      	str	r1, [r4, #4]
 8009178:	e7e6      	b.n	8009148 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800917a:	88ca      	ldrh	r2, [r1, #6]
 800917c:	2a01      	cmp	r2, #1
 800917e:	d181      	bne.n	8009084 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8009180:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009184:	2b00      	cmp	r3, #0
 8009186:	f43f af7d 	beq.w	8009084 <USBD_StdDevReq+0xd0>
 800918a:	2b02      	cmp	r3, #2
 800918c:	d904      	bls.n	8009198 <USBD_StdDevReq+0x1e4>
 800918e:	2b03      	cmp	r3, #3
 8009190:	f47f af78 	bne.w	8009084 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009194:	1d01      	adds	r1, r0, #4
 8009196:	e003      	b.n	80091a0 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8009198:	4601      	mov	r1, r0
 800919a:	2300      	movs	r3, #0
 800919c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f914 	bl	80093ce <USBD_CtlSendData>
 80091a6:	e726      	b.n	8008ff6 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80091a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80091ac:	3b01      	subs	r3, #1
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	f63f af68 	bhi.w	8009084 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80091b4:	88cb      	ldrh	r3, [r1, #6]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	f47f af64 	bne.w	8009084 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091bc:	2301      	movs	r3, #1
 80091be:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80091c0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80091c4:	b10b      	cbz	r3, 80091ca <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091c6:	2303      	movs	r3, #3
 80091c8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091ca:	2202      	movs	r2, #2
 80091cc:	f104 010c 	add.w	r1, r4, #12
 80091d0:	e7e6      	b.n	80091a0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091d2:	884b      	ldrh	r3, [r1, #2]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	f47f af0e 	bne.w	8008ff6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80091da:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80091de:	e733      	b.n	8009048 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80091e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80091e4:	3b01      	subs	r3, #1
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	f63f af4c 	bhi.w	8009084 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ec:	884b      	ldrh	r3, [r1, #2]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	f47f af01 	bne.w	8008ff6 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7f0      	b.n	80091da <USBD_StdDevReq+0x226>
 80091f8:	200017a0 	.word	0x200017a0

080091fc <USBD_StdItfReq>:
{
 80091fc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fe:	780b      	ldrb	r3, [r1, #0]
{
 8009200:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009206:	2b20      	cmp	r3, #32
{
 8009208:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920a:	d002      	beq.n	8009212 <USBD_StdItfReq+0x16>
 800920c:	2b40      	cmp	r3, #64	; 0x40
 800920e:	d000      	beq.n	8009212 <USBD_StdItfReq+0x16>
 8009210:	b9ab      	cbnz	r3, 800923e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8009212:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8009216:	3b01      	subs	r3, #1
 8009218:	2b02      	cmp	r3, #2
 800921a:	d810      	bhi.n	800923e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800921c:	792b      	ldrb	r3, [r5, #4]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d80d      	bhi.n	800923e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009222:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009226:	4629      	mov	r1, r5
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4620      	mov	r0, r4
 800922c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800922e:	88eb      	ldrh	r3, [r5, #6]
 8009230:	b91b      	cbnz	r3, 800923a <USBD_StdItfReq+0x3e>
 8009232:	b910      	cbnz	r0, 800923a <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8009234:	4620      	mov	r0, r4
 8009236:	f000 f8f6 	bl	8009426 <USBD_CtlSendStatus>
}
 800923a:	2000      	movs	r0, #0
 800923c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff feac 	bl	8008f9c <USBD_CtlError.constprop.1>
          break;
 8009244:	e7f9      	b.n	800923a <USBD_StdItfReq+0x3e>

08009246 <USBD_StdEPReq>:
{
 8009246:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009248:	780a      	ldrb	r2, [r1, #0]
{
 800924a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800924c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8009250:	2a20      	cmp	r2, #32
{
 8009252:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009254:	d014      	beq.n	8009280 <USBD_StdEPReq+0x3a>
 8009256:	2a40      	cmp	r2, #64	; 0x40
 8009258:	d012      	beq.n	8009280 <USBD_StdEPReq+0x3a>
 800925a:	b96a      	cbnz	r2, 8009278 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800925c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800925e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8009260:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8009262:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8009264:	d020      	beq.n	80092a8 <USBD_StdEPReq+0x62>
 8009266:	d336      	bcc.n	80092d6 <USBD_StdEPReq+0x90>
 8009268:	2a03      	cmp	r2, #3
 800926a:	d105      	bne.n	8009278 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800926c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009270:	2a02      	cmp	r2, #2
 8009272:	d027      	beq.n	80092c4 <USBD_StdEPReq+0x7e>
 8009274:	2a03      	cmp	r2, #3
 8009276:	d00b      	beq.n	8009290 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8009278:	4620      	mov	r0, r4
 800927a:	f7ff fe8f 	bl	8008f9c <USBD_CtlError.constprop.1>
              break;
 800927e:	e005      	b.n	800928c <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8009280:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8009284:	4619      	mov	r1, r3
 8009286:	6892      	ldr	r2, [r2, #8]
 8009288:	4620      	mov	r0, r4
 800928a:	4790      	blx	r2
}
 800928c:	2000      	movs	r0, #0
 800928e:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009290:	885a      	ldrh	r2, [r3, #2]
 8009292:	b92a      	cbnz	r2, 80092a0 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8009294:	064a      	lsls	r2, r1, #25
 8009296:	d003      	beq.n	80092a0 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	b90b      	cbnz	r3, 80092a0 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 800929c:	f000 fac2 	bl	8009824 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 f8c0 	bl	8009426 <USBD_CtlSendStatus>
              break;
 80092a6:	e7f1      	b.n	800928c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80092a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80092ac:	2a02      	cmp	r2, #2
 80092ae:	d009      	beq.n	80092c4 <USBD_StdEPReq+0x7e>
 80092b0:	2a03      	cmp	r2, #3
 80092b2:	d1e1      	bne.n	8009278 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092b4:	885b      	ldrh	r3, [r3, #2]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e8      	bne.n	800928c <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80092ba:	064d      	lsls	r5, r1, #25
 80092bc:	d0f0      	beq.n	80092a0 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80092be:	f000 fabf 	bl	8009840 <USBD_LL_ClearStallEP>
 80092c2:	e7ed      	b.n	80092a0 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092c4:	064b      	lsls	r3, r1, #25
 80092c6:	d0d7      	beq.n	8009278 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80092c8:	f000 faac 	bl	8009824 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 faa8 	bl	8009824 <USBD_LL_StallEP>
 80092d4:	e7da      	b.n	800928c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80092d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d018      	beq.n	8009310 <USBD_StdEPReq+0xca>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d1ca      	bne.n	8009278 <USBD_StdEPReq+0x32>
 80092e2:	2314      	movs	r3, #20
 80092e4:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80092e8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092ec:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80092f0:	d01f      	beq.n	8009332 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092f2:	6992      	ldr	r2, [r2, #24]
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d0bf      	beq.n	8009278 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80092fc:	fb05 3503 	mla	r5, r5, r3, r3
 8009300:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009302:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8009306:	d11f      	bne.n	8009348 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8009308:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800930a:	2202      	movs	r2, #2
 800930c:	4629      	mov	r1, r5
 800930e:	e00c      	b.n	800932a <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009310:	064a      	lsls	r2, r1, #25
 8009312:	d1b1      	bne.n	8009278 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009314:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8009316:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800931a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800931e:	bf4c      	ite	mi
 8009320:	f100 0114 	addmi.w	r1, r0, #20
 8009324:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8009328:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f84f 	bl	80093ce <USBD_CtlSendData>
              break;
 8009330:	e7ac      	b.n	800928c <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009332:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8009336:	2a00      	cmp	r2, #0
 8009338:	d09e      	beq.n	8009278 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800933a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800933e:	fb03 0505 	mla	r5, r3, r5, r0
 8009342:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8009346:	e7dc      	b.n	8009302 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fa87 	bl	800985c <USBD_LL_IsStallEP>
 800934e:	b108      	cbz	r0, 8009354 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8009350:	2301      	movs	r3, #1
 8009352:	e7d9      	b.n	8009308 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8009354:	6028      	str	r0, [r5, #0]
 8009356:	e7d8      	b.n	800930a <USBD_StdEPReq+0xc4>

08009358 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8009358:	780b      	ldrb	r3, [r1, #0]
 800935a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800935c:	784b      	ldrb	r3, [r1, #1]
 800935e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009360:	78ca      	ldrb	r2, [r1, #3]
 8009362:	788b      	ldrb	r3, [r1, #2]
 8009364:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009368:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800936a:	794a      	ldrb	r2, [r1, #5]
 800936c:	790b      	ldrb	r3, [r1, #4]
 800936e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009372:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009374:	79ca      	ldrb	r2, [r1, #7]
 8009376:	798b      	ldrb	r3, [r1, #6]
 8009378:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800937c:	80c3      	strh	r3, [r0, #6]
}
 800937e:	4770      	bx	lr

08009380 <USBD_CtlError>:
{
 8009380:	b510      	push	{r4, lr}
 8009382:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8009384:	2180      	movs	r1, #128	; 0x80
 8009386:	f000 fa4d 	bl	8009824 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800938a:	4620      	mov	r0, r4
}
 800938c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8009390:	2100      	movs	r1, #0
 8009392:	f000 ba47 	b.w	8009824 <USBD_LL_StallEP>

08009396 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009396:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8009398:	b188      	cbz	r0, 80093be <USBD_GetString+0x28>
 800939a:	4605      	mov	r5, r0
 800939c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800939e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2c00      	cmp	r4, #0
 80093a6:	d1f9      	bne.n	800939c <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093a8:	3301      	adds	r3, #1
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093ae:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093b0:	2303      	movs	r3, #3
 80093b2:	704b      	strb	r3, [r1, #1]
 80093b4:	2302      	movs	r3, #2
 80093b6:	3801      	subs	r0, #1
    while (*desc != '\0')
 80093b8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80093bc:	b905      	cbnz	r5, 80093c0 <USBD_GetString+0x2a>
}
 80093be:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	54cd      	strb	r5, [r1, r3]
 80093c4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80093c6:	3302      	adds	r3, #2
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	548c      	strb	r4, [r1, r2]
 80093cc:	e7f4      	b.n	80093b8 <USBD_GetString+0x22>

080093ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093ce:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093d0:	2202      	movs	r2, #2
{
 80093d2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093d4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80093d8:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	460a      	mov	r2, r1
 80093de:	2100      	movs	r1, #0
 80093e0:	f000 fa5a 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
}
 80093e4:	2000      	movs	r0, #0
 80093e6:	bd10      	pop	{r4, pc}

080093e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80093e8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ea:	4613      	mov	r3, r2
 80093ec:	460a      	mov	r2, r1
 80093ee:	2100      	movs	r1, #0
 80093f0:	f000 fa52 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
}
 80093f4:	2000      	movs	r0, #0
 80093f6:	bd08      	pop	{r3, pc}

080093f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093fa:	2203      	movs	r2, #3
{
 80093fc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093fe:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009402:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009406:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8009408:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800940c:	2100      	movs	r1, #0
 800940e:	f000 fa51 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009412:	2000      	movs	r0, #0
 8009414:	bd10      	pop	{r4, pc}

08009416 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009416:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009418:	4613      	mov	r3, r2
 800941a:	460a      	mov	r2, r1
 800941c:	2100      	movs	r1, #0
 800941e:	f000 fa49 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009422:	2000      	movs	r0, #0
 8009424:	bd08      	pop	{r3, pc}

08009426 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009426:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009428:	2304      	movs	r3, #4
 800942a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800942e:	2300      	movs	r3, #0
 8009430:	461a      	mov	r2, r3
 8009432:	4619      	mov	r1, r3
 8009434:	f000 fa30 	bl	8009898 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009438:	2000      	movs	r0, #0
 800943a:	bd08      	pop	{r3, pc}

0800943c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800943c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800943e:	2305      	movs	r3, #5
 8009440:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009444:	2300      	movs	r3, #0
 8009446:	461a      	mov	r2, r3
 8009448:	4619      	mov	r1, r3
 800944a:	f000 fa33 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800944e:	2000      	movs	r0, #0
 8009450:	bd08      	pop	{r3, pc}
	...

08009454 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009454:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009456:	2200      	movs	r2, #0
 8009458:	490e      	ldr	r1, [pc, #56]	; (8009494 <MX_USB_DEVICE_Init+0x40>)
 800945a:	480f      	ldr	r0, [pc, #60]	; (8009498 <MX_USB_DEVICE_Init+0x44>)
 800945c:	f7ff fc60 	bl	8008d20 <USBD_Init>
 8009460:	b108      	cbz	r0, 8009466 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8009462:	f7f8 ff45 	bl	80022f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009466:	490d      	ldr	r1, [pc, #52]	; (800949c <MX_USB_DEVICE_Init+0x48>)
 8009468:	480b      	ldr	r0, [pc, #44]	; (8009498 <MX_USB_DEVICE_Init+0x44>)
 800946a:	f7ff fc6e 	bl	8008d4a <USBD_RegisterClass>
 800946e:	b108      	cbz	r0, 8009474 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8009470:	f7f8 ff3e 	bl	80022f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009474:	490a      	ldr	r1, [pc, #40]	; (80094a0 <MX_USB_DEVICE_Init+0x4c>)
 8009476:	4808      	ldr	r0, [pc, #32]	; (8009498 <MX_USB_DEVICE_Init+0x44>)
 8009478:	f7ff fc11 	bl	8008c9e <USBD_CDC_RegisterInterface>
 800947c:	b108      	cbz	r0, 8009482 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800947e:	f7f8 ff37 	bl	80022f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009482:	4805      	ldr	r0, [pc, #20]	; (8009498 <MX_USB_DEVICE_Init+0x44>)
 8009484:	f7ff fc68 	bl	8008d58 <USBD_Start>
 8009488:	b118      	cbz	r0, 8009492 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800948e:	f7f8 bf2f 	b.w	80022f0 <Error_Handler>
}
 8009492:	bd08      	pop	{r3, pc}
 8009494:	20000164 	.word	0x20000164
 8009498:	2000205c 	.word	0x2000205c
 800949c:	20000044 	.word	0x20000044
 80094a0:	20000154 	.word	0x20000154

080094a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80094a4:	2000      	movs	r0, #0
 80094a6:	4770      	bx	lr

080094a8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80094a8:	2000      	movs	r0, #0
 80094aa:	4770      	bx	lr

080094ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  uint16_t in;

	  for(i = 0; i < *Len; ++i)
	  {
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <CDC_Receive_FS+0x40>)
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 80094b0:	4c0f      	ldr	r4, [pc, #60]	; (80094f0 <CDC_Receive_FS+0x44>)
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 80094b2:	681e      	ldr	r6, [r3, #0]
	  for(i = 0; i < *Len; ++i)
 80094b4:	2300      	movs	r3, #0
	    {
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 80094b6:	4f0f      	ldr	r7, [pc, #60]	; (80094f4 <CDC_Receive_FS+0x48>)
	  for(i = 0; i < *Len; ++i)
 80094b8:	680a      	ldr	r2, [r1, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d808      	bhi.n	80094d0 <CDC_Receive_FS+0x24>
	      usb_rxBufPtrIn = in;
	    }
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094be:	4601      	mov	r1, r0
 80094c0:	480d      	ldr	r0, [pc, #52]	; (80094f8 <CDC_Receive_FS+0x4c>)
 80094c2:	f7ff fbfb 	bl	8008cbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094c6:	480c      	ldr	r0, [pc, #48]	; (80094f8 <CDC_Receive_FS+0x4c>)
 80094c8:	f7ff fc17 	bl	8008cfa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80094cc:	2000      	movs	r0, #0
 80094ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 80094d0:	6825      	ldr	r5, [r4, #0]
 80094d2:	1c6a      	adds	r2, r5, #1
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 80094d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80094d8:	42b2      	cmp	r2, r6
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 80094da:	bf1e      	ittt	ne
 80094dc:	f810 c003 	ldrbne.w	ip, [r0, r3]
	      usb_rxBufPtrIn = in;
 80094e0:	6022      	strne	r2, [r4, #0]
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 80094e2:	f807 c005 	strbne.w	ip, [r7, r5]
	  for(i = 0; i < *Len; ++i)
 80094e6:	3301      	adds	r3, #1
 80094e8:	e7e6      	b.n	80094b8 <CDC_Receive_FS+0xc>
 80094ea:	bf00      	nop
 80094ec:	200017a8 	.word	0x200017a8
 80094f0:	200017a4 	.word	0x200017a4
 80094f4:	20003320 	.word	0x20003320
 80094f8:	2000205c 	.word	0x2000205c

080094fc <CDC_Init_FS>:
{
 80094fc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094fe:	4c07      	ldr	r4, [pc, #28]	; (800951c <CDC_Init_FS+0x20>)
 8009500:	2200      	movs	r2, #0
 8009502:	4907      	ldr	r1, [pc, #28]	; (8009520 <CDC_Init_FS+0x24>)
 8009504:	4620      	mov	r0, r4
 8009506:	f7ff fbd1 	bl	8008cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800950a:	4906      	ldr	r1, [pc, #24]	; (8009524 <CDC_Init_FS+0x28>)
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fbd5 	bl	8008cbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009512:	4620      	mov	r0, r4
 8009514:	f7ff fbf1 	bl	8008cfa <USBD_CDC_ReceivePacket>
}
 8009518:	2000      	movs	r0, #0
 800951a:	bd10      	pop	{r4, pc}
 800951c:	2000205c 	.word	0x2000205c
 8009520:	20002b20 	.word	0x20002b20
 8009524:	20002320 	.word	0x20002320

08009528 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009528:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800952a:	4c09      	ldr	r4, [pc, #36]	; (8009550 <CDC_Transmit_FS+0x28>)
{
 800952c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800952e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8009532:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009536:	b943      	cbnz	r3, 800954a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009538:	4601      	mov	r1, r0
 800953a:	4620      	mov	r0, r4
 800953c:	f7ff fbb6 	bl	8008cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009540:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8009542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009546:	f7ff bbbf 	b.w	8008cc8 <USBD_CDC_TransmitPacket>
}
 800954a:	2001      	movs	r0, #1
 800954c:	bd10      	pop	{r4, pc}
 800954e:	bf00      	nop
 8009550:	2000205c 	.word	0x2000205c

08009554 <vcp_read>:
}

int vcp_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if(usb_rxBufPtrIn == usb_rxBufPtrOut)
 8009554:	4a07      	ldr	r2, [pc, #28]	; (8009574 <vcp_read+0x20>)
 8009556:	4908      	ldr	r1, [pc, #32]	; (8009578 <vcp_read+0x24>)
 8009558:	6813      	ldr	r3, [r2, #0]
 800955a:	6809      	ldr	r1, [r1, #0]
 800955c:	4299      	cmp	r1, r3
  {
    return -1;
  }
  else
  {
    unsigned char ch = usb_rxBuffer[usb_rxBufPtrOut];
 800955e:	bf1f      	itttt	ne
 8009560:	4906      	ldrne	r1, [pc, #24]	; (800957c <vcp_read+0x28>)
 8009562:	5cc8      	ldrbne	r0, [r1, r3]
    usb_rxBufPtrOut = (uint16_t)(usb_rxBufPtrOut + 1) % USB_RX_DATA_SIZE;
 8009564:	3301      	addne	r3, #1
 8009566:	f3c3 030a 	ubfxne	r3, r3, #0, #11
 800956a:	bf14      	ite	ne
 800956c:	6013      	strne	r3, [r2, #0]
    return -1;
 800956e:	f04f 30ff 	moveq.w	r0, #4294967295
    return ch;
  }
}
 8009572:	4770      	bx	lr
 8009574:	200017a8 	.word	0x200017a8
 8009578:	200017a4 	.word	0x200017a4
 800957c:	20003320 	.word	0x20003320

08009580 <vcp_write>:

void vcp_write(uint8_t* Buf, uint16_t Len)
{
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4604      	mov	r4, r0
 8009584:	460d      	mov	r5, r1
  while(CDC_Transmit_FS(Buf, Len) != HAL_OK);
 8009586:	4629      	mov	r1, r5
 8009588:	4620      	mov	r0, r4
 800958a:	f7ff ffcd 	bl	8009528 <CDC_Transmit_FS>
 800958e:	2800      	cmp	r0, #0
 8009590:	d1f9      	bne.n	8009586 <vcp_write+0x6>
}
 8009592:	bd38      	pop	{r3, r4, r5, pc}

08009594 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009594:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009596:	4801      	ldr	r0, [pc, #4]	; (800959c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009598:	800b      	strh	r3, [r1, #0]
}
 800959a:	4770      	bx	lr
 800959c:	20000180 	.word	0x20000180

080095a0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095a0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80095a2:	4801      	ldr	r0, [pc, #4]	; (80095a8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80095a4:	800b      	strh	r3, [r1, #0]
}
 80095a6:	4770      	bx	lr
 80095a8:	20000194 	.word	0x20000194

080095ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095ac:	2300      	movs	r3, #0
 80095ae:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80095b0:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 80095b2:	0f05      	lsrs	r5, r0, #28
 80095b4:	b2ec      	uxtb	r4, r5
 80095b6:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80095b8:	bf94      	ite	ls
 80095ba:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095bc:	3437      	addhi	r4, #55	; 0x37
 80095be:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80095c2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80095c6:	3301      	adds	r3, #1
 80095c8:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80095ca:	b2dc      	uxtb	r4, r3
 80095cc:	42a2      	cmp	r2, r4
    value = value << 4;
 80095ce:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80095d2:	d8ee      	bhi.n	80095b2 <IntToUnicode+0x6>
  }
}
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095d8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80095d8:	231a      	movs	r3, #26
{
 80095da:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80095dc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <USBD_FS_SerialStrDescriptor+0x2c>)
 80095e0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095e2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80095e4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80095e6:	18c0      	adds	r0, r0, r3
 80095e8:	d00a      	beq.n	8009600 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ec:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095ee:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095f0:	4906      	ldr	r1, [pc, #24]	; (800960c <USBD_FS_SerialStrDescriptor+0x34>)
 80095f2:	f7ff ffdb 	bl	80095ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095f6:	2204      	movs	r2, #4
 80095f8:	4905      	ldr	r1, [pc, #20]	; (8009610 <USBD_FS_SerialStrDescriptor+0x38>)
 80095fa:	4620      	mov	r0, r4
 80095fc:	f7ff ffd6 	bl	80095ac <IntToUnicode>
}
 8009600:	4804      	ldr	r0, [pc, #16]	; (8009614 <USBD_FS_SerialStrDescriptor+0x3c>)
 8009602:	bd10      	pop	{r4, pc}
 8009604:	1ffff7e8 	.word	0x1ffff7e8
 8009608:	1ffff7ec 	.word	0x1ffff7ec
 800960c:	2000019a 	.word	0x2000019a
 8009610:	200001aa 	.word	0x200001aa
 8009614:	20000198 	.word	0x20000198

08009618 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009618:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800961a:	4c04      	ldr	r4, [pc, #16]	; (800962c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800961c:	460a      	mov	r2, r1
 800961e:	4804      	ldr	r0, [pc, #16]	; (8009630 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009620:	4621      	mov	r1, r4
 8009622:	f7ff feb8 	bl	8009396 <USBD_GetString>
}
 8009626:	4620      	mov	r0, r4
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	20003b20 	.word	0x20003b20
 8009630:	0800d665 	.word	0x0800d665

08009634 <USBD_FS_ProductStrDescriptor>:
{
 8009634:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009636:	4c04      	ldr	r4, [pc, #16]	; (8009648 <USBD_FS_ProductStrDescriptor+0x14>)
 8009638:	460a      	mov	r2, r1
 800963a:	4804      	ldr	r0, [pc, #16]	; (800964c <USBD_FS_ProductStrDescriptor+0x18>)
 800963c:	4621      	mov	r1, r4
 800963e:	f7ff feaa 	bl	8009396 <USBD_GetString>
}
 8009642:	4620      	mov	r0, r4
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	20003b20 	.word	0x20003b20
 800964c:	0800d678 	.word	0x0800d678

08009650 <USBD_FS_ConfigStrDescriptor>:
{
 8009650:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009652:	4c04      	ldr	r4, [pc, #16]	; (8009664 <USBD_FS_ConfigStrDescriptor+0x14>)
 8009654:	460a      	mov	r2, r1
 8009656:	4804      	ldr	r0, [pc, #16]	; (8009668 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009658:	4621      	mov	r1, r4
 800965a:	f7ff fe9c 	bl	8009396 <USBD_GetString>
}
 800965e:	4620      	mov	r0, r4
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop
 8009664:	20003b20 	.word	0x20003b20
 8009668:	0800d64c 	.word	0x0800d64c

0800966c <USBD_FS_InterfaceStrDescriptor>:
{
 800966c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800966e:	4c04      	ldr	r4, [pc, #16]	; (8009680 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8009670:	460a      	mov	r2, r1
 8009672:	4804      	ldr	r0, [pc, #16]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009674:	4621      	mov	r1, r4
 8009676:	f7ff fe8e 	bl	8009396 <USBD_GetString>
}
 800967a:	4620      	mov	r0, r4
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	20003b20 	.word	0x20003b20
 8009684:	0800d657 	.word	0x0800d657

08009688 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009688:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800968a:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <HAL_PCD_MspInit+0x3c>)
 800968c:	6802      	ldr	r2, [r0, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d115      	bne.n	80096be <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009692:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8009696:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009698:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800969a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800969e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80096a0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80096a2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80096a4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80096a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80096ae:	f7fc fe03 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80096b2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80096b4:	b003      	add	sp, #12
 80096b6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80096ba:	f7fc be31 	b.w	8006320 <HAL_NVIC_EnableIRQ>
}
 80096be:	b003      	add	sp, #12
 80096c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80096c4:	40005c00 	.word	0x40005c00

080096c8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096c8:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80096cc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096d0:	f7ff bb59 	b.w	8008d86 <USBD_LL_SetupStage>

080096d4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096d4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80096d8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80096dc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096e0:	f7ff bb7e 	b.w	8008de0 <USBD_LL_DataOutStage>

080096e4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096e4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80096e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ea:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096ee:	f7ff bbb1 	b.w	8008e54 <USBD_LL_DataInStage>

080096f2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096f2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80096f6:	f7ff bc45 	b.w	8008f84 <USBD_LL_SOF>

080096fa <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096fa:	6883      	ldr	r3, [r0, #8]
{ 
 80096fc:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096fe:	2b02      	cmp	r3, #2
{ 
 8009700:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009702:	d001      	beq.n	8009708 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8009704:	f7f8 fdf4 	bl	80022f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009708:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800970c:	2101      	movs	r1, #1
 800970e:	f7ff fc23 	bl	8008f58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009712:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8009716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800971a:	f7ff bbf6 	b.w	8008f0a <USBD_LL_Reset>
	...

08009720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009720:	b510      	push	{r4, lr}
 8009722:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009724:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009728:	f7ff fc19 	bl	8008f5e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800972c:	69a3      	ldr	r3, [r4, #24]
 800972e:	b123      	cbz	r3, 800973a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009730:	4a02      	ldr	r2, [pc, #8]	; (800973c <HAL_PCD_SuspendCallback+0x1c>)
 8009732:	6913      	ldr	r3, [r2, #16]
 8009734:	f043 0306 	orr.w	r3, r3, #6
 8009738:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800973a:	bd10      	pop	{r4, pc}
 800973c:	e000ed00 	.word	0xe000ed00

08009740 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009740:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009744:	f7ff bc14 	b.w	8008f70 <USBD_LL_Resume>

08009748 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009748:	2308      	movs	r3, #8
{
 800974a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800974c:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <USBD_LL_Init+0x7c>)
{
 800974e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8009750:	481d      	ldr	r0, [pc, #116]	; (80097c8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009752:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009756:	2302      	movs	r3, #2
 8009758:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800975a:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 800975c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8009760:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009764:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009768:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800976a:	f7fd fbdf 	bl	8006f2c <HAL_PCD_Init>
 800976e:	b108      	cbz	r0, 8009774 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8009770:	f7f8 fdbe 	bl	80022f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009774:	2200      	movs	r2, #0
 8009776:	2318      	movs	r3, #24
 8009778:	4611      	mov	r1, r2
 800977a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800977e:	f7fd ff84 	bl	800768a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009782:	2358      	movs	r3, #88	; 0x58
 8009784:	2200      	movs	r2, #0
 8009786:	2180      	movs	r1, #128	; 0x80
 8009788:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800978c:	f7fd ff7d 	bl	800768a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009790:	23c0      	movs	r3, #192	; 0xc0
 8009792:	2200      	movs	r2, #0
 8009794:	2181      	movs	r1, #129	; 0x81
 8009796:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800979a:	f7fd ff76 	bl	800768a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800979e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097a2:	2200      	movs	r2, #0
 80097a4:	2101      	movs	r1, #1
 80097a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80097aa:	f7fd ff6e 	bl	800768a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b2:	2200      	movs	r2, #0
 80097b4:	2182      	movs	r1, #130	; 0x82
 80097b6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80097ba:	f7fd ff66 	bl	800768a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80097be:	2000      	movs	r0, #0
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	bf00      	nop
 80097c4:	40005c00 	.word	0x40005c00
 80097c8:	20003d20 	.word	0x20003d20

080097cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80097ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097d2:	f7fd fc20 	bl	8007016 <HAL_PCD_Start>
 80097d6:	2803      	cmp	r0, #3
 80097d8:	bf96      	itet	ls
 80097da:	4b02      	ldrls	r3, [pc, #8]	; (80097e4 <USBD_LL_Start+0x18>)
 80097dc:	2002      	movhi	r0, #2
 80097de:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80097e0:	bd08      	pop	{r3, pc}
 80097e2:	bf00      	nop
 80097e4:	0800d684 	.word	0x0800d684

080097e8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097e8:	b510      	push	{r4, lr}
 80097ea:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80097f0:	4613      	mov	r3, r2
 80097f2:	4622      	mov	r2, r4
 80097f4:	f7fd fc3a 	bl	800706c <HAL_PCD_EP_Open>
 80097f8:	2803      	cmp	r0, #3
 80097fa:	bf96      	itet	ls
 80097fc:	4b01      	ldrls	r3, [pc, #4]	; (8009804 <USBD_LL_OpenEP+0x1c>)
 80097fe:	2002      	movhi	r0, #2
 8009800:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8009802:	bd10      	pop	{r4, pc}
 8009804:	0800d684 	.word	0x0800d684

08009808 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009808:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800980a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800980e:	f7fd fc60 	bl	80070d2 <HAL_PCD_EP_Close>
 8009812:	2803      	cmp	r0, #3
 8009814:	bf96      	itet	ls
 8009816:	4b02      	ldrls	r3, [pc, #8]	; (8009820 <USBD_LL_CloseEP+0x18>)
 8009818:	2002      	movhi	r0, #2
 800981a:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 800981c:	bd08      	pop	{r3, pc}
 800981e:	bf00      	nop
 8009820:	0800d684 	.word	0x0800d684

08009824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009824:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009826:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800982a:	f7fd fec7 	bl	80075bc <HAL_PCD_EP_SetStall>
 800982e:	2803      	cmp	r0, #3
 8009830:	bf96      	itet	ls
 8009832:	4b02      	ldrls	r3, [pc, #8]	; (800983c <USBD_LL_StallEP+0x18>)
 8009834:	2002      	movhi	r0, #2
 8009836:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009838:	bd08      	pop	{r3, pc}
 800983a:	bf00      	nop
 800983c:	0800d684 	.word	0x0800d684

08009840 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009840:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009842:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009846:	f7fd feed 	bl	8007624 <HAL_PCD_EP_ClrStall>
 800984a:	2803      	cmp	r0, #3
 800984c:	bf96      	itet	ls
 800984e:	4b02      	ldrls	r3, [pc, #8]	; (8009858 <USBD_LL_ClearStallEP+0x18>)
 8009850:	2002      	movhi	r0, #2
 8009852:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8009854:	bd08      	pop	{r3, pc}
 8009856:	bf00      	nop
 8009858:	0800d684 	.word	0x0800d684

0800985c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800985c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800985e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009862:	bf45      	ittet	mi
 8009864:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8009868:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800986c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009870:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009874:	bf58      	it	pl
 8009876:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 800987a:	4770      	bx	lr

0800987c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800987c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800987e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009882:	f7fd fbdf 	bl	8007044 <HAL_PCD_SetAddress>
 8009886:	2803      	cmp	r0, #3
 8009888:	bf96      	itet	ls
 800988a:	4b02      	ldrls	r3, [pc, #8]	; (8009894 <USBD_LL_SetUSBAddress+0x18>)
 800988c:	2002      	movhi	r0, #2
 800988e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009890:	bd08      	pop	{r3, pc}
 8009892:	bf00      	nop
 8009894:	0800d684 	.word	0x0800d684

08009898 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009898:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800989a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800989e:	f7fd fc60 	bl	8007162 <HAL_PCD_EP_Transmit>
 80098a2:	2803      	cmp	r0, #3
 80098a4:	bf96      	itet	ls
 80098a6:	4b02      	ldrls	r3, [pc, #8]	; (80098b0 <USBD_LL_Transmit+0x18>)
 80098a8:	2002      	movhi	r0, #2
 80098aa:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80098ac:	bd08      	pop	{r3, pc}
 80098ae:	bf00      	nop
 80098b0:	0800d684 	.word	0x0800d684

080098b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80098ba:	f7fd fc33 	bl	8007124 <HAL_PCD_EP_Receive>
 80098be:	2803      	cmp	r0, #3
 80098c0:	bf96      	itet	ls
 80098c2:	4b02      	ldrls	r3, [pc, #8]	; (80098cc <USBD_LL_PrepareReceive+0x18>)
 80098c4:	2002      	movhi	r0, #2
 80098c6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80098c8:	bd08      	pop	{r3, pc}
 80098ca:	bf00      	nop
 80098cc:	0800d684 	.word	0x0800d684

080098d0 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098d0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80098d4:	f7fd bc3e 	b.w	8007154 <HAL_PCD_EP_GetRxCount>

080098d8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80098d8:	4800      	ldr	r0, [pc, #0]	; (80098dc <USBD_static_malloc+0x4>)
 80098da:	4770      	bx	lr
 80098dc:	200017ac 	.word	0x200017ac

080098e0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80098e0:	4770      	bx	lr

080098e2 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80098e2:	4770      	bx	lr

080098e4 <__cxa_pure_virtual>:
 80098e4:	b508      	push	{r3, lr}
 80098e6:	f000 f80d 	bl	8009904 <_ZSt9terminatev>

080098ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 80098ea:	b508      	push	{r3, lr}
 80098ec:	4780      	blx	r0
 80098ee:	f000 f977 	bl	8009be0 <abort>
	...

080098f4 <_ZSt13get_terminatev>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <_ZSt13get_terminatev+0xc>)
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	f3bf 8f5b 	dmb	ish
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	200001b4 	.word	0x200001b4

08009904 <_ZSt9terminatev>:
 8009904:	b508      	push	{r3, lr}
 8009906:	f7ff fff5 	bl	80098f4 <_ZSt13get_terminatev>
 800990a:	f7ff ffee 	bl	80098ea <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009910 <fmod>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	b08b      	sub	sp, #44	; 0x2c
 8009916:	461f      	mov	r7, r3
 8009918:	4604      	mov	r4, r0
 800991a:	460d      	mov	r5, r1
 800991c:	4616      	mov	r6, r2
 800991e:	f000 f853 	bl	80099c8 <__ieee754_fmod>
 8009922:	4b27      	ldr	r3, [pc, #156]	; (80099c0 <fmod+0xb0>)
 8009924:	4680      	mov	r8, r0
 8009926:	f993 a000 	ldrsb.w	sl, [r3]
 800992a:	4689      	mov	r9, r1
 800992c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009930:	d030      	beq.n	8009994 <fmod+0x84>
 8009932:	4632      	mov	r2, r6
 8009934:	463b      	mov	r3, r7
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f7 f867 	bl	8000a0c <__aeabi_dcmpun>
 800993e:	bb48      	cbnz	r0, 8009994 <fmod+0x84>
 8009940:	4622      	mov	r2, r4
 8009942:	462b      	mov	r3, r5
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7f7 f860 	bl	8000a0c <__aeabi_dcmpun>
 800994c:	4683      	mov	fp, r0
 800994e:	bb08      	cbnz	r0, 8009994 <fmod+0x84>
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f7 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800995c:	b1d0      	cbz	r0, 8009994 <fmod+0x84>
 800995e:	2301      	movs	r3, #1
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <fmod+0xb4>)
 8009964:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800996e:	f8cd b020 	str.w	fp, [sp, #32]
 8009972:	f1ba 0f00 	cmp.w	sl, #0
 8009976:	d112      	bne.n	800999e <fmod+0x8e>
 8009978:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800997c:	4668      	mov	r0, sp
 800997e:	f000 f92d 	bl	8009bdc <matherr>
 8009982:	b1b8      	cbz	r0, 80099b4 <fmod+0xa4>
 8009984:	9b08      	ldr	r3, [sp, #32]
 8009986:	b11b      	cbz	r3, 8009990 <fmod+0x80>
 8009988:	f000 f938 	bl	8009bfc <__errno>
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	6003      	str	r3, [r0, #0]
 8009990:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009994:	4640      	mov	r0, r8
 8009996:	4649      	mov	r1, r9
 8009998:	b00b      	add	sp, #44	; 0x2c
 800999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999e:	2200      	movs	r2, #0
 80099a0:	2300      	movs	r3, #0
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	f7f6 fec1 	bl	800072c <__aeabi_ddiv>
 80099aa:	f1ba 0f02 	cmp.w	sl, #2
 80099ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099b2:	d1e3      	bne.n	800997c <fmod+0x6c>
 80099b4:	f000 f922 	bl	8009bfc <__errno>
 80099b8:	2321      	movs	r3, #33	; 0x21
 80099ba:	6003      	str	r3, [r0, #0]
 80099bc:	e7e2      	b.n	8009984 <fmod+0x74>
 80099be:	bf00      	nop
 80099c0:	200001b8 	.word	0x200001b8
 80099c4:	0800d688 	.word	0x0800d688

080099c8 <__ieee754_fmod>:
 80099c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80099d0:	4682      	mov	sl, r0
 80099d2:	ea54 0002 	orrs.w	r0, r4, r2
 80099d6:	461e      	mov	r6, r3
 80099d8:	4694      	mov	ip, r2
 80099da:	4696      	mov	lr, r2
 80099dc:	d00c      	beq.n	80099f8 <__ieee754_fmod+0x30>
 80099de:	4d78      	ldr	r5, [pc, #480]	; (8009bc0 <__ieee754_fmod+0x1f8>)
 80099e0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80099e4:	45a8      	cmp	r8, r5
 80099e6:	4689      	mov	r9, r1
 80099e8:	dc06      	bgt.n	80099f8 <__ieee754_fmod+0x30>
 80099ea:	4255      	negs	r5, r2
 80099ec:	4315      	orrs	r5, r2
 80099ee:	4f75      	ldr	r7, [pc, #468]	; (8009bc4 <__ieee754_fmod+0x1fc>)
 80099f0:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 80099f4:	42bd      	cmp	r5, r7
 80099f6:	d908      	bls.n	8009a0a <__ieee754_fmod+0x42>
 80099f8:	4650      	mov	r0, sl
 80099fa:	f7f6 fd6d 	bl	80004d8 <__aeabi_dmul>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	f7f6 fe93 	bl	800072c <__aeabi_ddiv>
 8009a06:	4682      	mov	sl, r0
 8009a08:	e00f      	b.n	8009a2a <__ieee754_fmod+0x62>
 8009a0a:	45a0      	cmp	r8, r4
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	4657      	mov	r7, sl
 8009a10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009a14:	dc0c      	bgt.n	8009a30 <__ieee754_fmod+0x68>
 8009a16:	db08      	blt.n	8009a2a <__ieee754_fmod+0x62>
 8009a18:	45e2      	cmp	sl, ip
 8009a1a:	d306      	bcc.n	8009a2a <__ieee754_fmod+0x62>
 8009a1c:	d108      	bne.n	8009a30 <__ieee754_fmod+0x68>
 8009a1e:	496a      	ldr	r1, [pc, #424]	; (8009bc8 <__ieee754_fmod+0x200>)
 8009a20:	0fed      	lsrs	r5, r5, #31
 8009a22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009a26:	e9d5 a100 	ldrd	sl, r1, [r5]
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a30:	4b66      	ldr	r3, [pc, #408]	; (8009bcc <__ieee754_fmod+0x204>)
 8009a32:	4598      	cmp	r8, r3
 8009a34:	dc48      	bgt.n	8009ac8 <__ieee754_fmod+0x100>
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	d13c      	bne.n	8009ab6 <__ieee754_fmod+0xee>
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4864      	ldr	r0, [pc, #400]	; (8009bd0 <__ieee754_fmod+0x208>)
 8009a40:	2900      	cmp	r1, #0
 8009a42:	dc35      	bgt.n	8009ab0 <__ieee754_fmod+0xe8>
 8009a44:	429c      	cmp	r4, r3
 8009a46:	dc4f      	bgt.n	8009ae8 <__ieee754_fmod+0x120>
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	d145      	bne.n	8009ad8 <__ieee754_fmod+0x110>
 8009a4c:	4661      	mov	r1, ip
 8009a4e:	4b60      	ldr	r3, [pc, #384]	; (8009bd0 <__ieee754_fmod+0x208>)
 8009a50:	2900      	cmp	r1, #0
 8009a52:	dc3e      	bgt.n	8009ad2 <__ieee754_fmod+0x10a>
 8009a54:	495f      	ldr	r1, [pc, #380]	; (8009bd4 <__ieee754_fmod+0x20c>)
 8009a56:	4288      	cmp	r0, r1
 8009a58:	db4a      	blt.n	8009af0 <__ieee754_fmod+0x128>
 8009a5a:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009a62:	4a5c      	ldr	r2, [pc, #368]	; (8009bd4 <__ieee754_fmod+0x20c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	db57      	blt.n	8009b18 <__ieee754_fmod+0x150>
 8009a68:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009a6c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009a70:	1ac0      	subs	r0, r0, r3
 8009a72:	1b8a      	subs	r2, r1, r6
 8009a74:	eba7 040e 	sub.w	r4, r7, lr
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d163      	bne.n	8009b44 <__ieee754_fmod+0x17c>
 8009a7c:	4577      	cmp	r7, lr
 8009a7e:	bf38      	it	cc
 8009a80:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	bfbc      	itt	lt
 8009a88:	463c      	movlt	r4, r7
 8009a8a:	460a      	movlt	r2, r1
 8009a8c:	ea52 0104 	orrs.w	r1, r2, r4
 8009a90:	d0c5      	beq.n	8009a1e <__ieee754_fmod+0x56>
 8009a92:	494e      	ldr	r1, [pc, #312]	; (8009bcc <__ieee754_fmod+0x204>)
 8009a94:	428a      	cmp	r2, r1
 8009a96:	dd6a      	ble.n	8009b6e <__ieee754_fmod+0x1a6>
 8009a98:	494e      	ldr	r1, [pc, #312]	; (8009bd4 <__ieee754_fmod+0x20c>)
 8009a9a:	428b      	cmp	r3, r1
 8009a9c:	db6d      	blt.n	8009b7a <__ieee754_fmod+0x1b2>
 8009a9e:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009aa2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009aa6:	4315      	orrs	r5, r2
 8009aa8:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8009aac:	4620      	mov	r0, r4
 8009aae:	e7aa      	b.n	8009a06 <__ieee754_fmod+0x3e>
 8009ab0:	3801      	subs	r0, #1
 8009ab2:	0049      	lsls	r1, r1, #1
 8009ab4:	e7c4      	b.n	8009a40 <__ieee754_fmod+0x78>
 8009ab6:	4847      	ldr	r0, [pc, #284]	; (8009bd4 <__ieee754_fmod+0x20c>)
 8009ab8:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009abc:	0049      	lsls	r1, r1, #1
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	f100 30ff 	add.w	r0, r0, #4294967295
 8009ac4:	dcfa      	bgt.n	8009abc <__ieee754_fmod+0xf4>
 8009ac6:	e7bd      	b.n	8009a44 <__ieee754_fmod+0x7c>
 8009ac8:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009acc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009ad0:	e7b8      	b.n	8009a44 <__ieee754_fmod+0x7c>
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	0049      	lsls	r1, r1, #1
 8009ad6:	e7bb      	b.n	8009a50 <__ieee754_fmod+0x88>
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	; (8009bd4 <__ieee754_fmod+0x20c>)
 8009ada:	02e1      	lsls	r1, r4, #11
 8009adc:	0049      	lsls	r1, r1, #1
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ae4:	dcfa      	bgt.n	8009adc <__ieee754_fmod+0x114>
 8009ae6:	e7b5      	b.n	8009a54 <__ieee754_fmod+0x8c>
 8009ae8:	1523      	asrs	r3, r4, #20
 8009aea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aee:	e7b1      	b.n	8009a54 <__ieee754_fmod+0x8c>
 8009af0:	1a0f      	subs	r7, r1, r0
 8009af2:	2f1f      	cmp	r7, #31
 8009af4:	dc0a      	bgt.n	8009b0c <__ieee754_fmod+0x144>
 8009af6:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009afa:	fa08 f807 	lsl.w	r8, r8, r7
 8009afe:	fa22 f101 	lsr.w	r1, r2, r1
 8009b02:	ea41 0108 	orr.w	r1, r1, r8
 8009b06:	fa02 f707 	lsl.w	r7, r2, r7
 8009b0a:	e7aa      	b.n	8009a62 <__ieee754_fmod+0x9a>
 8009b0c:	4932      	ldr	r1, [pc, #200]	; (8009bd8 <__ieee754_fmod+0x210>)
 8009b0e:	2700      	movs	r7, #0
 8009b10:	1a09      	subs	r1, r1, r0
 8009b12:	fa02 f101 	lsl.w	r1, r2, r1
 8009b16:	e7a4      	b.n	8009a62 <__ieee754_fmod+0x9a>
 8009b18:	eba2 0e03 	sub.w	lr, r2, r3
 8009b1c:	f1be 0f1f 	cmp.w	lr, #31
 8009b20:	dc09      	bgt.n	8009b36 <__ieee754_fmod+0x16e>
 8009b22:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009b26:	fa04 f40e 	lsl.w	r4, r4, lr
 8009b2a:	fa2c f606 	lsr.w	r6, ip, r6
 8009b2e:	4326      	orrs	r6, r4
 8009b30:	fa0c fe0e 	lsl.w	lr, ip, lr
 8009b34:	e79c      	b.n	8009a70 <__ieee754_fmod+0xa8>
 8009b36:	4e28      	ldr	r6, [pc, #160]	; (8009bd8 <__ieee754_fmod+0x210>)
 8009b38:	f04f 0e00 	mov.w	lr, #0
 8009b3c:	1af6      	subs	r6, r6, r3
 8009b3e:	fa0c f606 	lsl.w	r6, ip, r6
 8009b42:	e795      	b.n	8009a70 <__ieee754_fmod+0xa8>
 8009b44:	4577      	cmp	r7, lr
 8009b46:	bf38      	it	cc
 8009b48:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	da05      	bge.n	8009b5c <__ieee754_fmod+0x194>
 8009b50:	0ffa      	lsrs	r2, r7, #31
 8009b52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009b56:	007f      	lsls	r7, r7, #1
 8009b58:	3801      	subs	r0, #1
 8009b5a:	e78a      	b.n	8009a72 <__ieee754_fmod+0xaa>
 8009b5c:	ea52 0104 	orrs.w	r1, r2, r4
 8009b60:	f43f af5d 	beq.w	8009a1e <__ieee754_fmod+0x56>
 8009b64:	0fe1      	lsrs	r1, r4, #31
 8009b66:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009b6a:	0067      	lsls	r7, r4, #1
 8009b6c:	e7f4      	b.n	8009b58 <__ieee754_fmod+0x190>
 8009b6e:	0fe0      	lsrs	r0, r4, #31
 8009b70:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009b74:	0064      	lsls	r4, r4, #1
 8009b76:	3b01      	subs	r3, #1
 8009b78:	e78c      	b.n	8009a94 <__ieee754_fmod+0xcc>
 8009b7a:	1ac9      	subs	r1, r1, r3
 8009b7c:	2914      	cmp	r1, #20
 8009b7e:	dc0a      	bgt.n	8009b96 <__ieee754_fmod+0x1ce>
 8009b80:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	40cc      	lsrs	r4, r1
 8009b8a:	4323      	orrs	r3, r4
 8009b8c:	410a      	asrs	r2, r1
 8009b8e:	ea42 0105 	orr.w	r1, r2, r5
 8009b92:	4618      	mov	r0, r3
 8009b94:	e737      	b.n	8009a06 <__ieee754_fmod+0x3e>
 8009b96:	291f      	cmp	r1, #31
 8009b98:	dc07      	bgt.n	8009baa <__ieee754_fmod+0x1e2>
 8009b9a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009b9e:	40cc      	lsrs	r4, r1
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	4323      	orrs	r3, r4
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	e7f1      	b.n	8009b8e <__ieee754_fmod+0x1c6>
 8009baa:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009bae:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009bb2:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009bb6:	33e2      	adds	r3, #226	; 0xe2
 8009bb8:	fa42 f303 	asr.w	r3, r2, r3
 8009bbc:	e7f3      	b.n	8009ba6 <__ieee754_fmod+0x1de>
 8009bbe:	bf00      	nop
 8009bc0:	7fefffff 	.word	0x7fefffff
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	0800d690 	.word	0x0800d690
 8009bcc:	000fffff 	.word	0x000fffff
 8009bd0:	fffffbed 	.word	0xfffffbed
 8009bd4:	fffffc02 	.word	0xfffffc02
 8009bd8:	fffffbe2 	.word	0xfffffbe2

08009bdc <matherr>:
 8009bdc:	2000      	movs	r0, #0
 8009bde:	4770      	bx	lr

08009be0 <abort>:
 8009be0:	b508      	push	{r3, lr}
 8009be2:	2006      	movs	r0, #6
 8009be4:	f000 f886 	bl	8009cf4 <raise>
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7f8 fe45 	bl	8002878 <_exit>

08009bee <atof>:
 8009bee:	2100      	movs	r1, #0
 8009bf0:	f000 bf06 	b.w	800aa00 <strtod>

08009bf4 <atoi>:
 8009bf4:	220a      	movs	r2, #10
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	f000 bfa2 	b.w	800ab40 <strtol>

08009bfc <__errno>:
 8009bfc:	4b01      	ldr	r3, [pc, #4]	; (8009c04 <__errno+0x8>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	200001bc 	.word	0x200001bc

08009c08 <__libc_init_array>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	4e0c      	ldr	r6, [pc, #48]	; (8009c40 <__libc_init_array+0x38>)
 8009c0e:	4c0d      	ldr	r4, [pc, #52]	; (8009c44 <__libc_init_array+0x3c>)
 8009c10:	1ba4      	subs	r4, r4, r6
 8009c12:	10a4      	asrs	r4, r4, #2
 8009c14:	42a5      	cmp	r5, r4
 8009c16:	d109      	bne.n	8009c2c <__libc_init_array+0x24>
 8009c18:	f002 fc10 	bl	800c43c <_init>
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	4e0a      	ldr	r6, [pc, #40]	; (8009c48 <__libc_init_array+0x40>)
 8009c20:	4c0a      	ldr	r4, [pc, #40]	; (8009c4c <__libc_init_array+0x44>)
 8009c22:	1ba4      	subs	r4, r4, r6
 8009c24:	10a4      	asrs	r4, r4, #2
 8009c26:	42a5      	cmp	r5, r4
 8009c28:	d105      	bne.n	8009c36 <__libc_init_array+0x2e>
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c30:	4798      	blx	r3
 8009c32:	3501      	adds	r5, #1
 8009c34:	e7ee      	b.n	8009c14 <__libc_init_array+0xc>
 8009c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c3a:	4798      	blx	r3
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	e7f2      	b.n	8009c26 <__libc_init_array+0x1e>
 8009c40:	0800d98c 	.word	0x0800d98c
 8009c44:	0800d98c 	.word	0x0800d98c
 8009c48:	0800d98c 	.word	0x0800d98c
 8009c4c:	0800d994 	.word	0x0800d994

08009c50 <memcmp>:
 8009c50:	b530      	push	{r4, r5, lr}
 8009c52:	2400      	movs	r4, #0
 8009c54:	42a2      	cmp	r2, r4
 8009c56:	d101      	bne.n	8009c5c <memcmp+0xc>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e007      	b.n	8009c6c <memcmp+0x1c>
 8009c5c:	5d03      	ldrb	r3, [r0, r4]
 8009c5e:	3401      	adds	r4, #1
 8009c60:	190d      	adds	r5, r1, r4
 8009c62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	d0f4      	beq.n	8009c54 <memcmp+0x4>
 8009c6a:	1b58      	subs	r0, r3, r5
 8009c6c:	bd30      	pop	{r4, r5, pc}

08009c6e <memcpy>:
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	1e43      	subs	r3, r0, #1
 8009c72:	440a      	add	r2, r1
 8009c74:	4291      	cmp	r1, r2
 8009c76:	d100      	bne.n	8009c7a <memcpy+0xc>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c82:	e7f7      	b.n	8009c74 <memcpy+0x6>

08009c84 <memset>:
 8009c84:	4603      	mov	r3, r0
 8009c86:	4402      	add	r2, r0
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d100      	bne.n	8009c8e <memset+0xa>
 8009c8c:	4770      	bx	lr
 8009c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c92:	e7f9      	b.n	8009c88 <memset+0x4>

08009c94 <realloc>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	; (8009ca0 <realloc+0xc>)
 8009c96:	460a      	mov	r2, r1
 8009c98:	4601      	mov	r1, r0
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	f001 bf14 	b.w	800bac8 <_realloc_r>
 8009ca0:	200001bc 	.word	0x200001bc

08009ca4 <_raise_r>:
 8009ca4:	291f      	cmp	r1, #31
 8009ca6:	b538      	push	{r3, r4, r5, lr}
 8009ca8:	4604      	mov	r4, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	d904      	bls.n	8009cb8 <_raise_r+0x14>
 8009cae:	2316      	movs	r3, #22
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cba:	b112      	cbz	r2, 8009cc2 <_raise_r+0x1e>
 8009cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc0:	b94b      	cbnz	r3, 8009cd6 <_raise_r+0x32>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f830 	bl	8009d28 <_getpid_r>
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cd2:	f000 b817 	b.w	8009d04 <_kill_r>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d00a      	beq.n	8009cf0 <_raise_r+0x4c>
 8009cda:	1c59      	adds	r1, r3, #1
 8009cdc:	d103      	bne.n	8009ce6 <_raise_r+0x42>
 8009cde:	2316      	movs	r3, #22
 8009ce0:	6003      	str	r3, [r0, #0]
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e7e7      	b.n	8009cb6 <_raise_r+0x12>
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cee:	4798      	blx	r3
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	e7e0      	b.n	8009cb6 <_raise_r+0x12>

08009cf4 <raise>:
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <raise+0xc>)
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	f7ff bfd3 	b.w	8009ca4 <_raise_r>
 8009cfe:	bf00      	nop
 8009d00:	200001bc 	.word	0x200001bc

08009d04 <_kill_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	2300      	movs	r3, #0
 8009d08:	4c06      	ldr	r4, [pc, #24]	; (8009d24 <_kill_r+0x20>)
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	f7f8 fda9 	bl	8002868 <_kill>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d102      	bne.n	8009d20 <_kill_r+0x1c>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	b103      	cbz	r3, 8009d20 <_kill_r+0x1c>
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	bf00      	nop
 8009d24:	20003f8c 	.word	0x20003f8c

08009d28 <_getpid_r>:
 8009d28:	f7f8 bd9c 	b.w	8002864 <_getpid>

08009d2c <siscanf>:
 8009d2c:	b40e      	push	{r1, r2, r3}
 8009d2e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009d32:	b530      	push	{r4, r5, lr}
 8009d34:	b09c      	sub	sp, #112	; 0x70
 8009d36:	ac1f      	add	r4, sp, #124	; 0x7c
 8009d38:	f854 5b04 	ldr.w	r5, [r4], #4
 8009d3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009d40:	9002      	str	r0, [sp, #8]
 8009d42:	9006      	str	r0, [sp, #24]
 8009d44:	f7f6 fa04 	bl	8000150 <strlen>
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <siscanf+0x4c>)
 8009d4a:	9003      	str	r0, [sp, #12]
 8009d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d4e:	2300      	movs	r3, #0
 8009d50:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d52:	9314      	str	r3, [sp, #80]	; 0x50
 8009d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d58:	9007      	str	r0, [sp, #28]
 8009d5a:	4808      	ldr	r0, [pc, #32]	; (8009d7c <siscanf+0x50>)
 8009d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d60:	462a      	mov	r2, r5
 8009d62:	4623      	mov	r3, r4
 8009d64:	a902      	add	r1, sp, #8
 8009d66:	6800      	ldr	r0, [r0, #0]
 8009d68:	9401      	str	r4, [sp, #4]
 8009d6a:	f001 ff2d 	bl	800bbc8 <__ssvfiscanf_r>
 8009d6e:	b01c      	add	sp, #112	; 0x70
 8009d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d74:	b003      	add	sp, #12
 8009d76:	4770      	bx	lr
 8009d78:	08009d81 	.word	0x08009d81
 8009d7c:	200001bc 	.word	0x200001bc

08009d80 <__seofread>:
 8009d80:	2000      	movs	r0, #0
 8009d82:	4770      	bx	lr

08009d84 <strstr>:
 8009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d86:	7803      	ldrb	r3, [r0, #0]
 8009d88:	b17b      	cbz	r3, 8009daa <strstr+0x26>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	7823      	ldrb	r3, [r4, #0]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	1c66      	adds	r6, r4, #1
 8009d92:	b17b      	cbz	r3, 8009db4 <strstr+0x30>
 8009d94:	1e4a      	subs	r2, r1, #1
 8009d96:	1e63      	subs	r3, r4, #1
 8009d98:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009d9c:	b14d      	cbz	r5, 8009db2 <strstr+0x2e>
 8009d9e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009da2:	4634      	mov	r4, r6
 8009da4:	42af      	cmp	r7, r5
 8009da6:	d0f7      	beq.n	8009d98 <strstr+0x14>
 8009da8:	e7f0      	b.n	8009d8c <strstr+0x8>
 8009daa:	780b      	ldrb	r3, [r1, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bf18      	it	ne
 8009db0:	2000      	movne	r0, #0
 8009db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db4:	4618      	mov	r0, r3
 8009db6:	e7fc      	b.n	8009db2 <strstr+0x2e>

08009db8 <sulp>:
 8009db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	4690      	mov	r8, r2
 8009dc0:	f001 fcec 	bl	800b79c <__ulp>
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	f1b8 0f00 	cmp.w	r8, #0
 8009dcc:	d011      	beq.n	8009df2 <sulp+0x3a>
 8009dce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009dd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dd0b      	ble.n	8009df2 <sulp+0x3a>
 8009dda:	2400      	movs	r4, #0
 8009ddc:	051b      	lsls	r3, r3, #20
 8009dde:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009de2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009de6:	4622      	mov	r2, r4
 8009de8:	462b      	mov	r3, r5
 8009dea:	f7f6 fb75 	bl	80004d8 <__aeabi_dmul>
 8009dee:	4604      	mov	r4, r0
 8009df0:	460d      	mov	r5, r1
 8009df2:	4620      	mov	r0, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfa:	0000      	movs	r0, r0
 8009dfc:	0000      	movs	r0, r0
	...

08009e00 <_strtod_l>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	461f      	mov	r7, r3
 8009e06:	2300      	movs	r3, #0
 8009e08:	b0a1      	sub	sp, #132	; 0x84
 8009e0a:	4683      	mov	fp, r0
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	460e      	mov	r6, r1
 8009e10:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e12:	931c      	str	r3, [sp, #112]	; 0x70
 8009e14:	f001 f9e4 	bl	800b1e0 <__localeconv_l>
 8009e18:	4680      	mov	r8, r0
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	f7f6 f998 	bl	8000150 <strlen>
 8009e20:	f04f 0900 	mov.w	r9, #0
 8009e24:	4604      	mov	r4, r0
 8009e26:	f04f 0a00 	mov.w	sl, #0
 8009e2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e2e:	781a      	ldrb	r2, [r3, #0]
 8009e30:	2a0d      	cmp	r2, #13
 8009e32:	d832      	bhi.n	8009e9a <_strtod_l+0x9a>
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d236      	bcs.n	8009ea6 <_strtod_l+0xa6>
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d03e      	beq.n	8009eba <_strtod_l+0xba>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009e40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009e42:	782b      	ldrb	r3, [r5, #0]
 8009e44:	2b30      	cmp	r3, #48	; 0x30
 8009e46:	f040 80ac 	bne.w	8009fa2 <_strtod_l+0x1a2>
 8009e4a:	786b      	ldrb	r3, [r5, #1]
 8009e4c:	2b58      	cmp	r3, #88	; 0x58
 8009e4e:	d001      	beq.n	8009e54 <_strtod_l+0x54>
 8009e50:	2b78      	cmp	r3, #120	; 0x78
 8009e52:	d167      	bne.n	8009f24 <_strtod_l+0x124>
 8009e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e56:	9702      	str	r7, [sp, #8]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	ab1c      	add	r3, sp, #112	; 0x70
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	4a89      	ldr	r2, [pc, #548]	; (800a084 <_strtod_l+0x284>)
 8009e60:	ab1d      	add	r3, sp, #116	; 0x74
 8009e62:	a91b      	add	r1, sp, #108	; 0x6c
 8009e64:	4658      	mov	r0, fp
 8009e66:	f000 fed1 	bl	800ac0c <__gethex>
 8009e6a:	f010 0407 	ands.w	r4, r0, #7
 8009e6e:	4606      	mov	r6, r0
 8009e70:	d005      	beq.n	8009e7e <_strtod_l+0x7e>
 8009e72:	2c06      	cmp	r4, #6
 8009e74:	d12b      	bne.n	8009ece <_strtod_l+0xce>
 8009e76:	2300      	movs	r3, #0
 8009e78:	3501      	adds	r5, #1
 8009e7a:	951b      	str	r5, [sp, #108]	; 0x6c
 8009e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f040 85a6 	bne.w	800a9d2 <_strtod_l+0xbd2>
 8009e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e88:	b1e3      	cbz	r3, 8009ec4 <_strtod_l+0xc4>
 8009e8a:	464a      	mov	r2, r9
 8009e8c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009e90:	4610      	mov	r0, r2
 8009e92:	4619      	mov	r1, r3
 8009e94:	b021      	add	sp, #132	; 0x84
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	2a2b      	cmp	r2, #43	; 0x2b
 8009e9c:	d015      	beq.n	8009eca <_strtod_l+0xca>
 8009e9e:	2a2d      	cmp	r2, #45	; 0x2d
 8009ea0:	d004      	beq.n	8009eac <_strtod_l+0xac>
 8009ea2:	2a20      	cmp	r2, #32
 8009ea4:	d1ca      	bne.n	8009e3c <_strtod_l+0x3c>
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009eaa:	e7bf      	b.n	8009e2c <_strtod_l+0x2c>
 8009eac:	2201      	movs	r2, #1
 8009eae:	920d      	str	r2, [sp, #52]	; 0x34
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1c2      	bne.n	8009e40 <_strtod_l+0x40>
 8009eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ebc:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 8585 	bne.w	800a9ce <_strtod_l+0xbce>
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	4653      	mov	r3, sl
 8009ec8:	e7e2      	b.n	8009e90 <_strtod_l+0x90>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	e7ef      	b.n	8009eae <_strtod_l+0xae>
 8009ece:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ed0:	b13a      	cbz	r2, 8009ee2 <_strtod_l+0xe2>
 8009ed2:	2135      	movs	r1, #53	; 0x35
 8009ed4:	a81e      	add	r0, sp, #120	; 0x78
 8009ed6:	f001 fd54 	bl	800b982 <__copybits>
 8009eda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009edc:	4658      	mov	r0, fp
 8009ede:	f001 f9c7 	bl	800b270 <_Bfree>
 8009ee2:	3c01      	subs	r4, #1
 8009ee4:	2c04      	cmp	r4, #4
 8009ee6:	d806      	bhi.n	8009ef6 <_strtod_l+0xf6>
 8009ee8:	e8df f004 	tbb	[pc, r4]
 8009eec:	1714030a 	.word	0x1714030a
 8009ef0:	0a          	.byte	0x0a
 8009ef1:	00          	.byte	0x00
 8009ef2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009ef6:	0731      	lsls	r1, r6, #28
 8009ef8:	d5c1      	bpl.n	8009e7e <_strtod_l+0x7e>
 8009efa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009efe:	e7be      	b.n	8009e7e <_strtod_l+0x7e>
 8009f00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f02:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009f06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f0e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009f12:	e7f0      	b.n	8009ef6 <_strtod_l+0xf6>
 8009f14:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a088 <_strtod_l+0x288>
 8009f18:	e7ed      	b.n	8009ef6 <_strtod_l+0xf6>
 8009f1a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009f1e:	f04f 39ff 	mov.w	r9, #4294967295
 8009f22:	e7e8      	b.n	8009ef6 <_strtod_l+0xf6>
 8009f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b30      	cmp	r3, #48	; 0x30
 8009f2e:	d0f9      	beq.n	8009f24 <_strtod_l+0x124>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0a4      	beq.n	8009e7e <_strtod_l+0x7e>
 8009f34:	2301      	movs	r3, #1
 8009f36:	2500      	movs	r5, #0
 8009f38:	220a      	movs	r2, #10
 8009f3a:	9307      	str	r3, [sp, #28]
 8009f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f3e:	9506      	str	r5, [sp, #24]
 8009f40:	9308      	str	r3, [sp, #32]
 8009f42:	9504      	str	r5, [sp, #16]
 8009f44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009f46:	7807      	ldrb	r7, [r0, #0]
 8009f48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009f4c:	b2d9      	uxtb	r1, r3
 8009f4e:	2909      	cmp	r1, #9
 8009f50:	d929      	bls.n	8009fa6 <_strtod_l+0x1a6>
 8009f52:	4622      	mov	r2, r4
 8009f54:	f8d8 1000 	ldr.w	r1, [r8]
 8009f58:	f002 f91f 	bl	800c19a <strncmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d031      	beq.n	8009fc4 <_strtod_l+0x1c4>
 8009f60:	2000      	movs	r0, #0
 8009f62:	463b      	mov	r3, r7
 8009f64:	4602      	mov	r2, r0
 8009f66:	9c04      	ldr	r4, [sp, #16]
 8009f68:	9005      	str	r0, [sp, #20]
 8009f6a:	2b65      	cmp	r3, #101	; 0x65
 8009f6c:	d001      	beq.n	8009f72 <_strtod_l+0x172>
 8009f6e:	2b45      	cmp	r3, #69	; 0x45
 8009f70:	d114      	bne.n	8009f9c <_strtod_l+0x19c>
 8009f72:	b924      	cbnz	r4, 8009f7e <_strtod_l+0x17e>
 8009f74:	b910      	cbnz	r0, 8009f7c <_strtod_l+0x17c>
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d09e      	beq.n	8009eba <_strtod_l+0xba>
 8009f7c:	2400      	movs	r4, #0
 8009f7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009f80:	1c73      	adds	r3, r6, #1
 8009f82:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f84:	7873      	ldrb	r3, [r6, #1]
 8009f86:	2b2b      	cmp	r3, #43	; 0x2b
 8009f88:	d078      	beq.n	800a07c <_strtod_l+0x27c>
 8009f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8009f8c:	d070      	beq.n	800a070 <_strtod_l+0x270>
 8009f8e:	f04f 0c00 	mov.w	ip, #0
 8009f92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009f96:	2f09      	cmp	r7, #9
 8009f98:	d97c      	bls.n	800a094 <_strtod_l+0x294>
 8009f9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009f9c:	f04f 0e00 	mov.w	lr, #0
 8009fa0:	e09a      	b.n	800a0d8 <_strtod_l+0x2d8>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e7c7      	b.n	8009f36 <_strtod_l+0x136>
 8009fa6:	9904      	ldr	r1, [sp, #16]
 8009fa8:	3001      	adds	r0, #1
 8009faa:	2908      	cmp	r1, #8
 8009fac:	bfd7      	itett	le
 8009fae:	9906      	ldrle	r1, [sp, #24]
 8009fb0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fb8:	9306      	strle	r3, [sp, #24]
 8009fba:	9b04      	ldr	r3, [sp, #16]
 8009fbc:	901b      	str	r0, [sp, #108]	; 0x6c
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	e7bf      	b.n	8009f44 <_strtod_l+0x144>
 8009fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fc6:	191a      	adds	r2, r3, r4
 8009fc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009fca:	9a04      	ldr	r2, [sp, #16]
 8009fcc:	5d1b      	ldrb	r3, [r3, r4]
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	d037      	beq.n	800a042 <_strtod_l+0x242>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	9c04      	ldr	r4, [sp, #16]
 8009fd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009fda:	2909      	cmp	r1, #9
 8009fdc:	d913      	bls.n	800a006 <_strtod_l+0x206>
 8009fde:	2101      	movs	r1, #1
 8009fe0:	9105      	str	r1, [sp, #20]
 8009fe2:	e7c2      	b.n	8009f6a <_strtod_l+0x16a>
 8009fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	921b      	str	r2, [sp, #108]	; 0x6c
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	2b30      	cmp	r3, #48	; 0x30
 8009ff0:	d0f8      	beq.n	8009fe4 <_strtod_l+0x1e4>
 8009ff2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009ff6:	2a08      	cmp	r2, #8
 8009ff8:	f200 84f0 	bhi.w	800a9dc <_strtod_l+0xbdc>
 8009ffc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009ffe:	9208      	str	r2, [sp, #32]
 800a000:	4602      	mov	r2, r0
 800a002:	2000      	movs	r0, #0
 800a004:	4604      	mov	r4, r0
 800a006:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a00a:	f100 0101 	add.w	r1, r0, #1
 800a00e:	d012      	beq.n	800a036 <_strtod_l+0x236>
 800a010:	440a      	add	r2, r1
 800a012:	270a      	movs	r7, #10
 800a014:	4621      	mov	r1, r4
 800a016:	eb00 0c04 	add.w	ip, r0, r4
 800a01a:	458c      	cmp	ip, r1
 800a01c:	d113      	bne.n	800a046 <_strtod_l+0x246>
 800a01e:	1821      	adds	r1, r4, r0
 800a020:	2908      	cmp	r1, #8
 800a022:	f104 0401 	add.w	r4, r4, #1
 800a026:	4404      	add	r4, r0
 800a028:	dc19      	bgt.n	800a05e <_strtod_l+0x25e>
 800a02a:	210a      	movs	r1, #10
 800a02c:	9b06      	ldr	r3, [sp, #24]
 800a02e:	fb01 e303 	mla	r3, r1, r3, lr
 800a032:	9306      	str	r3, [sp, #24]
 800a034:	2100      	movs	r1, #0
 800a036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a038:	1c58      	adds	r0, r3, #1
 800a03a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	4608      	mov	r0, r1
 800a040:	e7c9      	b.n	8009fd6 <_strtod_l+0x1d6>
 800a042:	9804      	ldr	r0, [sp, #16]
 800a044:	e7d3      	b.n	8009fee <_strtod_l+0x1ee>
 800a046:	2908      	cmp	r1, #8
 800a048:	f101 0101 	add.w	r1, r1, #1
 800a04c:	dc03      	bgt.n	800a056 <_strtod_l+0x256>
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	437b      	muls	r3, r7
 800a052:	9306      	str	r3, [sp, #24]
 800a054:	e7e1      	b.n	800a01a <_strtod_l+0x21a>
 800a056:	2910      	cmp	r1, #16
 800a058:	bfd8      	it	le
 800a05a:	437d      	mulle	r5, r7
 800a05c:	e7dd      	b.n	800a01a <_strtod_l+0x21a>
 800a05e:	2c10      	cmp	r4, #16
 800a060:	bfdc      	itt	le
 800a062:	210a      	movle	r1, #10
 800a064:	fb01 e505 	mlale	r5, r1, r5, lr
 800a068:	e7e4      	b.n	800a034 <_strtod_l+0x234>
 800a06a:	2301      	movs	r3, #1
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	e781      	b.n	8009f74 <_strtod_l+0x174>
 800a070:	f04f 0c01 	mov.w	ip, #1
 800a074:	1cb3      	adds	r3, r6, #2
 800a076:	931b      	str	r3, [sp, #108]	; 0x6c
 800a078:	78b3      	ldrb	r3, [r6, #2]
 800a07a:	e78a      	b.n	8009f92 <_strtod_l+0x192>
 800a07c:	f04f 0c00 	mov.w	ip, #0
 800a080:	e7f8      	b.n	800a074 <_strtod_l+0x274>
 800a082:	bf00      	nop
 800a084:	0800d6ac 	.word	0x0800d6ac
 800a088:	7ff00000 	.word	0x7ff00000
 800a08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a08e:	1c5f      	adds	r7, r3, #1
 800a090:	971b      	str	r7, [sp, #108]	; 0x6c
 800a092:	785b      	ldrb	r3, [r3, #1]
 800a094:	2b30      	cmp	r3, #48	; 0x30
 800a096:	d0f9      	beq.n	800a08c <_strtod_l+0x28c>
 800a098:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a09c:	2f08      	cmp	r7, #8
 800a09e:	f63f af7d 	bhi.w	8009f9c <_strtod_l+0x19c>
 800a0a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a0a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0ac:	1c5f      	adds	r7, r3, #1
 800a0ae:	971b      	str	r7, [sp, #108]	; 0x6c
 800a0b0:	785b      	ldrb	r3, [r3, #1]
 800a0b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a0b6:	f1b8 0f09 	cmp.w	r8, #9
 800a0ba:	d937      	bls.n	800a12c <_strtod_l+0x32c>
 800a0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0be:	1a7f      	subs	r7, r7, r1
 800a0c0:	2f08      	cmp	r7, #8
 800a0c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a0c6:	dc37      	bgt.n	800a138 <_strtod_l+0x338>
 800a0c8:	45be      	cmp	lr, r7
 800a0ca:	bfa8      	it	ge
 800a0cc:	46be      	movge	lr, r7
 800a0ce:	f1bc 0f00 	cmp.w	ip, #0
 800a0d2:	d001      	beq.n	800a0d8 <_strtod_l+0x2d8>
 800a0d4:	f1ce 0e00 	rsb	lr, lr, #0
 800a0d8:	2c00      	cmp	r4, #0
 800a0da:	d151      	bne.n	800a180 <_strtod_l+0x380>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f47f aece 	bne.w	8009e7e <_strtod_l+0x7e>
 800a0e2:	9a07      	ldr	r2, [sp, #28]
 800a0e4:	2a00      	cmp	r2, #0
 800a0e6:	f47f aeca 	bne.w	8009e7e <_strtod_l+0x7e>
 800a0ea:	9a05      	ldr	r2, [sp, #20]
 800a0ec:	2a00      	cmp	r2, #0
 800a0ee:	f47f aee4 	bne.w	8009eba <_strtod_l+0xba>
 800a0f2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0f4:	d027      	beq.n	800a146 <_strtod_l+0x346>
 800a0f6:	dc21      	bgt.n	800a13c <_strtod_l+0x33c>
 800a0f8:	2b49      	cmp	r3, #73	; 0x49
 800a0fa:	f47f aede 	bne.w	8009eba <_strtod_l+0xba>
 800a0fe:	49a4      	ldr	r1, [pc, #656]	; (800a390 <_strtod_l+0x590>)
 800a100:	a81b      	add	r0, sp, #108	; 0x6c
 800a102:	f000 ffb7 	bl	800b074 <__match>
 800a106:	2800      	cmp	r0, #0
 800a108:	f43f aed7 	beq.w	8009eba <_strtod_l+0xba>
 800a10c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a10e:	49a1      	ldr	r1, [pc, #644]	; (800a394 <_strtod_l+0x594>)
 800a110:	3b01      	subs	r3, #1
 800a112:	a81b      	add	r0, sp, #108	; 0x6c
 800a114:	931b      	str	r3, [sp, #108]	; 0x6c
 800a116:	f000 ffad 	bl	800b074 <__match>
 800a11a:	b910      	cbnz	r0, 800a122 <_strtod_l+0x322>
 800a11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a11e:	3301      	adds	r3, #1
 800a120:	931b      	str	r3, [sp, #108]	; 0x6c
 800a122:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a3a8 <_strtod_l+0x5a8>
 800a126:	f04f 0900 	mov.w	r9, #0
 800a12a:	e6a8      	b.n	8009e7e <_strtod_l+0x7e>
 800a12c:	210a      	movs	r1, #10
 800a12e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a132:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a136:	e7b8      	b.n	800a0aa <_strtod_l+0x2aa>
 800a138:	46be      	mov	lr, r7
 800a13a:	e7c8      	b.n	800a0ce <_strtod_l+0x2ce>
 800a13c:	2b69      	cmp	r3, #105	; 0x69
 800a13e:	d0de      	beq.n	800a0fe <_strtod_l+0x2fe>
 800a140:	2b6e      	cmp	r3, #110	; 0x6e
 800a142:	f47f aeba 	bne.w	8009eba <_strtod_l+0xba>
 800a146:	4994      	ldr	r1, [pc, #592]	; (800a398 <_strtod_l+0x598>)
 800a148:	a81b      	add	r0, sp, #108	; 0x6c
 800a14a:	f000 ff93 	bl	800b074 <__match>
 800a14e:	2800      	cmp	r0, #0
 800a150:	f43f aeb3 	beq.w	8009eba <_strtod_l+0xba>
 800a154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b28      	cmp	r3, #40	; 0x28
 800a15a:	d10e      	bne.n	800a17a <_strtod_l+0x37a>
 800a15c:	aa1e      	add	r2, sp, #120	; 0x78
 800a15e:	498f      	ldr	r1, [pc, #572]	; (800a39c <_strtod_l+0x59c>)
 800a160:	a81b      	add	r0, sp, #108	; 0x6c
 800a162:	f000 ff9b 	bl	800b09c <__hexnan>
 800a166:	2805      	cmp	r0, #5
 800a168:	d107      	bne.n	800a17a <_strtod_l+0x37a>
 800a16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a16c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a170:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a174:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a178:	e681      	b.n	8009e7e <_strtod_l+0x7e>
 800a17a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a3b0 <_strtod_l+0x5b0>
 800a17e:	e7d2      	b.n	800a126 <_strtod_l+0x326>
 800a180:	ebae 0302 	sub.w	r3, lr, r2
 800a184:	9307      	str	r3, [sp, #28]
 800a186:	9b04      	ldr	r3, [sp, #16]
 800a188:	9806      	ldr	r0, [sp, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	bf08      	it	eq
 800a18e:	4623      	moveq	r3, r4
 800a190:	2c10      	cmp	r4, #16
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	46a0      	mov	r8, r4
 800a196:	bfa8      	it	ge
 800a198:	f04f 0810 	movge.w	r8, #16
 800a19c:	f7f6 f922 	bl	80003e4 <__aeabi_ui2d>
 800a1a0:	2c09      	cmp	r4, #9
 800a1a2:	4681      	mov	r9, r0
 800a1a4:	468a      	mov	sl, r1
 800a1a6:	dc13      	bgt.n	800a1d0 <_strtod_l+0x3d0>
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f43f ae67 	beq.w	8009e7e <_strtod_l+0x7e>
 800a1b0:	9b07      	ldr	r3, [sp, #28]
 800a1b2:	dd7e      	ble.n	800a2b2 <_strtod_l+0x4b2>
 800a1b4:	2b16      	cmp	r3, #22
 800a1b6:	dc65      	bgt.n	800a284 <_strtod_l+0x484>
 800a1b8:	4a79      	ldr	r2, [pc, #484]	; (800a3a0 <_strtod_l+0x5a0>)
 800a1ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a1be:	464a      	mov	r2, r9
 800a1c0:	e9de 0100 	ldrd	r0, r1, [lr]
 800a1c4:	4653      	mov	r3, sl
 800a1c6:	f7f6 f987 	bl	80004d8 <__aeabi_dmul>
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	468a      	mov	sl, r1
 800a1ce:	e656      	b.n	8009e7e <_strtod_l+0x7e>
 800a1d0:	4b73      	ldr	r3, [pc, #460]	; (800a3a0 <_strtod_l+0x5a0>)
 800a1d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a1d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a1da:	f7f6 f97d 	bl	80004d8 <__aeabi_dmul>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	460f      	mov	r7, r1
 800a1e4:	f7f6 f8fe 	bl	80003e4 <__aeabi_ui2d>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	f7f5 ffbc 	bl	800016c <__adddf3>
 800a1f4:	2c0f      	cmp	r4, #15
 800a1f6:	4681      	mov	r9, r0
 800a1f8:	468a      	mov	sl, r1
 800a1fa:	ddd5      	ble.n	800a1a8 <_strtod_l+0x3a8>
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	eba4 0808 	sub.w	r8, r4, r8
 800a202:	4498      	add	r8, r3
 800a204:	f1b8 0f00 	cmp.w	r8, #0
 800a208:	f340 809a 	ble.w	800a340 <_strtod_l+0x540>
 800a20c:	f018 030f 	ands.w	r3, r8, #15
 800a210:	d00a      	beq.n	800a228 <_strtod_l+0x428>
 800a212:	4963      	ldr	r1, [pc, #396]	; (800a3a0 <_strtod_l+0x5a0>)
 800a214:	464a      	mov	r2, r9
 800a216:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a21a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21e:	4653      	mov	r3, sl
 800a220:	f7f6 f95a 	bl	80004d8 <__aeabi_dmul>
 800a224:	4681      	mov	r9, r0
 800a226:	468a      	mov	sl, r1
 800a228:	f038 080f 	bics.w	r8, r8, #15
 800a22c:	d077      	beq.n	800a31e <_strtod_l+0x51e>
 800a22e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a232:	dd4b      	ble.n	800a2cc <_strtod_l+0x4cc>
 800a234:	f04f 0800 	mov.w	r8, #0
 800a238:	f8cd 8010 	str.w	r8, [sp, #16]
 800a23c:	f8cd 8020 	str.w	r8, [sp, #32]
 800a240:	f8cd 8018 	str.w	r8, [sp, #24]
 800a244:	2322      	movs	r3, #34	; 0x22
 800a246:	f04f 0900 	mov.w	r9, #0
 800a24a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a3a8 <_strtod_l+0x5a8>
 800a24e:	f8cb 3000 	str.w	r3, [fp]
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f43f ae12 	beq.w	8009e7e <_strtod_l+0x7e>
 800a25a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a25c:	4658      	mov	r0, fp
 800a25e:	f001 f807 	bl	800b270 <_Bfree>
 800a262:	9906      	ldr	r1, [sp, #24]
 800a264:	4658      	mov	r0, fp
 800a266:	f001 f803 	bl	800b270 <_Bfree>
 800a26a:	9904      	ldr	r1, [sp, #16]
 800a26c:	4658      	mov	r0, fp
 800a26e:	f000 ffff 	bl	800b270 <_Bfree>
 800a272:	9908      	ldr	r1, [sp, #32]
 800a274:	4658      	mov	r0, fp
 800a276:	f000 fffb 	bl	800b270 <_Bfree>
 800a27a:	4641      	mov	r1, r8
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fff7 	bl	800b270 <_Bfree>
 800a282:	e5fc      	b.n	8009e7e <_strtod_l+0x7e>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a28a:	4293      	cmp	r3, r2
 800a28c:	dbb6      	blt.n	800a1fc <_strtod_l+0x3fc>
 800a28e:	4d44      	ldr	r5, [pc, #272]	; (800a3a0 <_strtod_l+0x5a0>)
 800a290:	f1c4 040f 	rsb	r4, r4, #15
 800a294:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a298:	464a      	mov	r2, r9
 800a29a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29e:	4653      	mov	r3, sl
 800a2a0:	f7f6 f91a 	bl	80004d8 <__aeabi_dmul>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	1b1c      	subs	r4, r3, r4
 800a2a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a2ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2b0:	e789      	b.n	800a1c6 <_strtod_l+0x3c6>
 800a2b2:	f113 0f16 	cmn.w	r3, #22
 800a2b6:	dba1      	blt.n	800a1fc <_strtod_l+0x3fc>
 800a2b8:	4a39      	ldr	r2, [pc, #228]	; (800a3a0 <_strtod_l+0x5a0>)
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a2c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a2c4:	4651      	mov	r1, sl
 800a2c6:	f7f6 fa31 	bl	800072c <__aeabi_ddiv>
 800a2ca:	e77e      	b.n	800a1ca <_strtod_l+0x3ca>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4648      	mov	r0, r9
 800a2d0:	4651      	mov	r1, sl
 800a2d2:	461d      	mov	r5, r3
 800a2d4:	4e33      	ldr	r6, [pc, #204]	; (800a3a4 <_strtod_l+0x5a4>)
 800a2d6:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a2da:	f1b8 0f01 	cmp.w	r8, #1
 800a2de:	dc21      	bgt.n	800a324 <_strtod_l+0x524>
 800a2e0:	b10b      	cbz	r3, 800a2e6 <_strtod_l+0x4e6>
 800a2e2:	4681      	mov	r9, r0
 800a2e4:	468a      	mov	sl, r1
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <_strtod_l+0x5a4>)
 800a2e8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a2ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a2f0:	464a      	mov	r2, r9
 800a2f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a2f6:	4653      	mov	r3, sl
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	4b2a      	ldr	r3, [pc, #168]	; (800a3a8 <_strtod_l+0x5a8>)
 800a2fe:	460a      	mov	r2, r1
 800a300:	400b      	ands	r3, r1
 800a302:	492a      	ldr	r1, [pc, #168]	; (800a3ac <_strtod_l+0x5ac>)
 800a304:	4681      	mov	r9, r0
 800a306:	428b      	cmp	r3, r1
 800a308:	d894      	bhi.n	800a234 <_strtod_l+0x434>
 800a30a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a30e:	428b      	cmp	r3, r1
 800a310:	bf86      	itte	hi
 800a312:	f04f 39ff 	movhi.w	r9, #4294967295
 800a316:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a3b4 <_strtod_l+0x5b4>
 800a31a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a31e:	2300      	movs	r3, #0
 800a320:	9305      	str	r3, [sp, #20]
 800a322:	e07b      	b.n	800a41c <_strtod_l+0x61c>
 800a324:	f018 0f01 	tst.w	r8, #1
 800a328:	d006      	beq.n	800a338 <_strtod_l+0x538>
 800a32a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f6 f8d1 	bl	80004d8 <__aeabi_dmul>
 800a336:	2301      	movs	r3, #1
 800a338:	3501      	adds	r5, #1
 800a33a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a33e:	e7cc      	b.n	800a2da <_strtod_l+0x4da>
 800a340:	d0ed      	beq.n	800a31e <_strtod_l+0x51e>
 800a342:	f1c8 0800 	rsb	r8, r8, #0
 800a346:	f018 020f 	ands.w	r2, r8, #15
 800a34a:	d00a      	beq.n	800a362 <_strtod_l+0x562>
 800a34c:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <_strtod_l+0x5a0>)
 800a34e:	4648      	mov	r0, r9
 800a350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a354:	4651      	mov	r1, sl
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f6 f9e7 	bl	800072c <__aeabi_ddiv>
 800a35e:	4681      	mov	r9, r0
 800a360:	468a      	mov	sl, r1
 800a362:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a366:	d0da      	beq.n	800a31e <_strtod_l+0x51e>
 800a368:	f1b8 0f1f 	cmp.w	r8, #31
 800a36c:	dd24      	ble.n	800a3b8 <_strtod_l+0x5b8>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	f8cd 8010 	str.w	r8, [sp, #16]
 800a376:	f8cd 8020 	str.w	r8, [sp, #32]
 800a37a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a37e:	2322      	movs	r3, #34	; 0x22
 800a380:	f04f 0900 	mov.w	r9, #0
 800a384:	f04f 0a00 	mov.w	sl, #0
 800a388:	f8cb 3000 	str.w	r3, [fp]
 800a38c:	e761      	b.n	800a252 <_strtod_l+0x452>
 800a38e:	bf00      	nop
 800a390:	0800d6a0 	.word	0x0800d6a0
 800a394:	0800d6a3 	.word	0x0800d6a3
 800a398:	0800d6a9 	.word	0x0800d6a9
 800a39c:	0800d6c0 	.word	0x0800d6c0
 800a3a0:	0800d738 	.word	0x0800d738
 800a3a4:	0800d710 	.word	0x0800d710
 800a3a8:	7ff00000 	.word	0x7ff00000
 800a3ac:	7ca00000 	.word	0x7ca00000
 800a3b0:	fff80000 	.word	0xfff80000
 800a3b4:	7fefffff 	.word	0x7fefffff
 800a3b8:	f018 0310 	ands.w	r3, r8, #16
 800a3bc:	bf18      	it	ne
 800a3be:	236a      	movne	r3, #106	; 0x6a
 800a3c0:	4648      	mov	r0, r9
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	4651      	mov	r1, sl
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4da1      	ldr	r5, [pc, #644]	; (800a650 <_strtod_l+0x850>)
 800a3ca:	f1b8 0f00 	cmp.w	r8, #0
 800a3ce:	f300 8113 	bgt.w	800a5f8 <_strtod_l+0x7f8>
 800a3d2:	b10b      	cbz	r3, 800a3d8 <_strtod_l+0x5d8>
 800a3d4:	4681      	mov	r9, r0
 800a3d6:	468a      	mov	sl, r1
 800a3d8:	9b05      	ldr	r3, [sp, #20]
 800a3da:	b1bb      	cbz	r3, 800a40c <_strtod_l+0x60c>
 800a3dc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a3e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	4651      	mov	r1, sl
 800a3e8:	dd10      	ble.n	800a40c <_strtod_l+0x60c>
 800a3ea:	2b1f      	cmp	r3, #31
 800a3ec:	f340 8110 	ble.w	800a610 <_strtod_l+0x810>
 800a3f0:	2b34      	cmp	r3, #52	; 0x34
 800a3f2:	bfd8      	it	le
 800a3f4:	f04f 32ff 	movle.w	r2, #4294967295
 800a3f8:	f04f 0900 	mov.w	r9, #0
 800a3fc:	bfcf      	iteee	gt
 800a3fe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a402:	3b20      	suble	r3, #32
 800a404:	fa02 f303 	lslle.w	r3, r2, r3
 800a408:	ea03 0a01 	andle.w	sl, r3, r1
 800a40c:	2200      	movs	r2, #0
 800a40e:	2300      	movs	r3, #0
 800a410:	4648      	mov	r0, r9
 800a412:	4651      	mov	r1, sl
 800a414:	f7f6 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d1a8      	bne.n	800a36e <_strtod_l+0x56e>
 800a41c:	9b06      	ldr	r3, [sp, #24]
 800a41e:	9a04      	ldr	r2, [sp, #16]
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	9908      	ldr	r1, [sp, #32]
 800a424:	4623      	mov	r3, r4
 800a426:	4658      	mov	r0, fp
 800a428:	f000 ff74 	bl	800b314 <__s2b>
 800a42c:	9008      	str	r0, [sp, #32]
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f af00 	beq.w	800a234 <_strtod_l+0x434>
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	9b07      	ldr	r3, [sp, #28]
 800a438:	2a00      	cmp	r2, #0
 800a43a:	f1c3 0300 	rsb	r3, r3, #0
 800a43e:	bfa8      	it	ge
 800a440:	2300      	movge	r3, #0
 800a442:	f04f 0800 	mov.w	r8, #0
 800a446:	930e      	str	r3, [sp, #56]	; 0x38
 800a448:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a44c:	9316      	str	r3, [sp, #88]	; 0x58
 800a44e:	f8cd 8010 	str.w	r8, [sp, #16]
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	4658      	mov	r0, fp
 800a456:	6859      	ldr	r1, [r3, #4]
 800a458:	f000 fed6 	bl	800b208 <_Balloc>
 800a45c:	9006      	str	r0, [sp, #24]
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f aef0 	beq.w	800a244 <_strtod_l+0x444>
 800a464:	9b08      	ldr	r3, [sp, #32]
 800a466:	300c      	adds	r0, #12
 800a468:	691a      	ldr	r2, [r3, #16]
 800a46a:	f103 010c 	add.w	r1, r3, #12
 800a46e:	3202      	adds	r2, #2
 800a470:	0092      	lsls	r2, r2, #2
 800a472:	f7ff fbfc 	bl	8009c6e <memcpy>
 800a476:	ab1e      	add	r3, sp, #120	; 0x78
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	ab1d      	add	r3, sp, #116	; 0x74
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	464a      	mov	r2, r9
 800a480:	4653      	mov	r3, sl
 800a482:	4658      	mov	r0, fp
 800a484:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a488:	f001 f9fe 	bl	800b888 <__d2b>
 800a48c:	901c      	str	r0, [sp, #112]	; 0x70
 800a48e:	2800      	cmp	r0, #0
 800a490:	f43f aed8 	beq.w	800a244 <_strtod_l+0x444>
 800a494:	2101      	movs	r1, #1
 800a496:	4658      	mov	r0, fp
 800a498:	f000 ffc8 	bl	800b42c <__i2b>
 800a49c:	9004      	str	r0, [sp, #16]
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	f43f aecf 	beq.w	800a244 <_strtod_l+0x444>
 800a4a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a4a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4aa:	2d00      	cmp	r5, #0
 800a4ac:	bfab      	itete	ge
 800a4ae:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a4b0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a4b2:	18ee      	addge	r6, r5, r3
 800a4b4:	1b5c      	sublt	r4, r3, r5
 800a4b6:	9b05      	ldr	r3, [sp, #20]
 800a4b8:	bfa8      	it	ge
 800a4ba:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a4bc:	eba5 0503 	sub.w	r5, r5, r3
 800a4c0:	4415      	add	r5, r2
 800a4c2:	4b64      	ldr	r3, [pc, #400]	; (800a654 <_strtod_l+0x854>)
 800a4c4:	f105 35ff 	add.w	r5, r5, #4294967295
 800a4c8:	bfb8      	it	lt
 800a4ca:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a4cc:	429d      	cmp	r5, r3
 800a4ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a4d2:	f280 80af 	bge.w	800a634 <_strtod_l+0x834>
 800a4d6:	1b5b      	subs	r3, r3, r5
 800a4d8:	2b1f      	cmp	r3, #31
 800a4da:	eba2 0203 	sub.w	r2, r2, r3
 800a4de:	f04f 0701 	mov.w	r7, #1
 800a4e2:	f300 809c 	bgt.w	800a61e <_strtod_l+0x81e>
 800a4e6:	2500      	movs	r5, #0
 800a4e8:	fa07 f303 	lsl.w	r3, r7, r3
 800a4ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ee:	18b7      	adds	r7, r6, r2
 800a4f0:	9b05      	ldr	r3, [sp, #20]
 800a4f2:	42be      	cmp	r6, r7
 800a4f4:	4414      	add	r4, r2
 800a4f6:	441c      	add	r4, r3
 800a4f8:	4633      	mov	r3, r6
 800a4fa:	bfa8      	it	ge
 800a4fc:	463b      	movge	r3, r7
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	bfa8      	it	ge
 800a502:	4623      	movge	r3, r4
 800a504:	2b00      	cmp	r3, #0
 800a506:	bfc2      	ittt	gt
 800a508:	1aff      	subgt	r7, r7, r3
 800a50a:	1ae4      	subgt	r4, r4, r3
 800a50c:	1af6      	subgt	r6, r6, r3
 800a50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a510:	b1bb      	cbz	r3, 800a542 <_strtod_l+0x742>
 800a512:	461a      	mov	r2, r3
 800a514:	9904      	ldr	r1, [sp, #16]
 800a516:	4658      	mov	r0, fp
 800a518:	f001 f826 	bl	800b568 <__pow5mult>
 800a51c:	9004      	str	r0, [sp, #16]
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f ae90 	beq.w	800a244 <_strtod_l+0x444>
 800a524:	4601      	mov	r1, r0
 800a526:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a528:	4658      	mov	r0, fp
 800a52a:	f000 ff88 	bl	800b43e <__multiply>
 800a52e:	9009      	str	r0, [sp, #36]	; 0x24
 800a530:	2800      	cmp	r0, #0
 800a532:	f43f ae87 	beq.w	800a244 <_strtod_l+0x444>
 800a536:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a538:	4658      	mov	r0, fp
 800a53a:	f000 fe99 	bl	800b270 <_Bfree>
 800a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a540:	931c      	str	r3, [sp, #112]	; 0x70
 800a542:	2f00      	cmp	r7, #0
 800a544:	dc7a      	bgt.n	800a63c <_strtod_l+0x83c>
 800a546:	9b07      	ldr	r3, [sp, #28]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dd08      	ble.n	800a55e <_strtod_l+0x75e>
 800a54c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a54e:	9906      	ldr	r1, [sp, #24]
 800a550:	4658      	mov	r0, fp
 800a552:	f001 f809 	bl	800b568 <__pow5mult>
 800a556:	9006      	str	r0, [sp, #24]
 800a558:	2800      	cmp	r0, #0
 800a55a:	f43f ae73 	beq.w	800a244 <_strtod_l+0x444>
 800a55e:	2c00      	cmp	r4, #0
 800a560:	dd08      	ble.n	800a574 <_strtod_l+0x774>
 800a562:	4622      	mov	r2, r4
 800a564:	9906      	ldr	r1, [sp, #24]
 800a566:	4658      	mov	r0, fp
 800a568:	f001 f84c 	bl	800b604 <__lshift>
 800a56c:	9006      	str	r0, [sp, #24]
 800a56e:	2800      	cmp	r0, #0
 800a570:	f43f ae68 	beq.w	800a244 <_strtod_l+0x444>
 800a574:	2e00      	cmp	r6, #0
 800a576:	dd08      	ble.n	800a58a <_strtod_l+0x78a>
 800a578:	4632      	mov	r2, r6
 800a57a:	9904      	ldr	r1, [sp, #16]
 800a57c:	4658      	mov	r0, fp
 800a57e:	f001 f841 	bl	800b604 <__lshift>
 800a582:	9004      	str	r0, [sp, #16]
 800a584:	2800      	cmp	r0, #0
 800a586:	f43f ae5d 	beq.w	800a244 <_strtod_l+0x444>
 800a58a:	9a06      	ldr	r2, [sp, #24]
 800a58c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a58e:	4658      	mov	r0, fp
 800a590:	f001 f8a6 	bl	800b6e0 <__mdiff>
 800a594:	4680      	mov	r8, r0
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f ae54 	beq.w	800a244 <_strtod_l+0x444>
 800a59c:	2400      	movs	r4, #0
 800a59e:	68c3      	ldr	r3, [r0, #12]
 800a5a0:	9904      	ldr	r1, [sp, #16]
 800a5a2:	60c4      	str	r4, [r0, #12]
 800a5a4:	930c      	str	r3, [sp, #48]	; 0x30
 800a5a6:	f001 f881 	bl	800b6ac <__mcmp>
 800a5aa:	42a0      	cmp	r0, r4
 800a5ac:	da54      	bge.n	800a658 <_strtod_l+0x858>
 800a5ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b0:	b9f3      	cbnz	r3, 800a5f0 <_strtod_l+0x7f0>
 800a5b2:	f1b9 0f00 	cmp.w	r9, #0
 800a5b6:	d11b      	bne.n	800a5f0 <_strtod_l+0x7f0>
 800a5b8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a5bc:	b9c3      	cbnz	r3, 800a5f0 <_strtod_l+0x7f0>
 800a5be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a5c2:	0d1b      	lsrs	r3, r3, #20
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a5ca:	d911      	bls.n	800a5f0 <_strtod_l+0x7f0>
 800a5cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a5d0:	b91b      	cbnz	r3, 800a5da <_strtod_l+0x7da>
 800a5d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	dd0a      	ble.n	800a5f0 <_strtod_l+0x7f0>
 800a5da:	4641      	mov	r1, r8
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4658      	mov	r0, fp
 800a5e0:	f001 f810 	bl	800b604 <__lshift>
 800a5e4:	9904      	ldr	r1, [sp, #16]
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	f001 f860 	bl	800b6ac <__mcmp>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	dc68      	bgt.n	800a6c2 <_strtod_l+0x8c2>
 800a5f0:	9b05      	ldr	r3, [sp, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d172      	bne.n	800a6dc <_strtod_l+0x8dc>
 800a5f6:	e630      	b.n	800a25a <_strtod_l+0x45a>
 800a5f8:	f018 0f01 	tst.w	r8, #1
 800a5fc:	d004      	beq.n	800a608 <_strtod_l+0x808>
 800a5fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a602:	f7f5 ff69 	bl	80004d8 <__aeabi_dmul>
 800a606:	2301      	movs	r3, #1
 800a608:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a60c:	3508      	adds	r5, #8
 800a60e:	e6dc      	b.n	800a3ca <_strtod_l+0x5ca>
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	fa02 f303 	lsl.w	r3, r2, r3
 800a618:	ea03 0909 	and.w	r9, r3, r9
 800a61c:	e6f6      	b.n	800a40c <_strtod_l+0x60c>
 800a61e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a622:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a626:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a62a:	35e2      	adds	r5, #226	; 0xe2
 800a62c:	fa07 f505 	lsl.w	r5, r7, r5
 800a630:	970f      	str	r7, [sp, #60]	; 0x3c
 800a632:	e75c      	b.n	800a4ee <_strtod_l+0x6ee>
 800a634:	2301      	movs	r3, #1
 800a636:	2500      	movs	r5, #0
 800a638:	930f      	str	r3, [sp, #60]	; 0x3c
 800a63a:	e758      	b.n	800a4ee <_strtod_l+0x6ee>
 800a63c:	463a      	mov	r2, r7
 800a63e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a640:	4658      	mov	r0, fp
 800a642:	f000 ffdf 	bl	800b604 <__lshift>
 800a646:	901c      	str	r0, [sp, #112]	; 0x70
 800a648:	2800      	cmp	r0, #0
 800a64a:	f47f af7c 	bne.w	800a546 <_strtod_l+0x746>
 800a64e:	e5f9      	b.n	800a244 <_strtod_l+0x444>
 800a650:	0800d6d8 	.word	0x0800d6d8
 800a654:	fffffc02 	.word	0xfffffc02
 800a658:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a65c:	f040 8089 	bne.w	800a772 <_strtod_l+0x972>
 800a660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a662:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a666:	b342      	cbz	r2, 800a6ba <_strtod_l+0x8ba>
 800a668:	4aaf      	ldr	r2, [pc, #700]	; (800a928 <_strtod_l+0xb28>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d156      	bne.n	800a71c <_strtod_l+0x91c>
 800a66e:	9b05      	ldr	r3, [sp, #20]
 800a670:	4648      	mov	r0, r9
 800a672:	b1eb      	cbz	r3, 800a6b0 <_strtod_l+0x8b0>
 800a674:	4653      	mov	r3, sl
 800a676:	4aad      	ldr	r2, [pc, #692]	; (800a92c <_strtod_l+0xb2c>)
 800a678:	f04f 31ff 	mov.w	r1, #4294967295
 800a67c:	401a      	ands	r2, r3
 800a67e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a682:	d818      	bhi.n	800a6b6 <_strtod_l+0x8b6>
 800a684:	0d12      	lsrs	r2, r2, #20
 800a686:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a68a:	fa01 f303 	lsl.w	r3, r1, r3
 800a68e:	4298      	cmp	r0, r3
 800a690:	d144      	bne.n	800a71c <_strtod_l+0x91c>
 800a692:	4ba7      	ldr	r3, [pc, #668]	; (800a930 <_strtod_l+0xb30>)
 800a694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a696:	429a      	cmp	r2, r3
 800a698:	d102      	bne.n	800a6a0 <_strtod_l+0x8a0>
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f add2 	beq.w	800a244 <_strtod_l+0x444>
 800a6a0:	4ba2      	ldr	r3, [pc, #648]	; (800a92c <_strtod_l+0xb2c>)
 800a6a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a4:	f04f 0900 	mov.w	r9, #0
 800a6a8:	401a      	ands	r2, r3
 800a6aa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a6ae:	e79f      	b.n	800a5f0 <_strtod_l+0x7f0>
 800a6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b4:	e7eb      	b.n	800a68e <_strtod_l+0x88e>
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	e7e9      	b.n	800a68e <_strtod_l+0x88e>
 800a6ba:	bb7b      	cbnz	r3, 800a71c <_strtod_l+0x91c>
 800a6bc:	f1b9 0f00 	cmp.w	r9, #0
 800a6c0:	d12c      	bne.n	800a71c <_strtod_l+0x91c>
 800a6c2:	9905      	ldr	r1, [sp, #20]
 800a6c4:	4653      	mov	r3, sl
 800a6c6:	4a99      	ldr	r2, [pc, #612]	; (800a92c <_strtod_l+0xb2c>)
 800a6c8:	b1f1      	cbz	r1, 800a708 <_strtod_l+0x908>
 800a6ca:	ea02 010a 	and.w	r1, r2, sl
 800a6ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6d2:	dc19      	bgt.n	800a708 <_strtod_l+0x908>
 800a6d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6d8:	f77f ae51 	ble.w	800a37e <_strtod_l+0x57e>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4a95      	ldr	r2, [pc, #596]	; (800a934 <_strtod_l+0xb34>)
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a6e6:	4651      	mov	r1, sl
 800a6e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6ec:	f7f5 fef4 	bl	80004d8 <__aeabi_dmul>
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	468a      	mov	sl, r1
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	f47f adb0 	bne.w	800a25a <_strtod_l+0x45a>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f47f adad 	bne.w	800a25a <_strtod_l+0x45a>
 800a700:	2322      	movs	r3, #34	; 0x22
 800a702:	f8cb 3000 	str.w	r3, [fp]
 800a706:	e5a8      	b.n	800a25a <_strtod_l+0x45a>
 800a708:	4013      	ands	r3, r2
 800a70a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a70e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a712:	f04f 39ff 	mov.w	r9, #4294967295
 800a716:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a71a:	e769      	b.n	800a5f0 <_strtod_l+0x7f0>
 800a71c:	b19d      	cbz	r5, 800a746 <_strtod_l+0x946>
 800a71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a720:	421d      	tst	r5, r3
 800a722:	f43f af65 	beq.w	800a5f0 <_strtod_l+0x7f0>
 800a726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a728:	9a05      	ldr	r2, [sp, #20]
 800a72a:	4648      	mov	r0, r9
 800a72c:	4651      	mov	r1, sl
 800a72e:	b173      	cbz	r3, 800a74e <_strtod_l+0x94e>
 800a730:	f7ff fb42 	bl	8009db8 <sulp>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a73c:	f7f5 fd16 	bl	800016c <__adddf3>
 800a740:	4681      	mov	r9, r0
 800a742:	468a      	mov	sl, r1
 800a744:	e754      	b.n	800a5f0 <_strtod_l+0x7f0>
 800a746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a748:	ea13 0f09 	tst.w	r3, r9
 800a74c:	e7e9      	b.n	800a722 <_strtod_l+0x922>
 800a74e:	f7ff fb33 	bl	8009db8 <sulp>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a75a:	f7f5 fd05 	bl	8000168 <__aeabi_dsub>
 800a75e:	2200      	movs	r2, #0
 800a760:	2300      	movs	r3, #0
 800a762:	4681      	mov	r9, r0
 800a764:	468a      	mov	sl, r1
 800a766:	f7f6 f91f 	bl	80009a8 <__aeabi_dcmpeq>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f47f ae07 	bne.w	800a37e <_strtod_l+0x57e>
 800a770:	e73e      	b.n	800a5f0 <_strtod_l+0x7f0>
 800a772:	9904      	ldr	r1, [sp, #16]
 800a774:	4640      	mov	r0, r8
 800a776:	f001 f8d6 	bl	800b926 <__ratio>
 800a77a:	2200      	movs	r2, #0
 800a77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a780:	4606      	mov	r6, r0
 800a782:	460f      	mov	r7, r1
 800a784:	f7f6 f924 	bl	80009d0 <__aeabi_dcmple>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d075      	beq.n	800a878 <_strtod_l+0xa78>
 800a78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d047      	beq.n	800a822 <_strtod_l+0xa22>
 800a792:	2600      	movs	r6, #0
 800a794:	4f68      	ldr	r7, [pc, #416]	; (800a938 <_strtod_l+0xb38>)
 800a796:	4d68      	ldr	r5, [pc, #416]	; (800a938 <_strtod_l+0xb38>)
 800a798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a79e:	0d1b      	lsrs	r3, r3, #20
 800a7a0:	051b      	lsls	r3, r3, #20
 800a7a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7a6:	4b65      	ldr	r3, [pc, #404]	; (800a93c <_strtod_l+0xb3c>)
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	f040 80cf 	bne.w	800a94c <_strtod_l+0xb4c>
 800a7ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b8:	4648      	mov	r0, r9
 800a7ba:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a7be:	4651      	mov	r1, sl
 800a7c0:	f000 ffec 	bl	800b79c <__ulp>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f5 fe84 	bl	80004d8 <__aeabi_dmul>
 800a7d0:	464a      	mov	r2, r9
 800a7d2:	4653      	mov	r3, sl
 800a7d4:	f7f5 fcca 	bl	800016c <__adddf3>
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4954      	ldr	r1, [pc, #336]	; (800a92c <_strtod_l+0xb2c>)
 800a7dc:	4a58      	ldr	r2, [pc, #352]	; (800a940 <_strtod_l+0xb40>)
 800a7de:	4019      	ands	r1, r3
 800a7e0:	4291      	cmp	r1, r2
 800a7e2:	4681      	mov	r9, r0
 800a7e4:	d95e      	bls.n	800a8a4 <_strtod_l+0xaa4>
 800a7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d103      	bne.n	800a7f8 <_strtod_l+0x9f8>
 800a7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f43f ad26 	beq.w	800a244 <_strtod_l+0x444>
 800a7f8:	f04f 39ff 	mov.w	r9, #4294967295
 800a7fc:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a930 <_strtod_l+0xb30>
 800a800:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a802:	4658      	mov	r0, fp
 800a804:	f000 fd34 	bl	800b270 <_Bfree>
 800a808:	9906      	ldr	r1, [sp, #24]
 800a80a:	4658      	mov	r0, fp
 800a80c:	f000 fd30 	bl	800b270 <_Bfree>
 800a810:	9904      	ldr	r1, [sp, #16]
 800a812:	4658      	mov	r0, fp
 800a814:	f000 fd2c 	bl	800b270 <_Bfree>
 800a818:	4641      	mov	r1, r8
 800a81a:	4658      	mov	r0, fp
 800a81c:	f000 fd28 	bl	800b270 <_Bfree>
 800a820:	e617      	b.n	800a452 <_strtod_l+0x652>
 800a822:	f1b9 0f00 	cmp.w	r9, #0
 800a826:	d119      	bne.n	800a85c <_strtod_l+0xa5c>
 800a828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a82e:	b9e3      	cbnz	r3, 800a86a <_strtod_l+0xa6a>
 800a830:	2200      	movs	r2, #0
 800a832:	4b41      	ldr	r3, [pc, #260]	; (800a938 <_strtod_l+0xb38>)
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f6 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800a83c:	b9c8      	cbnz	r0, 800a872 <_strtod_l+0xa72>
 800a83e:	2200      	movs	r2, #0
 800a840:	4b40      	ldr	r3, [pc, #256]	; (800a944 <_strtod_l+0xb44>)
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	f7f5 fe47 	bl	80004d8 <__aeabi_dmul>
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a852:	9418      	str	r4, [sp, #96]	; 0x60
 800a854:	9319      	str	r3, [sp, #100]	; 0x64
 800a856:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a85a:	e79d      	b.n	800a798 <_strtod_l+0x998>
 800a85c:	f1b9 0f01 	cmp.w	r9, #1
 800a860:	d103      	bne.n	800a86a <_strtod_l+0xa6a>
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	f43f ad8a 	beq.w	800a37e <_strtod_l+0x57e>
 800a86a:	2600      	movs	r6, #0
 800a86c:	4f36      	ldr	r7, [pc, #216]	; (800a948 <_strtod_l+0xb48>)
 800a86e:	2400      	movs	r4, #0
 800a870:	e791      	b.n	800a796 <_strtod_l+0x996>
 800a872:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a874:	4d33      	ldr	r5, [pc, #204]	; (800a944 <_strtod_l+0xb44>)
 800a876:	e7ea      	b.n	800a84e <_strtod_l+0xa4e>
 800a878:	4b32      	ldr	r3, [pc, #200]	; (800a944 <_strtod_l+0xb44>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f5 fe2a 	bl	80004d8 <__aeabi_dmul>
 800a884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	b933      	cbnz	r3, 800a89a <_strtod_l+0xa9a>
 800a88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a890:	9010      	str	r0, [sp, #64]	; 0x40
 800a892:	9311      	str	r3, [sp, #68]	; 0x44
 800a894:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a898:	e77e      	b.n	800a798 <_strtod_l+0x998>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a8a2:	e7f7      	b.n	800a894 <_strtod_l+0xa94>
 800a8a4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1a8      	bne.n	800a800 <_strtod_l+0xa00>
 800a8ae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a8b2:	0d1b      	lsrs	r3, r3, #20
 800a8b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8b6:	051b      	lsls	r3, r3, #20
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	4656      	mov	r6, sl
 800a8bc:	d1a0      	bne.n	800a800 <_strtod_l+0xa00>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f7f6 f8b9 	bl	8000a38 <__aeabi_d2iz>
 800a8c6:	f7f5 fd9d 	bl	8000404 <__aeabi_i2d>
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f7f5 fc49 	bl	8000168 <__aeabi_dsub>
 800a8d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d8:	4604      	mov	r4, r0
 800a8da:	460d      	mov	r5, r1
 800a8dc:	b933      	cbnz	r3, 800a8ec <_strtod_l+0xaec>
 800a8de:	f1b9 0f00 	cmp.w	r9, #0
 800a8e2:	d103      	bne.n	800a8ec <_strtod_l+0xaec>
 800a8e4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	d06a      	beq.n	800a9c2 <_strtod_l+0xbc2>
 800a8ec:	a30a      	add	r3, pc, #40	; (adr r3, 800a918 <_strtod_l+0xb18>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7f6 f861 	bl	80009bc <__aeabi_dcmplt>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	f47f acad 	bne.w	800a25a <_strtod_l+0x45a>
 800a900:	a307      	add	r3, pc, #28	; (adr r3, 800a920 <_strtod_l+0xb20>)
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f875 	bl	80009f8 <__aeabi_dcmpgt>
 800a90e:	2800      	cmp	r0, #0
 800a910:	f43f af76 	beq.w	800a800 <_strtod_l+0xa00>
 800a914:	e4a1      	b.n	800a25a <_strtod_l+0x45a>
 800a916:	bf00      	nop
 800a918:	94a03595 	.word	0x94a03595
 800a91c:	3fdfffff 	.word	0x3fdfffff
 800a920:	35afe535 	.word	0x35afe535
 800a924:	3fe00000 	.word	0x3fe00000
 800a928:	000fffff 	.word	0x000fffff
 800a92c:	7ff00000 	.word	0x7ff00000
 800a930:	7fefffff 	.word	0x7fefffff
 800a934:	39500000 	.word	0x39500000
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	7fe00000 	.word	0x7fe00000
 800a940:	7c9fffff 	.word	0x7c9fffff
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	bff00000 	.word	0xbff00000
 800a94c:	9b05      	ldr	r3, [sp, #20]
 800a94e:	b313      	cbz	r3, 800a996 <_strtod_l+0xb96>
 800a950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a952:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a956:	d81e      	bhi.n	800a996 <_strtod_l+0xb96>
 800a958:	a325      	add	r3, pc, #148	; (adr r3, 800a9f0 <_strtod_l+0xbf0>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f6 f835 	bl	80009d0 <__aeabi_dcmple>
 800a966:	b190      	cbz	r0, 800a98e <_strtod_l+0xb8e>
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7f6 f88c 	bl	8000a88 <__aeabi_d2uiz>
 800a970:	2800      	cmp	r0, #0
 800a972:	bf08      	it	eq
 800a974:	2001      	moveq	r0, #1
 800a976:	f7f5 fd35 	bl	80003e4 <__aeabi_ui2d>
 800a97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a97c:	4604      	mov	r4, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	b9d3      	cbnz	r3, 800a9b8 <_strtod_l+0xbb8>
 800a982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a986:	9012      	str	r0, [sp, #72]	; 0x48
 800a988:	9313      	str	r3, [sp, #76]	; 0x4c
 800a98a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a98e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a990:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a994:	1a9f      	subs	r7, r3, r2
 800a996:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a99a:	f000 feff 	bl	800b79c <__ulp>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fd97 	bl	80004d8 <__aeabi_dmul>
 800a9aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9ae:	f7f5 fbdd 	bl	800016c <__adddf3>
 800a9b2:	4681      	mov	r9, r0
 800a9b4:	468a      	mov	sl, r1
 800a9b6:	e777      	b.n	800a8a8 <_strtod_l+0xaa8>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a9c0:	e7e3      	b.n	800a98a <_strtod_l+0xb8a>
 800a9c2:	a30d      	add	r3, pc, #52	; (adr r3, 800a9f8 <_strtod_l+0xbf8>)
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	f7f5 fff8 	bl	80009bc <__aeabi_dcmplt>
 800a9cc:	e79f      	b.n	800a90e <_strtod_l+0xb0e>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a9d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	f7ff ba55 	b.w	8009e86 <_strtod_l+0x86>
 800a9dc:	2b65      	cmp	r3, #101	; 0x65
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	f43f ab42 	beq.w	800a06a <_strtod_l+0x26a>
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	9105      	str	r1, [sp, #20]
 800a9ec:	f7ff babf 	b.w	8009f6e <_strtod_l+0x16e>
 800a9f0:	ffc00000 	.word	0xffc00000
 800a9f4:	41dfffff 	.word	0x41dfffff
 800a9f8:	94a03595 	.word	0x94a03595
 800a9fc:	3fcfffff 	.word	0x3fcfffff

0800aa00 <strtod>:
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <strtod+0x1c>)
 800aa02:	b410      	push	{r4}
 800aa04:	681c      	ldr	r4, [r3, #0]
 800aa06:	4a06      	ldr	r2, [pc, #24]	; (800aa20 <strtod+0x20>)
 800aa08:	6a23      	ldr	r3, [r4, #32]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	bf08      	it	eq
 800aa0e:	4613      	moveq	r3, r2
 800aa10:	460a      	mov	r2, r1
 800aa12:	4601      	mov	r1, r0
 800aa14:	4620      	mov	r0, r4
 800aa16:	bc10      	pop	{r4}
 800aa18:	f7ff b9f2 	b.w	8009e00 <_strtod_l>
 800aa1c:	200001bc 	.word	0x200001bc
 800aa20:	20000220 	.word	0x20000220

0800aa24 <_strtol_l.isra.0>:
 800aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4689      	mov	r9, r1
 800aa2c:	4692      	mov	sl, r2
 800aa2e:	461e      	mov	r6, r3
 800aa30:	460f      	mov	r7, r1
 800aa32:	463d      	mov	r5, r7
 800aa34:	9808      	ldr	r0, [sp, #32]
 800aa36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3a:	f000 fbbf 	bl	800b1bc <__locale_ctype_ptr_l>
 800aa3e:	4420      	add	r0, r4
 800aa40:	7843      	ldrb	r3, [r0, #1]
 800aa42:	f013 0308 	ands.w	r3, r3, #8
 800aa46:	d132      	bne.n	800aaae <_strtol_l.isra.0+0x8a>
 800aa48:	2c2d      	cmp	r4, #45	; 0x2d
 800aa4a:	d132      	bne.n	800aab2 <_strtol_l.isra.0+0x8e>
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	787c      	ldrb	r4, [r7, #1]
 800aa50:	1cbd      	adds	r5, r7, #2
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d05d      	beq.n	800ab12 <_strtol_l.isra.0+0xee>
 800aa56:	2e10      	cmp	r6, #16
 800aa58:	d109      	bne.n	800aa6e <_strtol_l.isra.0+0x4a>
 800aa5a:	2c30      	cmp	r4, #48	; 0x30
 800aa5c:	d107      	bne.n	800aa6e <_strtol_l.isra.0+0x4a>
 800aa5e:	782b      	ldrb	r3, [r5, #0]
 800aa60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa64:	2b58      	cmp	r3, #88	; 0x58
 800aa66:	d14f      	bne.n	800ab08 <_strtol_l.isra.0+0xe4>
 800aa68:	2610      	movs	r6, #16
 800aa6a:	786c      	ldrb	r4, [r5, #1]
 800aa6c:	3502      	adds	r5, #2
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	bf14      	ite	ne
 800aa72:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa76:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa7a:	2700      	movs	r7, #0
 800aa7c:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa80:	4638      	mov	r0, r7
 800aa82:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa86:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d817      	bhi.n	800aabe <_strtol_l.isra.0+0x9a>
 800aa8e:	461c      	mov	r4, r3
 800aa90:	42a6      	cmp	r6, r4
 800aa92:	dd23      	ble.n	800aadc <_strtol_l.isra.0+0xb8>
 800aa94:	1c7b      	adds	r3, r7, #1
 800aa96:	d007      	beq.n	800aaa8 <_strtol_l.isra.0+0x84>
 800aa98:	4584      	cmp	ip, r0
 800aa9a:	d31c      	bcc.n	800aad6 <_strtol_l.isra.0+0xb2>
 800aa9c:	d101      	bne.n	800aaa2 <_strtol_l.isra.0+0x7e>
 800aa9e:	45a6      	cmp	lr, r4
 800aaa0:	db19      	blt.n	800aad6 <_strtol_l.isra.0+0xb2>
 800aaa2:	2701      	movs	r7, #1
 800aaa4:	fb00 4006 	mla	r0, r0, r6, r4
 800aaa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaac:	e7eb      	b.n	800aa86 <_strtol_l.isra.0+0x62>
 800aaae:	462f      	mov	r7, r5
 800aab0:	e7bf      	b.n	800aa32 <_strtol_l.isra.0+0xe>
 800aab2:	2c2b      	cmp	r4, #43	; 0x2b
 800aab4:	bf04      	itt	eq
 800aab6:	1cbd      	addeq	r5, r7, #2
 800aab8:	787c      	ldrbeq	r4, [r7, #1]
 800aaba:	461a      	mov	r2, r3
 800aabc:	e7c9      	b.n	800aa52 <_strtol_l.isra.0+0x2e>
 800aabe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aac2:	2b19      	cmp	r3, #25
 800aac4:	d801      	bhi.n	800aaca <_strtol_l.isra.0+0xa6>
 800aac6:	3c37      	subs	r4, #55	; 0x37
 800aac8:	e7e2      	b.n	800aa90 <_strtol_l.isra.0+0x6c>
 800aaca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aace:	2b19      	cmp	r3, #25
 800aad0:	d804      	bhi.n	800aadc <_strtol_l.isra.0+0xb8>
 800aad2:	3c57      	subs	r4, #87	; 0x57
 800aad4:	e7dc      	b.n	800aa90 <_strtol_l.isra.0+0x6c>
 800aad6:	f04f 37ff 	mov.w	r7, #4294967295
 800aada:	e7e5      	b.n	800aaa8 <_strtol_l.isra.0+0x84>
 800aadc:	1c7b      	adds	r3, r7, #1
 800aade:	d108      	bne.n	800aaf2 <_strtol_l.isra.0+0xce>
 800aae0:	2322      	movs	r3, #34	; 0x22
 800aae2:	4608      	mov	r0, r1
 800aae4:	f8c8 3000 	str.w	r3, [r8]
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	d107      	bne.n	800aafe <_strtol_l.isra.0+0xda>
 800aaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf2:	b102      	cbz	r2, 800aaf6 <_strtol_l.isra.0+0xd2>
 800aaf4:	4240      	negs	r0, r0
 800aaf6:	f1ba 0f00 	cmp.w	sl, #0
 800aafa:	d0f8      	beq.n	800aaee <_strtol_l.isra.0+0xca>
 800aafc:	b10f      	cbz	r7, 800ab02 <_strtol_l.isra.0+0xde>
 800aafe:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab02:	f8ca 9000 	str.w	r9, [sl]
 800ab06:	e7f2      	b.n	800aaee <_strtol_l.isra.0+0xca>
 800ab08:	2430      	movs	r4, #48	; 0x30
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	d1af      	bne.n	800aa6e <_strtol_l.isra.0+0x4a>
 800ab0e:	2608      	movs	r6, #8
 800ab10:	e7ad      	b.n	800aa6e <_strtol_l.isra.0+0x4a>
 800ab12:	2c30      	cmp	r4, #48	; 0x30
 800ab14:	d0a3      	beq.n	800aa5e <_strtol_l.isra.0+0x3a>
 800ab16:	260a      	movs	r6, #10
 800ab18:	e7a9      	b.n	800aa6e <_strtol_l.isra.0+0x4a>
	...

0800ab1c <_strtol_r>:
 800ab1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab1e:	4c06      	ldr	r4, [pc, #24]	; (800ab38 <_strtol_r+0x1c>)
 800ab20:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_strtol_r+0x20>)
 800ab22:	6824      	ldr	r4, [r4, #0]
 800ab24:	6a24      	ldr	r4, [r4, #32]
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	bf08      	it	eq
 800ab2a:	462c      	moveq	r4, r5
 800ab2c:	9400      	str	r4, [sp, #0]
 800ab2e:	f7ff ff79 	bl	800aa24 <_strtol_l.isra.0>
 800ab32:	b003      	add	sp, #12
 800ab34:	bd30      	pop	{r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	200001bc 	.word	0x200001bc
 800ab3c:	20000220 	.word	0x20000220

0800ab40 <strtol>:
 800ab40:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <strtol+0x24>)
 800ab42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab44:	681c      	ldr	r4, [r3, #0]
 800ab46:	4d08      	ldr	r5, [pc, #32]	; (800ab68 <strtol+0x28>)
 800ab48:	6a23      	ldr	r3, [r4, #32]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bf08      	it	eq
 800ab4e:	462b      	moveq	r3, r5
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4613      	mov	r3, r2
 800ab54:	460a      	mov	r2, r1
 800ab56:	4601      	mov	r1, r0
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7ff ff63 	bl	800aa24 <_strtol_l.isra.0>
 800ab5e:	b003      	add	sp, #12
 800ab60:	bd30      	pop	{r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	200001bc 	.word	0x200001bc
 800ab68:	20000220 	.word	0x20000220

0800ab6c <rshift>:
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	6906      	ldr	r6, [r0, #16]
 800ab70:	114b      	asrs	r3, r1, #5
 800ab72:	429e      	cmp	r6, r3
 800ab74:	f100 0414 	add.w	r4, r0, #20
 800ab78:	dd31      	ble.n	800abde <rshift+0x72>
 800ab7a:	f011 011f 	ands.w	r1, r1, #31
 800ab7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ab82:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ab86:	d108      	bne.n	800ab9a <rshift+0x2e>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	42b2      	cmp	r2, r6
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	d211      	bcs.n	800abb4 <rshift+0x48>
 800ab90:	f852 3b04 	ldr.w	r3, [r2], #4
 800ab94:	f841 3b04 	str.w	r3, [r1], #4
 800ab98:	e7f7      	b.n	800ab8a <rshift+0x1e>
 800ab9a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ab9e:	4623      	mov	r3, r4
 800aba0:	f1c1 0c20 	rsb	ip, r1, #32
 800aba4:	40cd      	lsrs	r5, r1
 800aba6:	3204      	adds	r2, #4
 800aba8:	42b2      	cmp	r2, r6
 800abaa:	4617      	mov	r7, r2
 800abac:	d30d      	bcc.n	800abca <rshift+0x5e>
 800abae:	601d      	str	r5, [r3, #0]
 800abb0:	b105      	cbz	r5, 800abb4 <rshift+0x48>
 800abb2:	3304      	adds	r3, #4
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	eba3 0204 	sub.w	r2, r3, r4
 800abba:	bf08      	it	eq
 800abbc:	2300      	moveq	r3, #0
 800abbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abc2:	6102      	str	r2, [r0, #16]
 800abc4:	bf08      	it	eq
 800abc6:	6143      	streq	r3, [r0, #20]
 800abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abca:	683f      	ldr	r7, [r7, #0]
 800abcc:	fa07 f70c 	lsl.w	r7, r7, ip
 800abd0:	433d      	orrs	r5, r7
 800abd2:	f843 5b04 	str.w	r5, [r3], #4
 800abd6:	f852 5b04 	ldr.w	r5, [r2], #4
 800abda:	40cd      	lsrs	r5, r1
 800abdc:	e7e4      	b.n	800aba8 <rshift+0x3c>
 800abde:	4623      	mov	r3, r4
 800abe0:	e7e8      	b.n	800abb4 <rshift+0x48>

0800abe2 <__hexdig_fun>:
 800abe2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	d802      	bhi.n	800abf0 <__hexdig_fun+0xe>
 800abea:	3820      	subs	r0, #32
 800abec:	b2c0      	uxtb	r0, r0
 800abee:	4770      	bx	lr
 800abf0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abf4:	2b05      	cmp	r3, #5
 800abf6:	d801      	bhi.n	800abfc <__hexdig_fun+0x1a>
 800abf8:	3847      	subs	r0, #71	; 0x47
 800abfa:	e7f7      	b.n	800abec <__hexdig_fun+0xa>
 800abfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac00:	2b05      	cmp	r3, #5
 800ac02:	d801      	bhi.n	800ac08 <__hexdig_fun+0x26>
 800ac04:	3827      	subs	r0, #39	; 0x27
 800ac06:	e7f1      	b.n	800abec <__hexdig_fun+0xa>
 800ac08:	2000      	movs	r0, #0
 800ac0a:	4770      	bx	lr

0800ac0c <__gethex>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	b08b      	sub	sp, #44	; 0x2c
 800ac12:	9002      	str	r0, [sp, #8]
 800ac14:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac16:	468a      	mov	sl, r1
 800ac18:	4690      	mov	r8, r2
 800ac1a:	9306      	str	r3, [sp, #24]
 800ac1c:	f000 fae0 	bl	800b1e0 <__localeconv_l>
 800ac20:	6803      	ldr	r3, [r0, #0]
 800ac22:	f04f 0b00 	mov.w	fp, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	f7f5 fa91 	bl	8000150 <strlen>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	9001      	str	r0, [sp, #4]
 800ac32:	4403      	add	r3, r0
 800ac34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac38:	9307      	str	r3, [sp, #28]
 800ac3a:	f8da 3000 	ldr.w	r3, [sl]
 800ac3e:	3302      	adds	r3, #2
 800ac40:	461f      	mov	r7, r3
 800ac42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac46:	2830      	cmp	r0, #48	; 0x30
 800ac48:	d06c      	beq.n	800ad24 <__gethex+0x118>
 800ac4a:	f7ff ffca 	bl	800abe2 <__hexdig_fun>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d16a      	bne.n	800ad2a <__gethex+0x11e>
 800ac54:	9a01      	ldr	r2, [sp, #4]
 800ac56:	9903      	ldr	r1, [sp, #12]
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f001 fa9e 	bl	800c19a <strncmp>
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d166      	bne.n	800ad30 <__gethex+0x124>
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	5cf8      	ldrb	r0, [r7, r3]
 800ac66:	18fe      	adds	r6, r7, r3
 800ac68:	f7ff ffbb 	bl	800abe2 <__hexdig_fun>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d062      	beq.n	800ad36 <__gethex+0x12a>
 800ac70:	4633      	mov	r3, r6
 800ac72:	7818      	ldrb	r0, [r3, #0]
 800ac74:	461f      	mov	r7, r3
 800ac76:	2830      	cmp	r0, #48	; 0x30
 800ac78:	f103 0301 	add.w	r3, r3, #1
 800ac7c:	d0f9      	beq.n	800ac72 <__gethex+0x66>
 800ac7e:	f7ff ffb0 	bl	800abe2 <__hexdig_fun>
 800ac82:	fab0 f580 	clz	r5, r0
 800ac86:	4634      	mov	r4, r6
 800ac88:	f04f 0b01 	mov.w	fp, #1
 800ac8c:	096d      	lsrs	r5, r5, #5
 800ac8e:	463a      	mov	r2, r7
 800ac90:	4616      	mov	r6, r2
 800ac92:	7830      	ldrb	r0, [r6, #0]
 800ac94:	3201      	adds	r2, #1
 800ac96:	f7ff ffa4 	bl	800abe2 <__hexdig_fun>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d1f8      	bne.n	800ac90 <__gethex+0x84>
 800ac9e:	9a01      	ldr	r2, [sp, #4]
 800aca0:	9903      	ldr	r1, [sp, #12]
 800aca2:	4630      	mov	r0, r6
 800aca4:	f001 fa79 	bl	800c19a <strncmp>
 800aca8:	b950      	cbnz	r0, 800acc0 <__gethex+0xb4>
 800acaa:	b954      	cbnz	r4, 800acc2 <__gethex+0xb6>
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	18f4      	adds	r4, r6, r3
 800acb0:	4622      	mov	r2, r4
 800acb2:	4616      	mov	r6, r2
 800acb4:	7830      	ldrb	r0, [r6, #0]
 800acb6:	3201      	adds	r2, #1
 800acb8:	f7ff ff93 	bl	800abe2 <__hexdig_fun>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1f8      	bne.n	800acb2 <__gethex+0xa6>
 800acc0:	b10c      	cbz	r4, 800acc6 <__gethex+0xba>
 800acc2:	1ba4      	subs	r4, r4, r6
 800acc4:	00a4      	lsls	r4, r4, #2
 800acc6:	7833      	ldrb	r3, [r6, #0]
 800acc8:	2b50      	cmp	r3, #80	; 0x50
 800acca:	d001      	beq.n	800acd0 <__gethex+0xc4>
 800accc:	2b70      	cmp	r3, #112	; 0x70
 800acce:	d140      	bne.n	800ad52 <__gethex+0x146>
 800acd0:	7873      	ldrb	r3, [r6, #1]
 800acd2:	2b2b      	cmp	r3, #43	; 0x2b
 800acd4:	d031      	beq.n	800ad3a <__gethex+0x12e>
 800acd6:	2b2d      	cmp	r3, #45	; 0x2d
 800acd8:	d033      	beq.n	800ad42 <__gethex+0x136>
 800acda:	f04f 0900 	mov.w	r9, #0
 800acde:	1c71      	adds	r1, r6, #1
 800ace0:	7808      	ldrb	r0, [r1, #0]
 800ace2:	f7ff ff7e 	bl	800abe2 <__hexdig_fun>
 800ace6:	1e43      	subs	r3, r0, #1
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b18      	cmp	r3, #24
 800acec:	d831      	bhi.n	800ad52 <__gethex+0x146>
 800acee:	f1a0 0210 	sub.w	r2, r0, #16
 800acf2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acf6:	f7ff ff74 	bl	800abe2 <__hexdig_fun>
 800acfa:	1e43      	subs	r3, r0, #1
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b18      	cmp	r3, #24
 800ad00:	d922      	bls.n	800ad48 <__gethex+0x13c>
 800ad02:	f1b9 0f00 	cmp.w	r9, #0
 800ad06:	d000      	beq.n	800ad0a <__gethex+0xfe>
 800ad08:	4252      	negs	r2, r2
 800ad0a:	4414      	add	r4, r2
 800ad0c:	f8ca 1000 	str.w	r1, [sl]
 800ad10:	b30d      	cbz	r5, 800ad56 <__gethex+0x14a>
 800ad12:	f1bb 0f00 	cmp.w	fp, #0
 800ad16:	bf0c      	ite	eq
 800ad18:	2706      	moveq	r7, #6
 800ad1a:	2700      	movne	r7, #0
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	b00b      	add	sp, #44	; 0x2c
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	f10b 0b01 	add.w	fp, fp, #1
 800ad28:	e78a      	b.n	800ac40 <__gethex+0x34>
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	462c      	mov	r4, r5
 800ad2e:	e7ae      	b.n	800ac8e <__gethex+0x82>
 800ad30:	463e      	mov	r6, r7
 800ad32:	2501      	movs	r5, #1
 800ad34:	e7c7      	b.n	800acc6 <__gethex+0xba>
 800ad36:	4604      	mov	r4, r0
 800ad38:	e7fb      	b.n	800ad32 <__gethex+0x126>
 800ad3a:	f04f 0900 	mov.w	r9, #0
 800ad3e:	1cb1      	adds	r1, r6, #2
 800ad40:	e7ce      	b.n	800ace0 <__gethex+0xd4>
 800ad42:	f04f 0901 	mov.w	r9, #1
 800ad46:	e7fa      	b.n	800ad3e <__gethex+0x132>
 800ad48:	230a      	movs	r3, #10
 800ad4a:	fb03 0202 	mla	r2, r3, r2, r0
 800ad4e:	3a10      	subs	r2, #16
 800ad50:	e7cf      	b.n	800acf2 <__gethex+0xe6>
 800ad52:	4631      	mov	r1, r6
 800ad54:	e7da      	b.n	800ad0c <__gethex+0x100>
 800ad56:	4629      	mov	r1, r5
 800ad58:	1bf3      	subs	r3, r6, r7
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	2b07      	cmp	r3, #7
 800ad5e:	dc49      	bgt.n	800adf4 <__gethex+0x1e8>
 800ad60:	9802      	ldr	r0, [sp, #8]
 800ad62:	f000 fa51 	bl	800b208 <_Balloc>
 800ad66:	f04f 0b00 	mov.w	fp, #0
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	46da      	mov	sl, fp
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	f100 0914 	add.w	r9, r0, #20
 800ad74:	f1c3 0301 	rsb	r3, r3, #1
 800ad78:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	42b7      	cmp	r7, r6
 800ad80:	d33b      	bcc.n	800adfa <__gethex+0x1ee>
 800ad82:	9804      	ldr	r0, [sp, #16]
 800ad84:	f840 ab04 	str.w	sl, [r0], #4
 800ad88:	eba0 0009 	sub.w	r0, r0, r9
 800ad8c:	1080      	asrs	r0, r0, #2
 800ad8e:	6128      	str	r0, [r5, #16]
 800ad90:	0147      	lsls	r7, r0, #5
 800ad92:	4650      	mov	r0, sl
 800ad94:	f000 fafc 	bl	800b390 <__hi0bits>
 800ad98:	f8d8 6000 	ldr.w	r6, [r8]
 800ad9c:	1a3f      	subs	r7, r7, r0
 800ad9e:	42b7      	cmp	r7, r6
 800ada0:	dd64      	ble.n	800ae6c <__gethex+0x260>
 800ada2:	1bbf      	subs	r7, r7, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 fe05 	bl	800b9b6 <__any_on>
 800adac:	4682      	mov	sl, r0
 800adae:	b178      	cbz	r0, 800add0 <__gethex+0x1c4>
 800adb0:	f04f 0a01 	mov.w	sl, #1
 800adb4:	1e7b      	subs	r3, r7, #1
 800adb6:	1159      	asrs	r1, r3, #5
 800adb8:	f003 021f 	and.w	r2, r3, #31
 800adbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800adc0:	fa0a f202 	lsl.w	r2, sl, r2
 800adc4:	420a      	tst	r2, r1
 800adc6:	d003      	beq.n	800add0 <__gethex+0x1c4>
 800adc8:	4553      	cmp	r3, sl
 800adca:	dc46      	bgt.n	800ae5a <__gethex+0x24e>
 800adcc:	f04f 0a02 	mov.w	sl, #2
 800add0:	4639      	mov	r1, r7
 800add2:	4628      	mov	r0, r5
 800add4:	f7ff feca 	bl	800ab6c <rshift>
 800add8:	443c      	add	r4, r7
 800adda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adde:	42a3      	cmp	r3, r4
 800ade0:	da52      	bge.n	800ae88 <__gethex+0x27c>
 800ade2:	4629      	mov	r1, r5
 800ade4:	9802      	ldr	r0, [sp, #8]
 800ade6:	f000 fa43 	bl	800b270 <_Bfree>
 800adea:	2300      	movs	r3, #0
 800adec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adee:	27a3      	movs	r7, #163	; 0xa3
 800adf0:	6013      	str	r3, [r2, #0]
 800adf2:	e793      	b.n	800ad1c <__gethex+0x110>
 800adf4:	3101      	adds	r1, #1
 800adf6:	105b      	asrs	r3, r3, #1
 800adf8:	e7b0      	b.n	800ad5c <__gethex+0x150>
 800adfa:	1e73      	subs	r3, r6, #1
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	9a07      	ldr	r2, [sp, #28]
 800ae00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d018      	beq.n	800ae3a <__gethex+0x22e>
 800ae08:	f1bb 0f20 	cmp.w	fp, #32
 800ae0c:	d107      	bne.n	800ae1e <__gethex+0x212>
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	f8c3 a000 	str.w	sl, [r3]
 800ae14:	f04f 0a00 	mov.w	sl, #0
 800ae18:	46d3      	mov	fp, sl
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	9304      	str	r3, [sp, #16]
 800ae1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae22:	f7ff fede 	bl	800abe2 <__hexdig_fun>
 800ae26:	f000 000f 	and.w	r0, r0, #15
 800ae2a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae2e:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae32:	f10b 0b04 	add.w	fp, fp, #4
 800ae36:	9b05      	ldr	r3, [sp, #20]
 800ae38:	e00d      	b.n	800ae56 <__gethex+0x24a>
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	4413      	add	r3, r2
 800ae40:	42bb      	cmp	r3, r7
 800ae42:	d3e1      	bcc.n	800ae08 <__gethex+0x1fc>
 800ae44:	4618      	mov	r0, r3
 800ae46:	9a01      	ldr	r2, [sp, #4]
 800ae48:	9903      	ldr	r1, [sp, #12]
 800ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4c:	f001 f9a5 	bl	800c19a <strncmp>
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d1d8      	bne.n	800ae08 <__gethex+0x1fc>
 800ae56:	461e      	mov	r6, r3
 800ae58:	e791      	b.n	800ad7e <__gethex+0x172>
 800ae5a:	1eb9      	subs	r1, r7, #2
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 fdaa 	bl	800b9b6 <__any_on>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0b2      	beq.n	800adcc <__gethex+0x1c0>
 800ae66:	f04f 0a03 	mov.w	sl, #3
 800ae6a:	e7b1      	b.n	800add0 <__gethex+0x1c4>
 800ae6c:	da09      	bge.n	800ae82 <__gethex+0x276>
 800ae6e:	1bf7      	subs	r7, r6, r7
 800ae70:	4629      	mov	r1, r5
 800ae72:	463a      	mov	r2, r7
 800ae74:	9802      	ldr	r0, [sp, #8]
 800ae76:	f000 fbc5 	bl	800b604 <__lshift>
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	1be4      	subs	r4, r4, r7
 800ae7e:	f100 0914 	add.w	r9, r0, #20
 800ae82:	f04f 0a00 	mov.w	sl, #0
 800ae86:	e7a8      	b.n	800adda <__gethex+0x1ce>
 800ae88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae8c:	42a0      	cmp	r0, r4
 800ae8e:	dd6b      	ble.n	800af68 <__gethex+0x35c>
 800ae90:	1b04      	subs	r4, r0, r4
 800ae92:	42a6      	cmp	r6, r4
 800ae94:	dc2e      	bgt.n	800aef4 <__gethex+0x2e8>
 800ae96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d022      	beq.n	800aee4 <__gethex+0x2d8>
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d024      	beq.n	800aeec <__gethex+0x2e0>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d115      	bne.n	800aed2 <__gethex+0x2c6>
 800aea6:	42a6      	cmp	r6, r4
 800aea8:	d113      	bne.n	800aed2 <__gethex+0x2c6>
 800aeaa:	2e01      	cmp	r6, #1
 800aeac:	dc0b      	bgt.n	800aec6 <__gethex+0x2ba>
 800aeae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aeb2:	9a06      	ldr	r2, [sp, #24]
 800aeb4:	2762      	movs	r7, #98	; 0x62
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	2301      	movs	r3, #1
 800aeba:	612b      	str	r3, [r5, #16]
 800aebc:	f8c9 3000 	str.w	r3, [r9]
 800aec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aec2:	601d      	str	r5, [r3, #0]
 800aec4:	e72a      	b.n	800ad1c <__gethex+0x110>
 800aec6:	1e71      	subs	r1, r6, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	f000 fd74 	bl	800b9b6 <__any_on>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d1ed      	bne.n	800aeae <__gethex+0x2a2>
 800aed2:	4629      	mov	r1, r5
 800aed4:	9802      	ldr	r0, [sp, #8]
 800aed6:	f000 f9cb 	bl	800b270 <_Bfree>
 800aeda:	2300      	movs	r3, #0
 800aedc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aede:	2750      	movs	r7, #80	; 0x50
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e71b      	b.n	800ad1c <__gethex+0x110>
 800aee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0e1      	beq.n	800aeae <__gethex+0x2a2>
 800aeea:	e7f2      	b.n	800aed2 <__gethex+0x2c6>
 800aeec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1dd      	bne.n	800aeae <__gethex+0x2a2>
 800aef2:	e7ee      	b.n	800aed2 <__gethex+0x2c6>
 800aef4:	1e67      	subs	r7, r4, #1
 800aef6:	f1ba 0f00 	cmp.w	sl, #0
 800aefa:	d132      	bne.n	800af62 <__gethex+0x356>
 800aefc:	b127      	cbz	r7, 800af08 <__gethex+0x2fc>
 800aefe:	4639      	mov	r1, r7
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fd58 	bl	800b9b6 <__any_on>
 800af06:	4682      	mov	sl, r0
 800af08:	2301      	movs	r3, #1
 800af0a:	117a      	asrs	r2, r7, #5
 800af0c:	f007 071f 	and.w	r7, r7, #31
 800af10:	fa03 f707 	lsl.w	r7, r3, r7
 800af14:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800af18:	4621      	mov	r1, r4
 800af1a:	421f      	tst	r7, r3
 800af1c:	f04f 0702 	mov.w	r7, #2
 800af20:	4628      	mov	r0, r5
 800af22:	bf18      	it	ne
 800af24:	f04a 0a02 	orrne.w	sl, sl, #2
 800af28:	1b36      	subs	r6, r6, r4
 800af2a:	f7ff fe1f 	bl	800ab6c <rshift>
 800af2e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	d048      	beq.n	800afca <__gethex+0x3be>
 800af38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d015      	beq.n	800af6c <__gethex+0x360>
 800af40:	2b03      	cmp	r3, #3
 800af42:	d017      	beq.n	800af74 <__gethex+0x368>
 800af44:	2b01      	cmp	r3, #1
 800af46:	d109      	bne.n	800af5c <__gethex+0x350>
 800af48:	f01a 0f02 	tst.w	sl, #2
 800af4c:	d006      	beq.n	800af5c <__gethex+0x350>
 800af4e:	f8d9 3000 	ldr.w	r3, [r9]
 800af52:	ea4a 0a03 	orr.w	sl, sl, r3
 800af56:	f01a 0f01 	tst.w	sl, #1
 800af5a:	d10e      	bne.n	800af7a <__gethex+0x36e>
 800af5c:	f047 0710 	orr.w	r7, r7, #16
 800af60:	e033      	b.n	800afca <__gethex+0x3be>
 800af62:	f04f 0a01 	mov.w	sl, #1
 800af66:	e7cf      	b.n	800af08 <__gethex+0x2fc>
 800af68:	2701      	movs	r7, #1
 800af6a:	e7e2      	b.n	800af32 <__gethex+0x326>
 800af6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af6e:	f1c3 0301 	rsb	r3, r3, #1
 800af72:	9315      	str	r3, [sp, #84]	; 0x54
 800af74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f0      	beq.n	800af5c <__gethex+0x350>
 800af7a:	f04f 0c00 	mov.w	ip, #0
 800af7e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800af82:	f105 0314 	add.w	r3, r5, #20
 800af86:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800af8a:	eb03 010a 	add.w	r1, r3, sl
 800af8e:	4618      	mov	r0, r3
 800af90:	f853 2b04 	ldr.w	r2, [r3], #4
 800af94:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af98:	d01c      	beq.n	800afd4 <__gethex+0x3c8>
 800af9a:	3201      	adds	r2, #1
 800af9c:	6002      	str	r2, [r0, #0]
 800af9e:	2f02      	cmp	r7, #2
 800afa0:	f105 0314 	add.w	r3, r5, #20
 800afa4:	d138      	bne.n	800b018 <__gethex+0x40c>
 800afa6:	f8d8 2000 	ldr.w	r2, [r8]
 800afaa:	3a01      	subs	r2, #1
 800afac:	42b2      	cmp	r2, r6
 800afae:	d10a      	bne.n	800afc6 <__gethex+0x3ba>
 800afb0:	2201      	movs	r2, #1
 800afb2:	1171      	asrs	r1, r6, #5
 800afb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afb8:	f006 061f 	and.w	r6, r6, #31
 800afbc:	fa02 f606 	lsl.w	r6, r2, r6
 800afc0:	421e      	tst	r6, r3
 800afc2:	bf18      	it	ne
 800afc4:	4617      	movne	r7, r2
 800afc6:	f047 0720 	orr.w	r7, r7, #32
 800afca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afcc:	601d      	str	r5, [r3, #0]
 800afce:	9b06      	ldr	r3, [sp, #24]
 800afd0:	601c      	str	r4, [r3, #0]
 800afd2:	e6a3      	b.n	800ad1c <__gethex+0x110>
 800afd4:	4299      	cmp	r1, r3
 800afd6:	f843 cc04 	str.w	ip, [r3, #-4]
 800afda:	d8d8      	bhi.n	800af8e <__gethex+0x382>
 800afdc:	68ab      	ldr	r3, [r5, #8]
 800afde:	4599      	cmp	r9, r3
 800afe0:	db12      	blt.n	800b008 <__gethex+0x3fc>
 800afe2:	6869      	ldr	r1, [r5, #4]
 800afe4:	9802      	ldr	r0, [sp, #8]
 800afe6:	3101      	adds	r1, #1
 800afe8:	f000 f90e 	bl	800b208 <_Balloc>
 800afec:	4683      	mov	fp, r0
 800afee:	692a      	ldr	r2, [r5, #16]
 800aff0:	f105 010c 	add.w	r1, r5, #12
 800aff4:	3202      	adds	r2, #2
 800aff6:	0092      	lsls	r2, r2, #2
 800aff8:	300c      	adds	r0, #12
 800affa:	f7fe fe38 	bl	8009c6e <memcpy>
 800affe:	4629      	mov	r1, r5
 800b000:	9802      	ldr	r0, [sp, #8]
 800b002:	f000 f935 	bl	800b270 <_Bfree>
 800b006:	465d      	mov	r5, fp
 800b008:	692b      	ldr	r3, [r5, #16]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	612a      	str	r2, [r5, #16]
 800b00e:	2201      	movs	r2, #1
 800b010:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b014:	615a      	str	r2, [r3, #20]
 800b016:	e7c2      	b.n	800af9e <__gethex+0x392>
 800b018:	692a      	ldr	r2, [r5, #16]
 800b01a:	454a      	cmp	r2, r9
 800b01c:	dd0b      	ble.n	800b036 <__gethex+0x42a>
 800b01e:	2101      	movs	r1, #1
 800b020:	4628      	mov	r0, r5
 800b022:	f7ff fda3 	bl	800ab6c <rshift>
 800b026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b02a:	3401      	adds	r4, #1
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	f6ff aed8 	blt.w	800ade2 <__gethex+0x1d6>
 800b032:	2701      	movs	r7, #1
 800b034:	e7c7      	b.n	800afc6 <__gethex+0x3ba>
 800b036:	f016 061f 	ands.w	r6, r6, #31
 800b03a:	d0fa      	beq.n	800b032 <__gethex+0x426>
 800b03c:	449a      	add	sl, r3
 800b03e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b042:	f000 f9a5 	bl	800b390 <__hi0bits>
 800b046:	f1c6 0620 	rsb	r6, r6, #32
 800b04a:	42b0      	cmp	r0, r6
 800b04c:	dbe7      	blt.n	800b01e <__gethex+0x412>
 800b04e:	e7f0      	b.n	800b032 <__gethex+0x426>

0800b050 <L_shift>:
 800b050:	f1c2 0208 	rsb	r2, r2, #8
 800b054:	0092      	lsls	r2, r2, #2
 800b056:	b570      	push	{r4, r5, r6, lr}
 800b058:	f1c2 0620 	rsb	r6, r2, #32
 800b05c:	6843      	ldr	r3, [r0, #4]
 800b05e:	6804      	ldr	r4, [r0, #0]
 800b060:	fa03 f506 	lsl.w	r5, r3, r6
 800b064:	432c      	orrs	r4, r5
 800b066:	40d3      	lsrs	r3, r2
 800b068:	6004      	str	r4, [r0, #0]
 800b06a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b06e:	4288      	cmp	r0, r1
 800b070:	d3f4      	bcc.n	800b05c <L_shift+0xc>
 800b072:	bd70      	pop	{r4, r5, r6, pc}

0800b074 <__match>:
 800b074:	b530      	push	{r4, r5, lr}
 800b076:	6803      	ldr	r3, [r0, #0]
 800b078:	3301      	adds	r3, #1
 800b07a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b07e:	b914      	cbnz	r4, 800b086 <__match+0x12>
 800b080:	6003      	str	r3, [r0, #0]
 800b082:	2001      	movs	r0, #1
 800b084:	bd30      	pop	{r4, r5, pc}
 800b086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b08a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b08e:	2d19      	cmp	r5, #25
 800b090:	bf98      	it	ls
 800b092:	3220      	addls	r2, #32
 800b094:	42a2      	cmp	r2, r4
 800b096:	d0f0      	beq.n	800b07a <__match+0x6>
 800b098:	2000      	movs	r0, #0
 800b09a:	e7f3      	b.n	800b084 <__match+0x10>

0800b09c <__hexnan>:
 800b09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a0:	2500      	movs	r5, #0
 800b0a2:	680b      	ldr	r3, [r1, #0]
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	115f      	asrs	r7, r3, #5
 800b0a8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b0ac:	f013 031f 	ands.w	r3, r3, #31
 800b0b0:	bf18      	it	ne
 800b0b2:	3704      	addne	r7, #4
 800b0b4:	1f3e      	subs	r6, r7, #4
 800b0b6:	4690      	mov	r8, r2
 800b0b8:	46b1      	mov	r9, r6
 800b0ba:	4634      	mov	r4, r6
 800b0bc:	46ab      	mov	fp, r5
 800b0be:	b087      	sub	sp, #28
 800b0c0:	6801      	ldr	r1, [r0, #0]
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	f847 5c04 	str.w	r5, [r7, #-4]
 800b0c8:	9502      	str	r5, [sp, #8]
 800b0ca:	784a      	ldrb	r2, [r1, #1]
 800b0cc:	1c4b      	adds	r3, r1, #1
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	b342      	cbz	r2, 800b124 <__hexnan+0x88>
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	9204      	str	r2, [sp, #16]
 800b0d8:	f7ff fd83 	bl	800abe2 <__hexdig_fun>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d143      	bne.n	800b168 <__hexnan+0xcc>
 800b0e0:	9a04      	ldr	r2, [sp, #16]
 800b0e2:	9905      	ldr	r1, [sp, #20]
 800b0e4:	2a20      	cmp	r2, #32
 800b0e6:	d818      	bhi.n	800b11a <__hexnan+0x7e>
 800b0e8:	9b02      	ldr	r3, [sp, #8]
 800b0ea:	459b      	cmp	fp, r3
 800b0ec:	dd13      	ble.n	800b116 <__hexnan+0x7a>
 800b0ee:	454c      	cmp	r4, r9
 800b0f0:	d206      	bcs.n	800b100 <__hexnan+0x64>
 800b0f2:	2d07      	cmp	r5, #7
 800b0f4:	dc04      	bgt.n	800b100 <__hexnan+0x64>
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7ff ffa8 	bl	800b050 <L_shift>
 800b100:	4544      	cmp	r4, r8
 800b102:	d944      	bls.n	800b18e <__hexnan+0xf2>
 800b104:	2300      	movs	r3, #0
 800b106:	f1a4 0904 	sub.w	r9, r4, #4
 800b10a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b10e:	461d      	mov	r5, r3
 800b110:	464c      	mov	r4, r9
 800b112:	f8cd b008 	str.w	fp, [sp, #8]
 800b116:	9903      	ldr	r1, [sp, #12]
 800b118:	e7d7      	b.n	800b0ca <__hexnan+0x2e>
 800b11a:	2a29      	cmp	r2, #41	; 0x29
 800b11c:	d14a      	bne.n	800b1b4 <__hexnan+0x118>
 800b11e:	3102      	adds	r1, #2
 800b120:	f8ca 1000 	str.w	r1, [sl]
 800b124:	f1bb 0f00 	cmp.w	fp, #0
 800b128:	d044      	beq.n	800b1b4 <__hexnan+0x118>
 800b12a:	454c      	cmp	r4, r9
 800b12c:	d206      	bcs.n	800b13c <__hexnan+0xa0>
 800b12e:	2d07      	cmp	r5, #7
 800b130:	dc04      	bgt.n	800b13c <__hexnan+0xa0>
 800b132:	462a      	mov	r2, r5
 800b134:	4649      	mov	r1, r9
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff ff8a 	bl	800b050 <L_shift>
 800b13c:	4544      	cmp	r4, r8
 800b13e:	d928      	bls.n	800b192 <__hexnan+0xf6>
 800b140:	4643      	mov	r3, r8
 800b142:	f854 2b04 	ldr.w	r2, [r4], #4
 800b146:	42a6      	cmp	r6, r4
 800b148:	f843 2b04 	str.w	r2, [r3], #4
 800b14c:	d2f9      	bcs.n	800b142 <__hexnan+0xa6>
 800b14e:	2200      	movs	r2, #0
 800b150:	f843 2b04 	str.w	r2, [r3], #4
 800b154:	429e      	cmp	r6, r3
 800b156:	d2fb      	bcs.n	800b150 <__hexnan+0xb4>
 800b158:	6833      	ldr	r3, [r6, #0]
 800b15a:	b91b      	cbnz	r3, 800b164 <__hexnan+0xc8>
 800b15c:	4546      	cmp	r6, r8
 800b15e:	d127      	bne.n	800b1b0 <__hexnan+0x114>
 800b160:	2301      	movs	r3, #1
 800b162:	6033      	str	r3, [r6, #0]
 800b164:	2005      	movs	r0, #5
 800b166:	e026      	b.n	800b1b6 <__hexnan+0x11a>
 800b168:	3501      	adds	r5, #1
 800b16a:	2d08      	cmp	r5, #8
 800b16c:	f10b 0b01 	add.w	fp, fp, #1
 800b170:	dd06      	ble.n	800b180 <__hexnan+0xe4>
 800b172:	4544      	cmp	r4, r8
 800b174:	d9cf      	bls.n	800b116 <__hexnan+0x7a>
 800b176:	2300      	movs	r3, #0
 800b178:	2501      	movs	r5, #1
 800b17a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b17e:	3c04      	subs	r4, #4
 800b180:	6822      	ldr	r2, [r4, #0]
 800b182:	f000 000f 	and.w	r0, r0, #15
 800b186:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b18a:	6020      	str	r0, [r4, #0]
 800b18c:	e7c3      	b.n	800b116 <__hexnan+0x7a>
 800b18e:	2508      	movs	r5, #8
 800b190:	e7c1      	b.n	800b116 <__hexnan+0x7a>
 800b192:	9b01      	ldr	r3, [sp, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0df      	beq.n	800b158 <__hexnan+0xbc>
 800b198:	f04f 32ff 	mov.w	r2, #4294967295
 800b19c:	f1c3 0320 	rsb	r3, r3, #32
 800b1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b1a8:	401a      	ands	r2, r3
 800b1aa:	f847 2c04 	str.w	r2, [r7, #-4]
 800b1ae:	e7d3      	b.n	800b158 <__hexnan+0xbc>
 800b1b0:	3e04      	subs	r6, #4
 800b1b2:	e7d1      	b.n	800b158 <__hexnan+0xbc>
 800b1b4:	2004      	movs	r0, #4
 800b1b6:	b007      	add	sp, #28
 800b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1bc <__locale_ctype_ptr_l>:
 800b1bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b1c0:	4770      	bx	lr
	...

0800b1c4 <__locale_ctype_ptr>:
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <__locale_ctype_ptr+0x14>)
 800b1c6:	4a05      	ldr	r2, [pc, #20]	; (800b1dc <__locale_ctype_ptr+0x18>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6a1b      	ldr	r3, [r3, #32]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bf08      	it	eq
 800b1d0:	4613      	moveq	r3, r2
 800b1d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b1d6:	4770      	bx	lr
 800b1d8:	200001bc 	.word	0x200001bc
 800b1dc:	20000220 	.word	0x20000220

0800b1e0 <__localeconv_l>:
 800b1e0:	30f0      	adds	r0, #240	; 0xf0
 800b1e2:	4770      	bx	lr

0800b1e4 <__ascii_mbtowc>:
 800b1e4:	b082      	sub	sp, #8
 800b1e6:	b901      	cbnz	r1, 800b1ea <__ascii_mbtowc+0x6>
 800b1e8:	a901      	add	r1, sp, #4
 800b1ea:	b142      	cbz	r2, 800b1fe <__ascii_mbtowc+0x1a>
 800b1ec:	b14b      	cbz	r3, 800b202 <__ascii_mbtowc+0x1e>
 800b1ee:	7813      	ldrb	r3, [r2, #0]
 800b1f0:	600b      	str	r3, [r1, #0]
 800b1f2:	7812      	ldrb	r2, [r2, #0]
 800b1f4:	1c10      	adds	r0, r2, #0
 800b1f6:	bf18      	it	ne
 800b1f8:	2001      	movne	r0, #1
 800b1fa:	b002      	add	sp, #8
 800b1fc:	4770      	bx	lr
 800b1fe:	4610      	mov	r0, r2
 800b200:	e7fb      	b.n	800b1fa <__ascii_mbtowc+0x16>
 800b202:	f06f 0001 	mvn.w	r0, #1
 800b206:	e7f8      	b.n	800b1fa <__ascii_mbtowc+0x16>

0800b208 <_Balloc>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b20c:	4604      	mov	r4, r0
 800b20e:	460e      	mov	r6, r1
 800b210:	b93d      	cbnz	r5, 800b222 <_Balloc+0x1a>
 800b212:	2010      	movs	r0, #16
 800b214:	f001 f8a6 	bl	800c364 <malloc>
 800b218:	6260      	str	r0, [r4, #36]	; 0x24
 800b21a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b21e:	6005      	str	r5, [r0, #0]
 800b220:	60c5      	str	r5, [r0, #12]
 800b222:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b224:	68eb      	ldr	r3, [r5, #12]
 800b226:	b183      	cbz	r3, 800b24a <_Balloc+0x42>
 800b228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b230:	b9b8      	cbnz	r0, 800b262 <_Balloc+0x5a>
 800b232:	2101      	movs	r1, #1
 800b234:	fa01 f506 	lsl.w	r5, r1, r6
 800b238:	1d6a      	adds	r2, r5, #5
 800b23a:	0092      	lsls	r2, r2, #2
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 fbdb 	bl	800b9f8 <_calloc_r>
 800b242:	b160      	cbz	r0, 800b25e <_Balloc+0x56>
 800b244:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b248:	e00e      	b.n	800b268 <_Balloc+0x60>
 800b24a:	2221      	movs	r2, #33	; 0x21
 800b24c:	2104      	movs	r1, #4
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fbd2 	bl	800b9f8 <_calloc_r>
 800b254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b256:	60e8      	str	r0, [r5, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e4      	bne.n	800b228 <_Balloc+0x20>
 800b25e:	2000      	movs	r0, #0
 800b260:	bd70      	pop	{r4, r5, r6, pc}
 800b262:	6802      	ldr	r2, [r0, #0]
 800b264:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b268:	2300      	movs	r3, #0
 800b26a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b26e:	e7f7      	b.n	800b260 <_Balloc+0x58>

0800b270 <_Bfree>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b274:	4606      	mov	r6, r0
 800b276:	460d      	mov	r5, r1
 800b278:	b93c      	cbnz	r4, 800b28a <_Bfree+0x1a>
 800b27a:	2010      	movs	r0, #16
 800b27c:	f001 f872 	bl	800c364 <malloc>
 800b280:	6270      	str	r0, [r6, #36]	; 0x24
 800b282:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b286:	6004      	str	r4, [r0, #0]
 800b288:	60c4      	str	r4, [r0, #12]
 800b28a:	b13d      	cbz	r5, 800b29c <_Bfree+0x2c>
 800b28c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b28e:	686a      	ldr	r2, [r5, #4]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b296:	6029      	str	r1, [r5, #0]
 800b298:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b29c:	bd70      	pop	{r4, r5, r6, pc}

0800b29e <__multadd>:
 800b29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	461f      	mov	r7, r3
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	690d      	ldr	r5, [r1, #16]
 800b2ac:	f101 0c14 	add.w	ip, r1, #20
 800b2b0:	f8dc 0000 	ldr.w	r0, [ip]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	b281      	uxth	r1, r0
 800b2b8:	fb02 7101 	mla	r1, r2, r1, r7
 800b2bc:	0c00      	lsrs	r0, r0, #16
 800b2be:	0c0f      	lsrs	r7, r1, #16
 800b2c0:	fb02 7000 	mla	r0, r2, r0, r7
 800b2c4:	b289      	uxth	r1, r1
 800b2c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b2ca:	429d      	cmp	r5, r3
 800b2cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b2d0:	f84c 1b04 	str.w	r1, [ip], #4
 800b2d4:	dcec      	bgt.n	800b2b0 <__multadd+0x12>
 800b2d6:	b1d7      	cbz	r7, 800b30e <__multadd+0x70>
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	dc12      	bgt.n	800b304 <__multadd+0x66>
 800b2de:	6861      	ldr	r1, [r4, #4]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	3101      	adds	r1, #1
 800b2e4:	f7ff ff90 	bl	800b208 <_Balloc>
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	6922      	ldr	r2, [r4, #16]
 800b2ec:	f104 010c 	add.w	r1, r4, #12
 800b2f0:	3202      	adds	r2, #2
 800b2f2:	0092      	lsls	r2, r2, #2
 800b2f4:	300c      	adds	r0, #12
 800b2f6:	f7fe fcba 	bl	8009c6e <memcpy>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f7ff ffb7 	bl	800b270 <_Bfree>
 800b302:	4644      	mov	r4, r8
 800b304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b308:	3501      	adds	r5, #1
 800b30a:	615f      	str	r7, [r3, #20]
 800b30c:	6125      	str	r5, [r4, #16]
 800b30e:	4620      	mov	r0, r4
 800b310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b314 <__s2b>:
 800b314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b318:	4615      	mov	r5, r2
 800b31a:	2209      	movs	r2, #9
 800b31c:	461f      	mov	r7, r3
 800b31e:	3308      	adds	r3, #8
 800b320:	460c      	mov	r4, r1
 800b322:	fb93 f3f2 	sdiv	r3, r3, r2
 800b326:	4606      	mov	r6, r0
 800b328:	2201      	movs	r2, #1
 800b32a:	2100      	movs	r1, #0
 800b32c:	429a      	cmp	r2, r3
 800b32e:	db20      	blt.n	800b372 <__s2b+0x5e>
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ff69 	bl	800b208 <_Balloc>
 800b336:	9b08      	ldr	r3, [sp, #32]
 800b338:	2d09      	cmp	r5, #9
 800b33a:	6143      	str	r3, [r0, #20]
 800b33c:	f04f 0301 	mov.w	r3, #1
 800b340:	6103      	str	r3, [r0, #16]
 800b342:	dd19      	ble.n	800b378 <__s2b+0x64>
 800b344:	f104 0809 	add.w	r8, r4, #9
 800b348:	46c1      	mov	r9, r8
 800b34a:	442c      	add	r4, r5
 800b34c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b350:	4601      	mov	r1, r0
 800b352:	3b30      	subs	r3, #48	; 0x30
 800b354:	220a      	movs	r2, #10
 800b356:	4630      	mov	r0, r6
 800b358:	f7ff ffa1 	bl	800b29e <__multadd>
 800b35c:	45a1      	cmp	r9, r4
 800b35e:	d1f5      	bne.n	800b34c <__s2b+0x38>
 800b360:	eb08 0405 	add.w	r4, r8, r5
 800b364:	3c08      	subs	r4, #8
 800b366:	1b2d      	subs	r5, r5, r4
 800b368:	1963      	adds	r3, r4, r5
 800b36a:	42bb      	cmp	r3, r7
 800b36c:	db07      	blt.n	800b37e <__s2b+0x6a>
 800b36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b372:	0052      	lsls	r2, r2, #1
 800b374:	3101      	adds	r1, #1
 800b376:	e7d9      	b.n	800b32c <__s2b+0x18>
 800b378:	340a      	adds	r4, #10
 800b37a:	2509      	movs	r5, #9
 800b37c:	e7f3      	b.n	800b366 <__s2b+0x52>
 800b37e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b382:	4601      	mov	r1, r0
 800b384:	3b30      	subs	r3, #48	; 0x30
 800b386:	220a      	movs	r2, #10
 800b388:	4630      	mov	r0, r6
 800b38a:	f7ff ff88 	bl	800b29e <__multadd>
 800b38e:	e7eb      	b.n	800b368 <__s2b+0x54>

0800b390 <__hi0bits>:
 800b390:	0c02      	lsrs	r2, r0, #16
 800b392:	0412      	lsls	r2, r2, #16
 800b394:	4603      	mov	r3, r0
 800b396:	b9b2      	cbnz	r2, 800b3c6 <__hi0bits+0x36>
 800b398:	0403      	lsls	r3, r0, #16
 800b39a:	2010      	movs	r0, #16
 800b39c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3a0:	bf04      	itt	eq
 800b3a2:	021b      	lsleq	r3, r3, #8
 800b3a4:	3008      	addeq	r0, #8
 800b3a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3aa:	bf04      	itt	eq
 800b3ac:	011b      	lsleq	r3, r3, #4
 800b3ae:	3004      	addeq	r0, #4
 800b3b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3b4:	bf04      	itt	eq
 800b3b6:	009b      	lsleq	r3, r3, #2
 800b3b8:	3002      	addeq	r0, #2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	db06      	blt.n	800b3cc <__hi0bits+0x3c>
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	d503      	bpl.n	800b3ca <__hi0bits+0x3a>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	4770      	bx	lr
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	e7e8      	b.n	800b39c <__hi0bits+0xc>
 800b3ca:	2020      	movs	r0, #32
 800b3cc:	4770      	bx	lr

0800b3ce <__lo0bits>:
 800b3ce:	6803      	ldr	r3, [r0, #0]
 800b3d0:	4601      	mov	r1, r0
 800b3d2:	f013 0207 	ands.w	r2, r3, #7
 800b3d6:	d00b      	beq.n	800b3f0 <__lo0bits+0x22>
 800b3d8:	07da      	lsls	r2, r3, #31
 800b3da:	d423      	bmi.n	800b424 <__lo0bits+0x56>
 800b3dc:	0798      	lsls	r0, r3, #30
 800b3de:	bf49      	itett	mi
 800b3e0:	085b      	lsrmi	r3, r3, #1
 800b3e2:	089b      	lsrpl	r3, r3, #2
 800b3e4:	2001      	movmi	r0, #1
 800b3e6:	600b      	strmi	r3, [r1, #0]
 800b3e8:	bf5c      	itt	pl
 800b3ea:	600b      	strpl	r3, [r1, #0]
 800b3ec:	2002      	movpl	r0, #2
 800b3ee:	4770      	bx	lr
 800b3f0:	b298      	uxth	r0, r3
 800b3f2:	b9a8      	cbnz	r0, 800b420 <__lo0bits+0x52>
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	0c1b      	lsrs	r3, r3, #16
 800b3f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3fc:	bf04      	itt	eq
 800b3fe:	0a1b      	lsreq	r3, r3, #8
 800b400:	3008      	addeq	r0, #8
 800b402:	071a      	lsls	r2, r3, #28
 800b404:	bf04      	itt	eq
 800b406:	091b      	lsreq	r3, r3, #4
 800b408:	3004      	addeq	r0, #4
 800b40a:	079a      	lsls	r2, r3, #30
 800b40c:	bf04      	itt	eq
 800b40e:	089b      	lsreq	r3, r3, #2
 800b410:	3002      	addeq	r0, #2
 800b412:	07da      	lsls	r2, r3, #31
 800b414:	d402      	bmi.n	800b41c <__lo0bits+0x4e>
 800b416:	085b      	lsrs	r3, r3, #1
 800b418:	d006      	beq.n	800b428 <__lo0bits+0x5a>
 800b41a:	3001      	adds	r0, #1
 800b41c:	600b      	str	r3, [r1, #0]
 800b41e:	4770      	bx	lr
 800b420:	4610      	mov	r0, r2
 800b422:	e7e9      	b.n	800b3f8 <__lo0bits+0x2a>
 800b424:	2000      	movs	r0, #0
 800b426:	4770      	bx	lr
 800b428:	2020      	movs	r0, #32
 800b42a:	4770      	bx	lr

0800b42c <__i2b>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	460c      	mov	r4, r1
 800b430:	2101      	movs	r1, #1
 800b432:	f7ff fee9 	bl	800b208 <_Balloc>
 800b436:	2201      	movs	r2, #1
 800b438:	6144      	str	r4, [r0, #20]
 800b43a:	6102      	str	r2, [r0, #16]
 800b43c:	bd10      	pop	{r4, pc}

0800b43e <__multiply>:
 800b43e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b442:	4614      	mov	r4, r2
 800b444:	690a      	ldr	r2, [r1, #16]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	4688      	mov	r8, r1
 800b44a:	429a      	cmp	r2, r3
 800b44c:	bfbe      	ittt	lt
 800b44e:	460b      	movlt	r3, r1
 800b450:	46a0      	movlt	r8, r4
 800b452:	461c      	movlt	r4, r3
 800b454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b458:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b45c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b464:	eb07 0609 	add.w	r6, r7, r9
 800b468:	42b3      	cmp	r3, r6
 800b46a:	bfb8      	it	lt
 800b46c:	3101      	addlt	r1, #1
 800b46e:	f7ff fecb 	bl	800b208 <_Balloc>
 800b472:	f100 0514 	add.w	r5, r0, #20
 800b476:	462b      	mov	r3, r5
 800b478:	2200      	movs	r2, #0
 800b47a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b47e:	4573      	cmp	r3, lr
 800b480:	d316      	bcc.n	800b4b0 <__multiply+0x72>
 800b482:	f104 0214 	add.w	r2, r4, #20
 800b486:	f108 0114 	add.w	r1, r8, #20
 800b48a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b48e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	9b00      	ldr	r3, [sp, #0]
 800b496:	9201      	str	r2, [sp, #4]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d80c      	bhi.n	800b4b6 <__multiply+0x78>
 800b49c:	2e00      	cmp	r6, #0
 800b49e:	dd03      	ble.n	800b4a8 <__multiply+0x6a>
 800b4a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d05d      	beq.n	800b564 <__multiply+0x126>
 800b4a8:	6106      	str	r6, [r0, #16]
 800b4aa:	b003      	add	sp, #12
 800b4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b0:	f843 2b04 	str.w	r2, [r3], #4
 800b4b4:	e7e3      	b.n	800b47e <__multiply+0x40>
 800b4b6:	f8b2 b000 	ldrh.w	fp, [r2]
 800b4ba:	f1bb 0f00 	cmp.w	fp, #0
 800b4be:	d023      	beq.n	800b508 <__multiply+0xca>
 800b4c0:	4689      	mov	r9, r1
 800b4c2:	46ac      	mov	ip, r5
 800b4c4:	f04f 0800 	mov.w	r8, #0
 800b4c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b4cc:	f8dc a000 	ldr.w	sl, [ip]
 800b4d0:	b2a3      	uxth	r3, r4
 800b4d2:	fa1f fa8a 	uxth.w	sl, sl
 800b4d6:	fb0b a303 	mla	r3, fp, r3, sl
 800b4da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4de:	f8dc 4000 	ldr.w	r4, [ip]
 800b4e2:	4443      	add	r3, r8
 800b4e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b4e8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b4ec:	46e2      	mov	sl, ip
 800b4ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4f8:	454f      	cmp	r7, r9
 800b4fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b4fe:	f84a 3b04 	str.w	r3, [sl], #4
 800b502:	d82b      	bhi.n	800b55c <__multiply+0x11e>
 800b504:	f8cc 8004 	str.w	r8, [ip, #4]
 800b508:	9b01      	ldr	r3, [sp, #4]
 800b50a:	3204      	adds	r2, #4
 800b50c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b510:	f1ba 0f00 	cmp.w	sl, #0
 800b514:	d020      	beq.n	800b558 <__multiply+0x11a>
 800b516:	4689      	mov	r9, r1
 800b518:	46a8      	mov	r8, r5
 800b51a:	f04f 0b00 	mov.w	fp, #0
 800b51e:	682b      	ldr	r3, [r5, #0]
 800b520:	f8b9 c000 	ldrh.w	ip, [r9]
 800b524:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b52e:	46c4      	mov	ip, r8
 800b530:	445c      	add	r4, fp
 800b532:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b536:	f84c 3b04 	str.w	r3, [ip], #4
 800b53a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b53e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b542:	0c1b      	lsrs	r3, r3, #16
 800b544:	fb0a b303 	mla	r3, sl, r3, fp
 800b548:	454f      	cmp	r7, r9
 800b54a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b54e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b552:	d805      	bhi.n	800b560 <__multiply+0x122>
 800b554:	f8c8 3004 	str.w	r3, [r8, #4]
 800b558:	3504      	adds	r5, #4
 800b55a:	e79b      	b.n	800b494 <__multiply+0x56>
 800b55c:	46d4      	mov	ip, sl
 800b55e:	e7b3      	b.n	800b4c8 <__multiply+0x8a>
 800b560:	46e0      	mov	r8, ip
 800b562:	e7dd      	b.n	800b520 <__multiply+0xe2>
 800b564:	3e01      	subs	r6, #1
 800b566:	e799      	b.n	800b49c <__multiply+0x5e>

0800b568 <__pow5mult>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4615      	mov	r5, r2
 800b56e:	f012 0203 	ands.w	r2, r2, #3
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	d007      	beq.n	800b588 <__pow5mult+0x20>
 800b578:	4c21      	ldr	r4, [pc, #132]	; (800b600 <__pow5mult+0x98>)
 800b57a:	3a01      	subs	r2, #1
 800b57c:	2300      	movs	r3, #0
 800b57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b582:	f7ff fe8c 	bl	800b29e <__multadd>
 800b586:	4607      	mov	r7, r0
 800b588:	10ad      	asrs	r5, r5, #2
 800b58a:	d035      	beq.n	800b5f8 <__pow5mult+0x90>
 800b58c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b58e:	b93c      	cbnz	r4, 800b5a0 <__pow5mult+0x38>
 800b590:	2010      	movs	r0, #16
 800b592:	f000 fee7 	bl	800c364 <malloc>
 800b596:	6270      	str	r0, [r6, #36]	; 0x24
 800b598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b59c:	6004      	str	r4, [r0, #0]
 800b59e:	60c4      	str	r4, [r0, #12]
 800b5a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5a8:	b94c      	cbnz	r4, 800b5be <__pow5mult+0x56>
 800b5aa:	f240 2171 	movw	r1, #625	; 0x271
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff ff3c 	bl	800b42c <__i2b>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	f04f 0800 	mov.w	r8, #0
 800b5c2:	07eb      	lsls	r3, r5, #31
 800b5c4:	d50a      	bpl.n	800b5dc <__pow5mult+0x74>
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7ff ff37 	bl	800b43e <__multiply>
 800b5d0:	4681      	mov	r9, r0
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7ff fe4b 	bl	800b270 <_Bfree>
 800b5da:	464f      	mov	r7, r9
 800b5dc:	106d      	asrs	r5, r5, #1
 800b5de:	d00b      	beq.n	800b5f8 <__pow5mult+0x90>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	b938      	cbnz	r0, 800b5f4 <__pow5mult+0x8c>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f7ff ff28 	bl	800b43e <__multiply>
 800b5ee:	6020      	str	r0, [r4, #0]
 800b5f0:	f8c0 8000 	str.w	r8, [r0]
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	e7e4      	b.n	800b5c2 <__pow5mult+0x5a>
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fe:	bf00      	nop
 800b600:	0800d800 	.word	0x0800d800

0800b604 <__lshift>:
 800b604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	4607      	mov	r7, r0
 800b60c:	4616      	mov	r6, r2
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b614:	eb0a 0903 	add.w	r9, sl, r3
 800b618:	6849      	ldr	r1, [r1, #4]
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	f109 0501 	add.w	r5, r9, #1
 800b620:	42ab      	cmp	r3, r5
 800b622:	db32      	blt.n	800b68a <__lshift+0x86>
 800b624:	4638      	mov	r0, r7
 800b626:	f7ff fdef 	bl	800b208 <_Balloc>
 800b62a:	2300      	movs	r3, #0
 800b62c:	4680      	mov	r8, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	f100 0114 	add.w	r1, r0, #20
 800b634:	4553      	cmp	r3, sl
 800b636:	db2b      	blt.n	800b690 <__lshift+0x8c>
 800b638:	6920      	ldr	r0, [r4, #16]
 800b63a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b63e:	f104 0314 	add.w	r3, r4, #20
 800b642:	f016 021f 	ands.w	r2, r6, #31
 800b646:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b64a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b64e:	d025      	beq.n	800b69c <__lshift+0x98>
 800b650:	2000      	movs	r0, #0
 800b652:	f1c2 0e20 	rsb	lr, r2, #32
 800b656:	468a      	mov	sl, r1
 800b658:	681e      	ldr	r6, [r3, #0]
 800b65a:	4096      	lsls	r6, r2
 800b65c:	4330      	orrs	r0, r6
 800b65e:	f84a 0b04 	str.w	r0, [sl], #4
 800b662:	f853 0b04 	ldr.w	r0, [r3], #4
 800b666:	459c      	cmp	ip, r3
 800b668:	fa20 f00e 	lsr.w	r0, r0, lr
 800b66c:	d814      	bhi.n	800b698 <__lshift+0x94>
 800b66e:	6048      	str	r0, [r1, #4]
 800b670:	b108      	cbz	r0, 800b676 <__lshift+0x72>
 800b672:	f109 0502 	add.w	r5, r9, #2
 800b676:	3d01      	subs	r5, #1
 800b678:	4638      	mov	r0, r7
 800b67a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b67e:	4621      	mov	r1, r4
 800b680:	f7ff fdf6 	bl	800b270 <_Bfree>
 800b684:	4640      	mov	r0, r8
 800b686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68a:	3101      	adds	r1, #1
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	e7c7      	b.n	800b620 <__lshift+0x1c>
 800b690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b694:	3301      	adds	r3, #1
 800b696:	e7cd      	b.n	800b634 <__lshift+0x30>
 800b698:	4651      	mov	r1, sl
 800b69a:	e7dc      	b.n	800b656 <__lshift+0x52>
 800b69c:	3904      	subs	r1, #4
 800b69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a2:	459c      	cmp	ip, r3
 800b6a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6a8:	d8f9      	bhi.n	800b69e <__lshift+0x9a>
 800b6aa:	e7e4      	b.n	800b676 <__lshift+0x72>

0800b6ac <__mcmp>:
 800b6ac:	6903      	ldr	r3, [r0, #16]
 800b6ae:	690a      	ldr	r2, [r1, #16]
 800b6b0:	b530      	push	{r4, r5, lr}
 800b6b2:	1a9b      	subs	r3, r3, r2
 800b6b4:	d10c      	bne.n	800b6d0 <__mcmp+0x24>
 800b6b6:	0092      	lsls	r2, r2, #2
 800b6b8:	3014      	adds	r0, #20
 800b6ba:	3114      	adds	r1, #20
 800b6bc:	1884      	adds	r4, r0, r2
 800b6be:	4411      	add	r1, r2
 800b6c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6c8:	4295      	cmp	r5, r2
 800b6ca:	d003      	beq.n	800b6d4 <__mcmp+0x28>
 800b6cc:	d305      	bcc.n	800b6da <__mcmp+0x2e>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	bd30      	pop	{r4, r5, pc}
 800b6d4:	42a0      	cmp	r0, r4
 800b6d6:	d3f3      	bcc.n	800b6c0 <__mcmp+0x14>
 800b6d8:	e7fa      	b.n	800b6d0 <__mcmp+0x24>
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
 800b6de:	e7f7      	b.n	800b6d0 <__mcmp+0x24>

0800b6e0 <__mdiff>:
 800b6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e4:	460d      	mov	r5, r1
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	f7ff ffdd 	bl	800b6ac <__mcmp>
 800b6f2:	1e06      	subs	r6, r0, #0
 800b6f4:	d108      	bne.n	800b708 <__mdiff+0x28>
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f7ff fd85 	bl	800b208 <_Balloc>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b708:	bfa4      	itt	ge
 800b70a:	4623      	movge	r3, r4
 800b70c:	462c      	movge	r4, r5
 800b70e:	4638      	mov	r0, r7
 800b710:	6861      	ldr	r1, [r4, #4]
 800b712:	bfa6      	itte	ge
 800b714:	461d      	movge	r5, r3
 800b716:	2600      	movge	r6, #0
 800b718:	2601      	movlt	r6, #1
 800b71a:	f7ff fd75 	bl	800b208 <_Balloc>
 800b71e:	f04f 0e00 	mov.w	lr, #0
 800b722:	60c6      	str	r6, [r0, #12]
 800b724:	692b      	ldr	r3, [r5, #16]
 800b726:	6926      	ldr	r6, [r4, #16]
 800b728:	f104 0214 	add.w	r2, r4, #20
 800b72c:	f105 0914 	add.w	r9, r5, #20
 800b730:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b734:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b738:	f100 0114 	add.w	r1, r0, #20
 800b73c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b740:	f859 5b04 	ldr.w	r5, [r9], #4
 800b744:	fa1f f38a 	uxth.w	r3, sl
 800b748:	4473      	add	r3, lr
 800b74a:	b2ac      	uxth	r4, r5
 800b74c:	1b1b      	subs	r3, r3, r4
 800b74e:	0c2c      	lsrs	r4, r5, #16
 800b750:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b754:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b758:	b29b      	uxth	r3, r3
 800b75a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b75e:	45c8      	cmp	r8, r9
 800b760:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b764:	4694      	mov	ip, r2
 800b766:	f841 4b04 	str.w	r4, [r1], #4
 800b76a:	d8e7      	bhi.n	800b73c <__mdiff+0x5c>
 800b76c:	45bc      	cmp	ip, r7
 800b76e:	d304      	bcc.n	800b77a <__mdiff+0x9a>
 800b770:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b774:	b183      	cbz	r3, 800b798 <__mdiff+0xb8>
 800b776:	6106      	str	r6, [r0, #16]
 800b778:	e7c4      	b.n	800b704 <__mdiff+0x24>
 800b77a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b77e:	b2a2      	uxth	r2, r4
 800b780:	4472      	add	r2, lr
 800b782:	1413      	asrs	r3, r2, #16
 800b784:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b788:	b292      	uxth	r2, r2
 800b78a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b78e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b792:	f841 2b04 	str.w	r2, [r1], #4
 800b796:	e7e9      	b.n	800b76c <__mdiff+0x8c>
 800b798:	3e01      	subs	r6, #1
 800b79a:	e7e9      	b.n	800b770 <__mdiff+0x90>

0800b79c <__ulp>:
 800b79c:	4b10      	ldr	r3, [pc, #64]	; (800b7e0 <__ulp+0x44>)
 800b79e:	400b      	ands	r3, r1
 800b7a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dd02      	ble.n	800b7ae <__ulp+0x12>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4770      	bx	lr
 800b7ae:	425b      	negs	r3, r3
 800b7b0:	151b      	asrs	r3, r3, #20
 800b7b2:	2b13      	cmp	r3, #19
 800b7b4:	f04f 0000 	mov.w	r0, #0
 800b7b8:	f04f 0100 	mov.w	r1, #0
 800b7bc:	dc04      	bgt.n	800b7c8 <__ulp+0x2c>
 800b7be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b7c2:	fa42 f103 	asr.w	r1, r2, r3
 800b7c6:	4770      	bx	lr
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	3b14      	subs	r3, #20
 800b7cc:	2b1e      	cmp	r3, #30
 800b7ce:	bfce      	itee	gt
 800b7d0:	4613      	movgt	r3, r2
 800b7d2:	f1c3 031f 	rsble	r3, r3, #31
 800b7d6:	fa02 f303 	lslle.w	r3, r2, r3
 800b7da:	4618      	mov	r0, r3
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	7ff00000 	.word	0x7ff00000

0800b7e4 <__b2d>:
 800b7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e8:	6907      	ldr	r7, [r0, #16]
 800b7ea:	f100 0914 	add.w	r9, r0, #20
 800b7ee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b7f2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b7f6:	f1a7 0804 	sub.w	r8, r7, #4
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7ff fdc8 	bl	800b390 <__hi0bits>
 800b800:	f1c0 0320 	rsb	r3, r0, #32
 800b804:	280a      	cmp	r0, #10
 800b806:	600b      	str	r3, [r1, #0]
 800b808:	491e      	ldr	r1, [pc, #120]	; (800b884 <__b2d+0xa0>)
 800b80a:	dc17      	bgt.n	800b83c <__b2d+0x58>
 800b80c:	45c1      	cmp	r9, r8
 800b80e:	bf28      	it	cs
 800b810:	2200      	movcs	r2, #0
 800b812:	f1c0 0c0b 	rsb	ip, r0, #11
 800b816:	fa26 f30c 	lsr.w	r3, r6, ip
 800b81a:	bf38      	it	cc
 800b81c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b820:	ea43 0501 	orr.w	r5, r3, r1
 800b824:	f100 0315 	add.w	r3, r0, #21
 800b828:	fa06 f303 	lsl.w	r3, r6, r3
 800b82c:	fa22 f20c 	lsr.w	r2, r2, ip
 800b830:	ea43 0402 	orr.w	r4, r3, r2
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83c:	45c1      	cmp	r9, r8
 800b83e:	bf3a      	itte	cc
 800b840:	f1a7 0808 	subcc.w	r8, r7, #8
 800b844:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b848:	2200      	movcs	r2, #0
 800b84a:	f1b0 030b 	subs.w	r3, r0, #11
 800b84e:	d015      	beq.n	800b87c <__b2d+0x98>
 800b850:	409e      	lsls	r6, r3
 800b852:	f1c3 0720 	rsb	r7, r3, #32
 800b856:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b85a:	fa22 f107 	lsr.w	r1, r2, r7
 800b85e:	45c8      	cmp	r8, r9
 800b860:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b864:	ea46 0501 	orr.w	r5, r6, r1
 800b868:	bf94      	ite	ls
 800b86a:	2100      	movls	r1, #0
 800b86c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b870:	fa02 f003 	lsl.w	r0, r2, r3
 800b874:	40f9      	lsrs	r1, r7
 800b876:	ea40 0401 	orr.w	r4, r0, r1
 800b87a:	e7db      	b.n	800b834 <__b2d+0x50>
 800b87c:	ea46 0501 	orr.w	r5, r6, r1
 800b880:	4614      	mov	r4, r2
 800b882:	e7d7      	b.n	800b834 <__b2d+0x50>
 800b884:	3ff00000 	.word	0x3ff00000

0800b888 <__d2b>:
 800b888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b88c:	461c      	mov	r4, r3
 800b88e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b892:	2101      	movs	r1, #1
 800b894:	4690      	mov	r8, r2
 800b896:	f7ff fcb7 	bl	800b208 <_Balloc>
 800b89a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b89e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	bb34      	cbnz	r4, 800b8f4 <__d2b+0x6c>
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	f1b8 0200 	subs.w	r2, r8, #0
 800b8ac:	d027      	beq.n	800b8fe <__d2b+0x76>
 800b8ae:	a802      	add	r0, sp, #8
 800b8b0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b8b4:	f7ff fd8b 	bl	800b3ce <__lo0bits>
 800b8b8:	9900      	ldr	r1, [sp, #0]
 800b8ba:	b1f0      	cbz	r0, 800b8fa <__d2b+0x72>
 800b8bc:	9a01      	ldr	r2, [sp, #4]
 800b8be:	f1c0 0320 	rsb	r3, r0, #32
 800b8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	40c2      	lsrs	r2, r0
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	9201      	str	r2, [sp, #4]
 800b8ce:	9b01      	ldr	r3, [sp, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bf14      	ite	ne
 800b8d4:	2102      	movne	r1, #2
 800b8d6:	2101      	moveq	r1, #1
 800b8d8:	61bb      	str	r3, [r7, #24]
 800b8da:	6139      	str	r1, [r7, #16]
 800b8dc:	b1c4      	cbz	r4, 800b910 <__d2b+0x88>
 800b8de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b8e2:	4404      	add	r4, r0
 800b8e4:	6034      	str	r4, [r6, #0]
 800b8e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8ea:	6028      	str	r0, [r5, #0]
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	b002      	add	sp, #8
 800b8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b8f8:	e7d5      	b.n	800b8a6 <__d2b+0x1e>
 800b8fa:	6179      	str	r1, [r7, #20]
 800b8fc:	e7e7      	b.n	800b8ce <__d2b+0x46>
 800b8fe:	a801      	add	r0, sp, #4
 800b900:	f7ff fd65 	bl	800b3ce <__lo0bits>
 800b904:	2101      	movs	r1, #1
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	6139      	str	r1, [r7, #16]
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	3020      	adds	r0, #32
 800b90e:	e7e5      	b.n	800b8dc <__d2b+0x54>
 800b910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b914:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b918:	6030      	str	r0, [r6, #0]
 800b91a:	6918      	ldr	r0, [r3, #16]
 800b91c:	f7ff fd38 	bl	800b390 <__hi0bits>
 800b920:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b924:	e7e1      	b.n	800b8ea <__d2b+0x62>

0800b926 <__ratio>:
 800b926:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92a:	4688      	mov	r8, r1
 800b92c:	4669      	mov	r1, sp
 800b92e:	4681      	mov	r9, r0
 800b930:	f7ff ff58 	bl	800b7e4 <__b2d>
 800b934:	468b      	mov	fp, r1
 800b936:	4606      	mov	r6, r0
 800b938:	460f      	mov	r7, r1
 800b93a:	4640      	mov	r0, r8
 800b93c:	a901      	add	r1, sp, #4
 800b93e:	f7ff ff51 	bl	800b7e4 <__b2d>
 800b942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b946:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b94a:	460d      	mov	r5, r1
 800b94c:	eba3 0c02 	sub.w	ip, r3, r2
 800b950:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfd5      	itete	le
 800b95e:	460a      	movle	r2, r1
 800b960:	463a      	movgt	r2, r7
 800b962:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b966:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b96a:	bfd8      	it	le
 800b96c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b970:	462b      	mov	r3, r5
 800b972:	4602      	mov	r2, r0
 800b974:	4659      	mov	r1, fp
 800b976:	4630      	mov	r0, r6
 800b978:	f7f4 fed8 	bl	800072c <__aeabi_ddiv>
 800b97c:	b003      	add	sp, #12
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b982 <__copybits>:
 800b982:	3901      	subs	r1, #1
 800b984:	b510      	push	{r4, lr}
 800b986:	1149      	asrs	r1, r1, #5
 800b988:	6914      	ldr	r4, [r2, #16]
 800b98a:	3101      	adds	r1, #1
 800b98c:	f102 0314 	add.w	r3, r2, #20
 800b990:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b994:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b998:	42a3      	cmp	r3, r4
 800b99a:	4602      	mov	r2, r0
 800b99c:	d303      	bcc.n	800b9a6 <__copybits+0x24>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	428a      	cmp	r2, r1
 800b9a2:	d305      	bcc.n	800b9b0 <__copybits+0x2e>
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9aa:	f840 2b04 	str.w	r2, [r0], #4
 800b9ae:	e7f3      	b.n	800b998 <__copybits+0x16>
 800b9b0:	f842 3b04 	str.w	r3, [r2], #4
 800b9b4:	e7f4      	b.n	800b9a0 <__copybits+0x1e>

0800b9b6 <__any_on>:
 800b9b6:	f100 0214 	add.w	r2, r0, #20
 800b9ba:	6900      	ldr	r0, [r0, #16]
 800b9bc:	114b      	asrs	r3, r1, #5
 800b9be:	4298      	cmp	r0, r3
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	db11      	blt.n	800b9e8 <__any_on+0x32>
 800b9c4:	dd0a      	ble.n	800b9dc <__any_on+0x26>
 800b9c6:	f011 011f 	ands.w	r1, r1, #31
 800b9ca:	d007      	beq.n	800b9dc <__any_on+0x26>
 800b9cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9d0:	fa24 f001 	lsr.w	r0, r4, r1
 800b9d4:	fa00 f101 	lsl.w	r1, r0, r1
 800b9d8:	428c      	cmp	r4, r1
 800b9da:	d10b      	bne.n	800b9f4 <__any_on+0x3e>
 800b9dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d803      	bhi.n	800b9ec <__any_on+0x36>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	bd10      	pop	{r4, pc}
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	e7f7      	b.n	800b9dc <__any_on+0x26>
 800b9ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9f0:	2900      	cmp	r1, #0
 800b9f2:	d0f5      	beq.n	800b9e0 <__any_on+0x2a>
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	e7f6      	b.n	800b9e6 <__any_on+0x30>

0800b9f8 <_calloc_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	fb02 f401 	mul.w	r4, r2, r1
 800b9fe:	4621      	mov	r1, r4
 800ba00:	f000 f808 	bl	800ba14 <_malloc_r>
 800ba04:	4605      	mov	r5, r0
 800ba06:	b118      	cbz	r0, 800ba10 <_calloc_r+0x18>
 800ba08:	4622      	mov	r2, r4
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	f7fe f93a 	bl	8009c84 <memset>
 800ba10:	4628      	mov	r0, r5
 800ba12:	bd38      	pop	{r3, r4, r5, pc}

0800ba14 <_malloc_r>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	1ccd      	adds	r5, r1, #3
 800ba18:	f025 0503 	bic.w	r5, r5, #3
 800ba1c:	3508      	adds	r5, #8
 800ba1e:	2d0c      	cmp	r5, #12
 800ba20:	bf38      	it	cc
 800ba22:	250c      	movcc	r5, #12
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	4606      	mov	r6, r0
 800ba28:	db01      	blt.n	800ba2e <_malloc_r+0x1a>
 800ba2a:	42a9      	cmp	r1, r5
 800ba2c:	d903      	bls.n	800ba36 <_malloc_r+0x22>
 800ba2e:	230c      	movs	r3, #12
 800ba30:	6033      	str	r3, [r6, #0]
 800ba32:	2000      	movs	r0, #0
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	f000 fcab 	bl	800c390 <__malloc_lock>
 800ba3a:	4a21      	ldr	r2, [pc, #132]	; (800bac0 <_malloc_r+0xac>)
 800ba3c:	6814      	ldr	r4, [r2, #0]
 800ba3e:	4621      	mov	r1, r4
 800ba40:	b991      	cbnz	r1, 800ba68 <_malloc_r+0x54>
 800ba42:	4c20      	ldr	r4, [pc, #128]	; (800bac4 <_malloc_r+0xb0>)
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	b91b      	cbnz	r3, 800ba50 <_malloc_r+0x3c>
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f000 fb65 	bl	800c118 <_sbrk_r>
 800ba4e:	6020      	str	r0, [r4, #0]
 800ba50:	4629      	mov	r1, r5
 800ba52:	4630      	mov	r0, r6
 800ba54:	f000 fb60 	bl	800c118 <_sbrk_r>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d124      	bne.n	800baa6 <_malloc_r+0x92>
 800ba5c:	230c      	movs	r3, #12
 800ba5e:	4630      	mov	r0, r6
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	f000 fc96 	bl	800c392 <__malloc_unlock>
 800ba66:	e7e4      	b.n	800ba32 <_malloc_r+0x1e>
 800ba68:	680b      	ldr	r3, [r1, #0]
 800ba6a:	1b5b      	subs	r3, r3, r5
 800ba6c:	d418      	bmi.n	800baa0 <_malloc_r+0x8c>
 800ba6e:	2b0b      	cmp	r3, #11
 800ba70:	d90f      	bls.n	800ba92 <_malloc_r+0x7e>
 800ba72:	600b      	str	r3, [r1, #0]
 800ba74:	18cc      	adds	r4, r1, r3
 800ba76:	50cd      	str	r5, [r1, r3]
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f000 fc8a 	bl	800c392 <__malloc_unlock>
 800ba7e:	f104 000b 	add.w	r0, r4, #11
 800ba82:	1d23      	adds	r3, r4, #4
 800ba84:	f020 0007 	bic.w	r0, r0, #7
 800ba88:	1ac3      	subs	r3, r0, r3
 800ba8a:	d0d3      	beq.n	800ba34 <_malloc_r+0x20>
 800ba8c:	425a      	negs	r2, r3
 800ba8e:	50e2      	str	r2, [r4, r3]
 800ba90:	e7d0      	b.n	800ba34 <_malloc_r+0x20>
 800ba92:	684b      	ldr	r3, [r1, #4]
 800ba94:	428c      	cmp	r4, r1
 800ba96:	bf16      	itet	ne
 800ba98:	6063      	strne	r3, [r4, #4]
 800ba9a:	6013      	streq	r3, [r2, #0]
 800ba9c:	460c      	movne	r4, r1
 800ba9e:	e7eb      	b.n	800ba78 <_malloc_r+0x64>
 800baa0:	460c      	mov	r4, r1
 800baa2:	6849      	ldr	r1, [r1, #4]
 800baa4:	e7cc      	b.n	800ba40 <_malloc_r+0x2c>
 800baa6:	1cc4      	adds	r4, r0, #3
 800baa8:	f024 0403 	bic.w	r4, r4, #3
 800baac:	42a0      	cmp	r0, r4
 800baae:	d005      	beq.n	800babc <_malloc_r+0xa8>
 800bab0:	1a21      	subs	r1, r4, r0
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 fb30 	bl	800c118 <_sbrk_r>
 800bab8:	3001      	adds	r0, #1
 800baba:	d0cf      	beq.n	800ba5c <_malloc_r+0x48>
 800babc:	6025      	str	r5, [r4, #0]
 800babe:	e7db      	b.n	800ba78 <_malloc_r+0x64>
 800bac0:	200019cc 	.word	0x200019cc
 800bac4:	200019d0 	.word	0x200019d0

0800bac8 <_realloc_r>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	4607      	mov	r7, r0
 800bacc:	4614      	mov	r4, r2
 800bace:	460e      	mov	r6, r1
 800bad0:	b921      	cbnz	r1, 800badc <_realloc_r+0x14>
 800bad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bad6:	4611      	mov	r1, r2
 800bad8:	f7ff bf9c 	b.w	800ba14 <_malloc_r>
 800badc:	b922      	cbnz	r2, 800bae8 <_realloc_r+0x20>
 800bade:	f000 fc59 	bl	800c394 <_free_r>
 800bae2:	4625      	mov	r5, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae8:	f000 fca0 	bl	800c42c <_malloc_usable_size_r>
 800baec:	42a0      	cmp	r0, r4
 800baee:	d20f      	bcs.n	800bb10 <_realloc_r+0x48>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4638      	mov	r0, r7
 800baf4:	f7ff ff8e 	bl	800ba14 <_malloc_r>
 800baf8:	4605      	mov	r5, r0
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d0f2      	beq.n	800bae4 <_realloc_r+0x1c>
 800bafe:	4631      	mov	r1, r6
 800bb00:	4622      	mov	r2, r4
 800bb02:	f7fe f8b4 	bl	8009c6e <memcpy>
 800bb06:	4631      	mov	r1, r6
 800bb08:	4638      	mov	r0, r7
 800bb0a:	f000 fc43 	bl	800c394 <_free_r>
 800bb0e:	e7e9      	b.n	800bae4 <_realloc_r+0x1c>
 800bb10:	4635      	mov	r5, r6
 800bb12:	e7e7      	b.n	800bae4 <_realloc_r+0x1c>

0800bb14 <_sungetc_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	1c4b      	adds	r3, r1, #1
 800bb18:	4614      	mov	r4, r2
 800bb1a:	d103      	bne.n	800bb24 <_sungetc_r+0x10>
 800bb1c:	f04f 35ff 	mov.w	r5, #4294967295
 800bb20:	4628      	mov	r0, r5
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	8993      	ldrh	r3, [r2, #12]
 800bb26:	b2cd      	uxtb	r5, r1
 800bb28:	f023 0320 	bic.w	r3, r3, #32
 800bb2c:	8193      	strh	r3, [r2, #12]
 800bb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb30:	6852      	ldr	r2, [r2, #4]
 800bb32:	b18b      	cbz	r3, 800bb58 <_sungetc_r+0x44>
 800bb34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb36:	4293      	cmp	r3, r2
 800bb38:	dd08      	ble.n	800bb4c <_sungetc_r+0x38>
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	1e5a      	subs	r2, r3, #1
 800bb3e:	6022      	str	r2, [r4, #0]
 800bb40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb44:	6863      	ldr	r3, [r4, #4]
 800bb46:	3301      	adds	r3, #1
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	e7e9      	b.n	800bb20 <_sungetc_r+0xc>
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	f000 fbc3 	bl	800c2d8 <__submore>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d0f1      	beq.n	800bb3a <_sungetc_r+0x26>
 800bb56:	e7e1      	b.n	800bb1c <_sungetc_r+0x8>
 800bb58:	6921      	ldr	r1, [r4, #16]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	b151      	cbz	r1, 800bb74 <_sungetc_r+0x60>
 800bb5e:	4299      	cmp	r1, r3
 800bb60:	d208      	bcs.n	800bb74 <_sungetc_r+0x60>
 800bb62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb66:	42a9      	cmp	r1, r5
 800bb68:	d104      	bne.n	800bb74 <_sungetc_r+0x60>
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	3201      	adds	r2, #1
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	6062      	str	r2, [r4, #4]
 800bb72:	e7d5      	b.n	800bb20 <_sungetc_r+0xc>
 800bb74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bb78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb7e:	2303      	movs	r3, #3
 800bb80:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb82:	4623      	mov	r3, r4
 800bb84:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e7dc      	b.n	800bb48 <_sungetc_r+0x34>

0800bb8e <__ssrefill_r>:
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	460c      	mov	r4, r1
 800bb92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb94:	b169      	cbz	r1, 800bbb2 <__ssrefill_r+0x24>
 800bb96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	d001      	beq.n	800bba2 <__ssrefill_r+0x14>
 800bb9e:	f000 fbf9 	bl	800c394 <_free_r>
 800bba2:	2000      	movs	r0, #0
 800bba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bba6:	6360      	str	r0, [r4, #52]	; 0x34
 800bba8:	6063      	str	r3, [r4, #4]
 800bbaa:	b113      	cbz	r3, 800bbb2 <__ssrefill_r+0x24>
 800bbac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	bd10      	pop	{r4, pc}
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f043 0320 	orr.w	r3, r3, #32
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	e7f3      	b.n	800bbb0 <__ssrefill_r+0x22>

0800bbc8 <__ssvfiscanf_r>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	4692      	mov	sl, r2
 800bbd4:	270a      	movs	r7, #10
 800bbd6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bbda:	9144      	str	r1, [sp, #272]	; 0x110
 800bbdc:	9145      	str	r1, [sp, #276]	; 0x114
 800bbde:	499e      	ldr	r1, [pc, #632]	; (800be58 <__ssvfiscanf_r+0x290>)
 800bbe0:	f10d 0804 	add.w	r8, sp, #4
 800bbe4:	91a0      	str	r1, [sp, #640]	; 0x280
 800bbe6:	499d      	ldr	r1, [pc, #628]	; (800be5c <__ssvfiscanf_r+0x294>)
 800bbe8:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800be60 <__ssvfiscanf_r+0x298>
 800bbec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bbf0:	91a1      	str	r1, [sp, #644]	; 0x284
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 812a 	beq.w	800be52 <__ssvfiscanf_r+0x28a>
 800bbfe:	4655      	mov	r5, sl
 800bc00:	f7ff fae0 	bl	800b1c4 <__locale_ctype_ptr>
 800bc04:	f815 bb01 	ldrb.w	fp, [r5], #1
 800bc08:	4458      	add	r0, fp
 800bc0a:	7843      	ldrb	r3, [r0, #1]
 800bc0c:	f013 0308 	ands.w	r3, r3, #8
 800bc10:	d01c      	beq.n	800bc4c <__ssvfiscanf_r+0x84>
 800bc12:	6863      	ldr	r3, [r4, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dd12      	ble.n	800bc3e <__ssvfiscanf_r+0x76>
 800bc18:	f7ff fad4 	bl	800b1c4 <__locale_ctype_ptr>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	781a      	ldrb	r2, [r3, #0]
 800bc20:	4410      	add	r0, r2
 800bc22:	7842      	ldrb	r2, [r0, #1]
 800bc24:	0712      	lsls	r2, r2, #28
 800bc26:	d401      	bmi.n	800bc2c <__ssvfiscanf_r+0x64>
 800bc28:	46aa      	mov	sl, r5
 800bc2a:	e7e3      	b.n	800bbf4 <__ssvfiscanf_r+0x2c>
 800bc2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc2e:	3301      	adds	r3, #1
 800bc30:	3201      	adds	r2, #1
 800bc32:	9245      	str	r2, [sp, #276]	; 0x114
 800bc34:	6862      	ldr	r2, [r4, #4]
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	6062      	str	r2, [r4, #4]
 800bc3c:	e7e9      	b.n	800bc12 <__ssvfiscanf_r+0x4a>
 800bc3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc40:	4621      	mov	r1, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	4798      	blx	r3
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d0e6      	beq.n	800bc18 <__ssvfiscanf_r+0x50>
 800bc4a:	e7ed      	b.n	800bc28 <__ssvfiscanf_r+0x60>
 800bc4c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800bc50:	f040 8082 	bne.w	800bd58 <__ssvfiscanf_r+0x190>
 800bc54:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc56:	9341      	str	r3, [sp, #260]	; 0x104
 800bc58:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800bc5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5e:	d103      	bne.n	800bc68 <__ssvfiscanf_r+0xa0>
 800bc60:	2310      	movs	r3, #16
 800bc62:	f10a 0502 	add.w	r5, sl, #2
 800bc66:	9341      	str	r3, [sp, #260]	; 0x104
 800bc68:	46aa      	mov	sl, r5
 800bc6a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800bc6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc72:	2a09      	cmp	r2, #9
 800bc74:	d922      	bls.n	800bcbc <__ssvfiscanf_r+0xf4>
 800bc76:	2203      	movs	r2, #3
 800bc78:	4879      	ldr	r0, [pc, #484]	; (800be60 <__ssvfiscanf_r+0x298>)
 800bc7a:	f000 fb7b 	bl	800c374 <memchr>
 800bc7e:	b138      	cbz	r0, 800bc90 <__ssvfiscanf_r+0xc8>
 800bc80:	eba0 0309 	sub.w	r3, r0, r9
 800bc84:	2001      	movs	r0, #1
 800bc86:	46aa      	mov	sl, r5
 800bc88:	4098      	lsls	r0, r3
 800bc8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc8c:	4318      	orrs	r0, r3
 800bc8e:	9041      	str	r0, [sp, #260]	; 0x104
 800bc90:	f89a 3000 	ldrb.w	r3, [sl]
 800bc94:	f10a 0501 	add.w	r5, sl, #1
 800bc98:	2b67      	cmp	r3, #103	; 0x67
 800bc9a:	d82b      	bhi.n	800bcf4 <__ssvfiscanf_r+0x12c>
 800bc9c:	2b65      	cmp	r3, #101	; 0x65
 800bc9e:	f080 809f 	bcs.w	800bde0 <__ssvfiscanf_r+0x218>
 800bca2:	2b47      	cmp	r3, #71	; 0x47
 800bca4:	d810      	bhi.n	800bcc8 <__ssvfiscanf_r+0x100>
 800bca6:	2b45      	cmp	r3, #69	; 0x45
 800bca8:	f080 809a 	bcs.w	800bde0 <__ssvfiscanf_r+0x218>
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d06c      	beq.n	800bd8a <__ssvfiscanf_r+0x1c2>
 800bcb0:	2b25      	cmp	r3, #37	; 0x25
 800bcb2:	d051      	beq.n	800bd58 <__ssvfiscanf_r+0x190>
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	9742      	str	r7, [sp, #264]	; 0x108
 800bcb8:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcba:	e027      	b.n	800bd0c <__ssvfiscanf_r+0x144>
 800bcbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bcbe:	fb07 1303 	mla	r3, r7, r3, r1
 800bcc2:	3b30      	subs	r3, #48	; 0x30
 800bcc4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bcc6:	e7cf      	b.n	800bc68 <__ssvfiscanf_r+0xa0>
 800bcc8:	2b5b      	cmp	r3, #91	; 0x5b
 800bcca:	d06a      	beq.n	800bda2 <__ssvfiscanf_r+0x1da>
 800bccc:	d80c      	bhi.n	800bce8 <__ssvfiscanf_r+0x120>
 800bcce:	2b58      	cmp	r3, #88	; 0x58
 800bcd0:	d1f0      	bne.n	800bcb4 <__ssvfiscanf_r+0xec>
 800bcd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bcd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcd8:	9241      	str	r2, [sp, #260]	; 0x104
 800bcda:	2210      	movs	r2, #16
 800bcdc:	9242      	str	r2, [sp, #264]	; 0x108
 800bcde:	2b6e      	cmp	r3, #110	; 0x6e
 800bce0:	bf8c      	ite	hi
 800bce2:	2304      	movhi	r3, #4
 800bce4:	2303      	movls	r3, #3
 800bce6:	e010      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bce8:	2b63      	cmp	r3, #99	; 0x63
 800bcea:	d065      	beq.n	800bdb8 <__ssvfiscanf_r+0x1f0>
 800bcec:	2b64      	cmp	r3, #100	; 0x64
 800bcee:	d1e1      	bne.n	800bcb4 <__ssvfiscanf_r+0xec>
 800bcf0:	9742      	str	r7, [sp, #264]	; 0x108
 800bcf2:	e7f4      	b.n	800bcde <__ssvfiscanf_r+0x116>
 800bcf4:	2b70      	cmp	r3, #112	; 0x70
 800bcf6:	d04b      	beq.n	800bd90 <__ssvfiscanf_r+0x1c8>
 800bcf8:	d826      	bhi.n	800bd48 <__ssvfiscanf_r+0x180>
 800bcfa:	2b6e      	cmp	r3, #110	; 0x6e
 800bcfc:	d062      	beq.n	800bdc4 <__ssvfiscanf_r+0x1fc>
 800bcfe:	d84c      	bhi.n	800bd9a <__ssvfiscanf_r+0x1d2>
 800bd00:	2b69      	cmp	r3, #105	; 0x69
 800bd02:	d1d7      	bne.n	800bcb4 <__ssvfiscanf_r+0xec>
 800bd04:	2300      	movs	r3, #0
 800bd06:	9342      	str	r3, [sp, #264]	; 0x108
 800bd08:	2303      	movs	r3, #3
 800bd0a:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd0c:	6863      	ldr	r3, [r4, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dd68      	ble.n	800bde4 <__ssvfiscanf_r+0x21c>
 800bd12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd14:	0659      	lsls	r1, r3, #25
 800bd16:	d407      	bmi.n	800bd28 <__ssvfiscanf_r+0x160>
 800bd18:	f7ff fa54 	bl	800b1c4 <__locale_ctype_ptr>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	4410      	add	r0, r2
 800bd22:	7842      	ldrb	r2, [r0, #1]
 800bd24:	0712      	lsls	r2, r2, #28
 800bd26:	d464      	bmi.n	800bdf2 <__ssvfiscanf_r+0x22a>
 800bd28:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	dc73      	bgt.n	800be16 <__ssvfiscanf_r+0x24e>
 800bd2e:	466b      	mov	r3, sp
 800bd30:	4622      	mov	r2, r4
 800bd32:	a941      	add	r1, sp, #260	; 0x104
 800bd34:	4630      	mov	r0, r6
 800bd36:	f000 f897 	bl	800be68 <_scanf_chars>
 800bd3a:	2801      	cmp	r0, #1
 800bd3c:	f000 8089 	beq.w	800be52 <__ssvfiscanf_r+0x28a>
 800bd40:	2802      	cmp	r0, #2
 800bd42:	f47f af71 	bne.w	800bc28 <__ssvfiscanf_r+0x60>
 800bd46:	e01d      	b.n	800bd84 <__ssvfiscanf_r+0x1bc>
 800bd48:	2b75      	cmp	r3, #117	; 0x75
 800bd4a:	d0d1      	beq.n	800bcf0 <__ssvfiscanf_r+0x128>
 800bd4c:	2b78      	cmp	r3, #120	; 0x78
 800bd4e:	d0c0      	beq.n	800bcd2 <__ssvfiscanf_r+0x10a>
 800bd50:	2b73      	cmp	r3, #115	; 0x73
 800bd52:	d1af      	bne.n	800bcb4 <__ssvfiscanf_r+0xec>
 800bd54:	2302      	movs	r3, #2
 800bd56:	e7d8      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bd58:	6863      	ldr	r3, [r4, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dd0c      	ble.n	800bd78 <__ssvfiscanf_r+0x1b0>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	781a      	ldrb	r2, [r3, #0]
 800bd62:	455a      	cmp	r2, fp
 800bd64:	d175      	bne.n	800be52 <__ssvfiscanf_r+0x28a>
 800bd66:	3301      	adds	r3, #1
 800bd68:	6862      	ldr	r2, [r4, #4]
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bd6e:	3a01      	subs	r2, #1
 800bd70:	3301      	adds	r3, #1
 800bd72:	6062      	str	r2, [r4, #4]
 800bd74:	9345      	str	r3, [sp, #276]	; 0x114
 800bd76:	e757      	b.n	800bc28 <__ssvfiscanf_r+0x60>
 800bd78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4798      	blx	r3
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d0ec      	beq.n	800bd5e <__ssvfiscanf_r+0x196>
 800bd84:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d159      	bne.n	800be3e <__ssvfiscanf_r+0x276>
 800bd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8e:	e05c      	b.n	800be4a <__ssvfiscanf_r+0x282>
 800bd90:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd92:	f042 0220 	orr.w	r2, r2, #32
 800bd96:	9241      	str	r2, [sp, #260]	; 0x104
 800bd98:	e79b      	b.n	800bcd2 <__ssvfiscanf_r+0x10a>
 800bd9a:	2308      	movs	r3, #8
 800bd9c:	9342      	str	r3, [sp, #264]	; 0x108
 800bd9e:	2304      	movs	r3, #4
 800bda0:	e7b3      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bda2:	4629      	mov	r1, r5
 800bda4:	4640      	mov	r0, r8
 800bda6:	f000 f9c7 	bl	800c138 <__sccl>
 800bdaa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bdac:	4605      	mov	r5, r0
 800bdae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb2:	9341      	str	r3, [sp, #260]	; 0x104
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e7a8      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bdb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdbe:	9341      	str	r3, [sp, #260]	; 0x104
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e7a2      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bdc4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bdc6:	06c3      	lsls	r3, r0, #27
 800bdc8:	f53f af2e 	bmi.w	800bc28 <__ssvfiscanf_r+0x60>
 800bdcc:	9b00      	ldr	r3, [sp, #0]
 800bdce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bdd0:	1d19      	adds	r1, r3, #4
 800bdd2:	9100      	str	r1, [sp, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	07c0      	lsls	r0, r0, #31
 800bdd8:	bf4c      	ite	mi
 800bdda:	801a      	strhmi	r2, [r3, #0]
 800bddc:	601a      	strpl	r2, [r3, #0]
 800bdde:	e723      	b.n	800bc28 <__ssvfiscanf_r+0x60>
 800bde0:	2305      	movs	r3, #5
 800bde2:	e792      	b.n	800bd0a <__ssvfiscanf_r+0x142>
 800bde4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bde6:	4621      	mov	r1, r4
 800bde8:	4630      	mov	r0, r6
 800bdea:	4798      	blx	r3
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d090      	beq.n	800bd12 <__ssvfiscanf_r+0x14a>
 800bdf0:	e7c8      	b.n	800bd84 <__ssvfiscanf_r+0x1bc>
 800bdf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bdf4:	3201      	adds	r2, #1
 800bdf6:	9245      	str	r2, [sp, #276]	; 0x114
 800bdf8:	6862      	ldr	r2, [r4, #4]
 800bdfa:	3a01      	subs	r2, #1
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	6062      	str	r2, [r4, #4]
 800be00:	dd02      	ble.n	800be08 <__ssvfiscanf_r+0x240>
 800be02:	3301      	adds	r3, #1
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	e787      	b.n	800bd18 <__ssvfiscanf_r+0x150>
 800be08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be0a:	4621      	mov	r1, r4
 800be0c:	4630      	mov	r0, r6
 800be0e:	4798      	blx	r3
 800be10:	2800      	cmp	r0, #0
 800be12:	d081      	beq.n	800bd18 <__ssvfiscanf_r+0x150>
 800be14:	e7b6      	b.n	800bd84 <__ssvfiscanf_r+0x1bc>
 800be16:	2b04      	cmp	r3, #4
 800be18:	dc06      	bgt.n	800be28 <__ssvfiscanf_r+0x260>
 800be1a:	466b      	mov	r3, sp
 800be1c:	4622      	mov	r2, r4
 800be1e:	a941      	add	r1, sp, #260	; 0x104
 800be20:	4630      	mov	r0, r6
 800be22:	f000 f883 	bl	800bf2c <_scanf_i>
 800be26:	e788      	b.n	800bd3a <__ssvfiscanf_r+0x172>
 800be28:	4b0e      	ldr	r3, [pc, #56]	; (800be64 <__ssvfiscanf_r+0x29c>)
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f43f aefc 	beq.w	800bc28 <__ssvfiscanf_r+0x60>
 800be30:	466b      	mov	r3, sp
 800be32:	4622      	mov	r2, r4
 800be34:	a941      	add	r1, sp, #260	; 0x104
 800be36:	4630      	mov	r0, r6
 800be38:	f3af 8000 	nop.w
 800be3c:	e77d      	b.n	800bd3a <__ssvfiscanf_r+0x172>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be44:	bf18      	it	ne
 800be46:	f04f 30ff 	movne.w	r0, #4294967295
 800be4a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be52:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be54:	e7f9      	b.n	800be4a <__ssvfiscanf_r+0x282>
 800be56:	bf00      	nop
 800be58:	0800bb15 	.word	0x0800bb15
 800be5c:	0800bb8f 	.word	0x0800bb8f
 800be60:	0800d80c 	.word	0x0800d80c
 800be64:	00000000 	.word	0x00000000

0800be68 <_scanf_chars>:
 800be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6c:	4615      	mov	r5, r2
 800be6e:	688a      	ldr	r2, [r1, #8]
 800be70:	4680      	mov	r8, r0
 800be72:	460c      	mov	r4, r1
 800be74:	b932      	cbnz	r2, 800be84 <_scanf_chars+0x1c>
 800be76:	698a      	ldr	r2, [r1, #24]
 800be78:	2a00      	cmp	r2, #0
 800be7a:	bf14      	ite	ne
 800be7c:	f04f 32ff 	movne.w	r2, #4294967295
 800be80:	2201      	moveq	r2, #1
 800be82:	608a      	str	r2, [r1, #8]
 800be84:	2600      	movs	r6, #0
 800be86:	6822      	ldr	r2, [r4, #0]
 800be88:	06d1      	lsls	r1, r2, #27
 800be8a:	bf5f      	itttt	pl
 800be8c:	681a      	ldrpl	r2, [r3, #0]
 800be8e:	1d11      	addpl	r1, r2, #4
 800be90:	6019      	strpl	r1, [r3, #0]
 800be92:	6817      	ldrpl	r7, [r2, #0]
 800be94:	69a3      	ldr	r3, [r4, #24]
 800be96:	b1db      	cbz	r3, 800bed0 <_scanf_chars+0x68>
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d107      	bne.n	800beac <_scanf_chars+0x44>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	6962      	ldr	r2, [r4, #20]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	5cd3      	ldrb	r3, [r2, r3]
 800bea4:	b9a3      	cbnz	r3, 800bed0 <_scanf_chars+0x68>
 800bea6:	2e00      	cmp	r6, #0
 800bea8:	d131      	bne.n	800bf0e <_scanf_chars+0xa6>
 800beaa:	e006      	b.n	800beba <_scanf_chars+0x52>
 800beac:	2b02      	cmp	r3, #2
 800beae:	d007      	beq.n	800bec0 <_scanf_chars+0x58>
 800beb0:	2e00      	cmp	r6, #0
 800beb2:	d12c      	bne.n	800bf0e <_scanf_chars+0xa6>
 800beb4:	69a3      	ldr	r3, [r4, #24]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d129      	bne.n	800bf0e <_scanf_chars+0xa6>
 800beba:	2001      	movs	r0, #1
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec0:	f7ff f980 	bl	800b1c4 <__locale_ctype_ptr>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	4418      	add	r0, r3
 800beca:	7843      	ldrb	r3, [r0, #1]
 800becc:	071b      	lsls	r3, r3, #28
 800bece:	d4ef      	bmi.n	800beb0 <_scanf_chars+0x48>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	3601      	adds	r6, #1
 800bed4:	06da      	lsls	r2, r3, #27
 800bed6:	bf5e      	ittt	pl
 800bed8:	682b      	ldrpl	r3, [r5, #0]
 800beda:	781b      	ldrbpl	r3, [r3, #0]
 800bedc:	703b      	strbpl	r3, [r7, #0]
 800bede:	682a      	ldr	r2, [r5, #0]
 800bee0:	686b      	ldr	r3, [r5, #4]
 800bee2:	f102 0201 	add.w	r2, r2, #1
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	68a2      	ldr	r2, [r4, #8]
 800beea:	f103 33ff 	add.w	r3, r3, #4294967295
 800beee:	f102 32ff 	add.w	r2, r2, #4294967295
 800bef2:	606b      	str	r3, [r5, #4]
 800bef4:	bf58      	it	pl
 800bef6:	3701      	addpl	r7, #1
 800bef8:	60a2      	str	r2, [r4, #8]
 800befa:	b142      	cbz	r2, 800bf0e <_scanf_chars+0xa6>
 800befc:	2b00      	cmp	r3, #0
 800befe:	dcc9      	bgt.n	800be94 <_scanf_chars+0x2c>
 800bf00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf04:	4629      	mov	r1, r5
 800bf06:	4640      	mov	r0, r8
 800bf08:	4798      	blx	r3
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0c2      	beq.n	800be94 <_scanf_chars+0x2c>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	f013 0310 	ands.w	r3, r3, #16
 800bf14:	d105      	bne.n	800bf22 <_scanf_chars+0xba>
 800bf16:	68e2      	ldr	r2, [r4, #12]
 800bf18:	3201      	adds	r2, #1
 800bf1a:	60e2      	str	r2, [r4, #12]
 800bf1c:	69a2      	ldr	r2, [r4, #24]
 800bf1e:	b102      	cbz	r2, 800bf22 <_scanf_chars+0xba>
 800bf20:	703b      	strb	r3, [r7, #0]
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	2000      	movs	r0, #0
 800bf26:	441e      	add	r6, r3
 800bf28:	6126      	str	r6, [r4, #16]
 800bf2a:	e7c7      	b.n	800bebc <_scanf_chars+0x54>

0800bf2c <_scanf_i>:
 800bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf30:	460c      	mov	r4, r1
 800bf32:	469a      	mov	sl, r3
 800bf34:	4b74      	ldr	r3, [pc, #464]	; (800c108 <_scanf_i+0x1dc>)
 800bf36:	b087      	sub	sp, #28
 800bf38:	4683      	mov	fp, r0
 800bf3a:	4616      	mov	r6, r2
 800bf3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf40:	ab03      	add	r3, sp, #12
 800bf42:	68a7      	ldr	r7, [r4, #8]
 800bf44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bf48:	4b70      	ldr	r3, [pc, #448]	; (800c10c <_scanf_i+0x1e0>)
 800bf4a:	69a1      	ldr	r1, [r4, #24]
 800bf4c:	4a70      	ldr	r2, [pc, #448]	; (800c110 <_scanf_i+0x1e4>)
 800bf4e:	f104 091c 	add.w	r9, r4, #28
 800bf52:	2903      	cmp	r1, #3
 800bf54:	bf08      	it	eq
 800bf56:	461a      	moveq	r2, r3
 800bf58:	1e7b      	subs	r3, r7, #1
 800bf5a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bf5e:	bf84      	itt	hi
 800bf60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bf64:	60a3      	strhi	r3, [r4, #8]
 800bf66:	6823      	ldr	r3, [r4, #0]
 800bf68:	bf88      	it	hi
 800bf6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bf6e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	bf98      	it	ls
 800bf76:	2700      	movls	r7, #0
 800bf78:	464b      	mov	r3, r9
 800bf7a:	f04f 0800 	mov.w	r8, #0
 800bf7e:	9200      	str	r2, [sp, #0]
 800bf80:	bf88      	it	hi
 800bf82:	197f      	addhi	r7, r7, r5
 800bf84:	6831      	ldr	r1, [r6, #0]
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	ab03      	add	r3, sp, #12
 800bf8a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	7809      	ldrb	r1, [r1, #0]
 800bf92:	f000 f9ef 	bl	800c374 <memchr>
 800bf96:	9b01      	ldr	r3, [sp, #4]
 800bf98:	b330      	cbz	r0, 800bfe8 <_scanf_i+0xbc>
 800bf9a:	f1b8 0f01 	cmp.w	r8, #1
 800bf9e:	d15a      	bne.n	800c056 <_scanf_i+0x12a>
 800bfa0:	6862      	ldr	r2, [r4, #4]
 800bfa2:	b92a      	cbnz	r2, 800bfb0 <_scanf_i+0x84>
 800bfa4:	2108      	movs	r1, #8
 800bfa6:	6822      	ldr	r2, [r4, #0]
 800bfa8:	6061      	str	r1, [r4, #4]
 800bfaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfae:	6022      	str	r2, [r4, #0]
 800bfb0:	6822      	ldr	r2, [r4, #0]
 800bfb2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bfb6:	6022      	str	r2, [r4, #0]
 800bfb8:	68a2      	ldr	r2, [r4, #8]
 800bfba:	1e51      	subs	r1, r2, #1
 800bfbc:	60a1      	str	r1, [r4, #8]
 800bfbe:	b19a      	cbz	r2, 800bfe8 <_scanf_i+0xbc>
 800bfc0:	6832      	ldr	r2, [r6, #0]
 800bfc2:	1c5d      	adds	r5, r3, #1
 800bfc4:	1c51      	adds	r1, r2, #1
 800bfc6:	6031      	str	r1, [r6, #0]
 800bfc8:	7812      	ldrb	r2, [r2, #0]
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	6873      	ldr	r3, [r6, #4]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	6073      	str	r3, [r6, #4]
 800bfd4:	dc07      	bgt.n	800bfe6 <_scanf_i+0xba>
 800bfd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4658      	mov	r0, fp
 800bfde:	4798      	blx	r3
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f040 8087 	bne.w	800c0f4 <_scanf_i+0x1c8>
 800bfe6:	462b      	mov	r3, r5
 800bfe8:	f108 0801 	add.w	r8, r8, #1
 800bfec:	f1b8 0f03 	cmp.w	r8, #3
 800bff0:	d1c8      	bne.n	800bf84 <_scanf_i+0x58>
 800bff2:	6862      	ldr	r2, [r4, #4]
 800bff4:	b90a      	cbnz	r2, 800bffa <_scanf_i+0xce>
 800bff6:	220a      	movs	r2, #10
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	4945      	ldr	r1, [pc, #276]	; (800c114 <_scanf_i+0x1e8>)
 800bffe:	6960      	ldr	r0, [r4, #20]
 800c000:	1a89      	subs	r1, r1, r2
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	f000 f898 	bl	800c138 <__sccl>
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	f04f 0800 	mov.w	r8, #0
 800c00e:	461d      	mov	r5, r3
 800c010:	68a3      	ldr	r3, [r4, #8]
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d03b      	beq.n	800c090 <_scanf_i+0x164>
 800c018:	6831      	ldr	r1, [r6, #0]
 800c01a:	6960      	ldr	r0, [r4, #20]
 800c01c:	f891 c000 	ldrb.w	ip, [r1]
 800c020:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c024:	2800      	cmp	r0, #0
 800c026:	d033      	beq.n	800c090 <_scanf_i+0x164>
 800c028:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c02c:	d121      	bne.n	800c072 <_scanf_i+0x146>
 800c02e:	0510      	lsls	r0, r2, #20
 800c030:	d51f      	bpl.n	800c072 <_scanf_i+0x146>
 800c032:	f108 0801 	add.w	r8, r8, #1
 800c036:	b117      	cbz	r7, 800c03e <_scanf_i+0x112>
 800c038:	3301      	adds	r3, #1
 800c03a:	3f01      	subs	r7, #1
 800c03c:	60a3      	str	r3, [r4, #8]
 800c03e:	6873      	ldr	r3, [r6, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	6073      	str	r3, [r6, #4]
 800c046:	dd1c      	ble.n	800c082 <_scanf_i+0x156>
 800c048:	6833      	ldr	r3, [r6, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	6033      	str	r3, [r6, #0]
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	3b01      	subs	r3, #1
 800c052:	60a3      	str	r3, [r4, #8]
 800c054:	e7dc      	b.n	800c010 <_scanf_i+0xe4>
 800c056:	f1b8 0f02 	cmp.w	r8, #2
 800c05a:	d1ad      	bne.n	800bfb8 <_scanf_i+0x8c>
 800c05c:	6822      	ldr	r2, [r4, #0]
 800c05e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c062:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c066:	d1bf      	bne.n	800bfe8 <_scanf_i+0xbc>
 800c068:	2110      	movs	r1, #16
 800c06a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c06e:	6061      	str	r1, [r4, #4]
 800c070:	e7a1      	b.n	800bfb6 <_scanf_i+0x8a>
 800c072:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	780b      	ldrb	r3, [r1, #0]
 800c07a:	3501      	adds	r5, #1
 800c07c:	f805 3c01 	strb.w	r3, [r5, #-1]
 800c080:	e7dd      	b.n	800c03e <_scanf_i+0x112>
 800c082:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c086:	4631      	mov	r1, r6
 800c088:	4658      	mov	r0, fp
 800c08a:	4798      	blx	r3
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0de      	beq.n	800c04e <_scanf_i+0x122>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	05d9      	lsls	r1, r3, #23
 800c094:	d50c      	bpl.n	800c0b0 <_scanf_i+0x184>
 800c096:	454d      	cmp	r5, r9
 800c098:	d908      	bls.n	800c0ac <_scanf_i+0x180>
 800c09a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c09e:	1e6f      	subs	r7, r5, #1
 800c0a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	4798      	blx	r3
 800c0aa:	463d      	mov	r5, r7
 800c0ac:	454d      	cmp	r5, r9
 800c0ae:	d029      	beq.n	800c104 <_scanf_i+0x1d8>
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	f012 0210 	ands.w	r2, r2, #16
 800c0b6:	d113      	bne.n	800c0e0 <_scanf_i+0x1b4>
 800c0b8:	702a      	strb	r2, [r5, #0]
 800c0ba:	6863      	ldr	r3, [r4, #4]
 800c0bc:	4649      	mov	r1, r9
 800c0be:	4658      	mov	r0, fp
 800c0c0:	9e00      	ldr	r6, [sp, #0]
 800c0c2:	47b0      	blx	r6
 800c0c4:	f8da 3000 	ldr.w	r3, [sl]
 800c0c8:	6821      	ldr	r1, [r4, #0]
 800c0ca:	1d1a      	adds	r2, r3, #4
 800c0cc:	f8ca 2000 	str.w	r2, [sl]
 800c0d0:	f011 0f20 	tst.w	r1, #32
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	d010      	beq.n	800c0fa <_scanf_i+0x1ce>
 800c0d8:	6018      	str	r0, [r3, #0]
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	60e3      	str	r3, [r4, #12]
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	eba5 0509 	sub.w	r5, r5, r9
 800c0e6:	44a8      	add	r8, r5
 800c0e8:	6925      	ldr	r5, [r4, #16]
 800c0ea:	4445      	add	r5, r8
 800c0ec:	6125      	str	r5, [r4, #16]
 800c0ee:	b007      	add	sp, #28
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	f04f 0800 	mov.w	r8, #0
 800c0f8:	e7ca      	b.n	800c090 <_scanf_i+0x164>
 800c0fa:	07ca      	lsls	r2, r1, #31
 800c0fc:	bf4c      	ite	mi
 800c0fe:	8018      	strhmi	r0, [r3, #0]
 800c100:	6018      	strpl	r0, [r3, #0]
 800c102:	e7ea      	b.n	800c0da <_scanf_i+0x1ae>
 800c104:	2001      	movs	r0, #1
 800c106:	e7f2      	b.n	800c0ee <_scanf_i+0x1c2>
 800c108:	0800c820 	.word	0x0800c820
 800c10c:	0800ab1d 	.word	0x0800ab1d
 800c110:	0800c2b5 	.word	0x0800c2b5
 800c114:	0800d820 	.word	0x0800d820

0800c118 <_sbrk_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	2300      	movs	r3, #0
 800c11c:	4c05      	ldr	r4, [pc, #20]	; (800c134 <_sbrk_r+0x1c>)
 800c11e:	4605      	mov	r5, r0
 800c120:	4608      	mov	r0, r1
 800c122:	6023      	str	r3, [r4, #0]
 800c124:	f7f6 fbae 	bl	8002884 <_sbrk>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_sbrk_r+0x1a>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_sbrk_r+0x1a>
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20003f8c 	.word	0x20003f8c

0800c138 <__sccl>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	780b      	ldrb	r3, [r1, #0]
 800c13c:	1e44      	subs	r4, r0, #1
 800c13e:	2b5e      	cmp	r3, #94	; 0x5e
 800c140:	bf13      	iteet	ne
 800c142:	1c4a      	addne	r2, r1, #1
 800c144:	1c8a      	addeq	r2, r1, #2
 800c146:	784b      	ldrbeq	r3, [r1, #1]
 800c148:	2100      	movne	r1, #0
 800c14a:	bf08      	it	eq
 800c14c:	2101      	moveq	r1, #1
 800c14e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c152:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c156:	42ac      	cmp	r4, r5
 800c158:	d1fb      	bne.n	800c152 <__sccl+0x1a>
 800c15a:	b913      	cbnz	r3, 800c162 <__sccl+0x2a>
 800c15c:	3a01      	subs	r2, #1
 800c15e:	4610      	mov	r0, r2
 800c160:	bd70      	pop	{r4, r5, r6, pc}
 800c162:	f081 0401 	eor.w	r4, r1, #1
 800c166:	54c4      	strb	r4, [r0, r3]
 800c168:	1c51      	adds	r1, r2, #1
 800c16a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c16e:	1e4e      	subs	r6, r1, #1
 800c170:	2d2d      	cmp	r5, #45	; 0x2d
 800c172:	460a      	mov	r2, r1
 800c174:	d006      	beq.n	800c184 <__sccl+0x4c>
 800c176:	2d5d      	cmp	r5, #93	; 0x5d
 800c178:	d0f1      	beq.n	800c15e <__sccl+0x26>
 800c17a:	b90d      	cbnz	r5, 800c180 <__sccl+0x48>
 800c17c:	4632      	mov	r2, r6
 800c17e:	e7ee      	b.n	800c15e <__sccl+0x26>
 800c180:	462b      	mov	r3, r5
 800c182:	e7f0      	b.n	800c166 <__sccl+0x2e>
 800c184:	780e      	ldrb	r6, [r1, #0]
 800c186:	2e5d      	cmp	r6, #93	; 0x5d
 800c188:	d0fa      	beq.n	800c180 <__sccl+0x48>
 800c18a:	42b3      	cmp	r3, r6
 800c18c:	dcf8      	bgt.n	800c180 <__sccl+0x48>
 800c18e:	3301      	adds	r3, #1
 800c190:	429e      	cmp	r6, r3
 800c192:	54c4      	strb	r4, [r0, r3]
 800c194:	dcfb      	bgt.n	800c18e <__sccl+0x56>
 800c196:	3102      	adds	r1, #2
 800c198:	e7e7      	b.n	800c16a <__sccl+0x32>

0800c19a <strncmp>:
 800c19a:	b510      	push	{r4, lr}
 800c19c:	b16a      	cbz	r2, 800c1ba <strncmp+0x20>
 800c19e:	3901      	subs	r1, #1
 800c1a0:	1884      	adds	r4, r0, r2
 800c1a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d103      	bne.n	800c1b6 <strncmp+0x1c>
 800c1ae:	42a0      	cmp	r0, r4
 800c1b0:	d001      	beq.n	800c1b6 <strncmp+0x1c>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1f5      	bne.n	800c1a2 <strncmp+0x8>
 800c1b6:	1a98      	subs	r0, r3, r2
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	e7fc      	b.n	800c1b8 <strncmp+0x1e>

0800c1be <_strtoul_l.isra.0>:
 800c1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	4689      	mov	r9, r1
 800c1c6:	4692      	mov	sl, r2
 800c1c8:	461e      	mov	r6, r3
 800c1ca:	460f      	mov	r7, r1
 800c1cc:	463d      	mov	r5, r7
 800c1ce:	9808      	ldr	r0, [sp, #32]
 800c1d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1d4:	f7fe fff2 	bl	800b1bc <__locale_ctype_ptr_l>
 800c1d8:	4420      	add	r0, r4
 800c1da:	7843      	ldrb	r3, [r0, #1]
 800c1dc:	f013 0308 	ands.w	r3, r3, #8
 800c1e0:	d130      	bne.n	800c244 <_strtoul_l.isra.0+0x86>
 800c1e2:	2c2d      	cmp	r4, #45	; 0x2d
 800c1e4:	d130      	bne.n	800c248 <_strtoul_l.isra.0+0x8a>
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	787c      	ldrb	r4, [r7, #1]
 800c1ea:	1cbd      	adds	r5, r7, #2
 800c1ec:	2e00      	cmp	r6, #0
 800c1ee:	d05c      	beq.n	800c2aa <_strtoul_l.isra.0+0xec>
 800c1f0:	2e10      	cmp	r6, #16
 800c1f2:	d109      	bne.n	800c208 <_strtoul_l.isra.0+0x4a>
 800c1f4:	2c30      	cmp	r4, #48	; 0x30
 800c1f6:	d107      	bne.n	800c208 <_strtoul_l.isra.0+0x4a>
 800c1f8:	782b      	ldrb	r3, [r5, #0]
 800c1fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1fe:	2b58      	cmp	r3, #88	; 0x58
 800c200:	d14e      	bne.n	800c2a0 <_strtoul_l.isra.0+0xe2>
 800c202:	2610      	movs	r6, #16
 800c204:	786c      	ldrb	r4, [r5, #1]
 800c206:	3502      	adds	r5, #2
 800c208:	f04f 32ff 	mov.w	r2, #4294967295
 800c20c:	fbb2 f2f6 	udiv	r2, r2, r6
 800c210:	2300      	movs	r3, #0
 800c212:	fb06 fc02 	mul.w	ip, r6, r2
 800c216:	4618      	mov	r0, r3
 800c218:	ea6f 0c0c 	mvn.w	ip, ip
 800c21c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c220:	2f09      	cmp	r7, #9
 800c222:	d817      	bhi.n	800c254 <_strtoul_l.isra.0+0x96>
 800c224:	463c      	mov	r4, r7
 800c226:	42a6      	cmp	r6, r4
 800c228:	dd23      	ble.n	800c272 <_strtoul_l.isra.0+0xb4>
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	db1e      	blt.n	800c26c <_strtoul_l.isra.0+0xae>
 800c22e:	4282      	cmp	r2, r0
 800c230:	d31c      	bcc.n	800c26c <_strtoul_l.isra.0+0xae>
 800c232:	d101      	bne.n	800c238 <_strtoul_l.isra.0+0x7a>
 800c234:	45a4      	cmp	ip, r4
 800c236:	db19      	blt.n	800c26c <_strtoul_l.isra.0+0xae>
 800c238:	2301      	movs	r3, #1
 800c23a:	fb00 4006 	mla	r0, r0, r6, r4
 800c23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c242:	e7eb      	b.n	800c21c <_strtoul_l.isra.0+0x5e>
 800c244:	462f      	mov	r7, r5
 800c246:	e7c1      	b.n	800c1cc <_strtoul_l.isra.0+0xe>
 800c248:	2c2b      	cmp	r4, #43	; 0x2b
 800c24a:	bf04      	itt	eq
 800c24c:	1cbd      	addeq	r5, r7, #2
 800c24e:	787c      	ldrbeq	r4, [r7, #1]
 800c250:	4619      	mov	r1, r3
 800c252:	e7cb      	b.n	800c1ec <_strtoul_l.isra.0+0x2e>
 800c254:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c258:	2f19      	cmp	r7, #25
 800c25a:	d801      	bhi.n	800c260 <_strtoul_l.isra.0+0xa2>
 800c25c:	3c37      	subs	r4, #55	; 0x37
 800c25e:	e7e2      	b.n	800c226 <_strtoul_l.isra.0+0x68>
 800c260:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c264:	2f19      	cmp	r7, #25
 800c266:	d804      	bhi.n	800c272 <_strtoul_l.isra.0+0xb4>
 800c268:	3c57      	subs	r4, #87	; 0x57
 800c26a:	e7dc      	b.n	800c226 <_strtoul_l.isra.0+0x68>
 800c26c:	f04f 33ff 	mov.w	r3, #4294967295
 800c270:	e7e5      	b.n	800c23e <_strtoul_l.isra.0+0x80>
 800c272:	2b00      	cmp	r3, #0
 800c274:	da09      	bge.n	800c28a <_strtoul_l.isra.0+0xcc>
 800c276:	2322      	movs	r3, #34	; 0x22
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	f8c8 3000 	str.w	r3, [r8]
 800c280:	f1ba 0f00 	cmp.w	sl, #0
 800c284:	d107      	bne.n	800c296 <_strtoul_l.isra.0+0xd8>
 800c286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28a:	b101      	cbz	r1, 800c28e <_strtoul_l.isra.0+0xd0>
 800c28c:	4240      	negs	r0, r0
 800c28e:	f1ba 0f00 	cmp.w	sl, #0
 800c292:	d0f8      	beq.n	800c286 <_strtoul_l.isra.0+0xc8>
 800c294:	b10b      	cbz	r3, 800c29a <_strtoul_l.isra.0+0xdc>
 800c296:	f105 39ff 	add.w	r9, r5, #4294967295
 800c29a:	f8ca 9000 	str.w	r9, [sl]
 800c29e:	e7f2      	b.n	800c286 <_strtoul_l.isra.0+0xc8>
 800c2a0:	2430      	movs	r4, #48	; 0x30
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	d1b0      	bne.n	800c208 <_strtoul_l.isra.0+0x4a>
 800c2a6:	2608      	movs	r6, #8
 800c2a8:	e7ae      	b.n	800c208 <_strtoul_l.isra.0+0x4a>
 800c2aa:	2c30      	cmp	r4, #48	; 0x30
 800c2ac:	d0a4      	beq.n	800c1f8 <_strtoul_l.isra.0+0x3a>
 800c2ae:	260a      	movs	r6, #10
 800c2b0:	e7aa      	b.n	800c208 <_strtoul_l.isra.0+0x4a>
	...

0800c2b4 <_strtoul_r>:
 800c2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2b6:	4c06      	ldr	r4, [pc, #24]	; (800c2d0 <_strtoul_r+0x1c>)
 800c2b8:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_strtoul_r+0x20>)
 800c2ba:	6824      	ldr	r4, [r4, #0]
 800c2bc:	6a24      	ldr	r4, [r4, #32]
 800c2be:	2c00      	cmp	r4, #0
 800c2c0:	bf08      	it	eq
 800c2c2:	462c      	moveq	r4, r5
 800c2c4:	9400      	str	r4, [sp, #0]
 800c2c6:	f7ff ff7a 	bl	800c1be <_strtoul_l.isra.0>
 800c2ca:	b003      	add	sp, #12
 800c2cc:	bd30      	pop	{r4, r5, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200001bc 	.word	0x200001bc
 800c2d4:	20000220 	.word	0x20000220

0800c2d8 <__submore>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	460c      	mov	r4, r1
 800c2de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e4:	4299      	cmp	r1, r3
 800c2e6:	d11b      	bne.n	800c320 <__submore+0x48>
 800c2e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c2ec:	f7ff fb92 	bl	800ba14 <_malloc_r>
 800c2f0:	b918      	cbnz	r0, 800c2fa <__submore+0x22>
 800c2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800c300:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c304:	6360      	str	r0, [r4, #52]	; 0x34
 800c306:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c30a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c30e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c312:	7043      	strb	r3, [r0, #1]
 800c314:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c318:	7003      	strb	r3, [r0, #0]
 800c31a:	6020      	str	r0, [r4, #0]
 800c31c:	2000      	movs	r0, #0
 800c31e:	e7ea      	b.n	800c2f6 <__submore+0x1e>
 800c320:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c322:	0077      	lsls	r7, r6, #1
 800c324:	463a      	mov	r2, r7
 800c326:	f7ff fbcf 	bl	800bac8 <_realloc_r>
 800c32a:	4605      	mov	r5, r0
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0e0      	beq.n	800c2f2 <__submore+0x1a>
 800c330:	eb00 0806 	add.w	r8, r0, r6
 800c334:	4601      	mov	r1, r0
 800c336:	4632      	mov	r2, r6
 800c338:	4640      	mov	r0, r8
 800c33a:	f7fd fc98 	bl	8009c6e <memcpy>
 800c33e:	f8c4 8000 	str.w	r8, [r4]
 800c342:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c346:	e7e9      	b.n	800c31c <__submore+0x44>

0800c348 <__ascii_wctomb>:
 800c348:	b149      	cbz	r1, 800c35e <__ascii_wctomb+0x16>
 800c34a:	2aff      	cmp	r2, #255	; 0xff
 800c34c:	bf8b      	itete	hi
 800c34e:	238a      	movhi	r3, #138	; 0x8a
 800c350:	700a      	strbls	r2, [r1, #0]
 800c352:	6003      	strhi	r3, [r0, #0]
 800c354:	2001      	movls	r0, #1
 800c356:	bf88      	it	hi
 800c358:	f04f 30ff 	movhi.w	r0, #4294967295
 800c35c:	4770      	bx	lr
 800c35e:	4608      	mov	r0, r1
 800c360:	4770      	bx	lr
	...

0800c364 <malloc>:
 800c364:	4b02      	ldr	r3, [pc, #8]	; (800c370 <malloc+0xc>)
 800c366:	4601      	mov	r1, r0
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f7ff bb53 	b.w	800ba14 <_malloc_r>
 800c36e:	bf00      	nop
 800c370:	200001bc 	.word	0x200001bc

0800c374 <memchr>:
 800c374:	b510      	push	{r4, lr}
 800c376:	b2c9      	uxtb	r1, r1
 800c378:	4402      	add	r2, r0
 800c37a:	4290      	cmp	r0, r2
 800c37c:	4603      	mov	r3, r0
 800c37e:	d101      	bne.n	800c384 <memchr+0x10>
 800c380:	2300      	movs	r3, #0
 800c382:	e003      	b.n	800c38c <memchr+0x18>
 800c384:	781c      	ldrb	r4, [r3, #0]
 800c386:	3001      	adds	r0, #1
 800c388:	428c      	cmp	r4, r1
 800c38a:	d1f6      	bne.n	800c37a <memchr+0x6>
 800c38c:	4618      	mov	r0, r3
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <__malloc_lock>:
 800c390:	4770      	bx	lr

0800c392 <__malloc_unlock>:
 800c392:	4770      	bx	lr

0800c394 <_free_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	4605      	mov	r5, r0
 800c398:	2900      	cmp	r1, #0
 800c39a:	d043      	beq.n	800c424 <_free_r+0x90>
 800c39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a0:	1f0c      	subs	r4, r1, #4
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	bfb8      	it	lt
 800c3a6:	18e4      	addlt	r4, r4, r3
 800c3a8:	f7ff fff2 	bl	800c390 <__malloc_lock>
 800c3ac:	4a1e      	ldr	r2, [pc, #120]	; (800c428 <_free_r+0x94>)
 800c3ae:	6813      	ldr	r3, [r2, #0]
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	b933      	cbnz	r3, 800c3c2 <_free_r+0x2e>
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	6014      	str	r4, [r2, #0]
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3be:	f7ff bfe8 	b.w	800c392 <__malloc_unlock>
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	d90b      	bls.n	800c3de <_free_r+0x4a>
 800c3c6:	6821      	ldr	r1, [r4, #0]
 800c3c8:	1862      	adds	r2, r4, r1
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	bf01      	itttt	eq
 800c3ce:	681a      	ldreq	r2, [r3, #0]
 800c3d0:	685b      	ldreq	r3, [r3, #4]
 800c3d2:	1852      	addeq	r2, r2, r1
 800c3d4:	6022      	streq	r2, [r4, #0]
 800c3d6:	6063      	str	r3, [r4, #4]
 800c3d8:	6004      	str	r4, [r0, #0]
 800c3da:	e7ed      	b.n	800c3b8 <_free_r+0x24>
 800c3dc:	4613      	mov	r3, r2
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	b10a      	cbz	r2, 800c3e6 <_free_r+0x52>
 800c3e2:	42a2      	cmp	r2, r4
 800c3e4:	d9fa      	bls.n	800c3dc <_free_r+0x48>
 800c3e6:	6819      	ldr	r1, [r3, #0]
 800c3e8:	1858      	adds	r0, r3, r1
 800c3ea:	42a0      	cmp	r0, r4
 800c3ec:	d10b      	bne.n	800c406 <_free_r+0x72>
 800c3ee:	6820      	ldr	r0, [r4, #0]
 800c3f0:	4401      	add	r1, r0
 800c3f2:	1858      	adds	r0, r3, r1
 800c3f4:	4282      	cmp	r2, r0
 800c3f6:	6019      	str	r1, [r3, #0]
 800c3f8:	d1de      	bne.n	800c3b8 <_free_r+0x24>
 800c3fa:	6810      	ldr	r0, [r2, #0]
 800c3fc:	6852      	ldr	r2, [r2, #4]
 800c3fe:	4401      	add	r1, r0
 800c400:	6019      	str	r1, [r3, #0]
 800c402:	605a      	str	r2, [r3, #4]
 800c404:	e7d8      	b.n	800c3b8 <_free_r+0x24>
 800c406:	d902      	bls.n	800c40e <_free_r+0x7a>
 800c408:	230c      	movs	r3, #12
 800c40a:	602b      	str	r3, [r5, #0]
 800c40c:	e7d4      	b.n	800c3b8 <_free_r+0x24>
 800c40e:	6820      	ldr	r0, [r4, #0]
 800c410:	1821      	adds	r1, r4, r0
 800c412:	428a      	cmp	r2, r1
 800c414:	bf01      	itttt	eq
 800c416:	6811      	ldreq	r1, [r2, #0]
 800c418:	6852      	ldreq	r2, [r2, #4]
 800c41a:	1809      	addeq	r1, r1, r0
 800c41c:	6021      	streq	r1, [r4, #0]
 800c41e:	6062      	str	r2, [r4, #4]
 800c420:	605c      	str	r4, [r3, #4]
 800c422:	e7c9      	b.n	800c3b8 <_free_r+0x24>
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	200019cc 	.word	0x200019cc

0800c42c <_malloc_usable_size_r>:
 800c42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c430:	1f18      	subs	r0, r3, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfbc      	itt	lt
 800c436:	580b      	ldrlt	r3, [r1, r0]
 800c438:	18c0      	addlt	r0, r0, r3
 800c43a:	4770      	bx	lr

0800c43c <_init>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr

0800c448 <_fini>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	bf00      	nop
 800c44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44e:	bc08      	pop	{r3}
 800c450:	469e      	mov	lr, r3
 800c452:	4770      	bx	lr
